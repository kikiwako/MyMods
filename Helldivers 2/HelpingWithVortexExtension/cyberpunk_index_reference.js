(function (exports, require, module, __filename, __dirname, process, global, Buffer) {
    return function (exports, require, module, __filename, __dirname) {
        module.exports =
/******/ (function (modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if (installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
                        /******/
                    }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
                        /******/
                    };
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
                    /******/
                }
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function (exports, name, getter) {
/******/ 		if (!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
                        /******/
                    }
                    /******/
                };
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function (exports) {
/******/ 		if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
                        /******/
                    }
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
                    /******/
                };
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function (value, mode) {
/******/ 		if (mode & 1) value = __webpack_require__(value);
/******/ 		if (mode & 8) return value;
/******/ 		if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
                    /******/
                };
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function (module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
                    /******/
                };
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function (object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
                /******/
            })
/************************************************************************/
/******/({

/***/ "./node_modules/fp-ts/es6/Applicative.js":
/*!***********************************************!*\
  !*** ./node_modules/fp-ts/es6/Applicative.js ***!
  \***********************************************/
/*! exports provided: getApplicativeMonoid, getApplicativeComposition */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicativeMonoid", function () { return getApplicativeMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicativeComposition", function () { return getApplicativeComposition; });
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
                        /**
                         * The `Applicative` type class extends the `Apply` type class with a `of` function, which can be used to create values
                         * of type `f a` from values of type `a`.
                         *
                         * Where `Apply` provides the ability to lift functions of two or more arguments to functions whose arguments are
                         * wrapped using `f`, and `Functor` provides the ability to lift functions of one argument, `pure` can be seen as the
                         * function which lifts functions of _zero_ arguments. That is, `Applicative` functors support a lifting operation for
                         * any number of function arguments.
                         *
                         * Instances must satisfy the following laws in addition to the `Apply` laws:
                         *
                         * 1. Identity: `A.ap(A.of(a => a), fa) <-> fa`
                         * 2. Homomorphism: `A.ap(A.of(ab), A.of(a)) <-> A.of(ab(a))`
                         * 3. Interchange: `A.ap(fab, A.of(a)) <-> A.ap(A.of(ab => ab(a)), fab)`
                         *
                         * Note. `Functor`'s `map` can be derived: `A.map(x, f) = A.ap(A.of(f), x)`
                         *
                         * @since 2.0.0
                         */



                        function getApplicativeMonoid(F) {
                            var f = Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["getApplySemigroup"])(F);
                            return function (M) {
                                return ({
                                    concat: f(M).concat,
                                    empty: F.of(M.empty)
                                });
                            };
                        }
                        /** @deprecated */
                        function getApplicativeComposition(F, G) {
                            var map = Object(_Functor__WEBPACK_IMPORTED_MODULE_2__["getFunctorComposition"])(F, G).map;
                            var _ap = Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["ap"])(F, G);
                            return {
                                map: map,
                                of: function (a) { return F.of(G.of(a)); },
                                ap: function (fgab, fga) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fgab, _ap(fga)); }
                            };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Apply.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/es6/Apply.js ***!
  \*****************************************/
/*! exports provided: ap, apFirst, apSecond, apS, getApplySemigroup, sequenceT, sequenceS */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplySemigroup", function () { return getApplySemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceT", function () { return sequenceT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceS", function () { return sequenceS; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
                        /**
                         * The `Apply` class provides the `ap` which is used to apply a function to an argument under a type constructor.
                         *
                         * `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor
                         * `f`.
                         *
                         * Instances must satisfy the following law in addition to the `Functor` laws:
                         *
                         * 1. Associative composition: `F.ap(F.ap(F.map(fbc, bc => ab => a => bc(ab(a))), fab), fa) <-> F.ap(fbc, F.ap(fab, fa))`
                         *
                         * Formally, `Apply` represents a strong lax semi-monoidal endofunctor.
                         *
                         * @example
                         * import * as O from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const f = (a: string) => (b: number) => (c: boolean) => a + String(b) + String(c)
                         * const fa: O.Option<string> = O.some('s')
                         * const fb: O.Option<number> = O.some(1)
                         * const fc: O.Option<boolean> = O.some(true)
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     // lift a function
                         *     O.some(f),
                         *     // apply the first argument
                         *     O.ap(fa),
                         *     // apply the second argument
                         *     O.ap(fb),
                         *     // apply the third argument
                         *     O.ap(fc)
                         *   ),
                         *   O.some('s1true')
                         * )
                         *
                         * @since 2.0.0
                         */


                        function ap(F, G) {
                            return function (fa) {
                                return function (fab) {
                                    return F.ap(F.map(fab, function (gab) { return function (ga) { return G.ap(gab, ga); }; }), fa);
                                };
                            };
                        }
                        function apFirst(A) {
                            return function (second) {
                                return function (first) {
                                    return A.ap(A.map(first, function (a) { return function () { return a; }; }), second);
                                };
                            };
                        }
                        function apSecond(A) {
                            return function (second) {
                                return function (first) {
                                    return A.ap(A.map(first, function () { return function (b) { return b; }; }), second);
                                };
                            };
                        }
                        function apS(F) {
                            return function (name, fb) {
                                return function (fa) {
                                    return F.ap(F.map(fa, function (a) {
                                        return function (b) {
                                            var _a;
                                            return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
                                        };
                                    }), fb);
                                };
                            };
                        }
                        function getApplySemigroup(F) {
                            return function (S) {
                                return ({
                                    concat: function (first, second) {
                                        return F.ap(F.map(first, function (x) { return function (y) { return S.concat(x, y); }; }), second);
                                    }
                                });
                            };
                        }
                        function curried(f, n, acc) {
                            return function (x) {
                                var combined = Array(acc.length + 1);
                                for (var i = 0; i < acc.length; i++) {
                                    combined[i] = acc[i];
                                }
                                combined[acc.length] = x;
                                return n === 0 ? f.apply(null, combined) : curried(f, n - 1, combined);
                            };
                        }
                        var tupleConstructors = {
                            1: function (a) { return [a]; },
                            2: function (a) { return function (b) { return [a, b]; }; },
                            3: function (a) { return function (b) { return function (c) { return [a, b, c]; }; }; },
                            4: function (a) { return function (b) { return function (c) { return function (d) { return [a, b, c, d]; }; }; }; },
                            5: function (a) { return function (b) { return function (c) { return function (d) { return function (e) { return [a, b, c, d, e]; }; }; }; }; }
                        };
                        function getTupleConstructor(len) {
                            if (!_internal__WEBPACK_IMPORTED_MODULE_1__["has"].call(tupleConstructors, len)) {
                                tupleConstructors[len] = curried(_function__WEBPACK_IMPORTED_MODULE_0__["tuple"], len - 1, []);
                            }
                            return tupleConstructors[len];
                        }
                        function sequenceT(F) {
                            return function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                var len = args.length;
                                var f = getTupleConstructor(len);
                                var fas = F.map(args[0], f);
                                for (var i = 1; i < len; i++) {
                                    fas = F.ap(fas, args[i]);
                                }
                                return fas;
                            };
                        }
                        function getRecordConstructor(keys) {
                            var len = keys.length;
                            switch (len) {
                                case 1:
                                    return function (a) {
                                        var _a;
                                        return (_a = {}, _a[keys[0]] = a, _a);
                                    };
                                case 2:
                                    return function (a) {
                                        return function (b) {
                                            var _a;
                                            return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a);
                                        };
                                    };
                                case 3:
                                    return function (a) {
                                        return function (b) {
                                            return function (c) {
                                                var _a;
                                                return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a[keys[2]] = c, _a);
                                            };
                                        };
                                    };
                                case 4:
                                    return function (a) {
                                        return function (b) {
                                            return function (c) {
                                                return function (d) {
                                                    var _a;
                                                    return (_a = {},
                                                        _a[keys[0]] = a,
                                                        _a[keys[1]] = b,
                                                        _a[keys[2]] = c,
                                                        _a[keys[3]] = d,
                                                        _a);
                                                };
                                            };
                                        };
                                    };
                                case 5:
                                    return function (a) {
                                        return function (b) {
                                            return function (c) {
                                                return function (d) {
                                                    return function (e) {
                                                        var _a;
                                                        return (_a = {},
                                                            _a[keys[0]] = a,
                                                            _a[keys[1]] = b,
                                                            _a[keys[2]] = c,
                                                            _a[keys[3]] = d,
                                                            _a[keys[4]] = e,
                                                            _a);
                                                    };
                                                };
                                            };
                                        };
                                    };
                                default:
                                    return curried(function () {
                                        var args = [];
                                        for (var _i = 0; _i < arguments.length; _i++) {
                                            args[_i] = arguments[_i];
                                        }
                                        var r = {};
                                        for (var i = 0; i < len; i++) {
                                            r[keys[i]] = args[i];
                                        }
                                        return r;
                                    }, len - 1, []);
                            }
                        }
                        function sequenceS(F) {
                            return function (r) {
                                var keys = Object.keys(r);
                                var len = keys.length;
                                var f = getRecordConstructor(keys);
                                var fr = F.map(r[keys[0]], f);
                                for (var i = 1; i < len; i++) {
                                    fr = F.ap(fr, r[keys[i]]);
                                }
                                return fr;
                            };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Array.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/es6/Array.js ***!
  \*****************************************/
/*! exports provided: isEmpty, isNonEmpty, prepend, prependW, append, appendW, makeBy, replicate, fromPredicate, fromOption, fromEither, matchW, match, matchLeftW, matchLeft, foldLeft, matchRightW, matchRight, foldRight, chainWithIndex, scanLeft, scanRight, size, isOutOfBound, lookup, head, last, tail, init, takeLeft, takeRight, takeLeftWhile, spanLeft, dropLeft, dropRight, dropLeftWhile, findIndex, findFirst, findFirstMap, findLast, findLastMap, findLastIndex, copy, insertAt, updateAt, deleteAt, modifyAt, reverse, rights, lefts, sort, zipWith, zip, unzip, prependAll, intersperse, rotate, elem, uniq, sortBy, chop, splitAt, chunksOf, fromOptionK, comprehension, concatW, concat, union, intersection, difference, of, zero, map, ap, flatMap, flatten, mapWithIndex, filterMapWithIndex, filterMap, compact, separate, filter, partition, partitionWithIndex, partitionMap, partitionMapWithIndex, altW, alt, filterWithIndex, extend, duplicate, foldMap, foldMapWithIndex, reduce, reduceWithIndex, reduceRight, reduceRightWithIndex, traverse, sequence, traverseWithIndex, wither, wilt, unfold, URI, getShow, getSemigroup, getMonoid, getEq, getOrd, getUnionSemigroup, getUnionMonoid, getIntersectionSemigroup, getDifferenceMagma, Functor, flap, Pointed, FunctorWithIndex, Apply, apFirst, apSecond, Applicative, Chain, chainFirst, Monad, Unfoldable, Alt, Zero, guard, Alternative, Extend, Compactable, Filterable, FilterableWithIndex, Foldable, FoldableWithIndex, Traversable, TraversableWithIndex, Witherable, chainRecDepthFirst, ChainRecDepthFirst, chainRecBreadthFirst, ChainRecBreadthFirst, filterE, FromEither, fromEitherK, unsafeInsertAt, unsafeUpdateAt, unsafeDeleteAt, every, some, exists, intercalate, Do, bindTo, let, bind, apS, chain, range, empty, cons, snoc, prependToAll, array */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function () { return isEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNonEmpty", function () { return isNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function () { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependW", function () { return prependW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function () { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendW", function () { return appendW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeBy", function () { return makeBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replicate", function () { return replicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPredicate", function () { return fromPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOption", function () { return fromOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEither", function () { return fromEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchW", function () { return matchW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "match", function () { return match; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchLeftW", function () { return matchLeftW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchLeft", function () { return matchLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldLeft", function () { return foldLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRightW", function () { return matchRightW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRight", function () { return matchRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldRight", function () { return foldRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainWithIndex", function () { return chainWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scanLeft", function () { return scanLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scanRight", function () { return scanRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "size", function () { return size; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOutOfBound", function () { return isOutOfBound; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookup", function () { return lookup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "head", function () { return head; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "last", function () { return last; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tail", function () { return tail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function () { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeLeft", function () { return takeLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeRight", function () { return takeRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeLeftWhile", function () { return takeLeftWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spanLeft", function () { return spanLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropLeft", function () { return dropLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropRight", function () { return dropRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropLeftWhile", function () { return dropLeftWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findIndex", function () { return findIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirst", function () { return findFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirstMap", function () { return findFirstMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLast", function () { return findLast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLastMap", function () { return findLastMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLastIndex", function () { return findLastIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function () { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAt", function () { return insertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateAt", function () { return updateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteAt", function () { return deleteAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyAt", function () { return modifyAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function () { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rights", function () { return rights; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lefts", function () { return lefts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sort", function () { return sort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipWith", function () { return zipWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function () { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unzip", function () { return unzip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependAll", function () { return prependAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersperse", function () { return intersperse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function () { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elem", function () { return elem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniq", function () { return uniq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortBy", function () { return sortBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chop", function () { return chop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitAt", function () { return splitAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chunksOf", function () { return chunksOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOptionK", function () { return fromOptionK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comprehension", function () { return comprehension; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatW", function () { return concatW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function () { return concat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "union", function () { return union; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersection", function () { return intersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "difference", function () { return difference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function () { return of; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function () { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function () { return flatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function () { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapWithIndex", function () { return mapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMapWithIndex", function () { return filterMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMap", function () { return filterMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compact", function () { return compact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "separate", function () { return separate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function () { return partition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionWithIndex", function () { return partitionWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMap", function () { return partitionMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMapWithIndex", function () { return partitionMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "altW", function () { return altW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function () { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterWithIndex", function () { return filterWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function () { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicate", function () { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMapWithIndex", function () { return foldMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceWithIndex", function () { return reduceWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRightWithIndex", function () { return reduceRightWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseWithIndex", function () { return traverseWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wither", function () { return wither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wilt", function () { return wilt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unfold", function () { return unfold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrd", function () { return getOrd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionSemigroup", function () { return getUnionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionMonoid", function () { return getUnionMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIntersectionSemigroup", function () { return getIntersectionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDifferenceMagma", function () { return getDifferenceMagma; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pointed", function () { return Pointed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctorWithIndex", function () { return FunctorWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Apply", function () { return Apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Applicative", function () { return Applicative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chain", function () { return Chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monad", function () { return Monad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unfoldable", function () { return Unfoldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alt", function () { return Alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Zero", function () { return Zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guard", function () { return guard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alternative", function () { return Alternative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Extend", function () { return Extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compactable", function () { return Compactable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filterable", function () { return Filterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterableWithIndex", function () { return FilterableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foldable", function () { return Foldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FoldableWithIndex", function () { return FoldableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Traversable", function () { return Traversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraversableWithIndex", function () { return TraversableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Witherable", function () { return Witherable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainRecDepthFirst", function () { return chainRecDepthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChainRecDepthFirst", function () { return ChainRecDepthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainRecBreadthFirst", function () { return chainRecBreadthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChainRecBreadthFirst", function () { return ChainRecBreadthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterE", function () { return filterE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FromEither", function () { return FromEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEitherK", function () { return fromEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeInsertAt", function () { return unsafeInsertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeUpdateAt", function () { return unsafeUpdateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeDeleteAt", function () { return unsafeDeleteAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "every", function () { return every; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function () { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exists", function () { return exists; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercalate", function () { return intercalate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Do", function () { return Do; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function () { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function () { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cons", function () { return cons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snoc", function () { return snoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependToAll", function () { return prependToAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "array", function () { return array; });
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _FromEither__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/es6/FromEither.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NonEmptyArray */ "./node_modules/fp-ts/es6/NonEmptyArray.js");
/* harmony import */ var _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ReadonlyArray */ "./node_modules/fp-ts/es6/ReadonlyArray.js");
/* harmony import */ var _Separated__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/es6/Separated.js");
/* harmony import */ var _Witherable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/es6/Witherable.js");
/* harmony import */ var _Zero__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Zero */ "./node_modules/fp-ts/es6/Zero.js");











                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * Test whether an array is empty
                         *
                         * @example
                         * import { isEmpty } from 'fp-ts/Array'
                         *
                         * assert.strictEqual(isEmpty([]), true)
                         * assert.strictEqual(isEmpty(['a']), false)
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        var isEmpty = function (as) { return as.length === 0; };
                        /**
                         * Test whether an array is non empty narrowing down the type to `NonEmptyArray<A>`
                         *
                         * @example
                         * import { isNonEmpty } from 'fp-ts/Array'
                         *
                         * assert.strictEqual(isNonEmpty([]), false)
                         * assert.strictEqual(isNonEmpty(['a']), true)
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        var isNonEmpty = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["isNonEmpty"];
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Prepend an element to the front of a `Array`, creating a new `NonEmptyArray`.
                         *
                         * @example
                         * import { prepend } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])
                         *
                         * @since 2.10.0
                         */
                        var prepend = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["prepend"];
                        /**
                         * Less strict version of [`prepend`](#prepend).
                         *
                         * @example
                         * import { prependW } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([2, 3, 4], prependW("a")), ["a", 2, 3, 4]);
                         *
                         * @since 2.11.0
                         */
                        var prependW = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["prependW"];
                        /**
                         * Append an element to the end of a `Array`, creating a new `NonEmptyArray`.
                         *
                         * @example
                         * import { append } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])
                         *
                         * @since 2.10.0
                         */
                        var append = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["append"];
                        /**
                         * Less strict version of [`append`](#append).
                         *
                         * @example
                         * import { appendW } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([1, 2, 3], appendW("d")), [1, 2, 3, "d"]);
                         *
                         * @since 2.11.0
                         */
                        var appendW = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["appendW"];
                        /**
                         * Return a `Array` of length `n` with element `i` initialized with `f(i)`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { makeBy } from 'fp-ts/Array'
                         *
                         * const double = (i: number): number => i * 2
                         * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])
                         * assert.deepStrictEqual(makeBy(-3, double), [])
                         * assert.deepStrictEqual(makeBy(4.32164, double), [0, 2, 4, 6])
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var makeBy = function (n, f) { return (n <= 0 ? [] : _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["makeBy"](f)(n)); };
                        /**
                         * Create a `Array` containing a value repeated the specified number of times.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { replicate } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])
                         * assert.deepStrictEqual(replicate(-3, 'a'), [])
                         * assert.deepStrictEqual(replicate(2.985647, 'a'), ['a', 'a'])
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var replicate = function (n, a) { return makeBy(n, function () { return a; }); };
                        function fromPredicate(predicate) {
                            return function (a) { return (predicate(a) ? [a] : []); };
                        }
                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * Create an array from an `Option`. The resulting array will contain the content of the
                         * `Option` if it is `Some` and it will be empty if the `Option` is `None`.
                         *
                         * @example
                         * import { fromOption } from 'fp-ts/Array'
                         * import { option } from "fp-ts";
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(option.some("a"), fromOption),["a"])
                         * assert.deepStrictEqual(pipe(option.none, fromOption),[])
                         *
                         * @category conversions
                         * @since 2.11.0
                         */
                        var fromOption = function (ma) { return (_internal__WEBPACK_IMPORTED_MODULE_5__["isNone"](ma) ? [] : [ma.value]); };
                        /**
                         * Create an array from an `Either`. The resulting array will contain the content of the
                         * `Either` if it is `Right` and it will be empty if the `Either` is `Left`.
                         *
                         * @example
                         * import { fromEither } from 'fp-ts/Array'
                         * import { either } from "fp-ts";
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(either.right("r"), fromEither), ["r"]);
                         * assert.deepStrictEqual(pipe(either.left("l"), fromEither), []);
                         *
                         * @category conversions
                         * @since 2.11.0
                         */
                        var fromEither = function (e) { return (_internal__WEBPACK_IMPORTED_MODULE_5__["isLeft"](e) ? [] : [e.right]); };
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @example
                         * import { matchW } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const matcherW = matchW(
                         *   () => "No elements",
                         *   (as) => as.length
                         * );
                         * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcherW), 4);
                         * assert.deepStrictEqual(pipe([], matcherW), "No elements");
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();
                            };
                        };
                        /**
                         * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise
                         * it passes the array to `onNonEmpty` and returns the result.
                         *
                         * @example
                         * import { match } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const matcher = match(
                         *   () => "No elements",
                         *   (as) => `Found ${as.length} element(s)`
                         * );
                         * assert.deepStrictEqual(pipe([1, 2, 3, 4], matcher), "Found 4 element(s)");
                         * assert.deepStrictEqual(pipe([], matcher), "No elements");
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var match = matchW;
                        /**
                         * Less strict version of [`matchLeft`](#matchleft). It will work when `onEmpty` and
                         * `onNonEmpty` have different return types.
                         *
                         * @example
                         * import { matchLeftW } from 'fp-ts/Array'
                         *
                         * const f = matchLeftW(
                         *   () => 0,
                         *   (head: string, tail: string[]) => `Found "${head}" followed by ${tail.length} elements`
                         * );
                         * assert.strictEqual(f(["a", "b", "c"]), 'Found "a" followed by 2 elements');
                         * assert.strictEqual(f([]), 0);
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchLeftW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return isNonEmpty(as) ? onNonEmpty(_NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["head"](as), _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["tail"](as)) : onEmpty();
                            };
                        };
                        /**
                         * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise
                         * it passes the array to `onNonEmpty` broken into its first element and remaining elements.
                         *
                         * @example
                         * import { matchLeft } from 'fp-ts/Array'
                         *
                         * const len: <A>(as: Array<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))
                         * assert.strictEqual(len([1, 2, 3]), 3)
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchLeft = matchLeftW;
                        /**
                         * Alias of [`matchLeft`](#matchleft).
                         *
                         * @category pattern matching
                         * @since 2.0.0
                         */
                        var foldLeft = matchLeft;
                        /**
                         * Less strict version of [`matchRight`](#matchright). It will work when `onEmpty` and
                         * `onNonEmpty` have different return types.
                         *
                         * @example
                         * import { matchRightW } from 'fp-ts/Array'
                         *
                         * const f = matchRightW(
                         *   () => 0,
                         *   (head: string[], tail: string) => `Found ${head.length} elements folllowed by "${tail}"`
                         * );
                         * assert.strictEqual(f(["a", "b", "c"]), 'Found 2 elements folllowed by "c"');
                         * assert.strictEqual(f([]), 0);
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchRightW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return isNonEmpty(as) ? onNonEmpty(_NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["init"](as), _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["last"](as)) : onEmpty();
                            };
                        };
                        /**
                         * Takes an array, if the array is empty it returns the result of `onEmpty`, otherwise
                         * it passes the array to `onNonEmpty` broken  into its initial elements and the last element.
                         *
                         * @example
                         * import { matchRight } from 'fp-ts/Array'
                         *
                         * const len: <A>(as: Array<A>) => number = matchRight(
                         *   () => 0,
                         *   (head, _) => 1 + len(head)
                         * );
                         * assert.strictEqual(len([1, 2, 3]), 3);
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchRight = matchRightW;
                        /**
                         * Alias of [`matchRight`](#matchright).
                         *
                         * @category pattern matching
                         * @since 2.0.0
                         */
                        var foldRight = matchRight;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * Same as [`chain`](#chain), but passing also the index to the iterating function.
                         *
                         * @example
                         * import { chainWithIndex, replicate } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const f = (index: number, x: string) => replicate(2, `${x}${index}`);
                         * assert.deepStrictEqual(pipe(["a", "b", "c"], chainWithIndex(f)), ["a0", "a0", "b1", "b1", "c2", "c2"]);
                         *
                         * @category sequencing
                         * @since 2.7.0
                         */
                        var chainWithIndex = function (f) {
                            return function (as) {
                                var out = [];
                                for (var i = 0; i < as.length; i++) {
                                    out.push.apply(out, f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        /**
                         * Same as `reduce` but it carries over the intermediate steps
                         *
                         * @example
                         * import { scanLeft } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])
                         *
                         * @since 2.0.0
                         */
                        var scanLeft = function (b, f) {
                            return function (as) {
                                var len = as.length;
                                var out = new Array(len + 1);
                                out[0] = b;
                                for (var i = 0; i < len; i++) {
                                    out[i + 1] = f(out[i], as[i]);
                                }
                                return out;
                            };
                        };
                        /**
                         * Fold an array from the right, keeping all intermediate results instead of only the final result
                         *
                         * @example
                         * import { scanRight } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])
                         *
                         * @since 2.0.0
                         */
                        var scanRight = function (b, f) {
                            return function (as) {
                                var len = as.length;
                                var out = new Array(len + 1);
                                out[len] = b;
                                for (var i = len - 1; i >= 0; i--) {
                                    out[i] = f(as[i], out[i + 1]);
                                }
                                return out;
                            };
                        };
                        /**
                         * Calculate the number of elements in a `Array`.
                         *
                         * @example
                         * import { size } from 'fp-ts/Array'
                         *
                         * assert.strictEqual(size(["a","b","c"]),3)
                         *
                         * @since 2.10.0
                         */
                        var size = function (as) { return as.length; };
                        /**
                         * Test whether an array contains a particular index
                         *
                         * @example
                         * import { isOutOfBound } from 'fp-ts/Array'
                         *
                         * assert.strictEqual(isOutOfBound(1,["a","b","c"]),false)
                         * assert.strictEqual(isOutOfBound(-1,["a","b","c"]),true)
                         * assert.strictEqual(isOutOfBound(3,["a","b","c"]),true)
                         *
                         * @since 2.0.0
                         */
                        var isOutOfBound = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["isOutOfBound"];
                        // TODO: remove non-curried overloading in v3
                        /**
                         * This function provides a safe way to read a value at a particular index from an array.
                         * It returns a `none` if the index is out of bounds, and a `some` of the element if the
                         * index is valid.
                         *
                         * @example
                         * import { lookup } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([1, 2, 3], lookup(1)), some(2))
                         * assert.deepStrictEqual(pipe([1, 2, 3], lookup(3)), none)
                         *
                         * @since 2.0.0
                         */
                        var lookup = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["lookup"];
                        /**
                         * Get the first element in an array, or `None` if the array is empty
                         *
                         * @example
                         * import { head } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(head([1, 2, 3]), some(1))
                         * assert.deepStrictEqual(head([]), none)
                         *
                         * @since 2.0.0
                         */
                        var head = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["head"];
                        /**
                         * Get the last element in an array, or `None` if the array is empty
                         *
                         * @example
                         * import { last } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(last([1, 2, 3]), some(3))
                         * assert.deepStrictEqual(last([]), none)
                         *
                         * @since 2.0.0
                         */
                        var last = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["last"];
                        /**
                         * Get all but the first element of an array, creating a new array, or `None` if the array is empty
                         *
                         * @example
                         * import { tail } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))
                         * assert.deepStrictEqual(tail([]), none)
                         *
                         * @since 2.0.0
                         */
                        var tail = function (as) { return (isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_5__["some"](_NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["tail"](as)) : _internal__WEBPACK_IMPORTED_MODULE_5__["none"]); };
                        /**
                         * Get all but the last element of an array, creating a new array, or `None` if the array is empty
                         *
                         * @example
                         * import { init } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))
                         * assert.deepStrictEqual(init([]), none)
                         *
                         * @since 2.0.0
                         */
                        var init = function (as) { return (isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_5__["some"](_NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["init"](as)) : _internal__WEBPACK_IMPORTED_MODULE_5__["none"]); };
                        /**
                         * Keep only a max number of elements from the start of an `Array`, creating a new `Array`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { takeLeft } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(takeLeft(2)([1, 2, 3, 4, 5]), [1, 2]);
                         * assert.deepStrictEqual(takeLeft(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);
                         * assert.deepStrictEqual(takeLeft(0)([1, 2, 3, 4, 5]), []);
                         * assert.deepStrictEqual(takeLeft(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);
                         *
                         * @since 2.0.0
                         */
                        var takeLeft = function (n) {
                            return function (as) {
                                return isOutOfBound(n, as) ? copy(as) : as.slice(0, n);
                            };
                        };
                        /**
                         * Keep only a max number of elements from the end of an `Array`, creating a new `Array`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { takeRight } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(takeRight(2)([1, 2, 3, 4, 5]), [4, 5]);
                         * assert.deepStrictEqual(takeRight(7)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);
                         * assert.deepStrictEqual(takeRight(0)([1, 2, 3, 4, 5]), []);
                         * assert.deepStrictEqual(takeRight(-1)([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5]);
                         *
                         * @since 2.0.0
                         */
                        var takeRight = function (n) {
                            return function (as) {
                                return isOutOfBound(n, as) ? copy(as) : n === 0 ? [] : as.slice(-n);
                            };
                        };
                        function takeLeftWhile(predicate) {
                            return function (as) {
                                var out = [];
                                for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {
                                    var a = as_1[_i];
                                    if (!predicate(a)) {
                                        break;
                                    }
                                    out.push(a);
                                }
                                return out;
                            };
                        }
                        var spanLeftIndex = function (as, predicate) {
                            var l = as.length;
                            var i = 0;
                            for (; i < l; i++) {
                                if (!predicate(as[i])) {
                                    break;
                                }
                            }
                            return i;
                        };
                        function spanLeft(predicate) {
                            return function (as) {
                                var _a = splitAt(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];
                                return { init: init, rest: rest };
                            };
                        }
                        /**
                         * Creates a new `Array` which is a copy of the input dropping a max number of elements from the start.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { dropLeft } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(dropLeft(2)([1, 2, 3]), [3]);
                         * assert.deepStrictEqual(dropLeft(5)([1, 2, 3]), []);
                         * assert.deepStrictEqual(dropLeft(0)([1, 2, 3]), [1, 2, 3]);
                         * assert.deepStrictEqual(dropLeft(-2)([1, 2, 3]), [1, 2, 3]);
                         *
                         * @since 2.0.0
                         */
                        var dropLeft = function (n) {
                            return function (as) {
                                return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(n, as.length);
                            };
                        };
                        /**
                         * Creates a new `Array` which is a copy of the input dropping a max number of elements from the end.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { dropRight } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(dropRight(2)([1, 2, 3]), [1]);
                         * assert.deepStrictEqual(dropRight(5)([1, 2, 3]), []);
                         * assert.deepStrictEqual(dropRight(0)([1, 2, 3]), [1, 2, 3]);
                         * assert.deepStrictEqual(dropRight(-2)([1, 2, 3]), [1, 2, 3]);
                         *
                         * @since 2.0.0
                         */
                        var dropRight = function (n) {
                            return function (as) {
                                return n <= 0 || isEmpty(as) ? copy(as) : n >= as.length ? [] : as.slice(0, as.length - n);
                            };
                        };
                        function dropLeftWhile(predicate) {
                            return function (as) { return as.slice(spanLeftIndex(as, predicate)); };
                        }
                        /**
                         * `findIndex` returns an `Option` containing the first index for which a predicate holds.
                         * It returns `None` if no element satisfies the predicate.
                         * Similar to [`findFirst`](#findFirst) but returning the index instead of the element.
                         *
                         * @example
                         * import { findIndex } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))
                         * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)
                         *
                         * @since 2.0.0
                         */
                        var findIndex = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["findIndex"];
                        function findFirst(predicate) {
                            return _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["findFirst"](predicate);
                        }
                        /**
                         * Given a selector function which takes an element and returns an option,
                         * this function applies the selector to each element of the array and
                         * returns the first `Some` result. Otherwise it returns `None`.
                         *
                         * @example
                         * import { findFirstMap } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface Person {
                         *   readonly name: string;
                         *   readonly age: number;
                         * }
                         *
                         * const persons: Array<Person> = [
                         *   { name: "John", age: 16 },
                         *   { name: "Mary", age: 45 },
                         *   { name: "Joey", age: 28 },
                         * ];
                         *
                         * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));
                         * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));
                         * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove18)(persons), some("Mary"));
                         * assert.deepStrictEqual(findFirstMap(nameOfPersonAbove70)(persons), none);
                         *
                         * @since 2.0.0
                         */
                        var findFirstMap = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["findFirstMap"];
                        function findLast(predicate) {
                            return _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["findLast"](predicate);
                        }
                        /**
                         * Given a selector function which takes an element and returns an option,
                         * this function applies the selector to each element of the array starting from the
                         * end and returns the last `Some` result. Otherwise it returns `None`.
                         *
                         * @example
                         * import { findLastMap } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface Person {
                         *   readonly name: string;
                         *   readonly age: number;
                         * }
                         *
                         * const persons: Array<Person> = [
                         *   { name: "John", age: 16 },
                         *   { name: "Mary", age: 45 },
                         *   { name: "Joey", age: 28 },
                         * ];
                         *
                         * const nameOfPersonAbove18 = (p: Person) => (p.age <= 18 ? none : some(p.name));
                         * const nameOfPersonAbove70 = (p: Person) => (p.age <= 70 ? none : some(p.name));
                         * assert.deepStrictEqual(findLastMap(nameOfPersonAbove18)(persons), some("Joey"));
                         * assert.deepStrictEqual(findLastMap(nameOfPersonAbove70)(persons), none);
                         *
                         * @since 2.0.0
                         */
                        var findLastMap = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["findLastMap"];
                        /**
                         * Returns the index of the last element of the list which matches the predicate.
                         * It returns an `Option` containing the index or `None` if not found.
                         *
                         * @example
                         * import { findLastIndex } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface X {
                         *   readonly a: number
                         *   readonly b: number
                         * }
                         * const xs: Array<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]
                         * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))
                         * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)
                         *
                         * @since 2.0.0
                         */
                        var findLastIndex = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["findLastIndex"];
                        /**
                         * This function takes an array and makes a new array containing the same elements.
                         *
                         * @since 2.0.0
                         */
                        var copy = function (as) { return as.slice(); };
                        /**
                         * Insert an element at the specified index, creating a new array,
                         * or returning `None` if the index is out of bounds.
                         *
                         * @example
                         * import { insertAt } from 'fp-ts/Array'
                         * import { some } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))
                         *
                         * @since 2.0.0
                         */
                        var insertAt = function (i, a) {
                            return function (as) {
                                return i < 0 || i > as.length ? _internal__WEBPACK_IMPORTED_MODULE_5__["none"] : _internal__WEBPACK_IMPORTED_MODULE_5__["some"](unsafeInsertAt(i, a, as));
                            };
                        };
                        /**
                         * Change the element at the specified index, creating a new array,
                         * or returning `None` if the index is out of bounds.
                         *
                         * @example
                         * import { updateAt } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))
                         * assert.deepStrictEqual(updateAt(1, 1)([]), none)
                         *
                         * @since 2.0.0
                         */
                        var updateAt = function (i, a) { return modifyAt(i, function () { return a; }); };
                        /**
                         * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds.
                         *
                         * @example
                         * import { deleteAt } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))
                         * assert.deepStrictEqual(deleteAt(1)([]), none)
                         *
                         * @since 2.0.0
                         */
                        var deleteAt = function (i) {
                            return function (as) {
                                return isOutOfBound(i, as) ? _internal__WEBPACK_IMPORTED_MODULE_5__["none"] : _internal__WEBPACK_IMPORTED_MODULE_5__["some"](unsafeDeleteAt(i, as));
                            };
                        };
                        /**
                         * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out
                         * of bounds.
                         *
                         * @example
                         * import { modifyAt } from 'fp-ts/Array'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * const double = (x: number): number => x * 2
                         * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))
                         * assert.deepStrictEqual(modifyAt(1, double)([]), none)
                         *
                         * @since 2.0.0
                         */
                        var modifyAt = function (i, f) {
                            return function (as) {
                                return isOutOfBound(i, as) ? _internal__WEBPACK_IMPORTED_MODULE_5__["none"] : _internal__WEBPACK_IMPORTED_MODULE_5__["some"](unsafeUpdateAt(i, f(as[i]), as));
                            };
                        };
                        /**
                         * Reverse an array, creating a new array
                         *
                         * @example
                         * import { reverse } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])
                         *
                         * @since 2.0.0
                         */
                        var reverse = function (as) { return (isEmpty(as) ? [] : as.slice().reverse()); };
                        /**
                         * Takes an `Array` of `Either` and produces a new `Array` containing
                         * the values of all the `Right` elements in the same order.
                         *
                         * @example
                         * import { rights } from 'fp-ts/Array'
                         * import { right, left } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])
                         *
                         * @since 2.0.0
                         */
                        var rights = function (as) {
                            var r = [];
                            for (var i = 0; i < as.length; i++) {
                                var a = as[i];
                                if (a._tag === 'Right') {
                                    r.push(a.right);
                                }
                            }
                            return r;
                        };
                        /**
                         * Takes an `Array` of `Either` and produces a new `Array` containing
                         * the values of all the `Left` elements in the same order.
                         *
                         * @example
                         * import { lefts } from 'fp-ts/Array'
                         * import { left, right } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])
                         *
                         * @since 2.0.0
                         */
                        var lefts = function (as) {
                            var r = [];
                            for (var i = 0; i < as.length; i++) {
                                var a = as[i];
                                if (a._tag === 'Left') {
                                    r.push(a.left);
                                }
                            }
                            return r;
                        };
                        /**
                         * Sort the elements of an array in increasing order, creating a new array
                         *
                         * @example
                         * import { sort } from 'fp-ts/Array'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])
                         *
                         * @since 2.0.0
                         */
                        var sort = function (O) {
                            return function (as) {
                                return as.length <= 1 ? copy(as) : as.slice().sort(O.compare);
                            };
                        };
                        /**
                         * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one
                         * input array is short, excess elements of the longer array are discarded.
                         *
                         * @example
                         * import { zipWith } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])
                         *
                         * @since 2.0.0
                         */
                        var zipWith = function (fa, fb, f) {
                            var fc = [];
                            var len = Math.min(fa.length, fb.length);
                            for (var i = 0; i < len; i++) {
                                fc[i] = f(fa[i], fb[i]);
                            }
                            return fc;
                        };
                        function zip(as, bs) {
                            if (bs === undefined) {
                                return function (bs) { return zip(bs, as); };
                            }
                            return zipWith(as, bs, function (a, b) { return [a, b]; });
                        }
                        /**
                         * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays
                         *
                         * @example
                         * import { unzip } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])
                         *
                         * @since 2.0.0
                         */
                        var unzip = function (as) {
                            var fa = [];
                            var fb = [];
                            for (var i = 0; i < as.length; i++) {
                                fa[i] = as[i][0];
                                fb[i] = as[i][1];
                            }
                            return [fa, fb];
                        };
                        /**
                         * Creates a new `Array`, prepending an element to every member of the input `Array`.
                         *
                         * @example
                         * import { prependAll } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.10.0
                         */
                        var prependAll = function (middle) {
                            var f = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["prependAll"](middle);
                            return function (as) { return (isNonEmpty(as) ? f(as) : []); };
                        };
                        /**
                         * Creates a new `Array` placing an element in between members of the input `Array`.
                         *
                         * @example
                         * import { intersperse } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.9.0
                         */
                        var intersperse = function (middle) {
                            var f = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["intersperse"](middle);
                            return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };
                        };
                        /**
                         * Creates a new `Array` rotating the input `Array` by `n` steps.
                         *
                         * @example
                         * import { rotate } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
                         *
                         * @since 2.0.0
                         */
                        var rotate = function (n) {
                            var f = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["rotate"](n);
                            return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };
                        };
                        // TODO: remove non-curried overloading in v3
                        /**
                         * Test if a value is a member of an `Array`. Takes a `Eq<A>` as a single
                         * argument which returns the function to use to search for a value of type `A` in
                         * an `Array<A>`.
                         *
                         * @example
                         * import { elem } from 'fp-ts/Array'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(2)), true)
                         * assert.strictEqual(pipe([1, 2, 3], elem(N.Eq)(0)), false)
                         *
                         * @since 2.0.0
                         */
                        var elem = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["elem"];
                        /**
                         * Creates a new `Array` removing duplicate elements, keeping the first occurrence of an element,
                         * based on a `Eq<A>`.
                         *
                         * @example
                         * import { uniq } from 'fp-ts/Array'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])
                         *
                         * @since 2.0.0
                         */
                        var uniq = function (E) {
                            var f = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["uniq"](E);
                            return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };
                        };
                        /**
                         * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,
                         * etc...
                         *
                         * @example
                         * import { sortBy } from 'fp-ts/Array'
                         * import { contramap } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age: number
                         * }
                         * const byName = pipe(S.Ord, contramap((p: Person) => p.name))
                         * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))
                         *
                         * const sortByNameByAge = sortBy([byName, byAge])
                         *
                         * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]
                         * assert.deepStrictEqual(sortByNameByAge(persons), [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 2 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 }
                         * ])
                         *
                         * @since 2.0.0
                         */
                        var sortBy = function (ords) {
                            var f = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["sortBy"](ords);
                            return function (as) { return (isNonEmpty(as) ? f(as) : copy(as)); };
                        };
                        /**
                         * A useful recursion pattern for processing an array to produce a new array, often used for "chopping" up the input
                         * array. Typically chop is called with some function that will consume an initial prefix of the array and produce a
                         * value and the rest of the array.
                         *
                         * @example
                         * import { Eq } from 'fp-ts/Eq'
                         * import * as A from 'fp-ts/Array'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const group = <A>(S: Eq<A>): ((as: Array<A>) => Array<Array<A>>) => {
                         *   return A.chop(as => {
                         *     const { init, rest } = pipe(as, A.spanLeft((a: A) => S.equals(a, as[0])))
                         *     return [init, rest]
                         *   })
                         * }
                         * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])
                         *
                         * @since 2.0.0
                         */
                        var chop = function (f) {
                            var g = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["chop"](f);
                            return function (as) { return (isNonEmpty(as) ? g(as) : []); };
                        };
                        /**
                         * Splits an `Array` into two pieces, the first piece has max `n` elements.
                         *
                         * @example
                         * import { splitAt } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])
                         *
                         * @since 2.0.0
                         */
                        var splitAt = function (n) {
                            return function (as) {
                                return n >= 1 && isNonEmpty(as) ? _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["splitAt"](n)(as) : isEmpty(as) ? [copy(as), []] : [[], copy(as)];
                            };
                        };
                        /**
                         * Splits an array into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of
                         * the array. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive
                         * definition of `chunksOf`; it satisfies the property that
                         *
                         * ```ts
                         * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))
                         * ```
                         *
                         * whenever `n` evenly divides the length of `xs`.
                         *
                         * @example
                         * import { chunksOf } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])
                         *
                         * @since 2.0.0
                         */
                        var chunksOf = function (n) {
                            var f = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["chunksOf"](n);
                            return function (as) { return (isNonEmpty(as) ? f(as) : []); };
                        };
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        var fromOptionK = function (f) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return fromOption(f.apply(void 0, a));
                            };
                        };
                        function comprehension(input, f, g) {
                            if (g === void 0) { g = function () { return true; }; }
                            var go = function (scope, input) {
                                return isNonEmpty(input)
                                    ? flatMap(_NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["head"](input), function (a) { return go(Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(scope, append(a)), _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["tail"](input)); })
                                    : g.apply(void 0, scope) ? [f.apply(void 0, scope)]
                                        : [];
                            };
                            return go([], input);
                        }
                        /**
                         * @since 2.11.0
                         */
                        var concatW = function (second) {
                            return function (first) {
                                return isEmpty(first) ? copy(second) : isEmpty(second) ? copy(first) : first.concat(second);
                            };
                        };
                        /**
                         * @since 2.11.0
                         */
                        var concat = concatW;
                        function union(E) {
                            var unionE = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["union"](E);
                            return function (first, second) {
                                if (second === undefined) {
                                    var unionE_1 = union(E);
                                    return function (second) { return unionE_1(second, first); };
                                }
                                return isNonEmpty(first) && isNonEmpty(second)
                                    ? unionE(second)(first)
                                    : isNonEmpty(first)
                                        ? copy(first)
                                        : copy(second);
                            };
                        }
                        function intersection(E) {
                            var elemE = elem(E);
                            return function (xs, ys) {
                                if (ys === undefined) {
                                    var intersectionE_1 = intersection(E);
                                    return function (ys) { return intersectionE_1(ys, xs); };
                                }
                                return xs.filter(function (a) { return elemE(a, ys); });
                            };
                        }
                        function difference(E) {
                            var elemE = elem(E);
                            return function (xs, ys) {
                                if (ys === undefined) {
                                    var differenceE_1 = difference(E);
                                    return function (ys) { return differenceE_1(ys, xs); };
                                }
                                return xs.filter(function (a) { return !elemE(a, ys); });
                            };
                        }
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, map(f)); };
                        /* istanbul ignore next */
                        var _mapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, mapWithIndex(f)); };
                        var _ap = function (fab, fa) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fab, ap(fa)); };
                        /* istanbul ignore next */
                        var _filter = function (fa, predicate) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, filter(predicate)); };
                        /* istanbul ignore next */
                        var _filterMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, filterMap(f)); };
                        /* istanbul ignore next */
                        var _partition = function (fa, predicate) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, partition(predicate));
                        };
                        /* istanbul ignore next */
                        var _partitionMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, partitionMap(f)); };
                        /* istanbul ignore next */
                        var _partitionWithIndex = function (fa, predicateWithIndex) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, partitionWithIndex(predicateWithIndex)); };
                        /* istanbul ignore next */
                        var _partitionMapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, partitionMapWithIndex(f)); };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, alt(that)); };
                        var _reduce = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduce(b, f)); };
                        /* istanbul ignore next */
                        var _foldMap = function (M) {
                            var foldMapM = foldMap(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, foldMapM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRight = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduceRight(b, f)); };
                        /* istanbul ignore next */
                        var _reduceWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduceWithIndex(b, f));
                        };
                        /* istanbul ignore next */
                        var _foldMapWithIndex = function (M) {
                            var foldMapWithIndexM = foldMapWithIndex(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, foldMapWithIndexM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRightWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduceRightWithIndex(b, f));
                        };
                        /* istanbul ignore next */
                        var _filterMapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, filterMapWithIndex(f)); };
                        /* istanbul ignore next */
                        var _filterWithIndex = function (fa, predicateWithIndex) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, filterWithIndex(predicateWithIndex)); };
                        /* istanbul ignore next */
                        var _extend = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, extend(f)); };
                        /* istanbul ignore next */
                        var _traverse = function (F) {
                            var traverseF = traverse(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _traverseWithIndex = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(ta, traverseWithIndexF(f)); };
                        };
                        var _chainRecDepthFirst = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["_chainRecDepthFirst"];
                        var _chainRecBreadthFirst = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["_chainRecBreadthFirst"];
                        /**
                         * Given an element of the base type, `of` builds an `Array` containing just that
                         * element of the base type (this is useful for building a `Monad`).
                         *
                         * @example
                         * import { of } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(of("a"), ["a"]);
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var of = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["of"];
                        /**
                         * Makes an empty `Array`, useful for building a [`Monoid`](#Monoid)
                         *
                         * @since 2.7.0
                         */
                        var zero = function () { return []; };
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: Array<A>) => Array<B>`.
                         * In practice it applies the base function to each element of the array and collects the
                         * results in a new array.
                         *
                         * @example
                         * import { map } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const f = (n: number) => n * 2;
                         * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [2, 4, 6]);
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) { return function (fa) { return fa.map(function (a) { return f(a); }); }; };
                        /**
                         * @example
                         * import { ap, map, of } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * // a curried function with 3 input parameteres
                         * const f = (s1: string) => (n: number) => (s2: string) => s1 + n + s2;
                         *
                         * // let's use `ap` to iterate `f` over an array for each input parameter
                         * assert.deepStrictEqual(pipe(["a", "b"], map(f), ap([1, 2]), ap(["😀", "😫", "😎"])), [
                         *   "a1😀", "a1😫", "a1😎",
                         *   "a2😀", "a2😫", "a2😎",
                         *   "b1😀", "b1😫", "b1😎",
                         *   "b2😀", "b2😫", "b2😎",
                         * ]);
                         *
                         * // given Array implements the Applicative interface with the `of` method,
                         * // we can write exactly the same thing in a more symmetric way
                         * // using `of` on `f` and `ap` on each array in input
                         * assert.deepStrictEqual(
                         *   pipe(of(f), ap(["a", "b"]), ap([1, 2]), ap(["😀", "😫", "😎"])),
                         *   pipe(["a", "b"], map(f), ap([1, 2]), ap(["😀", "😫", "😎"]))
                         * );
                         *
                         * @since 2.0.0
                         */
                        var ap = function (fa) {
                            return flatMap(function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, map(f)); });
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to
                         * determine the next computation.
                         *
                         * In other words it takes a function `f` that produces an array from a single element of
                         * the base type `A` and returns a new function which applies `f` to each element of the
                         * input array (like [`map`](#map)) and, instead of returning an array of arrays, concatenates the
                         * results into a single array (like [`flatten`](#flatten)).
                         *
                         * @example
                         * import { flatMap, map, replicate } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const f = (n: number) => replicate(n, `${n}`);
                         * assert.deepStrictEqual(pipe([1, 2, 3], map(f)), [["1"], ["2", "2"], ["3", "3", "3"]]);
                         * assert.deepStrictEqual(pipe([1, 2, 3], flatMap(f)), ["1", "2", "2", "3", "3", "3"]);
                         *
                         * @category sequencing
                         * @since 2.14.0
                         */
                        var flatMap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_3__["dual"])(2, function (ma, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(ma, chainWithIndex(function (i, a) { return f(a, i); }));
                        });
                        /**
                         * Takes an array of arrays of `A` and flattens them into an array of `A`
                         * by concatenating the elements of each array in order.
                         *
                         * @example
                         * import { flatten } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(flatten([["a"], ["b", "c"], ["d", "e", "f"]]), ["a", "b", "c", "d", "e", "f"]);
                         *
                         * @category sequencing
                         * @since 2.5.0
                         */
                        var flatten = /*#__PURE__*/ flatMap(_function__WEBPACK_IMPORTED_MODULE_3__["identity"]);
                        /**
                         * Same as [`map`](#map), but the iterating function takes both the index and the value
                         * of the element.
                         *
                         * @example
                         * import { mapWithIndex } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const f = (i: number, s: string) => `${s} - ${i}`;
                         * assert.deepStrictEqual(pipe(["a", "b", "c"], mapWithIndex(f)), ["a - 0", "b - 1", "c - 2"]);
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var mapWithIndex = function (f) {
                            return function (fa) {
                                return fa.map(function (a, i) { return f(i, a); });
                            };
                        };
                        /**
                         * Maps an array with an iterating function that takes the index and the value of
                         * each element and returns an `Option`. It keeps only the `Some` values discarding
                         * the `None`s.
                         *
                         * Same as [`filterMap`](#filterMap), but with an iterating function which takes also
                         * the index as input.
                         *
                         * @example
                         * import { filterMapWithIndex } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         * import { option } from "fp-ts";
                         *
                         * const f = (i: number, s: string) => (i % 2 === 1 ? option.some(s.toUpperCase()) : option.none);
                         * assert.deepStrictEqual(pipe(["a", "no", "neither", "b"], filterMapWithIndex(f)), ["NO", "B"]);
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filterMapWithIndex = function (f) {
                            return function (fa) {
                                var out = [];
                                for (var i = 0; i < fa.length; i++) {
                                    var optionB = f(i, fa[i]);
                                    if (_internal__WEBPACK_IMPORTED_MODULE_5__["isSome"](optionB)) {
                                        out.push(optionB.value);
                                    }
                                }
                                return out;
                            };
                        };
                        /**
                         * Maps an array with an iterating function that returns an `Option`
                         * and it keeps only the `Some` values discarding the `None`s.
                         *
                         * @example
                         * import { filterMap } from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         * import { option } from "fp-ts";
                         *
                         * const f = (s: string) => s.length === 1 ? option.some(s.toUpperCase()) : option.none;
                         * assert.deepStrictEqual(pipe(["a", "no", "neither", "b"], filterMap(f)), ["A", "B"]);
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filterMap = function (f) {
                            return filterMapWithIndex(function (_, a) { return f(a); });
                        };
                        /**
                         * Compact an array of `Option`s discarding the `None` values and
                         * keeping the `Some` values. It returns a new array containing the values of
                         * the `Some` options.
                         *
                         * @example
                         * import { compact } from 'fp-ts/Array'
                         * import { option } from "fp-ts";
                         *
                         * assert.deepStrictEqual(compact([option.some("a"), option.none, option.some("b")]), ["a", "b"]);
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var compact = /*#__PURE__*/ filterMap(_function__WEBPACK_IMPORTED_MODULE_3__["identity"]);
                        /**
                         * Separate an array of `Either`s into `Left`s and `Right`s, creating two new arrays:
                         * one containing all the left values and one containing all the right values.
                         *
                         * @example
                         * import { separate } from 'fp-ts/Array'
                         * import { either } from "fp-ts";
                         *
                         * assert.deepStrictEqual(separate([either.right("r1"), either.left("l1"), either.right("r2")]), {
                         *   left: ["l1"],
                         *   right: ["r1", "r2"],
                         * });
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var separate = function (fa) {
                            var left = [];
                            var right = [];
                            for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
                                var e = fa_1[_i];
                                if (e._tag === 'Left') {
                                    left.push(e.left);
                                }
                                else {
                                    right.push(e.right);
                                }
                            }
                            return Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(left, right);
                        };
                        /**
                         * Given an iterating function that is a `Predicate` or a `Refinement`,
                         * `filter` creates a new `Array` containing the elements of the original
                         * `Array` for which the iterating function is `true`.
                         *
                         * @example
                         * import { filter } from 'fp-ts/Array'
                         * import { isString } from "fp-ts/lib/string";
                         *
                         * assert.deepStrictEqual(filter(isString)(["a", 1, {}, "b", 5]), ["a", "b"]);
                         * assert.deepStrictEqual(filter((x:number) => x > 0)([-3, 1, -2, 5]), [1, 5]);
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filter = function (predicate) {
                            return function (as) {
                                return as.filter(predicate);
                            };
                        };
                        /**
                         * Given an iterating function that is a `Predicate` or a `Refinement`,
                         * `partition` creates two new `Array`s: `right` containing the elements of the original
                         * `Array` for which the iterating function is `true`, `left` containing the elements
                         * for which it is false.
                         *
                         * @example
                         * import { partition } from 'fp-ts/Array'
                         * import { isString } from "fp-ts/lib/string";
                         *
                         * assert.deepStrictEqual(partition(isString)(["a", 1, {}, "b", 5]), { left: [1, {}, 5], right: ["a", "b"] });
                         * assert.deepStrictEqual(partition((x: number) => x > 0)([-3, 1, -2, 5]), { left: [-3, -2], right: [1, 5] });
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partition = function (predicate) {
                            return partitionWithIndex(function (_, a) { return predicate(a); });
                        };
                        /**
                         * Same as [`partition`](#partition), but passing also the index to the iterating function.
                         *
                         * @example
                         * import { partitionWithIndex } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(partitionWithIndex((index, x: number) => index < 3 && x > 0)([-2, 5, 6, 7]), {
                         *   left: [-2, 7],
                         *   right: [5, 6],
                         * });
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partitionWithIndex = function (predicateWithIndex) {
                            return function (as) {
                                var left = [];
                                var right = [];
                                for (var i = 0; i < as.length; i++) {
                                    var b = as[i];
                                    if (predicateWithIndex(i, b)) {
                                        right.push(b);
                                    }
                                    else {
                                        left.push(b);
                                    }
                                }
                                return Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(left, right);
                            };
                        };
                        /**
                         * Given an iterating function that returns an `Either`,
                         * `partitionMap` applies the iterating function to each element and it creates two `Array`s:
                         * `right` containing the values of `Right` results, `left` containing the values of `Left` results.
                         *
                         * @example
                         * import { partitionMap } from 'fp-ts/Array'
                         * import { Either, left, right } from "fp-ts/lib/Either";
                         *
                         * const upperIfString = <B>(x: B): Either<B, string> =>
                         *   typeof x === "string" ? right(x.toUpperCase()) : left(x);
                         * assert.deepStrictEqual(partitionMap(upperIfString)([-2, "hello", 6, 7, "world"]), {
                         *   left: [-2, 6, 7],
                         *   right: [ 'HELLO', 'WORLD' ],
                         * });
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partitionMap = function (f) { return partitionMapWithIndex(function (_, a) { return f(a); }); };
                        /**
                         * Same as [`partitionMap`](#partitionMap), but passing also the index to the iterating function.
                         *
                         * @example
                         * import { partitionMapWithIndex } from 'fp-ts/Array'
                         * import { Either, left, right } from "fp-ts/lib/Either";
                         *
                         * const upperIfStringBefore3 = <B>(index: number, x: B): Either<B, string> =>
                         *   index < 3 && typeof x === "string" ? right(x.toUpperCase()) : left(x);
                         * assert.deepStrictEqual(partitionMapWithIndex(upperIfStringBefore3)([-2, "hello", 6, 7, "world"]), {
                         *   left: [-2, 6, 7, "world"],
                         *   right: ["HELLO"],
                         * });
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partitionMapWithIndex = function (f) {
                            return function (fa) {
                                var left = [];
                                var right = [];
                                for (var i = 0; i < fa.length; i++) {
                                    var e = f(i, fa[i]);
                                    if (e._tag === 'Left') {
                                        left.push(e.left);
                                    }
                                    else {
                                        right.push(e.right);
                                    }
                                }
                                return Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(left, right);
                            };
                        };
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @example
                         * import * as A from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     A.altW(() => ['a', 'b'])
                         *   ),
                         *   [1, 2, 3, 'a', 'b']
                         * )
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (fa) {
                                return fa.concat(that());
                            };
                        };
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `Array` concatenates the inputs into a single array.
                         *
                         * @example
                         * import * as A from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     A.alt(() => [4, 5])
                         *   ),
                         *   [1, 2, 3, 4, 5]
                         * )
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        var alt = altW;
                        /**
                         * Same as [`filter`](#filter), but passing also the index to the iterating function.
                         *
                         * @example
                         * import { filterWithIndex } from 'fp-ts/Array';
                         *
                         * const f = (index: number, x: number) => x > 0 && index <= 2;
                         * assert.deepStrictEqual(filterWithIndex(f)([-3, 1, -2, 5]), [1]);
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filterWithIndex = function (predicateWithIndex) {
                            return function (as) {
                                return as.filter(function (b, i) { return predicateWithIndex(i, b); });
                            };
                        };
                        /**
                         * Given an iterating function that takes `Array<A>` as input, `extend` returns
                         * an array containing the results of the iterating function applied to the whole input
                         * `Array`, then to the input `Array` without the first element, then to the input
                         * `Array` without the first two elements, etc.
                         *
                         * @example
                         * import { extend } from 'fp-ts/Array'
                         *
                         * const f = (a: string[]) => a.join(",");
                         * assert.deepStrictEqual(extend(f)(["a", "b", "c"]), ["a,b,c", "b,c", "c"]);
                         *
                         * @since 2.0.0
                         */
                        var extend = function (f) {
                            return function (wa) {
                                return wa.map(function (_, i) { return f(wa.slice(i)); });
                            };
                        };
                        /**
                         * `duplicate` returns an array containing the whole input `Array`,
                         * then to the input `Array` dropping the first element, then to the input
                         * `Array` dropping the first two elements, etc.
                         *
                         * @example
                         * import { duplicate } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(duplicate(["a", "b", "c"]), [["a", "b", "c"], ["b", "c"], ["c"]]);
                         *
                         * @since 2.0.0
                         */
                        var duplicate = /*#__PURE__*/ extend(_function__WEBPACK_IMPORTED_MODULE_3__["identity"]);
                        /**
                         * Map and fold an `Array`.
                         * Map the `Array` passing each value to the iterating function.
                         * Then fold the results using the provided `Monoid`.
                         *
                         * @example
                         * import { foldMap } from 'fp-ts/Array'
                         *
                         * const monoid = { concat: (a: string, b: string) => a + b, empty: "" };
                         * const f = (s: string) => s.toUpperCase()
                         * assert.deepStrictEqual(foldMap(monoid)(f)(["a", "b", "c"]), "ABC");
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMap = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["foldMap"];
                        /**
                         * Same as [`foldMap`](#foldMap) but passing also the index to the iterating function.
                         *
                         * @example
                         * import { foldMapWithIndex } from 'fp-ts/Array'
                         *
                         * const monoid = { concat: (a: string, b: string) => a + b, empty: "" };
                         * const f = (index:number, s: string) => `${s.toUpperCase()}(${index})`
                         * assert.deepStrictEqual(foldMapWithIndex(monoid)(f)(["a", "b", "c"]), "A(0)B(1)C(2)");
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMapWithIndex = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["foldMapWithIndex"];
                        /**
                         * Reduces an `Array`.
                         *
                         * `reduce` executes the supplied iterating function on each element of the array,
                         * in order, passing in the element and the return value from the calculation on the preceding element.
                         *
                         * The first time that the iterating function is called there is no "return value of the
                         * previous calculation", the initial value is used in its place.
                         *
                         * @example
                         * import { reduce } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(reduce(5, (acc: number, cur: number) => acc * cur)([2, 3]), 5 * 2 * 3);
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduce = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["reduce"];
                        /**
                         * Same as [`reduce`](#reduce) but passing also the index to the iterating function.
                         *
                         * @example
                         * import { reduceWithIndex } from 'fp-ts/Array'
                         *
                         * const f = (index: number, acc: string, cur: unknown) =>
                         *   acc + (typeof cur === "string" ? cur.toUpperCase() + index : "");
                         * assert.deepStrictEqual(reduceWithIndex("", f)([2, "a", "b", null]), "A1B2");
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceWithIndex = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["reduceWithIndex"];
                        /**
                         * Same as [`reduce`](#reduce) but applied from the end to the start.
                         *
                         * *Note*: the iterating function in this case takes the accumulator as the last argument.
                         *
                         * @example
                         * import { reduceRight } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(reduceRight("", (cur: string, acc: string) => acc + cur)(["a", "b", "c"]), "cba");
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRight = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["reduceRight"];
                        /**
                         * Same as [`reduceRight`](#reduceRight) but passing also the index to the iterating function.
                         *
                         * @example
                         * import { reduceRightWithIndex } from 'fp-ts/Array'
                         *
                         * const f = (index: number, cur: unknown, acc: string) =>
                         *   acc + (typeof cur === "string" ? cur.toUpperCase() + index : "");
                         * assert.deepStrictEqual(reduceRightWithIndex("", f)([2, "a", "b", null]), "B2A1");
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRightWithIndex = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["reduceRightWithIndex"];
                        /**
                         * Given an iterating function that returns a `HKT` (higher kinded type), `traverse`
                         * applies the iterating function to each element of the `Array` and then [`sequence`](#sequence)-s
                         * the results using the provided `Applicative`.
                         *
                         * E.g. suppose you have an `Array` and you want to format each element with a function
                         * that returns a result or an error as `f = (a: A) => Either<Error, B>`, using `traverse`
                         * you can apply `f` to all elements and directly obtain as a result an `Either<Error,Array<B>>`
                         * i.e. an `Array<B>` if all the results are `B`, or an `Error` if some of the results
                         * are `Error`s.
                         *
                         * @example
                         * import { traverse } from 'fp-ts/Array'
                         * import { Applicative, left, right } from "fp-ts/lib/Either";
                         *
                         * const f = (x: unknown) =>
                         *   typeof x === "string" ? right(x.toUpperCase()) : left(new Error("not a string"));
                         * assert.deepStrictEqual(traverse(Applicative)(f)(["a", "b"]), right(["A", "B"]));
                         * assert.deepStrictEqual(traverse(Applicative)(f)(["a", 5]), left(new Error("not a string")));
                         *
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };
                        };
                        /**
                         * `sequence` takes an `Array` where elements are `HKT<A>` (higher kinded type) and,
                         * using an applicative of that `HKT`, returns an `HKT` of `Array<A>`.
                         * E.g. it can turn an `Array<Either<Error, string>>` into an `Either<Error, Array<string>>`.
                         *
                         * `sequence` requires an `Applicative` of the `HKT` you are targeting, e.g. to turn an
                         * `Array<Either<E, A>>` into an `Either<E, Array<A>>`, it needs an
                         * `Applicative` for `Either`, to to turn an `Array<Option<A>>` into an `Option<Array<A>>`,
                         * it needs an `Applicative` for `Option`.
                         *
                         * @example
                         * import { sequence } from 'fp-ts/Array'
                         * import { Applicative, left, right } from "fp-ts/lib/Either";
                         *
                         * assert.deepStrictEqual(sequence(Applicative)([right("a"), right("b")]), right(["a", "b"]));
                         * assert.deepStrictEqual(
                         *   sequence(Applicative)([right("a"), left(new Error("not a string"))]),
                         *   left(new Error("not a string"))
                         * );
                         *
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) {
                            return function (ta) {
                                return _reduce(ta, F.of(zero()), function (fas, fa) {
                                    return F.ap(F.map(fas, function (as) { return function (a) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(as, append(a)); }; }), fa);
                                });
                            };
                        };
                        /**
                         * Same as [`traverse`](#traverse) but passing also the index to the iterating function.
                         *
                         * @example
                         * import { traverseWithIndex } from 'fp-ts/Array'
                         * import { Applicative, left, right } from "fp-ts/lib/Either";
                         *
                         * const f = (index:number, x:unknown) =>
                         *   typeof x === "string" ? right(x.toUpperCase() + index) : left(new Error("not a string"));
                         * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)(["a", "b"]), right(["A0", "B1"]));
                         * assert.deepStrictEqual(traverseWithIndex(Applicative)(f)(["a", 5]), left(new Error("not a string")));
                         *
                         * @category sequencing
                         * @since 2.6.3
                         */
                        var traverseWithIndex = function (F) {
                            return function (f) {
                                return reduceWithIndex(F.of(zero()), function (i, fbs, a) {
                                    return F.ap(F.map(fbs, function (bs) { return function (b) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(bs, append(b)); }; }), f(i, a));
                                });
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wither = function (F) {
                            var _witherF = _wither(F);
                            return function (f) { return function (fa) { return _witherF(fa, f); }; };
                        };
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wilt = function (F) {
                            var _wiltF = _wilt(F);
                            return function (f) { return function (fa) { return _wiltF(fa, f); }; };
                        };
                        /**
                         * `unfold` takes a function `f` which returns an `Option` of a tuple containing an outcome
                         * value and an input for the following iteration.
                         * `unfold` applies `f` to the initial value `b` and then recursively to the second
                         * element of the tuple contained in the returned `option` of the previous
                         * calculation until `f` returns `Option.none`.
                         *
                         * @example
                         * import { unfold } from 'fp-ts/Array'
                         * import { option } from 'fp-ts'
                         *
                         * const f = (n: number) => {
                         *   if (n <= 0) return option.none;
                         *   const returnValue = n * 2;
                         *   const inputForNextRound = n - 1;
                         *   return option.some([returnValue, inputForNextRound] as const);
                         * };
                         * assert.deepStrictEqual(unfold(5, f), [10, 8, 6, 4, 2]);
                         *
                         * @since 2.6.6
                         */
                        var unfold = function (b, f) {
                            var out = [];
                            var bb = b;
                            // eslint-disable-next-line no-constant-condition
                            while (true) {
                                var mt = f(bb);
                                if (_internal__WEBPACK_IMPORTED_MODULE_5__["isSome"](mt)) {
                                    var _a = mt.value, a = _a[0], b_1 = _a[1];
                                    out.push(a);
                                    bb = b_1;
                                }
                                else {
                                    break;
                                }
                            }
                            return out;
                        };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'Array';
                        /**
                         * `getShow` makes a `Show` for an `Array<A>` from a `Show` for
                         * an `A`.
                         *
                         * @example
                         * import { getShow } from 'fp-ts/Array'
                         *
                         * const numShow = { show: (n: number) => (n >= 0 ? `${n}` : `(${-n})`) };
                         * assert.deepStrictEqual(getShow(numShow).show([-2, -1, 0, 1]), "[(2), (1), 0, 1]");
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getShow = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["getShow"];
                        /**
                         * Get a `Semigroup` based on the concatenation of `Array`s.
                         * See also [`getMonoid`](#getMonoid).
                         *
                         * @example
                         * import { getSemigroup } from 'fp-ts/Array'
                         *
                         * const S = getSemigroup<number>();
                         * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 2, 3]);
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: function (first, second) { return first.concat(second); }
                            });
                        };
                        /**
                         * Returns a `Monoid` for `Array<A>` based on the concatenation of `Array`s.
                         *
                         * @example
                         * import { getMonoid } from 'fp-ts/Array'
                         *
                         * const M = getMonoid<number>()
                         * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getMonoid = function () {
                            return ({
                                concat: getSemigroup().concat,
                                empty: []
                            });
                        };
                        /**
                         * Derives an `Eq` over the `Array` of a given element type from the `Eq` of that type. The derived `Eq` defines two
                         * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of
                         * different lengths, the result is non equality.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { getEq } from 'fp-ts/Array'
                         *
                         * const E = getEq(S.Eq)
                         * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)
                         * assert.strictEqual(E.equals(['a'], []), false)
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getEq = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["getEq"];
                        /**
                         * Derives an `Ord` over the `Array` of a given element type from the `Ord` of that type. The ordering between two such
                         * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in
                         * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have
                         * the same length, the result is equality.
                         *
                         * @example
                         * import { getOrd } from 'fp-ts/Array'
                         * import * as S from 'fp-ts/string'
                         *
                         * const O = getOrd(S.Ord)
                         * assert.strictEqual(O.compare(['b'], ['a']), 1)
                         * assert.strictEqual(O.compare(['a'], ['a']), 0)
                         * assert.strictEqual(O.compare(['a'], ['b']), -1)
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getOrd = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["getOrd"];
                        /**
                         * Get a `Semigroup` based on the union of the elements of `Array`s.
                         * Elements which equal according to the provided `Eq` are included
                         * only once in the result.
                         * See also [`getUnionMonoid`](#getUnionMonoid).
                         *
                         * @example
                         * import { getUnionSemigroup } from 'fp-ts/Array';
                         * import { Eq } from 'fp-ts/number';
                         *
                         * const S = getUnionSemigroup<number>(Eq);
                         * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1, 2, 3]);
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (E) {
                            var unionE = union(E);
                            return {
                                concat: function (first, second) { return unionE(second)(first); }
                            };
                        };
                        /**
                         * Get a `Monoid` based on the union of the elements of `Array`s.
                         * Elements which equal according to the provided `Eq` are included
                         * only once in the result.
                         *
                         * @example
                         * import { getUnionMonoid } from 'fp-ts/Array'
                         * import { Eq } from 'fp-ts/number';
                         *
                         * const M = getUnionMonoid<number>(Eq);
                         * assert.deepStrictEqual(M.concat([1, 2], [2, 3]), [1, 2, 3]);
                         * assert.deepStrictEqual(M.empty,[]);
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionMonoid = function (E) {
                            return ({
                                concat: getUnionSemigroup(E).concat,
                                empty: []
                            });
                        };
                        /**
                         * Get a `Semigroup` based on the intersection of the elements of `Array`s.
                         * Only elements present in the two arrays which are equal according to the
                         * provided `Eq` are included in the result.
                         *
                         * @example
                         * import { getIntersectionSemigroup } from 'fp-ts/Array'
                         * import { Eq } from 'fp-ts/number';
                         *
                         * const S = getIntersectionSemigroup<number>(Eq);
                         * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [2]);
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getIntersectionSemigroup = function (E) {
                            var intersectionE = intersection(E);
                            return {
                                concat: function (first, second) { return intersectionE(second)(first); }
                            };
                        };
                        /**
                         * Get a `Magma` for `Array` where the `concat` function is the differnce between
                         * the first and the second array, i.e. the result contains all the elements of the
                         * first array for which their is no equal element in the second array according
                         * to the `Eq` provided.
                         *
                         *
                         * @example
                         * import { getDifferenceMagma } from 'fp-ts/Array'
                         * import { Eq } from 'fp-ts/number';
                         *
                         * const S = getDifferenceMagma<number>(Eq);
                         * assert.deepStrictEqual(S.concat([1, 2], [2, 3]), [1]);
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getDifferenceMagma = function (E) {
                            var differenceE = difference(E);
                            return {
                                concat: function (first, second) { return differenceE(second)(first); }
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * Given an input an `Array` of functions, `flap` returns an `Array` containing
                         * the results of applying each function to the given input.
                         *
                         * @example
                         * import { flap } from 'fp-ts/Array'
                         *
                         * const funs = [
                         *   (n: number) => `Double: ${n * 2}`,
                         *   (n: number) => `Triple: ${n * 3}`,
                         *   (n: number) => `Square: ${n * n}`,
                         * ];
                         * assert.deepStrictEqual(flap(4)(funs), ['Double: 8', 'Triple: 12', 'Square: 16']);
                         *
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_4__["flap"])(Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Pointed = {
                            URI: URI,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FunctorWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Apply = {
                            URI: URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.5.0
                         */
                        var apFirst = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apFirst"])(Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.5.0
                         */
                        var apSecond = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apSecond"])(Apply);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Applicative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Chain = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import * as A from 'fp-ts/Array'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     A.chainFirst(() => ['a', 'b'])
                         *   ),
                         *   [1, 1, 2, 2, 3, 3]
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     A.chainFirst(() => [])
                         *   ),
                         *   []
                         * )
                         *
                         * @category sequencing
                         * @since 2.0.0
                         */
                        var chainFirst =
/*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["chainFirst"])(Chain);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Monad = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Unfoldable = {
                            URI: URI,
                            unfold: unfold
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alt = {
                            URI: URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var Zero = {
                            URI: URI,
                            zero: zero
                        };
                        /**
                         * @category do notation
                         * @since 2.11.0
                         */
                        var guard = /*#__PURE__*/ Object(_Zero__WEBPACK_IMPORTED_MODULE_10__["guard"])(Zero, Pointed);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alternative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            alt: _alt,
                            zero: zero
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Extend = {
                            URI: URI,
                            map: _map,
                            extend: _extend
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Compactable = {
                            URI: URI,
                            compact: compact,
                            separate: separate
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Filterable = {
                            URI: URI,
                            map: _map,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FilterableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex,
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Foldable = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FoldableWithIndex = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Traversable = {
                            URI: URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var TraversableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverse: _traverse,
                            sequence: sequence,
                            traverseWithIndex: _traverseWithIndex
                        };
                        var _wither = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_9__["witherDefault"])(Traversable, Compactable);
                        var _wilt = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_9__["wiltDefault"])(Traversable, Compactable);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Witherable = {
                            URI: URI,
                            map: _map,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            wither: _wither,
                            wilt: _wilt
                        };
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var chainRecDepthFirst = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["chainRecDepthFirst"];
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var ChainRecDepthFirst = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap,
                            chainRec: _chainRecDepthFirst
                        };
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var chainRecBreadthFirst = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["chainRecBreadthFirst"];
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var ChainRecBreadthFirst = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap,
                            chainRec: _chainRecBreadthFirst
                        };
                        /**
                         * Filter values inside a context.
                         *
                         * @since 2.11.0
                         */
                        var filterE = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_9__["filterE"])(Witherable);
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var FromEither = {
                            URI: URI,
                            fromEither: fromEither
                        };
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        var fromEitherK = /*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_2__["fromEitherK"])(FromEither);
                        // -------------------------------------------------------------------------------------
                        // unsafe
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category unsafe
                         * @since 2.0.0
                         */
                        var unsafeInsertAt = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["unsafeInsertAt"];
                        /**
                         * @category unsafe
                         * @since 2.0.0
                         */
                        var unsafeUpdateAt = function (i, a, as) {
                            return isNonEmpty(as) ? _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["unsafeUpdateAt"](i, a, as) : [];
                        };
                        /**
                         * @category unsafe
                         * @since 2.0.0
                         */
                        var unsafeDeleteAt = function (i, as) {
                            var xs = as.slice();
                            xs.splice(i, 1);
                            return xs;
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * `every` tells if the provided predicate holds true for every element in the `Array`.
                         *
                         * @example
                         * import { every } from 'fp-ts/Array'
                         *
                         * assert.equal(every((x: number) => x >= 0)([1, 2, 3]), true);
                         * assert.equal(every((x: number) => x >= 0)([-1, 2, 3]), false);
                         *
                         * @since 2.9.0
                         */
                        var every = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["every"];
                        /**
                         * `some` tells if the provided predicate holds true at least for one element in the `Array`.
                         *
                         * @example
                         * import { some } from 'fp-ts/Array'
                         *
                         * assert.equal(some((x: number) => x >= 0)([1, 2, 3]), true);
                         * assert.equal(some((x: number) => x >= 10)([1, 2, 3]), false);
                         *
                         * @since 2.9.0
                         */
                        var some = function (predicate) {
                            return function (as) {
                                return as.some(predicate);
                            };
                        };
                        /**
                         * Alias of [`some`](#some)
                         *
                         * @since 2.11.0
                         */
                        var exists = some;
                        /**
                         * Places an element in between members of an `Array`, then folds the results using the provided `Monoid`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { intercalate } from 'fp-ts/Array'
                         *
                         * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')
                         *
                         * @since 2.12.0
                         */
                        var intercalate = _ReadonlyArray__WEBPACK_IMPORTED_MODULE_7__["intercalate"];
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        var Do = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_5__["emptyRecord"]);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindTo = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_4__["bindTo"])(Functor);
                        var let_ = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_4__["let"])(Functor);

                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bind = /*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["bind"])(Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apS = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apS"])(Apply);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chain = flatMap;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `NonEmptyArray` module instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var range = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["range"];
                        /**
                         * Use a new `[]` instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var empty = [];
                        /**
                         * Use `prepend` instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var cons = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["cons"];
                        /**
                         * Use `append` instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var snoc = _NonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["snoc"];
                        /**
                         * Use `prependAll` instead
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        var prependToAll = prependAll;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `A.Functor` instead of `A.array`
                         * (where `A` is from `import A from 'fp-ts/Array'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var array = {
                            URI: URI,
                            compact: compact,
                            separate: separate,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            mapWithIndex: _mapWithIndex,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex,
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex,
                            alt: _alt,
                            zero: zero,
                            unfold: unfold,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex,
                            extend: _extend,
                            wither: _wither,
                            wilt: _wilt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Chain.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/es6/Chain.js ***!
  \*****************************************/
/*! exports provided: chainFirst, tap, bind */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tap", function () { return tap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
                        function chainFirst(M) {
                            var tapM = tap(M);
                            return function (f) { return function (first) { return tapM(first, f); }; };
                        }
                        /** @internal */
                        function tap(M) {
                            return function (first, f) { return M.chain(first, function (a) { return M.map(f(a), function () { return a; }); }); };
                        }
                        function bind(M) {
                            return function (name, f) {
                                return function (ma) {
                                    return M.chain(ma, function (a) {
                                        return M.map(f(a), function (b) {
                                            var _a;
                                            return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
                                        });
                                    });
                                };
                            };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/ChainRec.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/es6/ChainRec.js ***!
  \********************************************/
/*! exports provided: tailRec */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tailRec", function () { return tailRec; });
                        /**
                         * @since 2.0.0
                         */
                        var tailRec = function (startWith, f) {
                            var ab = f(startWith);
                            while (ab._tag === 'Left') {
                                ab = f(ab.left);
                            }
                            return ab.right;
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Const.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/es6/Const.js ***!
  \*****************************************/
/*! exports provided: make, getShow, getEq, getOrd, getBounded, getSemigroup, getMonoid, getSemiring, getRing, getHeytingAlgebra, getBooleanAlgebra, getApply, getApplicative, contramap, map, bimap, mapLeft, URI, Functor, flap, Contravariant, Bifunctor, const_ */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "make", function () { return make; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrd", function () { return getOrd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBounded", function () { return getBounded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemiring", function () { return getSemiring; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRing", function () { return getRing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getHeytingAlgebra", function () { return getHeytingAlgebra; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBooleanAlgebra", function () { return getBooleanAlgebra; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApply", function () { return getApply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicative", function () { return getApplicative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contramap", function () { return contramap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bimap", function () { return bimap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapLeft", function () { return mapLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contravariant", function () { return Contravariant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bifunctor", function () { return Bifunctor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "const_", function () { return const_; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");


                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var make = _function__WEBPACK_IMPORTED_MODULE_0__["unsafeCoerce"];
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        function getShow(S) {
                            return {
                                show: function (c) { return "make(".concat(S.show(c), ")"); }
                            };
                        }
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getEq = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getOrd = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getBounded = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getSemigroup = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getMonoid = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getSemiring = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getRing = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getHeytingAlgebra = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getBooleanAlgebra = _function__WEBPACK_IMPORTED_MODULE_0__["identity"];
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        function getApply(S) {
                            return {
                                URI: URI,
                                _E: undefined,
                                map: _map,
                                ap: function (fab, fa) { return make(S.concat(fab, fa)); }
                            };
                        }
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        function getApplicative(M) {
                            var A = getApply(M);
                            return {
                                URI: URI,
                                _E: undefined,
                                map: A.map,
                                ap: A.ap,
                                of: function () { return make(M.empty); }
                            };
                        }
                        var _contramap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, contramap(f)); };
                        /* istanbul ignore next */
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, map(f)); };
                        /* istanbul ignore next */
                        var _bimap = function (fa, f, g) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, bimap(f, g)); };
                        /* istanbul ignore next */
                        var _mapLeft = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, mapLeft(f)); };
                        /**
                         * @since 2.0.0
                         */
                        var contramap = function () { return _function__WEBPACK_IMPORTED_MODULE_0__["unsafeCoerce"]; };
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function () { return _function__WEBPACK_IMPORTED_MODULE_0__["unsafeCoerce"]; };
                        /**
                         * Map a pair of functions over the two type arguments of the bifunctor.
                         *
                         * @category mapping
                         * @since 2.6.2
                         */
                        var bimap = function (f) {
                            return function (fa) {
                                return make(f(fa));
                            };
                        };
                        /**
                         * Map a function over the first type argument of a bifunctor.
                         *
                         * @category error handling
                         * @since 2.6.2
                         */
                        var mapLeft = function (f) { return function (fa) { return make(f(fa)); }; };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'Const';
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_1__["flap"])(Functor);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Contravariant = {
                            URI: URI,
                            contramap: _contramap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Bifunctor = {
                            URI: URI,
                            bimap: _bimap,
                            mapLeft: _mapLeft
                        };
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `C.Functor` instead of `C.const_`
                         * (where `C` is from `import C from 'fp-ts/Const'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var const_ = {
                            URI: URI,
                            map: _map,
                            contramap: _contramap,
                            bimap: _bimap,
                            mapLeft: _mapLeft
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Either.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/es6/Either.js ***!
  \******************************************/
/*! exports provided: left, right, flatMap, URI, getShow, getEq, getSemigroup, getCompactable, getFilterable, getWitherable, getApplicativeValidation, getAltValidation, map, Functor, as, asUnit, of, Pointed, apW, ap, Apply, Applicative, Chain, Monad, reduce, foldMap, reduceRight, Foldable, traverse, sequence, Traversable, bimap, mapLeft, Bifunctor, altW, alt, Alt, extend, Extend, ChainRec, throwError, MonadThrow, FromEither, fromPredicate, fromOption, isLeft, isRight, matchW, foldW, match, fold, getOrElseW, getOrElse, flap, apFirst, apFirstW, apSecond, apSecondW, tap, flattenW, flatten, duplicate, fromOptionK, chainOptionK, chainOptionKW, liftNullable, liftOption, flatMapNullable, flatMapOption, filterOrElse, filterOrElseW, swap, orElseW, orElse, fromNullable, tryCatch, tryCatchK, fromNullableK, chainNullableK, toUnion, toError, elem, exists, Do, bindTo, let, bind, bindW, apS, apSW, ApT, traverseReadonlyNonEmptyArrayWithIndex, traverseReadonlyArrayWithIndex, traverseArrayWithIndex, traverseArray, sequenceArray, chainW, chain, chainFirst, chainFirstW, parseJSON, stringifyJSON, either, getApplySemigroup, getApplyMonoid, getValidationSemigroup, getValidationMonoid, getValidation */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function () { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function () { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function () { return flatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCompactable", function () { return getCompactable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFilterable", function () { return getFilterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWitherable", function () { return getWitherable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplicativeValidation", function () { return getApplicativeValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAltValidation", function () { return getAltValidation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "as", function () { return as; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asUnit", function () { return asUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function () { return of; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pointed", function () { return Pointed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apW", function () { return apW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Apply", function () { return Apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Applicative", function () { return Applicative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chain", function () { return Chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monad", function () { return Monad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foldable", function () { return Foldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Traversable", function () { return Traversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bimap", function () { return bimap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapLeft", function () { return mapLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bifunctor", function () { return Bifunctor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "altW", function () { return altW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function () { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alt", function () { return Alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function () { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Extend", function () { return Extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChainRec", function () { return ChainRec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwError", function () { return throwError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonadThrow", function () { return MonadThrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FromEither", function () { return FromEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPredicate", function () { return fromPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOption", function () { return fromOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLeft", function () { return isLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRight", function () { return isRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchW", function () { return matchW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldW", function () { return foldW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "match", function () { return match; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fold", function () { return fold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrElseW", function () { return getOrElseW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrElse", function () { return getOrElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirstW", function () { return apFirstW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecondW", function () { return apSecondW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tap", function () { return tap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flattenW", function () { return flattenW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function () { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicate", function () { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOptionK", function () { return fromOptionK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainOptionK", function () { return chainOptionK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainOptionKW", function () { return chainOptionKW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "liftNullable", function () { return liftNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "liftOption", function () { return liftOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapNullable", function () { return flatMapNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapOption", function () { return flatMapOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterOrElse", function () { return filterOrElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterOrElseW", function () { return filterOrElseW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "swap", function () { return swap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orElseW", function () { return orElseW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orElse", function () { return orElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullable", function () { return fromNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryCatch", function () { return tryCatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryCatchK", function () { return tryCatchK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullableK", function () { return fromNullableK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainNullableK", function () { return chainNullableK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toUnion", function () { return toUnion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toError", function () { return toError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elem", function () { return elem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exists", function () { return exists; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Do", function () { return Do; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindW", function () { return bindW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSW", function () { return apSW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApT", function () { return ApT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyNonEmptyArrayWithIndex", function () { return traverseReadonlyNonEmptyArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyArrayWithIndex", function () { return traverseReadonlyArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseArrayWithIndex", function () { return traverseArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseArray", function () { return traverseArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceArray", function () { return sequenceArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainW", function () { return chainW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirstW", function () { return chainFirstW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseJSON", function () { return parseJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringifyJSON", function () { return stringifyJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "either", function () { return either; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplySemigroup", function () { return getApplySemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplyMonoid", function () { return getApplyMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidationSemigroup", function () { return getValidationSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidationMonoid", function () { return getValidationMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidation", function () { return getValidation; });
/* harmony import */ var _Applicative__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Applicative */ "./node_modules/fp-ts/es6/Applicative.js");
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _ChainRec__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ChainRec */ "./node_modules/fp-ts/es6/ChainRec.js");
/* harmony import */ var _FromEither__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/es6/FromEither.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _Separated__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/es6/Separated.js");
/* harmony import */ var _Witherable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/es6/Witherable.js");










                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this
                         * structure.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var left = _internal__WEBPACK_IMPORTED_MODULE_7__["left"];
                        /**
                         * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias
                         * of this structure.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var right = _internal__WEBPACK_IMPORTED_MODULE_7__["right"];
                        /**
                         * @category sequencing
                         * @since 2.14.0
                         */
                        var flatMap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_5__["dual"])(2, function (ma, f) { return (isLeft(ma) ? ma : f(ma.right)); });
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fa, map(f)); };
                        var _ap = function (fab, fa) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fab, ap(fa)); };
                        /* istanbul ignore next */
                        var _reduce = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fa, reduce(b, f)); };
                        /* istanbul ignore next */
                        var _foldMap = function (M) {
                            return function (fa, f) {
                                var foldMapM = foldMap(M);
                                return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fa, foldMapM(f));
                            };
                        };
                        /* istanbul ignore next */
                        var _reduceRight = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fa, reduceRight(b, f)); };
                        var _traverse = function (F) {
                            var traverseF = traverse(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(ta, traverseF(f)); };
                        };
                        var _bimap = function (fa, f, g) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fa, bimap(f, g)); };
                        var _mapLeft = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fa, mapLeft(f)); };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fa, alt(that)); };
                        /* istanbul ignore next */
                        var _extend = function (wa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["pipe"])(wa, extend(f)); };
                        var _chainRec = function (a, f) {
                            return Object(_ChainRec__WEBPACK_IMPORTED_MODULE_3__["tailRec"])(f(a), function (e) {
                                return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));
                            });
                        };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'Either';
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getShow = function (SE, SA) {
                            return ({
                                show: function (ma) { return (isLeft(ma) ? "left(".concat(SE.show(ma.left), ")") : "right(".concat(SA.show(ma.right), ")")); }
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getEq = function (EL, EA) {
                            return ({
                                equals: function (x, y) {
                                    return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));
                                }
                            });
                        };
                        /**
                         * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are
                         * concatenated using the provided `Semigroup`
                         *
                         * @example
                         * import { getSemigroup, left, right } from 'fp-ts/Either'
                         * import { SemigroupSum } from 'fp-ts/number'
                         *
                         * const S = getSemigroup<string, number>(SemigroupSum)
                         * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))
                         * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))
                         * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))
                         * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getSemigroup = function (S) {
                            return ({
                                concat: function (x, y) { return (isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right))); }
                            });
                        };
                        /**
                         * Builds a `Compactable` instance for `Either` given `Monoid` for the left side.
                         *
                         * @category filtering
                         * @since 2.10.0
                         */
                        var getCompactable = function (M) {
                            var empty = left(M.empty);
                            return {
                                URI: URI,
                                _E: undefined,
                                compact: function (ma) { return (isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value)); },
                                separate: function (ma) {
                                    return isLeft(ma)
                                        ? Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(ma, ma)
                                        : isLeft(ma.right)
                                            ? Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(right(ma.right.left), empty)
                                            : Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(empty, right(ma.right.right));
                                }
                            };
                        };
                        /**
                         * Builds a `Filterable` instance for `Either` given `Monoid` for the left side
                         *
                         * @category filtering
                         * @since 2.10.0
                         */
                        var getFilterable = function (M) {
                            var empty = left(M.empty);
                            var _a = getCompactable(M), compact = _a.compact, separate = _a.separate;
                            var filter = function (ma, predicate) {
                                return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;
                            };
                            var partition = function (ma, p) {
                                return isLeft(ma)
                                    ? Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(ma, ma)
                                    : p(ma.right)
                                        ? Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(empty, right(ma.right))
                                        : Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(right(ma.right), empty);
                            };
                            return {
                                URI: URI,
                                _E: undefined,
                                map: _map,
                                compact: compact,
                                separate: separate,
                                filter: filter,
                                filterMap: function (ma, f) {
                                    if (isLeft(ma)) {
                                        return ma;
                                    }
                                    var ob = f(ma.right);
                                    return ob._tag === 'None' ? empty : right(ob.value);
                                },
                                partition: partition,
                                partitionMap: function (ma, f) {
                                    if (isLeft(ma)) {
                                        return Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(ma, ma);
                                    }
                                    var e = f(ma.right);
                                    return isLeft(e) ? Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(right(e.left), empty) : Object(_Separated__WEBPACK_IMPORTED_MODULE_8__["separated"])(empty, right(e.right));
                                }
                            };
                        };
                        /**
                         * Builds `Witherable` instance for `Either` given `Monoid` for the left side
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var getWitherable = function (M) {
                            var F_ = getFilterable(M);
                            var C = getCompactable(M);
                            return {
                                URI: URI,
                                _E: undefined,
                                map: _map,
                                compact: F_.compact,
                                separate: F_.separate,
                                filter: F_.filter,
                                filterMap: F_.filterMap,
                                partition: F_.partition,
                                partitionMap: F_.partitionMap,
                                traverse: _traverse,
                                sequence: sequence,
                                reduce: _reduce,
                                foldMap: _foldMap,
                                reduceRight: _reduceRight,
                                wither: Object(_Witherable__WEBPACK_IMPORTED_MODULE_9__["witherDefault"])(Traversable, C),
                                wilt: Object(_Witherable__WEBPACK_IMPORTED_MODULE_9__["wiltDefault"])(Traversable, C)
                            };
                        };
                        /**
                         * The default [`Applicative`](#applicative) instance returns the first error, if you want to
                         * get all errors you need to provide a way to concatenate them via a `Semigroup`.
                         *
                         * @example
                         * import * as A from 'fp-ts/Apply'
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as S from 'fp-ts/Semigroup'
                         * import * as string from 'fp-ts/string'
                         *
                         * const parseString = (u: unknown): E.Either<string, string> =>
                         *   typeof u === 'string' ? E.right(u) : E.left('not a string')
                         *
                         * const parseNumber = (u: unknown): E.Either<string, number> =>
                         *   typeof u === 'number' ? E.right(u) : E.left('not a number')
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age: number
                         * }
                         *
                         * const parsePerson = (
                         *   input: Record<string, unknown>
                         * ): E.Either<string, Person> =>
                         *   pipe(
                         *     E.Do,
                         *     E.apS('name', parseString(input.name)),
                         *     E.apS('age', parseNumber(input.age))
                         *   )
                         *
                         * assert.deepStrictEqual(parsePerson({}), E.left('not a string')) // <= first error
                         *
                         * const Applicative = E.getApplicativeValidation(
                         *   pipe(string.Semigroup, S.intercalate(', '))
                         * )
                         *
                         * const apS = A.apS(Applicative)
                         *
                         * const parsePersonAll = (
                         *   input: Record<string, unknown>
                         * ): E.Either<string, Person> =>
                         *   pipe(
                         *     E.Do,
                         *     apS('name', parseString(input.name)),
                         *     apS('age', parseNumber(input.age))
                         *   )
                         *
                         * assert.deepStrictEqual(parsePersonAll({}), E.left('not a string, not a number')) // <= all errors
                         *
                         * @category error handling
                         * @since 2.7.0
                         */
                        var getApplicativeValidation = function (SE) {
                            return ({
                                URI: URI,
                                _E: undefined,
                                map: _map,
                                ap: function (fab, fa) {
                                    return isLeft(fab)
                                        ? isLeft(fa)
                                            ? left(SE.concat(fab.left, fa.left))
                                            : fab
                                        : isLeft(fa)
                                            ? fa
                                            : right(fab.right(fa.right));
                                },
                                of: of
                            });
                        };
                        /**
                         * The default [`Alt`](#alt) instance returns the last error, if you want to
                         * get all errors you need to provide a way to concatenate them via a `Semigroup`.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as S from 'fp-ts/Semigroup'
                         * import * as string from 'fp-ts/string'
                         *
                         * const parseString = (u: unknown): E.Either<string, string> =>
                         *   typeof u === 'string' ? E.right(u) : E.left('not a string')
                         *
                         * const parseNumber = (u: unknown): E.Either<string, number> =>
                         *   typeof u === 'number' ? E.right(u) : E.left('not a number')
                         *
                         * const parse = (u: unknown): E.Either<string, string | number> =>
                         *   pipe(
                         *     parseString(u),
                         *     E.alt<string, string | number>(() => parseNumber(u))
                         *   )
                         *
                         * assert.deepStrictEqual(parse(true), E.left('not a number')) // <= last error
                         *
                         * const Alt = E.getAltValidation(pipe(string.Semigroup, S.intercalate(', ')))
                         *
                         * const parseAll = (u: unknown): E.Either<string, string | number> =>
                         *   Alt.alt<string | number>(parseString(u), () => parseNumber(u))
                         *
                         * assert.deepStrictEqual(parseAll(true), E.left('not a string, not a number')) // <= all errors
                         *
                         * @category error handling
                         * @since 2.7.0
                         */
                        var getAltValidation = function (SE) {
                            return ({
                                URI: URI,
                                _E: undefined,
                                map: _map,
                                alt: function (me, that) {
                                    if (isRight(me)) {
                                        return me;
                                    }
                                    var ea = that();
                                    return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;
                                }
                            });
                        };
                        /**
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return isLeft(fa) ? fa : right(f(fa.right));
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * Maps the `Right` value of this `Either` to the specified constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        var as = Object(_function__WEBPACK_IMPORTED_MODULE_5__["dual"])(2, Object(_Functor__WEBPACK_IMPORTED_MODULE_6__["as"])(Functor));
                        /**
                         * Maps the `Right` value of this `Either` to the void constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        var asUnit = Object(_Functor__WEBPACK_IMPORTED_MODULE_6__["asUnit"])(Functor);
                        /**
                         * @category constructors
                         * @since 2.7.0
                         */
                        var of = right;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Pointed = {
                            URI: URI,
                            of: of
                        };
                        /**
                         * Less strict version of [`ap`](#ap).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.8.0
                         */
                        var apW = function (fa) {
                            return function (fab) {
                                return isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right));
                            };
                        };
                        /**
                         * @since 2.0.0
                         */
                        var ap = apW;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Apply = {
                            URI: URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Applicative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Chain = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Monad = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap
                        };
                        /**
                         * Left-associative fold of a structure.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         *
                         * const startWith = 'prefix'
                         * const concat = (a: string, b: string) => `${a}:${b}`
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right('a'), E.reduce(startWith, concat)),
                         *   'prefix:a'
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.left('e'), E.reduce(startWith, concat)),
                         *   'prefix'
                         * )
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduce = function (b, f) {
                            return function (fa) {
                                return isLeft(fa) ? b : f(b, fa.right);
                            };
                        };
                        /**
                         * Map each element of the structure to a monoid, and combine the results.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         * import * as S from 'fp-ts/string'
                         *
                         * const yell = (a: string) => `${a}!`
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right('a'), E.foldMap(S.Monoid)(yell)),
                         *   'a!'
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.left('e'), E.foldMap(S.Monoid)(yell)),
                         *   S.Monoid.empty
                         * )
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMap = function (M) {
                            return function (f) {
                                return function (fa) {
                                    return isLeft(fa) ? M.empty : f(fa.right);
                                };
                            };
                        };
                        /**
                         * Right-associative fold of a structure.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         *
                         * const startWith = 'postfix'
                         * const concat = (a: string, b: string) => `${a}:${b}`
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right('a'), E.reduceRight(startWith, concat)),
                         *   'a:postfix'
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.left('e'), E.reduceRight(startWith, concat)),
                         *   'postfix'
                         * )
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRight = function (b, f) {
                            return function (fa) {
                                return isLeft(fa) ? b : f(fa.right, b);
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Foldable = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as E from 'fp-ts/Either'
                         * import * as O from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right(['a']), E.traverse(O.Applicative)(RA.head)),
                         *   O.some(E.right('a'))
                         *  )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right([]), E.traverse(O.Applicative)(RA.head)),
                         *   O.none
                         * )
                         *
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            return function (f) {
                                return function (ta) {
                                    return isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right);
                                };
                            };
                        };
                        /**
                         * Evaluate each monadic action in the structure from left to right, and collect the results.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         * import * as O from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right(O.some('a')), E.sequence(O.Applicative)),
                         *   O.some(E.right('a'))
                         *  )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right(O.none), E.sequence(O.Applicative)),
                         *   O.none
                         * )
                         *
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) {
                            return function (ma) {
                                return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Traversable = {
                            URI: URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence
                        };
                        /**
                         * Map a pair of functions over the two type arguments of the bifunctor.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var bimap = function (f, g) {
                            return function (fa) {
                                return isLeft(fa) ? left(f(fa.left)) : right(g(fa.right));
                            };
                        };
                        /**
                         * Map a function over the first type argument of a bifunctor.
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        var mapLeft = function (f) {
                            return function (fa) {
                                return isLeft(fa) ? left(f(fa.left)) : fa;
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Bifunctor = {
                            URI: URI,
                            bimap: _bimap,
                            mapLeft: _mapLeft
                        };
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the error and the return types will be merged.
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (fa) {
                                return isLeft(fa) ? that() : fa;
                            };
                        };
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `Either` returns the left-most non-`Left` value (or the right-most `Left` value if both values are `Left`).
                         *
                         * | x        | y        | pipe(x, alt(() => y) |
                         * | -------- | -------- | -------------------- |
                         * | left(a)  | left(b)  | left(b)              |
                         * | left(a)  | right(2) | right(2)             |
                         * | right(1) | left(b)  | right(1)             |
                         * | right(1) | right(2) | right(1)             |
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.left('a'),
                         *     E.alt(() => E.left('b'))
                         *   ),
                         *   E.left('b')
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.left('a'),
                         *     E.alt(() => E.right(2))
                         *   ),
                         *   E.right(2)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(1),
                         *     E.alt(() => E.left('b'))
                         *   ),
                         *   E.right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(1),
                         *     E.alt(() => E.right(2))
                         *   ),
                         *   E.right(1)
                         * )
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        var alt = altW;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alt = {
                            URI: URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @since 2.0.0
                         */
                        var extend = function (f) {
                            return function (wa) {
                                return isLeft(wa) ? wa : right(f(wa));
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Extend = {
                            URI: URI,
                            map: _map,
                            extend: _extend
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var ChainRec = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap,
                            chainRec: _chainRec
                        };
                        /**
                         * @since 2.6.3
                         */
                        var throwError = left;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var MonadThrow = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap,
                            throwError: throwError
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var FromEither = {
                            URI: URI,
                            fromEither: _function__WEBPACK_IMPORTED_MODULE_5__["identity"]
                        };
                        /**
                         * @example
                         * import { fromPredicate, left, right } from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     1,
                         *     fromPredicate(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     -1,
                         *     fromPredicate(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   left('error')
                         * )
                         *
                         * @category lifting
                         * @since 2.0.0
                         */
                        var fromPredicate = /*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_4__["fromPredicate"])(FromEither);
                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as O from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     O.some(1),
                         *     E.fromOption(() => 'error')
                         *   ),
                         *   E.right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     O.none,
                         *     E.fromOption(() => 'error')
                         *   ),
                         *   E.left('error')
                         * )
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromOption =
/*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_4__["fromOption"])(FromEither);
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * Returns `true` if the either is an instance of `Left`, `false` otherwise.
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        var isLeft = _internal__WEBPACK_IMPORTED_MODULE_7__["isLeft"];
                        /**
                         * Returns `true` if the either is an instance of `Right`, `false` otherwise.
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        var isRight = _internal__WEBPACK_IMPORTED_MODULE_7__["isRight"];
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchW = function (onLeft, onRight) {
                            return function (ma) {
                                return isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);
                            };
                        };
                        /**
                         * Alias of [`matchW`](#matchw).
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var foldW = matchW;
                        /**
                         * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,
                         * if the value is a `Right` the inner value is applied to the second function.
                         *
                         * @example
                         * import { match, left, right } from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * function onLeft(errors: Array<string>): string {
                         *   return `Errors: ${errors.join(', ')}`
                         * }
                         *
                         * function onRight(value: number): string {
                         *   return `Ok: ${value}`
                         * }
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     right(1),
                         *     match(onLeft, onRight)
                         *   ),
                         *   'Ok: 1'
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     left(['error 1', 'error 2']),
                         *     match(onLeft, onRight)
                         *   ),
                         *   'Errors: error 1, error 2'
                         * )
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var match = matchW;
                        /**
                         * Alias of [`match`](#match).
                         *
                         * @category pattern matching
                         * @since 2.0.0
                         */
                        var fold = match;
                        /**
                         * Less strict version of [`getOrElse`](#getorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return type will be merged.
                         *
                         * @category error handling
                         * @since 2.6.0
                         */
                        var getOrElseW = function (onLeft) {
                            return function (ma) {
                                return isLeft(ma) ? onLeft(ma.left) : ma.right;
                            };
                        };
                        /**
                         * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.
                         *
                         * @example
                         * import { getOrElse, left, right } from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     right(1),
                         *     getOrElse(() => 0)
                         *   ),
                         *   1
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     left('error'),
                         *     getOrElse(() => 0)
                         *   ),
                         *   0
                         * )
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        var getOrElse = getOrElseW;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_6__["flap"])(Functor);
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.0.0
                         */
                        var apFirst = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apFirst"])(Apply);
                        /**
                         * Less strict version of [`apFirst`](#apfirst)
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.12.0
                         */
                        var apFirstW = apFirst;
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.0.0
                         */
                        var apSecond = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apSecond"])(Apply);
                        /**
                         * Less strict version of [`apSecond`](#apsecond)
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.12.0
                         */
                        var apSecondW = apSecond;
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category combinators
                         * @since 2.15.0
                         */
                        var tap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_5__["dual"])(2, _Chain__WEBPACK_IMPORTED_MODULE_2__["tap"](Chain));
                        /**
                         * Less strict version of [`flatten`](#flatten).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var flattenW =
/*#__PURE__*/ flatMap(_function__WEBPACK_IMPORTED_MODULE_5__["identity"]);
                        /**
                         * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))
                         * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))
                         * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))
                         *
                         * @category sequencing
                         * @since 2.0.0
                         */
                        var flatten = flattenW;
                        /**
                         * @since 2.0.0
                         */
                        var duplicate = /*#__PURE__*/ extend(_function__WEBPACK_IMPORTED_MODULE_5__["identity"]);
                        /**
                         * Use `liftOption`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        var fromOptionK =
/*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_4__["fromOptionK"])(FromEither);
                        /**
                         * Use `flatMapOption`.
                         *
                         * @category legacy
                         * @since 2.11.0
                         */
                        var chainOptionK = /*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_4__["chainOptionK"])(FromEither, Chain);
                        /**
                         * Use `flatMapOption`.
                         *
                         * @category legacy
                         * @since 2.13.2
                         */
                        var chainOptionKW = /*#__PURE__*/ chainOptionK;
                        /** @internal */
                        var _FromEither = {
                            fromEither: FromEither.fromEither
                        };
                        /**
                         * @category lifting
                         * @since 2.15.0
                         */
                        var liftNullable = /*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_7__["liftNullable"](_FromEither);
                        /**
                         * @category lifting
                         * @since 2.15.0
                         */
                        var liftOption = /*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_7__["liftOption"](_FromEither);
                        /** @internal */
                        var _FlatMap = {
                            flatMap: flatMap
                        };
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        var flatMapNullable = /*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_7__["flatMapNullable"](_FromEither, _FlatMap);
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        var flatMapOption = /*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_7__["flatMapOption"](_FromEither, _FlatMap);
                        /**
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(1),
                         *     E.filterOrElse(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   E.right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(-1),
                         *     E.filterOrElse(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   E.left('error')
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.left('a'),
                         *     E.filterOrElse(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   E.left('a')
                         * )
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filterOrElse = /*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_4__["filterOrElse"])(FromEither, Chain);
                        /**
                         * Less strict version of [`filterOrElse`](#filterorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category filtering
                         * @since 2.9.0
                         */
                        var filterOrElseW = filterOrElse;
                        /**
                         * Returns a `Right` if is a `Left` (and vice versa).
                         *
                         * @since 2.0.0
                         */
                        var swap = function (ma) { return (isLeft(ma) ? right(ma.left) : left(ma.right)); };
                        /**
                         * Less strict version of [`orElse`](#orelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @category error handling
                         * @since 2.10.0
                         */
                        var orElseW = function (onLeft) {
                            return function (ma) {
                                return isLeft(ma) ? onLeft(ma.left) : ma;
                            };
                        };
                        /**
                         * Useful for recovering from errors.
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        var orElse = orElseW;
                        /**
                         * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use
                         * the provided default as a `Left`.
                         *
                         * @example
                         * import { fromNullable, left, right } from 'fp-ts/Either'
                         *
                         * const parse = fromNullable('nully')
                         *
                         * assert.deepStrictEqual(parse(1), right(1))
                         * assert.deepStrictEqual(parse(null), left('nully'))
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromNullable = function (e) {
                            return function (a) {
                                return a == null ? left(e) : right(a);
                            };
                        };
                        /**
                         * Constructs a new `Either` from a function that might throw.
                         *
                         * See also [`tryCatchK`](#trycatchk).
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         *
                         * const unsafeHead = <A>(as: ReadonlyArray<A>): A => {
                         *   if (as.length > 0) {
                         *     return as[0]
                         *   } else {
                         *     throw new Error('empty array')
                         *   }
                         * }
                         *
                         * const head = <A>(as: ReadonlyArray<A>): E.Either<Error, A> =>
                         *   E.tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))
                         *
                         * assert.deepStrictEqual(head([]), E.left(new Error('empty array')))
                         * assert.deepStrictEqual(head([1, 2, 3]), E.right(1))
                         *
                         * @category interop
                         * @since 2.0.0
                         */
                        var tryCatch = function (f, onThrow) {
                            try {
                                return right(f());
                            }
                            catch (e) {
                                return left(onThrow(e));
                            }
                        };
                        /**
                         * Converts a function that may throw to one returning a `Either`.
                         *
                         * @category interop
                         * @since 2.10.0
                         */
                        var tryCatchK = function (f, onThrow) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return tryCatch(function () { return f.apply(void 0, a); }, onThrow);
                            };
                        };
                        /**
                         * Use `liftNullable`.
                         *
                         * @category legacy
                         * @since 2.9.0
                         */
                        var fromNullableK = function (e) {
                            var from = fromNullable(e);
                            return function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_5__["flow"])(f, from); };
                        };
                        /**
                         * Use `flatMapNullable`.
                         *
                         * @category legacy
                         * @since 2.9.0
                         */
                        var chainNullableK = function (e) {
                            var from = fromNullableK(e);
                            return function (f) { return flatMap(from(f)); };
                        };
                        /**
                         * @category conversions
                         * @since 2.10.0
                         */
                        var toUnion = /*#__PURE__*/ foldW(_function__WEBPACK_IMPORTED_MODULE_5__["identity"], _function__WEBPACK_IMPORTED_MODULE_5__["identity"]);
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Default value for the `onError` argument of `tryCatch`
                         *
                         * @since 2.0.0
                         */
                        function toError(e) {
                            return e instanceof Error ? e : new Error(String(e));
                        }
                        function elem(E) {
                            return function (a, ma) {
                                if (ma === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (ma) { return elemE_1(a, ma); };
                                }
                                return isLeft(ma) ? false : E.equals(a, ma.right);
                            };
                        }
                        /**
                         * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.
                         *
                         * @example
                         * import { exists, left, right } from 'fp-ts/Either'
                         *
                         * const gt2 = exists((n: number) => n > 2)
                         *
                         * assert.strictEqual(gt2(left('a')), false)
                         * assert.strictEqual(gt2(right(1)), false)
                         * assert.strictEqual(gt2(right(3)), true)
                         *
                         * @since 2.0.0
                         */
                        var exists = function (predicate) {
                            return function (ma) {
                                return isLeft(ma) ? false : predicate(ma.right);
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        var Do = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_7__["emptyRecord"]);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindTo = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_6__["bindTo"])(Functor);
                        var let_ = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_6__["let"])(Functor);

                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bind = /*#__PURE__*/ _Chain__WEBPACK_IMPORTED_MODULE_2__["bind"](Chain);
                        /**
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindW = bind;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apS = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apS"])(Apply);
                        /**
                         * Less strict version of [`apS`](#aps).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apSW = apS;
                        /**
                         * @since 2.11.0
                         */
                        var ApT = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_7__["emptyReadonlyArray"]);
                        // -------------------------------------------------------------------------------------
                        // array utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndex = function (f) {
                            return function (as) {
                                var e = f(0, _internal__WEBPACK_IMPORTED_MODULE_7__["head"](as));
                                if (isLeft(e)) {
                                    return e;
                                }
                                var out = [e.right];
                                for (var i = 1; i < as.length; i++) {
                                    var e_1 = f(i, as[i]);
                                    if (isLeft(e_1)) {
                                        return e_1;
                                    }
                                    out.push(e_1.right);
                                }
                                return right(out);
                            };
                        };
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndex = function (f) {
                            var g = traverseReadonlyNonEmptyArrayWithIndex(f);
                            return function (as) { return (_internal__WEBPACK_IMPORTED_MODULE_7__["isNonEmpty"](as) ? g(as) : ApT); };
                        };
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArray = function (f) { return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); }); };
                        /**
                         * Equivalent to `ReadonlyArray#sequence(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var sequenceArray =
/*#__PURE__*/ traverseArray(_function__WEBPACK_IMPORTED_MODULE_5__["identity"]);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.6.0
                         */
                        var chainW = flatMap;
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chain = flatMap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chainFirst = tap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.8.0
                         */
                        var chainFirstW = tap;
                        /**
                         * Use [`parse`](./Json.ts.html#parse) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function parseJSON(s, onError) {
                            return tryCatch(function () { return JSON.parse(s); }, onError);
                        }
                        /**
                         * Use [`stringify`](./Json.ts.html#stringify) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var stringifyJSON = function (u, onError) {
                            return tryCatch(function () {
                                var s = JSON.stringify(u);
                                if (typeof s !== 'string') {
                                    throw new Error('Converting unsupported structure to JSON');
                                }
                                return s;
                            }, onError);
                        };
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `E.Functor` instead of `E.either`
                         * (where `E` is from `import E from 'fp-ts/Either'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var either = {
                            URI: URI,
                            map: _map,
                            of: of,
                            ap: _ap,
                            chain: flatMap,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            bimap: _bimap,
                            mapLeft: _mapLeft,
                            alt: _alt,
                            extend: _extend,
                            chainRec: _chainRec,
                            throwError: throwError
                        };
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values
                         * are concatenated using the provided `Semigroup`
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getApplySemigroup =
/*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["getApplySemigroup"])(Apply);
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getApplyMonoid =
/*#__PURE__*/ Object(_Applicative__WEBPACK_IMPORTED_MODULE_0__["getApplicativeMonoid"])(Applicative);
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getValidationSemigroup = function (SE, SA) {
                            return Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["getApplySemigroup"])(getApplicativeValidation(SE))(SA);
                        };
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getValidationMonoid = function (SE, MA) {
                            return Object(_Applicative__WEBPACK_IMPORTED_MODULE_0__["getApplicativeMonoid"])(getApplicativeValidation(SE))(MA);
                        };
                        /**
                         * Use [`getApplicativeValidation`](#getapplicativevalidation) and [`getAltValidation`](#getaltvalidation) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function getValidation(SE) {
                            var ap = getApplicativeValidation(SE).ap;
                            var alt = getAltValidation(SE).alt;
                            return {
                                URI: URI,
                                _E: undefined,
                                map: _map,
                                of: of,
                                chain: flatMap,
                                bimap: _bimap,
                                mapLeft: _mapLeft,
                                reduce: _reduce,
                                foldMap: _foldMap,
                                reduceRight: _reduceRight,
                                extend: _extend,
                                traverse: _traverse,
                                sequence: sequence,
                                chainRec: _chainRec,
                                throwError: throwError,
                                ap: ap,
                                alt: alt
                            };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Eq.js":
/*!**************************************!*\
  !*** ./node_modules/fp-ts/es6/Eq.js ***!
  \**************************************/
/*! exports provided: fromEquals, struct, tuple, contramap, URI, eqStrict, getSemigroup, getMonoid, Contravariant, getTupleEq, getStructEq, strictEqual, eq, eqBoolean, eqString, eqNumber, eqDate */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEquals", function () { return fromEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "struct", function () { return struct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function () { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contramap", function () { return contramap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqStrict", function () { return eqStrict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contravariant", function () { return Contravariant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTupleEq", function () { return getTupleEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStructEq", function () { return getStructEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strictEqual", function () { return strictEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eq", function () { return eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqBoolean", function () { return eqBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqString", function () { return eqString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqNumber", function () { return eqNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eqDate", function () { return eqDate; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");

                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var fromEquals = function (equals) {
                            return ({
                                equals: function (x, y) { return x === y || equals(x, y); }
                            });
                        };
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.10.0
                         */
                        var struct = function (eqs) {
                            return fromEquals(function (first, second) {
                                for (var key in eqs) {
                                    if (!eqs[key].equals(first[key], second[key])) {
                                        return false;
                                    }
                                }
                                return true;
                            });
                        };
                        /**
                         * Given a tuple of `Eq`s returns a `Eq` for the tuple
                         *
                         * @example
                         * import { tuple } from 'fp-ts/Eq'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import * as B from 'fp-ts/boolean'
                         *
                         * const E = tuple(S.Eq, N.Eq, B.Eq)
                         * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)
                         * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)
                         * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)
                         * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)
                         *
                         * @since 2.10.0
                         */
                        var tuple = function () {
                            var eqs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                eqs[_i] = arguments[_i];
                            }
                            return fromEquals(function (first, second) { return eqs.every(function (E, i) { return E.equals(first[i], second[i]); }); });
                        };
                        /* istanbul ignore next */
                        var contramap_ = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, contramap(f)); };
                        /**
                         * A typical use case for `contramap` would be like, given some `User` type, to construct an `Eq<User>`.
                         *
                         * We can do so with a function from `User -> X` where `X` is some value that we know how to compare
                         * for equality (meaning we have an `Eq<X>`)
                         *
                         * For example, given the following `User` type, we want to construct an `Eq<User>` that just looks at the `key` field
                         * for each user (since it's known to be unique).
                         *
                         * If we have a way of comparing `UUID`s for equality (`eqUUID: Eq<UUID>`) and we know how to go from `User -> UUID`,
                         * using `contramap` we can do this
                         *
                         * @example
                         * import { contramap, Eq } from 'fp-ts/Eq'
                         * import { pipe } from 'fp-ts/function'
                         * import * as S from 'fp-ts/string'
                         *
                         * type UUID = string
                         *
                         * interface User {
                         *   readonly key: UUID
                         *   readonly firstName: string
                         *   readonly lastName: string
                         * }
                         *
                         * const eqUUID: Eq<UUID> = S.Eq
                         *
                         * const eqUserByKey: Eq<User> = pipe(
                         *   eqUUID,
                         *   contramap((user) => user.key)
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   eqUserByKey.equals(
                         *     { key: 'k1', firstName: 'a1', lastName: 'b1' },
                         *     { key: 'k2', firstName: 'a1', lastName: 'b1' }
                         *   ),
                         *   false
                         * )
                         * assert.deepStrictEqual(
                         *   eqUserByKey.equals(
                         *     { key: 'k1', firstName: 'a1', lastName: 'b1' },
                         *     { key: 'k1', firstName: 'a2', lastName: 'b1' }
                         *   ),
                         *   true
                         * )
                         *
                         * @since 2.0.0
                         */
                        var contramap = function (f) {
                            return function (fa) {
                                return fromEquals(function (x, y) { return fa.equals(f(x), f(y)); });
                            };
                        };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'Eq';
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        var eqStrict = {
                            equals: function (a, b) { return a === b; }
                        };
                        var empty = {
                            equals: function () { return true; }
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: function (x, y) { return fromEquals(function (a, b) { return x.equals(a, b) && y.equals(a, b); }); }
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getMonoid = function () {
                            return ({
                                concat: getSemigroup().concat,
                                empty: empty
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Contravariant = {
                            URI: URI,
                            contramap: contramap_
                        };
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use [`tuple`](#tuple) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getTupleEq = tuple;
                        /**
                         * Use [`struct`](#struct) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getStructEq = struct;
                        /**
                         * Use [`eqStrict`](#eqstrict) instead
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var strictEqual = eqStrict.equals;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Contravariant` instance, pass `E.Contravariant` instead of `E.eq`
                         * (where `E` is from `import E from 'fp-ts/Eq'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var eq = Contravariant;
                        /**
                         * Use [`Eq`](./boolean.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var eqBoolean = eqStrict;
                        /**
                         * Use [`Eq`](./string.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var eqString = eqStrict;
                        /**
                         * Use [`Eq`](./number.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var eqNumber = eqStrict;
                        /**
                         * Use [`Eq`](./Date.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var eqDate = {
                            equals: function (first, second) { return first.valueOf() === second.valueOf(); }
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/FromEither.js":
/*!**********************************************!*\
  !*** ./node_modules/fp-ts/es6/FromEither.js ***!
  \**********************************************/
/*! exports provided: fromOption, fromPredicate, fromOptionK, chainOptionK, fromEitherK, chainEitherK, chainFirstEitherK, filterOrElse, tapEither */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOption", function () { return fromOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPredicate", function () { return fromPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOptionK", function () { return fromOptionK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainOptionK", function () { return chainOptionK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEitherK", function () { return fromEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainEitherK", function () { return chainEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirstEitherK", function () { return chainFirstEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterOrElse", function () { return filterOrElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tapEither", function () { return tapEither; });
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
                        /**
                         * The `FromEither` type class represents those data types which support errors.
                         *
                         * @since 2.10.0
                         */



                        function fromOption(F) {
                            return function (onNone) { return function (ma) { return F.fromEither(_internal__WEBPACK_IMPORTED_MODULE_2__["isNone"](ma) ? _internal__WEBPACK_IMPORTED_MODULE_2__["left"](onNone()) : _internal__WEBPACK_IMPORTED_MODULE_2__["right"](ma.value)); }; };
                        }
                        function fromPredicate(F) {
                            return function (predicate, onFalse) {
                                return function (a) {
                                    return F.fromEither(predicate(a) ? _internal__WEBPACK_IMPORTED_MODULE_2__["right"](a) : _internal__WEBPACK_IMPORTED_MODULE_2__["left"](onFalse(a)));
                                };
                            };
                        }
                        function fromOptionK(F) {
                            var fromOptionF = fromOption(F);
                            return function (onNone) {
                                var from = fromOptionF(onNone);
                                return function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(f, from); };
                            };
                        }
                        function chainOptionK(F, M) {
                            var fromOptionKF = fromOptionK(F);
                            return function (onNone) {
                                var from = fromOptionKF(onNone);
                                return function (f) { return function (ma) { return M.chain(ma, from(f)); }; };
                            };
                        }
                        function fromEitherK(F) {
                            return function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(f, F.fromEither); };
                        }
                        function chainEitherK(F, M) {
                            var fromEitherKF = fromEitherK(F);
                            return function (f) { return function (ma) { return M.chain(ma, fromEitherKF(f)); }; };
                        }
                        function chainFirstEitherK(F, M) {
                            var tapEitherM = tapEither(F, M);
                            return function (f) { return function (ma) { return tapEitherM(ma, f); }; };
                        }
                        function filterOrElse(F, M) {
                            return function (predicate, onFalse) {
                                return function (ma) {
                                    return M.chain(ma, function (a) { return F.fromEither(predicate(a) ? _internal__WEBPACK_IMPORTED_MODULE_2__["right"](a) : _internal__WEBPACK_IMPORTED_MODULE_2__["left"](onFalse(a))); });
                                };
                            };
                        }
                        /** @internal */
                        function tapEither(F, M) {
                            var fromEither = fromEitherK(F);
                            var tapM = Object(_Chain__WEBPACK_IMPORTED_MODULE_0__["tap"])(M);
                            return function (self, f) { return tapM(self, fromEither(f)); };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/FromIO.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/es6/FromIO.js ***!
  \******************************************/
/*! exports provided: fromIOK, chainIOK, chainFirstIOK, tapIO */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromIOK", function () { return fromIOK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainIOK", function () { return chainIOK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirstIOK", function () { return chainFirstIOK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tapIO", function () { return tapIO; });
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
                        /**
                         * Lift a computation from the `IO` monad
                         *
                         * @since 2.10.0
                         */


                        function fromIOK(F) {
                            return function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(f, F.fromIO); };
                        }
                        function chainIOK(F, M) {
                            return function (f) {
                                var g = Object(_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(f, F.fromIO);
                                return function (first) { return M.chain(first, g); };
                            };
                        }
                        function chainFirstIOK(F, M) {
                            var tapIOM = tapIO(F, M);
                            return function (f) { return function (first) { return tapIOM(first, f); }; };
                        }
                        /** @internal */
                        function tapIO(F, M) {
                            var chainFirstM = Object(_Chain__WEBPACK_IMPORTED_MODULE_0__["tap"])(M);
                            return function (self, f) { return chainFirstM(self, Object(_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(f, F.fromIO)); };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Functor.js":
/*!*******************************************!*\
  !*** ./node_modules/fp-ts/es6/Functor.js ***!
  \*******************************************/
/*! exports provided: map, flap, bindTo, let, getFunctorComposition, as, asUnit */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFunctorComposition", function () { return getFunctorComposition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "as", function () { return as; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asUnit", function () { return asUnit; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
                        /**
                         * A `Functor` is a type constructor which supports a mapping operation `map`.
                         *
                         * `map` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return types use the type
                         * constructor `f` to represent some computational context.
                         *
                         * Instances must satisfy the following laws:
                         *
                         * 1. Identity: `F.map(fa, a => a) <-> fa`
                         * 2. Composition: `F.map(fa, a => bc(ab(a))) <-> F.map(F.map(fa, ab), bc)`
                         *
                         * @since 2.0.0
                         */

                        function map(F, G) {
                            return function (f) { return function (fa) { return F.map(fa, function (ga) { return G.map(ga, f); }); }; };
                        }
                        function flap(F) {
                            return function (a) { return function (fab) { return F.map(fab, function (f) { return f(a); }); }; };
                        }
                        function bindTo(F) {
                            return function (name) {
                                return function (fa) {
                                    return F.map(fa, function (a) {
                                        var _a;
                                        return (_a = {}, _a[name] = a, _a);
                                    });
                                };
                            };
                        }
                        function let_(F) {
                            return function (name, f) {
                                return function (fa) {
                                    return F.map(fa, function (a) {
                                        var _a;
                                        return Object.assign({}, a, (_a = {}, _a[name] = f(a), _a));
                                    });
                                };
                            };
                        }

                        /** @deprecated */
                        function getFunctorComposition(F, G) {
                            var _map = map(F, G);
                            return {
                                map: function (fga, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fga, _map(f)); }
                            };
                        }
                        /** @internal */
                        function as(F) {
                            return function (self, b) { return F.map(self, function () { return b; }); };
                        }
                        /** @internal */
                        function asUnit(F) {
                            var asM = as(F);
                            return function (self) { return asM(self, undefined); };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Json.js":
/*!****************************************!*\
  !*** ./node_modules/fp-ts/es6/Json.js ***!
  \****************************************/
/*! exports provided: parse, stringify */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parse", function () { return parse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stringify", function () { return stringify; });
/* harmony import */ var _Either__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Either */ "./node_modules/fp-ts/es6/Either.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
                        /**
                         * @since 2.10.0
                         */


                        /**
                         * Converts a JavaScript Object Notation (JSON) string into a `Json` type.
                         *
                         * @example
                         * import * as J from 'fp-ts/Json'
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('{"a":1}', J.parse), E.right({ a: 1 }))
                         * assert.deepStrictEqual(pipe('{"a":}', J.parse), E.left(new SyntaxError('Unexpected token } in JSON at position 5')))
                         *
                         * @since 2.10.0
                         */
                        var parse = function (s) { return Object(_Either__WEBPACK_IMPORTED_MODULE_0__["tryCatch"])(function () { return JSON.parse(s); }, _function__WEBPACK_IMPORTED_MODULE_1__["identity"]); };
                        /**
                         * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import * as J from 'fp-ts/Json'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(J.stringify({ a: 1 }), E.right('{"a":1}'))
                         * const circular: any = { ref: null }
                         * circular.ref = circular
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     J.stringify(circular),
                         *     E.mapLeft(e => e instanceof Error && e.message.includes('Converting circular structure to JSON'))
                         *   ),
                         *   E.left(true)
                         * )
                         *
                         *  @since 2.10.0
                         */
                        var stringify = function (a) {
                            return Object(_Either__WEBPACK_IMPORTED_MODULE_0__["tryCatch"])(function () {
                                var s = JSON.stringify(a);
                                if (typeof s !== 'string') {
                                    throw new Error('Converting unsupported structure to JSON');
                                }
                                return s;
                            }, _function__WEBPACK_IMPORTED_MODULE_1__["identity"]);
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Magma.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/es6/Magma.js ***!
  \*****************************************/
/*! exports provided: reverse, filterFirst, filterSecond, endo, concatAll */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function () { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterFirst", function () { return filterFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterSecond", function () { return filterSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endo", function () { return endo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatAll", function () { return concatAll; });
                        /**
                         * A `Magma` is a pair `(A, concat)` in which `A` is a non-empty set and `concat` is a binary operation on `A`
                         *
                         * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.
                         *
                         * @since 2.0.0
                         */
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * The dual of a `Magma`, obtained by swapping the arguments of `concat`.
                         *
                         * @example
                         * import { reverse, concatAll } from 'fp-ts/Magma'
                         * import * as N from 'fp-ts/number'
                         *
                         * const subAll = concatAll(reverse(N.MagmaSub))(0)
                         *
                         * assert.deepStrictEqual(subAll([1, 2, 3]), 2)
                         *
                         * @since 2.11.0
                         */
                        var reverse = function (M) {
                            return ({
                                concat: function (first, second) { return M.concat(second, first); }
                            });
                        };
                        /**
                         * @since 2.11.0
                         */
                        var filterFirst = function (predicate) {
                            return function (M) {
                                return ({
                                    concat: function (first, second) { return (predicate(first) ? M.concat(first, second) : second); }
                                });
                            };
                        };
                        /**
                         * @since 2.11.0
                         */
                        var filterSecond = function (predicate) {
                            return function (M) {
                                return ({
                                    concat: function (first, second) { return (predicate(second) ? M.concat(first, second) : first); }
                                });
                            };
                        };
                        /**
                         * @since 2.11.0
                         */
                        var endo = function (f) {
                            return function (M) {
                                return ({
                                    concat: function (first, second) { return M.concat(f(first), f(second)); }
                                });
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Given a sequence of `as`, concat them and return the total.
                         *
                         * If `as` is empty, return the provided `startWith` value.
                         *
                         * @example
                         * import { concatAll } from 'fp-ts/Magma'
                         * import * as N from 'fp-ts/number'
                         *
                         * const subAll = concatAll(N.MagmaSub)(0)
                         *
                         * assert.deepStrictEqual(subAll([1, 2, 3]), -6)
                         *
                         * @since 2.11.0
                         */
                        var concatAll = function (M) {
                            return function (startWith) {
                                return function (as) {
                                    return as.reduce(function (a, acc) { return M.concat(a, acc); }, startWith);
                                };
                            };
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/NonEmptyArray.js":
/*!*************************************************!*\
  !*** ./node_modules/fp-ts/es6/NonEmptyArray.js ***!
  \*************************************************/
/*! exports provided: isNonEmpty, isOutOfBound, prependW, prepend, appendW, append, unsafeInsertAt, unsafeUpdateAt, uniq, sortBy, union, rotate, fromReadonlyNonEmptyArray, fromArray, makeBy, replicate, range, unprepend, unappend, concatW, concat, reverse, group, groupBy, sort, insertAt, updateAt, modifyAt, copy, of, zipWith, zip, unzip, prependAll, intersperse, foldMapWithIndex, foldMap, chainWithIndex, chop, splitAt, chunksOf, altW, alt, ap, flatMap, extend, duplicate, flatten, map, mapWithIndex, reduce, reduceWithIndex, reduceRight, reduceRightWithIndex, traverse, sequence, traverseWithIndex, extract, URI, getShow, getSemigroup, getEq, getUnionSemigroup, Functor, flap, Pointed, FunctorWithIndex, Apply, apFirst, apSecond, Applicative, Chain, chainFirst, Monad, Foldable, FoldableWithIndex, Traversable, TraversableWithIndex, Alt, Comonad, Do, bindTo, let, bind, apS, head, tail, last, init, min, max, concatAll, matchLeft, matchRight, modifyHead, updateHead, modifyLast, updateLast, intercalate, chain, groupSort, filter, filterWithIndex, uncons, unsnoc, cons, snoc, prependToAll, fold, nonEmptyArray */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNonEmpty", function () { return isNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOutOfBound", function () { return isOutOfBound; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependW", function () { return prependW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function () { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendW", function () { return appendW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function () { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeInsertAt", function () { return unsafeInsertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeUpdateAt", function () { return unsafeUpdateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniq", function () { return uniq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortBy", function () { return sortBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "union", function () { return union; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function () { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromReadonlyNonEmptyArray", function () { return fromReadonlyNonEmptyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromArray", function () { return fromArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeBy", function () { return makeBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replicate", function () { return replicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function () { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unprepend", function () { return unprepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unappend", function () { return unappend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatW", function () { return concatW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function () { return concat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function () { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function () { return group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupBy", function () { return groupBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sort", function () { return sort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAt", function () { return insertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateAt", function () { return updateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyAt", function () { return modifyAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "copy", function () { return copy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function () { return of; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipWith", function () { return zipWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function () { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unzip", function () { return unzip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependAll", function () { return prependAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersperse", function () { return intersperse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMapWithIndex", function () { return foldMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainWithIndex", function () { return chainWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chop", function () { return chop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitAt", function () { return splitAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chunksOf", function () { return chunksOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "altW", function () { return altW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function () { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function () { return flatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function () { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicate", function () { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function () { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapWithIndex", function () { return mapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceWithIndex", function () { return reduceWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRightWithIndex", function () { return reduceRightWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseWithIndex", function () { return traverseWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extract", function () { return extract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionSemigroup", function () { return getUnionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pointed", function () { return Pointed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctorWithIndex", function () { return FunctorWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Apply", function () { return Apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Applicative", function () { return Applicative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chain", function () { return Chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monad", function () { return Monad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foldable", function () { return Foldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FoldableWithIndex", function () { return FoldableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Traversable", function () { return Traversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraversableWithIndex", function () { return TraversableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alt", function () { return Alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Comonad", function () { return Comonad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Do", function () { return Do; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "head", function () { return head; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tail", function () { return tail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "last", function () { return last; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function () { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function () { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function () { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatAll", function () { return concatAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchLeft", function () { return matchLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRight", function () { return matchRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyHead", function () { return modifyHead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateHead", function () { return updateHead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyLast", function () { return modifyLast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateLast", function () { return updateLast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercalate", function () { return intercalate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupSort", function () { return groupSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterWithIndex", function () { return filterWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uncons", function () { return uncons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsnoc", function () { return unsnoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cons", function () { return cons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snoc", function () { return snoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependToAll", function () { return prependToAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fold", function () { return fold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nonEmptyArray", function () { return nonEmptyArray; });
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _Ord__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Ord */ "./node_modules/fp-ts/es6/Ord.js");
/* harmony import */ var _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ReadonlyNonEmptyArray */ "./node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js");
                        var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };







                        // -------------------------------------------------------------------------------------
                        // internal
                        // -------------------------------------------------------------------------------------
                        /**
                         * @internal
                         */
                        var isNonEmpty = function (as) { return as.length > 0; };
                        /**
                         * @internal
                         */
                        var isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };
                        /**
                         * @internal
                         */
                        var prependW = function (head) {
                            return function (tail) {
                                return __spreadArray([head], tail, true);
                            };
                        };
                        /**
                         * @internal
                         */
                        var prepend = prependW;
                        /**
                         * @internal
                         */
                        var appendW = function (end) {
                            return function (init) {
                                return __spreadArray(__spreadArray([], init, true), [end], false);
                            };
                        };
                        /**
                         * @internal
                         */
                        var append = appendW;
                        /**
                         * @internal
                         */
                        var unsafeInsertAt = function (i, a, as) {
                            if (isNonEmpty(as)) {
                                var xs = fromReadonlyNonEmptyArray(as);
                                xs.splice(i, 0, a);
                                return xs;
                            }
                            return [a];
                        };
                        /**
                         * @internal
                         */
                        var unsafeUpdateAt = function (i, a, as) {
                            var xs = fromReadonlyNonEmptyArray(as);
                            xs[i] = a;
                            return xs;
                        };
                        /**
                         * Remove duplicates from a `NonEmptyArray`, keeping the first occurrence of an element.
                         *
                         * @example
                         * import { uniq } from 'fp-ts/NonEmptyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])
                         *
                         * @since 2.11.0
                         */
                        var uniq = function (E) {
                            return function (as) {
                                if (as.length === 1) {
                                    return copy(as);
                                }
                                var out = [head(as)];
                                var rest = tail(as);
                                var _loop_1 = function (a) {
                                    if (out.every(function (o) { return !E.equals(o, a); })) {
                                        out.push(a);
                                    }
                                };
                                for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
                                    var a = rest_1[_i];
                                    _loop_1(a);
                                }
                                return out;
                            };
                        };
                        /**
                         * Sort the elements of a `NonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,
                         * etc...
                         *
                         * @example
                         * import * as NEA from 'fp-ts/NonEmptyArray'
                         * import { contramap } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Person {
                         *   name: string
                         *   age: number
                         * }
                         *
                         * const byName = pipe(S.Ord, contramap((p: Person) => p.name))
                         *
                         * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))
                         *
                         * const sortByNameByAge = NEA.sortBy([byName, byAge])
                         *
                         * const persons: NEA.NonEmptyArray<Person> = [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 },
                         *   { name: 'b', age: 2 }
                         * ]
                         *
                         * assert.deepStrictEqual(sortByNameByAge(persons), [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 2 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 }
                         * ])
                         *
                         * @since 2.11.0
                         */
                        var sortBy = function (ords) {
                            if (isNonEmpty(ords)) {
                                var M = Object(_Ord__WEBPACK_IMPORTED_MODULE_5__["getMonoid"])();
                                return sort(ords.reduce(M.concat, M.empty));
                            }
                            return copy;
                        };
                        /**
                         * @since 2.11.0
                         */
                        var union = function (E) {
                            var uniqE = uniq(E);
                            return function (second) { return function (first) { return uniqE(Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(first, concat(second))); }; };
                        };
                        /**
                         * Rotate a `NonEmptyArray` by `n` steps.
                         *
                         * @example
                         * import { rotate } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
                         * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])
                         *
                         * @since 2.11.0
                         */
                        var rotate = function (n) {
                            return function (as) {
                                var len = as.length;
                                var m = Math.round(n) % len;
                                if (isOutOfBound(Math.abs(m), as) || m === 0) {
                                    return copy(as);
                                }
                                if (m < 0) {
                                    var _a = splitAt(-m)(as), f = _a[0], s = _a[1];
                                    return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(s, concat(f));
                                }
                                else {
                                    return rotate(m - len)(as);
                                }
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category conversions
                         * @since 2.10.0
                         */
                        var fromReadonlyNonEmptyArray = _internal__WEBPACK_IMPORTED_MODULE_4__["fromReadonlyNonEmptyArray"];
                        /**
                         * Builds a `NonEmptyArray` from an `Array` returning `none` if `as` is an empty array
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromArray = function (as) { return (isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_4__["some"](as) : _internal__WEBPACK_IMPORTED_MODULE_4__["none"]); };
                        /**
                         * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.
                         *
                         * **Note**. `n` is normalized to a natural number.
                         *
                         * @example
                         * import { makeBy } from 'fp-ts/NonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const double = (n: number): number => n * 2
                         * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var makeBy = function (f) {
                            return function (n) {
                                var j = Math.max(0, Math.floor(n));
                                var out = [f(0)];
                                for (var i = 1; i < j; i++) {
                                    out.push(f(i));
                                }
                                return out;
                            };
                        };
                        /**
                         * Create a `NonEmptyArray` containing a value repeated the specified number of times.
                         *
                         * **Note**. `n` is normalized to a natural number.
                         *
                         * @example
                         * import { replicate } from 'fp-ts/NonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var replicate = function (a) { return makeBy(function () { return a; }); };
                        /**
                         * Create a `NonEmptyArray` containing a range of integers, including both endpoints.
                         *
                         * @example
                         * import { range } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var range = function (start, end) {
                            return start <= end ? makeBy(function (i) { return start + i; })(end - start + 1) : [start];
                        };
                        /**
                         * Return the tuple of the `head` and the `tail`.
                         *
                         * @example
                         * import { unprepend } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(unprepend([1, 2, 3]), [1, [2, 3]])
                         *
                         * @since 2.9.0
                         */
                        var unprepend = function (as) { return [head(as), tail(as)]; };
                        /**
                         * Return the tuple of the `init` and the `last`.
                         *
                         * @example
                         * import { unappend } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])
                         *
                         * @since 2.9.0
                         */
                        var unappend = function (as) { return [init(as), last(as)]; };
                        function concatW(second) {
                            return function (first) { return first.concat(second); };
                        }
                        function concat(x, y) {
                            return y ? x.concat(y) : function (y) { return y.concat(x); };
                        }
                        /**
                         * @since 2.0.0
                         */
                        var reverse = function (as) { return __spreadArray([last(as)], as.slice(0, -1).reverse(), true); };
                        function group(E) {
                            return function (as) {
                                var len = as.length;
                                if (len === 0) {
                                    return [];
                                }
                                var out = [];
                                var head = as[0];
                                var nea = [head];
                                for (var i = 1; i < len; i++) {
                                    var a = as[i];
                                    if (E.equals(a, head)) {
                                        nea.push(a);
                                    }
                                    else {
                                        out.push(nea);
                                        head = a;
                                        nea = [head];
                                    }
                                }
                                out.push(nea);
                                return out;
                            };
                        }
                        /**
                         * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning
                         * function on each element, and grouping the results according to values returned
                         *
                         * @example
                         * import { groupBy } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {
                         *   '1': ['a', 'b'],
                         *   '2': ['ab']
                         * })
                         *
                         * @since 2.0.0
                         */
                        var groupBy = function (f) {
                            return function (as) {
                                var out = {};
                                for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {
                                    var a = as_1[_i];
                                    var k = f(a);
                                    if (_internal__WEBPACK_IMPORTED_MODULE_4__["has"].call(out, k)) {
                                        out[k].push(a);
                                    }
                                    else {
                                        out[k] = [a];
                                    }
                                }
                                return out;
                            };
                        };
                        /**
                         * @since 2.0.0
                         */
                        var sort = function (O) {
                            return function (as) {
                                return as.slice().sort(O.compare);
                            };
                        };
                        /**
                         * @since 2.0.0
                         */
                        var insertAt = function (i, a) {
                            return function (as) {
                                return i < 0 || i > as.length ? _internal__WEBPACK_IMPORTED_MODULE_4__["none"] : _internal__WEBPACK_IMPORTED_MODULE_4__["some"](unsafeInsertAt(i, a, as));
                            };
                        };
                        /**
                         * @since 2.0.0
                         */
                        var updateAt = function (i, a) {
                            return modifyAt(i, function () { return a; });
                        };
                        /**
                         * @since 2.0.0
                         */
                        var modifyAt = function (i, f) {
                            return function (as) {
                                return isOutOfBound(i, as) ? _internal__WEBPACK_IMPORTED_MODULE_4__["none"] : _internal__WEBPACK_IMPORTED_MODULE_4__["some"](unsafeUpdateAt(i, f(as[i]), as));
                            };
                        };
                        /**
                         * @since 2.0.0
                         */
                        var copy = fromReadonlyNonEmptyArray;
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var of = function (a) { return [a]; };
                        /**
                         * @since 2.5.1
                         */
                        var zipWith = function (as, bs, f) {
                            var cs = [f(as[0], bs[0])];
                            var len = Math.min(as.length, bs.length);
                            for (var i = 1; i < len; i++) {
                                cs[i] = f(as[i], bs[i]);
                            }
                            return cs;
                        };
                        function zip(as, bs) {
                            if (bs === undefined) {
                                return function (bs) { return zip(bs, as); };
                            }
                            return zipWith(as, bs, function (a, b) { return [a, b]; });
                        }
                        /**
                         * @since 2.5.1
                         */
                        var unzip = function (abs) {
                            var fa = [abs[0][0]];
                            var fb = [abs[0][1]];
                            for (var i = 1; i < abs.length; i++) {
                                fa[i] = abs[i][0];
                                fb[i] = abs[i][1];
                            }
                            return [fa, fb];
                        };
                        /**
                         * Prepend an element to every member of an array
                         *
                         * @example
                         * import { prependAll } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.10.0
                         */
                        var prependAll = function (middle) {
                            return function (as) {
                                var out = [middle, as[0]];
                                for (var i = 1; i < as.length; i++) {
                                    out.push(middle, as[i]);
                                }
                                return out;
                            };
                        };
                        /**
                         * Places an element in between members of an array
                         *
                         * @example
                         * import { intersperse } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.9.0
                         */
                        var intersperse = function (middle) {
                            return function (as) {
                                var rest = tail(as);
                                return isNonEmpty(rest) ? Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(rest, prependAll(middle), prepend(head(as))) : copy(as);
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMapWithIndex = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["foldMapWithIndex"];
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMap = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["foldMap"];
                        /**
                         * @category sequencing
                         * @since 2.10.0
                         */
                        var chainWithIndex = function (f) {
                            return function (as) {
                                var out = fromReadonlyNonEmptyArray(f(0, head(as)));
                                for (var i = 1; i < as.length; i++) {
                                    out.push.apply(out, f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        /**
                         * @since 2.10.0
                         */
                        var chop = function (f) {
                            return function (as) {
                                var _a = f(as), b = _a[0], rest = _a[1];
                                var out = [b];
                                var next = rest;
                                while (isNonEmpty(next)) {
                                    var _b = f(next), b_1 = _b[0], rest_2 = _b[1];
                                    out.push(b_1);
                                    next = rest_2;
                                }
                                return out;
                            };
                        };
                        /**
                         * Splits a `NonEmptyArray` into two pieces, the first piece has max `n` elements.
                         *
                         * @since 2.10.0
                         */
                        var splitAt = function (n) {
                            return function (as) {
                                var m = Math.max(1, n);
                                return m >= as.length ? [copy(as), []] : [Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(as.slice(1, m), prepend(head(as))), as.slice(m)];
                            };
                        };
                        /**
                         * @since 2.10.0
                         */
                        var chunksOf = function (n) { return chop(splitAt(n)); };
                        /* istanbul ignore next */
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, map(f)); };
                        /* istanbul ignore next */
                        var _mapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, mapWithIndex(f)); };
                        /* istanbul ignore next */
                        var _ap = function (fab, fa) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fab, ap(fa)); };
                        /* istanbul ignore next */
                        var _extend = function (wa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(wa, extend(f)); };
                        /* istanbul ignore next */
                        var _reduce = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, reduce(b, f)); };
                        /* istanbul ignore next */
                        var _foldMap = function (M) {
                            var foldMapM = foldMap(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, foldMapM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRight = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, reduceRight(b, f)); };
                        /* istanbul ignore next */
                        var _traverse = function (F) {
                            var traverseF = traverse(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, alt(that)); };
                        /* istanbul ignore next */
                        var _reduceWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, reduceWithIndex(b, f));
                        };
                        /* istanbul ignore next */
                        var _foldMapWithIndex = function (M) {
                            var foldMapWithIndexM = foldMapWithIndex(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, foldMapWithIndexM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRightWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(fa, reduceRightWithIndex(b, f));
                        };
                        /* istanbul ignore next */
                        var _traverseWithIndex = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(ta, traverseWithIndexF(f)); };
                        };
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @example
                         * import * as NEA from 'fp-ts/NonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3] as NEA.NonEmptyArray<number>,
                         *     NEA.altW(() => ['a', 'b'])
                         *   ),
                         *   [1, 2, 3, 'a', 'b']
                         * )
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (as) {
                                return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(as, concatW(that()));
                            };
                        };
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `NonEmptyArray` concatenates the inputs into a single array.
                         *
                         * @example
                         * import * as NEA from 'fp-ts/NonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     NEA.alt(() => [4, 5])
                         *   ),
                         *   [1, 2, 3, 4, 5]
                         * )
                         *
                         * @category error handling
                         * @since 2.6.2
                         */
                        var alt = altW;
                        /**
                         * Apply a function to an argument under a type constructor.
                         *
                         * @since 2.0.0
                         */
                        var ap = function (as) {
                            return flatMap(function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(as, map(f)); });
                        };
                        /**
                         * @example
                         * import * as NEA from 'fp-ts/NonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     NEA.flatMap((n) => [`a${n}`, `b${n}`])
                         *   ),
                         *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']
                         * )
                         *
                         * @category sequencing
                         * @since 2.14.0
                         */
                        var flatMap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_2__["dual"])(2, function (ma, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(ma, chainWithIndex(function (i, a) { return f(a, i); }));
                        });
                        /**
                         * @since 2.0.0
                         */
                        var extend = function (f) {
                            return function (as) {
                                var next = tail(as);
                                var out = [f(as)];
                                while (isNonEmpty(next)) {
                                    out.push(f(next));
                                    next = tail(next);
                                }
                                return out;
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var duplicate = /*#__PURE__*/ extend(_function__WEBPACK_IMPORTED_MODULE_2__["identity"]);
                        /**
                         * @category sequencing
                         * @since 2.5.0
                         */
                        var flatten = /*#__PURE__*/ flatMap(_function__WEBPACK_IMPORTED_MODULE_2__["identity"]);
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) { return mapWithIndex(function (_, a) { return f(a); }); };
                        /**
                         * @category mapping
                         * @since 2.0.0
                         */
                        var mapWithIndex = function (f) {
                            return function (as) {
                                var out = [f(0, head(as))];
                                for (var i = 1; i < as.length; i++) {
                                    out.push(f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduce = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["reduce"];
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceWithIndex = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["reduceWithIndex"];
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRight = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["reduceRight"];
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRightWithIndex = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["reduceRightWithIndex"];
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) { return traverseWithIndex(F)(function (_, a) { return a; }); };
                        /**
                         * @category sequencing
                         * @since 2.6.3
                         */
                        var traverseWithIndex = function (F) {
                            return function (f) {
                                return function (as) {
                                    var out = F.map(f(0, head(as)), of);
                                    for (var i = 1; i < as.length; i++) {
                                        out = F.ap(F.map(out, function (bs) { return function (b) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(bs, append(b)); }; }), f(i, as[i]));
                                    }
                                    return out;
                                };
                            };
                        };
                        /**
                         * @since 2.7.0
                         */
                        var extract = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["head"];
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'NonEmptyArray';
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getShow = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["getShow"];
                        /**
                         * Builds a `Semigroup` instance for `NonEmptyArray`
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: concat
                            });
                        };
                        /**
                         * @example
                         * import { getEq } from 'fp-ts/NonEmptyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * const E = getEq(N.Eq)
                         * assert.strictEqual(E.equals([1, 2], [1, 2]), true)
                         * assert.strictEqual(E.equals([1, 2], [1, 3]), false)
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getEq = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["getEq"];
                        /**
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (E) {
                            var unionE = union(E);
                            return {
                                concat: function (first, second) { return unionE(second)(first); }
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_3__["flap"])(Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Pointed = {
                            URI: URI,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FunctorWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Apply = {
                            URI: URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.5.0
                         */
                        var apFirst = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apFirst"])(Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.5.0
                         */
                        var apSecond = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apSecond"])(Apply);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Applicative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Chain = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category sequencing
                         * @since 2.5.0
                         */
                        var chainFirst =
/*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["chainFirst"])(Chain);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Monad = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Foldable = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FoldableWithIndex = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Traversable = {
                            URI: URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var TraversableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alt = {
                            URI: URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Comonad = {
                            URI: URI,
                            map: _map,
                            extend: _extend,
                            extract: extract
                        };
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        var Do = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_4__["emptyRecord"]);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindTo = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_3__["bindTo"])(Functor);
                        var let_ = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_3__["let"])(Functor);

                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bind = /*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["bind"])(Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apS = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apS"])(Apply);
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.0.0
                         */
                        var head = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["head"];
                        /**
                         * @since 2.0.0
                         */
                        var tail = function (as) { return as.slice(1); };
                        /**
                         * @since 2.0.0
                         */
                        var last = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["last"];
                        /**
                         * Get all but the last element of a non empty array, creating a new array.
                         *
                         * @example
                         * import { init } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])
                         * assert.deepStrictEqual(init([1]), [])
                         *
                         * @since 2.2.0
                         */
                        var init = function (as) { return as.slice(0, -1); };
                        /**
                         * @since 2.0.0
                         */
                        var min = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["min"];
                        /**
                         * @since 2.0.0
                         */
                        var max = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["max"];
                        /**
                         * @since 2.10.0
                         */
                        var concatAll = function (S) {
                            return function (as) {
                                return as.reduce(S.concat);
                            };
                        };
                        /**
                         * Break an `Array` into its first element and remaining elements.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchLeft = function (f) {
                            return function (as) {
                                return f(head(as), tail(as));
                            };
                        };
                        /**
                         * Break an `Array` into its initial elements and the last element.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchRight = function (f) {
                            return function (as) {
                                return f(init(as), last(as));
                            };
                        };
                        /**
                         * Apply a function to the head, creating a new `NonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var modifyHead = function (f) {
                            return function (as) {
                                return __spreadArray([f(head(as))], tail(as), true);
                            };
                        };
                        /**
                         * Change the head, creating a new `NonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var updateHead = function (a) { return modifyHead(function () { return a; }); };
                        /**
                         * Apply a function to the last element, creating a new `NonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var modifyLast = function (f) {
                            return function (as) {
                                return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(init(as), append(f(last(as))));
                            };
                        };
                        /**
                         * Change the last element, creating a new `NonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var updateLast = function (a) { return modifyLast(function () { return a; }); };
                        /**
                         * Places an element in between members of a `NonEmptyArray`, then folds the results using the provided `Semigroup`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { intercalate } from 'fp-ts/NonEmptyArray'
                         *
                         * assert.deepStrictEqual(intercalate(S.Semigroup)('-')(['a', 'b', 'c']), 'a-b-c')
                         *
                         * @since 2.12.0
                         */
                        var intercalate = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["intercalate"];
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chain = flatMap;
                        function groupSort(O) {
                            var sortO = sort(O);
                            var groupO = group(O);
                            return function (as) { return (isNonEmpty(as) ? groupO(sortO(as)) : []); };
                        }
                        function filter(predicate) {
                            return filterWithIndex(function (_, a) { return predicate(a); });
                        }
                        /**
                         * Use [`filterWithIndex`](./Array.ts.html#filterwithindex) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var filterWithIndex = function (predicate) {
                            return function (as) {
                                return fromArray(as.filter(function (a, i) { return predicate(i, a); }));
                            };
                        };
                        /**
                         * Use [`unprepend`](#unprepend) instead.
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        var uncons = unprepend;
                        /**
                         * Use [`unappend`](#unappend) instead.
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        var unsnoc = unappend;
                        function cons(head, tail) {
                            return tail === undefined ? prepend(head) : Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(tail, prepend(head));
                        }
                        /**
                         * Use [`append`](./Array.ts.html#append) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var snoc = function (init, end) { return Object(_function__WEBPACK_IMPORTED_MODULE_2__["pipe"])(init, append(end)); };
                        /**
                         * Use [`prependAll`](#prependall) instead.
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        var prependToAll = prependAll;
                        /**
                         * Use [`concatAll`](#concatall) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var fold = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_6__["concatAll"];
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `NEA.Functor` instead of `NEA.nonEmptyArray`
                         * (where `NEA` is from `import NEA from 'fp-ts/NonEmptyArray'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var nonEmptyArray = {
                            URI: URI,
                            of: of,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            ap: _ap,
                            chain: flatMap,
                            extend: _extend,
                            extract: extract,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex,
                            alt: _alt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Option.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/es6/Option.js ***!
  \******************************************/
/*! exports provided: none, some, fromPredicate, getLeft, getRight, URI, getShow, getEq, getOrd, getMonoid, map, Functor, as, asUnit, of, Pointed, ap, Apply, Applicative, flatMap, Chain, Monad, reduce, foldMap, reduceRight, Foldable, orElse, altW, alt, Alt, zero, Zero, guard, Alternative, extend, Extend, compact, separate, Compactable, filter, filterMap, partition, partitionMap, Filterable, traverse, sequence, Traversable, wither, wilt, Witherable, throwError, MonadThrow, fromEither, FromEither, isSome, isNone, matchW, foldW, match, fold, getOrElseW, getOrElse, flap, apFirst, apSecond, flatten, tap, tapEither, duplicate, fromEitherK, chainEitherK, chainFirstEitherK, fromNullable, tryCatch, tryCatchK, fromNullableK, chainNullableK, toNullable, toUndefined, elem, exists, Do, bindTo, let, bind, apS, ApT, traverseReadonlyNonEmptyArrayWithIndex, traverseReadonlyArrayWithIndex, traverseArrayWithIndex, traverseArray, sequenceArray, chain, chainFirst, getRefinement, mapNullable, option, getApplySemigroup, getApplyMonoid, getFirstMonoid, getLastMonoid */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "none", function () { return none; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function () { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPredicate", function () { return fromPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLeft", function () { return getLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRight", function () { return getRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrd", function () { return getOrd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "as", function () { return as; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asUnit", function () { return asUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function () { return of; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pointed", function () { return Pointed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Apply", function () { return Apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Applicative", function () { return Applicative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function () { return flatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chain", function () { return Chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monad", function () { return Monad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foldable", function () { return Foldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "orElse", function () { return orElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "altW", function () { return altW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function () { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alt", function () { return Alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function () { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Zero", function () { return Zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guard", function () { return guard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alternative", function () { return Alternative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function () { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Extend", function () { return Extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compact", function () { return compact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "separate", function () { return separate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compactable", function () { return Compactable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMap", function () { return filterMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function () { return partition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMap", function () { return partitionMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filterable", function () { return Filterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Traversable", function () { return Traversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wither", function () { return wither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wilt", function () { return wilt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Witherable", function () { return Witherable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwError", function () { return throwError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonadThrow", function () { return MonadThrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEither", function () { return fromEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FromEither", function () { return FromEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSome", function () { return isSome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNone", function () { return isNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchW", function () { return matchW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldW", function () { return foldW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "match", function () { return match; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fold", function () { return fold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrElseW", function () { return getOrElseW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrElse", function () { return getOrElse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function () { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tap", function () { return tap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tapEither", function () { return tapEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicate", function () { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEitherK", function () { return fromEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainEitherK", function () { return chainEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirstEitherK", function () { return chainFirstEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullable", function () { return fromNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryCatch", function () { return tryCatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tryCatchK", function () { return tryCatchK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullableK", function () { return fromNullableK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainNullableK", function () { return chainNullableK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toNullable", function () { return toNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toUndefined", function () { return toUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elem", function () { return elem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exists", function () { return exists; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Do", function () { return Do; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApT", function () { return ApT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyNonEmptyArrayWithIndex", function () { return traverseReadonlyNonEmptyArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyArrayWithIndex", function () { return traverseReadonlyArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseArrayWithIndex", function () { return traverseArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseArray", function () { return traverseArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceArray", function () { return sequenceArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRefinement", function () { return getRefinement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapNullable", function () { return mapNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "option", function () { return option; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplySemigroup", function () { return getApplySemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getApplyMonoid", function () { return getApplyMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFirstMonoid", function () { return getFirstMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLastMonoid", function () { return getLastMonoid; });
/* harmony import */ var _Applicative__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Applicative */ "./node_modules/fp-ts/es6/Applicative.js");
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _FromEither__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/es6/FromEither.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _Predicate__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Predicate */ "./node_modules/fp-ts/es6/Predicate.js");
/* harmony import */ var _Semigroup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Semigroup */ "./node_modules/fp-ts/es6/Semigroup.js");
/* harmony import */ var _Separated__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/es6/Separated.js");
/* harmony import */ var _Witherable__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/es6/Witherable.js");
/* harmony import */ var _Zero__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Zero */ "./node_modules/fp-ts/es6/Zero.js");












                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var none = _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                        /**
                         * Constructs a `Some`. Represents an optional value that exists.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var some = _internal__WEBPACK_IMPORTED_MODULE_6__["some"];
                        function fromPredicate(predicate) {
                            return function (a) { return (predicate(a) ? some(a) : none); };
                        }
                        /**
                         * Returns the `Left` value of an `Either` if possible.
                         *
                         * @example
                         * import { getLeft, none, some } from 'fp-ts/Option'
                         * import { right, left } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(getLeft(right(1)), none)
                         * assert.deepStrictEqual(getLeft(left('a')), some('a'))
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var getLeft = function (ma) { return (ma._tag === 'Right' ? none : some(ma.left)); };
                        /**
                         * Returns the `Right` value of an `Either` if possible.
                         *
                         * @example
                         * import { getRight, none, some } from 'fp-ts/Option'
                         * import { right, left } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(getRight(right(1)), some(1))
                         * assert.deepStrictEqual(getRight(left('a')), none)
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var getRight = function (ma) { return (ma._tag === 'Left' ? none : some(ma.right)); };
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, map(f)); };
                        var _ap = function (fab, fa) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fab, ap(fa)); };
                        var _reduce = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, reduce(b, f)); };
                        var _foldMap = function (M) {
                            var foldMapM = foldMap(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, foldMapM(f)); };
                        };
                        var _reduceRight = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, reduceRight(b, f)); };
                        var _traverse = function (F) {
                            var traverseF = traverse(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, alt(that)); };
                        var _filter = function (fa, predicate) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, filter(predicate)); };
                        /* istanbul ignore next */
                        var _filterMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, filterMap(f)); };
                        /* istanbul ignore next */
                        var _extend = function (wa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(wa, extend(f)); };
                        /* istanbul ignore next */
                        var _partition = function (fa, predicate) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, partition(predicate));
                        };
                        /* istanbul ignore next */
                        var _partitionMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, partitionMap(f)); };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'Option';
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getShow = function (S) {
                            return ({
                                show: function (ma) { return (isNone(ma) ? 'none' : "some(".concat(S.show(ma.value), ")")); }
                            });
                        };
                        /**
                         * @example
                         * import { none, some, getEq } from 'fp-ts/Option'
                         * import * as N from 'fp-ts/number'
                         *
                         * const E = getEq(N.Eq)
                         * assert.strictEqual(E.equals(none, none), true)
                         * assert.strictEqual(E.equals(none, some(1)), false)
                         * assert.strictEqual(E.equals(some(1), none), false)
                         * assert.strictEqual(E.equals(some(1), some(2)), false)
                         * assert.strictEqual(E.equals(some(1), some(1)), true)
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getEq = function (E) {
                            return ({
                                equals: function (x, y) { return x === y || (isNone(x) ? isNone(y) : isNone(y) ? false : E.equals(x.value, y.value)); }
                            });
                        };
                        /**
                         * The `Ord` instance allows `Option` values to be compared with
                         * `compare`, whenever there is an `Ord` instance for
                         * the type the `Option` contains.
                         *
                         * `None` is considered to be less than any `Some` value.
                         *
                         *
                         * @example
                         * import { none, some, getOrd } from 'fp-ts/Option'
                         * import * as N from 'fp-ts/number'
                         *
                         * const O = getOrd(N.Ord)
                         * assert.strictEqual(O.compare(none, none), 0)
                         * assert.strictEqual(O.compare(none, some(1)), -1)
                         * assert.strictEqual(O.compare(some(1), none), 1)
                         * assert.strictEqual(O.compare(some(1), some(2)), -1)
                         * assert.strictEqual(O.compare(some(1), some(1)), 0)
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getOrd = function (O) {
                            return ({
                                equals: getEq(O).equals,
                                compare: function (x, y) { return (x === y ? 0 : isSome(x) ? (isSome(y) ? O.compare(x.value, y.value) : 1) : -1); }
                            });
                        };
                        /**
                         * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are
                         * concatenated using the provided `Semigroup`
                         *
                         * | x       | y       | concat(x, y)       |
                         * | ------- | ------- | ------------------ |
                         * | none    | none    | none               |
                         * | some(a) | none    | some(a)            |
                         * | none    | some(b) | some(b)            |
                         * | some(a) | some(b) | some(concat(a, b)) |
                         *
                         * @example
                         * import { getMonoid, some, none } from 'fp-ts/Option'
                         * import { SemigroupSum } from 'fp-ts/number'
                         *
                         * const M = getMonoid(SemigroupSum)
                         * assert.deepStrictEqual(M.concat(none, none), none)
                         * assert.deepStrictEqual(M.concat(some(1), none), some(1))
                         * assert.deepStrictEqual(M.concat(none, some(1)), some(1))
                         * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getMonoid = function (S) {
                            return ({
                                concat: function (x, y) { return (isNone(x) ? y : isNone(y) ? x : some(S.concat(x.value, y.value))); },
                                empty: none
                            });
                        };
                        /**
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return isNone(fa) ? none : some(f(fa.value));
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * Maps the `Some` value of this `Option` to the specified constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        var as = Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["as"])(Functor));
                        /**
                         * Maps the `Some` value of this `Option` to the void constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        var asUnit = Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["asUnit"])(Functor);
                        /**
                         * @category constructors
                         * @since 2.7.0
                         */
                        var of = some;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Pointed = {
                            URI: URI,
                            of: of
                        };
                        /**
                         * @since 2.0.0
                         */
                        var ap = function (fa) {
                            return function (fab) {
                                return isNone(fab) ? none : isNone(fa) ? none : some(fab.value(fa.value));
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Apply = {
                            URI: URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Applicative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of
                        };
                        /**
                         * @category sequencing
                         * @since 2.14.0
                         */
                        var flatMap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, function (ma, f) { return (isNone(ma) ? none : f(ma.value)); });
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Chain = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Monad = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap
                        };
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduce = function (b, f) {
                            return function (fa) {
                                return isNone(fa) ? b : f(b, fa.value);
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMap = function (M) {
                            return function (f) {
                                return function (fa) {
                                    return isNone(fa) ? M.empty : f(fa.value);
                                };
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRight = function (b, f) {
                            return function (fa) {
                                return isNone(fa) ? b : f(fa.value, b);
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Foldable = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.
                         *
                         * @param self - The first `Option` to be checked.
                         * @param that - The `Option` to return if `self` is `None`.
                         *
                         * @example
                         * import * as O from "fp-ts/Option"
                         *
                         * assert.deepStrictEqual(O.orElse(O.none, () => O.none), O.none)
                         * assert.deepStrictEqual(O.orElse(O.some(1), () => O.none), O.some(1))
                         * assert.deepStrictEqual(O.orElse(O.none, () => O.some('b')), O.some('b'))
                         * assert.deepStrictEqual(O.orElse(O.some(1), () => O.some('b')), O.some(1))
                         *
                         * @category error handling
                         * @since 2.16.0
                         */
                        var orElse = Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, function (self, that) { return (isNone(self) ? that() : self); });
                        /**
                         * Alias of `orElse`.
                         *
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @category legacy
                         * @since 2.9.0
                         */
                        var altW = orElse;
                        /**
                         * Alias of `orElse`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var alt = orElse;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alt = {
                            URI: URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @since 2.7.0
                         */
                        var zero = function () { return none; };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var Zero = {
                            URI: URI,
                            zero: zero
                        };
                        /**
                         * @category do notation
                         * @since 2.11.0
                         */
                        var guard = /*#__PURE__*/ Object(_Zero__WEBPACK_IMPORTED_MODULE_11__["guard"])(Zero, Pointed);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alternative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            alt: _alt,
                            zero: zero
                        };
                        /**
                         * @since 2.0.0
                         */
                        var extend = function (f) {
                            return function (wa) {
                                return isNone(wa) ? none : some(f(wa));
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Extend = {
                            URI: URI,
                            map: _map,
                            extend: _extend
                        };
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var compact = /*#__PURE__*/ flatMap(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        var defaultSeparated = /*#__PURE__*/ Object(_Separated__WEBPACK_IMPORTED_MODULE_9__["separated"])(none, none);
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var separate = function (ma) {
                            return isNone(ma) ? defaultSeparated : Object(_Separated__WEBPACK_IMPORTED_MODULE_9__["separated"])(getLeft(ma.value), getRight(ma.value));
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Compactable = {
                            URI: URI,
                            compact: compact,
                            separate: separate
                        };
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filter = function (predicate) {
                            return function (fa) {
                                return isNone(fa) ? none : predicate(fa.value) ? fa : none;
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filterMap = function (f) {
                            return function (fa) {
                                return isNone(fa) ? none : f(fa.value);
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partition = function (predicate) {
                            return function (fa) {
                                return Object(_Separated__WEBPACK_IMPORTED_MODULE_9__["separated"])(_filter(fa, Object(_Predicate__WEBPACK_IMPORTED_MODULE_7__["not"])(predicate)), _filter(fa, predicate));
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partitionMap = function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["flow"])(map(f), separate); };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Filterable = {
                            URI: URI,
                            map: _map,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            return function (f) {
                                return function (ta) {
                                    return isNone(ta) ? F.of(none) : F.map(f(ta.value), some);
                                };
                            };
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) {
                            return function (ta) {
                                return isNone(ta) ? F.of(none) : F.map(ta.value, some);
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Traversable = {
                            URI: URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence
                        };
                        var _wither = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_10__["witherDefault"])(Traversable, Compactable);
                        var _wilt = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_10__["wiltDefault"])(Traversable, Compactable);
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wither = function (F) {
                            var _witherF = _wither(F);
                            return function (f) { return function (fa) { return _witherF(fa, f); }; };
                        };
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wilt = function (F) {
                            var _wiltF = _wilt(F);
                            return function (f) { return function (fa) { return _wiltF(fa, f); }; };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Witherable = {
                            URI: URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            wither: _wither,
                            wilt: _wilt
                        };
                        /**
                         * @since 2.7.0
                         */
                        var throwError = function () { return none; };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var MonadThrow = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap,
                            throwError: throwError
                        };
                        /**
                         * Transforms an `Either` to an `Option` discarding the error.
                         *
                         * Alias of [getRight](#getright)
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromEither = getRight;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var FromEither = {
                            URI: URI,
                            fromEither: fromEither
                        };
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * Returns `true` if the option is an instance of `Some`, `false` otherwise.
                         *
                         * @example
                         * import { some, none, isSome } from 'fp-ts/Option'
                         *
                         * assert.strictEqual(isSome(some(1)), true)
                         * assert.strictEqual(isSome(none), false)
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        var isSome = _internal__WEBPACK_IMPORTED_MODULE_6__["isSome"];
                        /**
                         * Returns `true` if the option is `None`, `false` otherwise.
                         *
                         * @example
                         * import { some, none, isNone } from 'fp-ts/Option'
                         *
                         * assert.strictEqual(isNone(some(1)), false)
                         * assert.strictEqual(isNone(none), true)
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        var isNone = function (fa) { return fa._tag === 'None'; };
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchW = function (onNone, onSome) {
                            return function (ma) {
                                return isNone(ma) ? onNone() : onSome(ma.value);
                            };
                        };
                        /**
                         * Alias of [`matchW`](#matchw).
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var foldW = matchW;
                        /**
                         * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is
                         * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.
                         *
                         * @example
                         * import { some, none, match } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     match(() => 'a none', a => `a some containing ${a}`)
                         *   ),
                         *   'a some containing 1'
                         * )
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     match(() => 'a none', a => `a some containing ${a}`)
                         *   ),
                         *   'a none'
                         * )
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var match = matchW;
                        /**
                         * Alias of [`match`](#match).
                         *
                         * @category pattern matching
                         * @since 2.0.0
                         */
                        var fold = match;
                        /**
                         * Less strict version of [`getOrElse`](#getorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return type will be merged.
                         *
                         * @category error handling
                         * @since 2.6.0
                         */
                        var getOrElseW = function (onNone) {
                            return function (ma) {
                                return isNone(ma) ? onNone() : ma.value;
                            };
                        };
                        /**
                         * Extracts the value out of the structure, if it exists. Otherwise returns the given default value
                         *
                         * @example
                         * import { some, none, getOrElse } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     getOrElse(() => 0)
                         *   ),
                         *   1
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     getOrElse(() => 0)
                         *   ),
                         *   0
                         * )
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        var getOrElse = getOrElseW;
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["flap"])(Functor);
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.0.0
                         */
                        var apFirst = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apFirst"])(Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.0.0
                         */
                        var apSecond = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apSecond"])(Apply);
                        /**
                         * @category sequencing
                         * @since 2.0.0
                         */
                        var flatten = compact;
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category combinators
                         * @since 2.15.0
                         */
                        var tap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, _Chain__WEBPACK_IMPORTED_MODULE_2__["tap"](Chain));
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as O from 'fp-ts/Option'
                         * import * as E from 'fp-ts/Either'
                         *
                         * const compute = (value: number) => pipe(
                         *   O.of(value),
                         *   O.tapEither((value) => value > 0 ? E.right('ok') : E.left('error')),
                         * )
                         *
                         * assert.deepStrictEqual(compute(1), O.of(1))
                         * assert.deepStrictEqual(compute(-42), O.none)
                         *
                         * @category combinators
                         * @since 2.16.0
                         */
                        var tapEither = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, Object(_FromEither__WEBPACK_IMPORTED_MODULE_3__["tapEither"])(FromEither, Chain));
                        /**
                         * @since 2.0.0
                         */
                        var duplicate = /*#__PURE__*/ extend(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        var fromEitherK = /*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_3__["fromEitherK"])(FromEither);
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var chainEitherK =
/*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_3__["chainEitherK"])(FromEither, Chain);
                        /**
                         * Alias of `tapEither`.
                         *
                         * @category legacy
                         * @since 2.12.0
                         */
                        var chainFirstEitherK = tapEither;
                        /**
                         * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise
                         * returns the value wrapped in a `Some`.
                         *
                         * @example
                         * import { none, some, fromNullable } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(fromNullable(undefined), none)
                         * assert.deepStrictEqual(fromNullable(null), none)
                         * assert.deepStrictEqual(fromNullable(1), some(1))
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromNullable = function (a) { return (a == null ? none : some(a)); };
                        /**
                         * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a
                         * `Some`.
                         *
                         * See also [`tryCatchK`](#trycatchk).
                         *
                         * @example
                         * import { none, some, tryCatch } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   tryCatch(() => {
                         *     throw new Error()
                         *   }),
                         *   none
                         * )
                         * assert.deepStrictEqual(tryCatch(() => 1), some(1))
                         *
                         * @category interop
                         * @since 2.0.0
                         */
                        var tryCatch = function (f) {
                            try {
                                return some(f());
                            }
                            catch (e) {
                                return none;
                            }
                        };
                        /**
                         * Converts a function that may throw to one returning a `Option`.
                         *
                         * @category interop
                         * @since 2.10.0
                         */
                        var tryCatchK = function (f) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return tryCatch(function () { return f.apply(void 0, a); });
                            };
                        };
                        /**
                         * Returns a *smart constructor* from a function that returns a nullable value.
                         *
                         * @example
                         * import { fromNullableK, none, some } from 'fp-ts/Option'
                         *
                         * const f = (s: string): number | undefined => {
                         *   const n = parseFloat(s)
                         *   return isNaN(n) ? undefined : n
                         * }
                         *
                         * const g = fromNullableK(f)
                         *
                         * assert.deepStrictEqual(g('1'), some(1))
                         * assert.deepStrictEqual(g('a'), none)
                         *
                         * @category lifting
                         * @since 2.9.0
                         */
                        var fromNullableK = function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["flow"])(f, fromNullable); };
                        /**
                         * This is `chain` + `fromNullable`, useful when working with optional values.
                         *
                         * @example
                         * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Employee {
                         *   readonly company?: {
                         *     readonly address?: {
                         *       readonly street?: {
                         *         readonly name?: string
                         *       }
                         *     }
                         *   }
                         * }
                         *
                         * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     fromNullable(employee1.company),
                         *     chainNullableK(company => company.address),
                         *     chainNullableK(address => address.street),
                         *     chainNullableK(street => street.name)
                         *   ),
                         *   some('high street')
                         * )
                         *
                         * const employee2: Employee = { company: { address: { street: {} } } }
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     fromNullable(employee2.company),
                         *     chainNullableK(company => company.address),
                         *     chainNullableK(address => address.street),
                         *     chainNullableK(street => street.name)
                         *   ),
                         *   none
                         * )
                         *
                         * @category sequencing
                         * @since 2.9.0
                         */
                        var chainNullableK = function (f) {
                            return function (ma) {
                                return isNone(ma) ? none : fromNullable(f(ma.value));
                            };
                        };
                        /**
                         * Extracts the value out of the structure, if it exists. Otherwise returns `null`.
                         *
                         * @example
                         * import { some, none, toNullable } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     toNullable
                         *   ),
                         *   1
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     toNullable
                         *   ),
                         *   null
                         * )
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var toNullable = /*#__PURE__*/ match(_function__WEBPACK_IMPORTED_MODULE_4__["constNull"], _function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        /**
                         * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.
                         *
                         * @example
                         * import { some, none, toUndefined } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     toUndefined
                         *   ),
                         *   1
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     toUndefined
                         *   ),
                         *   undefined
                         * )
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var toUndefined = /*#__PURE__*/ match(_function__WEBPACK_IMPORTED_MODULE_4__["constUndefined"], _function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        function elem(E) {
                            return function (a, ma) {
                                if (ma === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (ma) { return elemE_1(a, ma); };
                                }
                                return isNone(ma) ? false : E.equals(a, ma.value);
                            };
                        }
                        /**
                         * Returns `true` if the predicate is satisfied by the wrapped value
                         *
                         * @example
                         * import { some, none, exists } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     exists(n => n > 0)
                         *   ),
                         *   true
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     exists(n => n > 1)
                         *   ),
                         *   false
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     exists(n => n > 0)
                         *   ),
                         *   false
                         * )
                         *
                         * @since 2.0.0
                         */
                        var exists = function (predicate) {
                            return function (ma) {
                                return isNone(ma) ? false : predicate(ma.value);
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        var Do = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_6__["emptyRecord"]);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindTo = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["bindTo"])(Functor);
                        var let_ = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["let"])(Functor);

                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bind = /*#__PURE__*/ _Chain__WEBPACK_IMPORTED_MODULE_2__["bind"](Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apS = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apS"])(Apply);
                        /**
                         * @since 2.11.0
                         */
                        var ApT = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_6__["emptyReadonlyArray"]);
                        // -------------------------------------------------------------------------------------
                        // array utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndex = function (f) {
                            return function (as) {
                                var o = f(0, _internal__WEBPACK_IMPORTED_MODULE_6__["head"](as));
                                if (isNone(o)) {
                                    return none;
                                }
                                var out = [o.value];
                                for (var i = 1; i < as.length; i++) {
                                    var o_1 = f(i, as[i]);
                                    if (isNone(o_1)) {
                                        return none;
                                    }
                                    out.push(o_1.value);
                                }
                                return some(out);
                            };
                        };
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndex = function (f) {
                            var g = traverseReadonlyNonEmptyArrayWithIndex(f);
                            return function (as) { return (_internal__WEBPACK_IMPORTED_MODULE_6__["isNonEmpty"](as) ? g(as) : ApT); };
                        };
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArray = function (f) {
                            return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });
                        };
                        /**
                         * Equivalent to `ReadonlyArray#sequence(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var sequenceArray =
/*#__PURE__*/ traverseArray(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chain = flatMap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chainFirst = tap;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `Refinement` module instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function getRefinement(getOption) {
                            return function (a) { return isSome(getOption(a)); };
                        }
                        /**
                         * Use [`chainNullableK`](#chainnullablek) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var mapNullable = chainNullableK;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `O.Functor` instead of `O.option`
                         * (where `O` is from `import O from 'fp-ts/Option'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var option = {
                            URI: URI,
                            map: _map,
                            of: of,
                            ap: _ap,
                            chain: flatMap,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            zero: zero,
                            alt: _alt,
                            extend: _extend,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            wither: _wither,
                            wilt: _wilt,
                            throwError: throwError
                        };
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getApplySemigroup = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["getApplySemigroup"])(Apply);
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getApplyMonoid = /*#__PURE__*/ Object(_Applicative__WEBPACK_IMPORTED_MODULE_0__["getApplicativeMonoid"])(Applicative);
                        /**
                         * Use
                         *
                         * ```ts
                         * import { first } from 'fp-ts/Semigroup'
                         * import { getMonoid } from 'fp-ts/Option'
                         *
                         * getMonoid(first())
                         * ```
                         *
                         * instead.
                         *
                         * Monoid returning the left-most non-`None` value
                         *
                         * | x       | y       | concat(x, y) |
                         * | ------- | ------- | ------------ |
                         * | none    | none    | none         |
                         * | some(a) | none    | some(a)      |
                         * | none    | some(b) | some(b)      |
                         * | some(a) | some(b) | some(a)      |
                         *
                         * @example
                         * import { getFirstMonoid, some, none } from 'fp-ts/Option'
                         *
                         * const M = getFirstMonoid<number>()
                         * assert.deepStrictEqual(M.concat(none, none), none)
                         * assert.deepStrictEqual(M.concat(some(1), none), some(1))
                         * assert.deepStrictEqual(M.concat(none, some(2)), some(2))
                         * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getFirstMonoid = function () { return getMonoid(Object(_Semigroup__WEBPACK_IMPORTED_MODULE_8__["first"])()); };
                        /**
                         * Use
                         *
                         * ```ts
                         * import { last } from 'fp-ts/Semigroup'
                         * import { getMonoid } from 'fp-ts/Option'
                         *
                         * getMonoid(last())
                         * ```
                         *
                         * instead.
                         *
                         * Monoid returning the right-most non-`None` value
                         *
                         * | x       | y       | concat(x, y) |
                         * | ------- | ------- | ------------ |
                         * | none    | none    | none         |
                         * | some(a) | none    | some(a)      |
                         * | none    | some(b) | some(b)      |
                         * | some(a) | some(b) | some(b)      |
                         *
                         * @example
                         * import { getLastMonoid, some, none } from 'fp-ts/Option'
                         *
                         * const M = getLastMonoid<number>()
                         * assert.deepStrictEqual(M.concat(none, none), none)
                         * assert.deepStrictEqual(M.concat(some(1), none), some(1))
                         * assert.deepStrictEqual(M.concat(none, some(2)), some(2))
                         * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getLastMonoid = function () { return getMonoid(Object(_Semigroup__WEBPACK_IMPORTED_MODULE_8__["last"])()); };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Ord.js":
/*!***************************************!*\
  !*** ./node_modules/fp-ts/es6/Ord.js ***!
  \***************************************/
/*! exports provided: equalsDefault, fromCompare, tuple, reverse, contramap, URI, getSemigroup, getMonoid, Contravariant, trivial, equals, lt, gt, leq, geq, min, max, clamp, between, getTupleOrd, getDualOrd, ord, ordBoolean, ordString, ordNumber, ordDate */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equalsDefault", function () { return equalsDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromCompare", function () { return fromCompare; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function () { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function () { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contramap", function () { return contramap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contravariant", function () { return Contravariant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trivial", function () { return trivial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "equals", function () { return equals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lt", function () { return lt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gt", function () { return gt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "leq", function () { return leq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "geq", function () { return geq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function () { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function () { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function () { return clamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "between", function () { return between; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTupleOrd", function () { return getTupleOrd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDualOrd", function () { return getDualOrd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ord", function () { return ord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ordBoolean", function () { return ordBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ordString", function () { return ordString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ordNumber", function () { return ordNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ordDate", function () { return ordDate; });
/* harmony import */ var _Eq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/es6/Eq.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");


                        // -------------------------------------------------------------------------------------
                        // defaults
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category defaults
                         * @since 2.10.0
                         */
                        var equalsDefault = function (compare) {
                            return function (first, second) {
                                return first === second || compare(first, second) === 0;
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var fromCompare = function (compare) {
                            return ({
                                equals: equalsDefault(compare),
                                compare: function (first, second) { return (first === second ? 0 : compare(first, second)); }
                            });
                        };
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * Given a tuple of `Ord`s returns an `Ord` for the tuple.
                         *
                         * @example
                         * import { tuple } from 'fp-ts/Ord'
                         * import * as B from 'fp-ts/boolean'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         *
                         * const O = tuple(S.Ord, N.Ord, B.Ord)
                         * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)
                         * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)
                         * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)
                         *
                         * @since 2.10.0
                         */
                        var tuple = function () {
                            var ords = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                ords[_i] = arguments[_i];
                            }
                            return fromCompare(function (first, second) {
                                var i = 0;
                                for (; i < ords.length - 1; i++) {
                                    var r = ords[i].compare(first[i], second[i]);
                                    if (r !== 0) {
                                        return r;
                                    }
                                }
                                return ords[i].compare(first[i], second[i]);
                            });
                        };
                        /**
                         * @since 2.10.0
                         */
                        var reverse = function (O) { return fromCompare(function (first, second) { return O.compare(second, first); }); };
                        /* istanbul ignore next */
                        var contramap_ = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, contramap(f)); };
                        /**
                         * A typical use case for `contramap` would be like, given some `User` type, to construct an `Ord<User>`.
                         *
                         * We can do so with a function from `User -> X` where `X` is some value that we know how to compare
                         * for ordering (meaning we have an `Ord<X>`)
                         *
                         * For example, given the following `User` type, there are lots of possible choices for `X`,
                         * but let's say we want to sort a list of users by `lastName`.
                         *
                         * If we have a way of comparing `lastName`s for ordering (`ordLastName: Ord<string>`) and we know how to go from `User -> string`,
                         * using `contramap` we can do this
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import { contramap, Ord } from 'fp-ts/Ord'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as S from 'fp-ts/string'
                         *
                         * interface User {
                         *   readonly firstName: string
                         *   readonly lastName: string
                         * }
                         *
                         * const ordLastName: Ord<string> = S.Ord
                         *
                         * const ordByLastName: Ord<User> = pipe(
                         *   ordLastName,
                         *   contramap((user) => user.lastName)
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   RA.sort(ordByLastName)([
                         *     { firstName: 'a', lastName: 'd' },
                         *     { firstName: 'c', lastName: 'b' }
                         *   ]),
                         *   [
                         *     { firstName: 'c', lastName: 'b' },
                         *     { firstName: 'a', lastName: 'd' }
                         *   ]
                         * )
                         *
                         * @since 2.0.0
                         */
                        var contramap = function (f) {
                            return function (fa) {
                                return fromCompare(function (first, second) { return fa.compare(f(first), f(second)); });
                            };
                        };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'Ord';
                        /**
                         * A typical use case for the `Semigroup` instance of `Ord` is merging two or more orderings.
                         *
                         * For example the following snippet builds an `Ord` for a type `User` which
                         * sorts by `created` date descending, and **then** `lastName`
                         *
                         * @example
                         * import * as D from 'fp-ts/Date'
                         * import { pipe } from 'fp-ts/function'
                         * import { contramap, getSemigroup, Ord, reverse } from 'fp-ts/Ord'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as S from 'fp-ts/string'
                         *
                         * interface User {
                         *   readonly id: string
                         *   readonly lastName: string
                         *   readonly created: Date
                         * }
                         *
                         * const ordByLastName: Ord<User> = pipe(
                         *   S.Ord,
                         *   contramap((user) => user.lastName)
                         * )
                         *
                         * const ordByCreated: Ord<User> = pipe(
                         *   D.Ord,
                         *   contramap((user) => user.created)
                         * )
                         *
                         * const ordUserByCreatedDescThenLastName = getSemigroup<User>().concat(
                         *   reverse(ordByCreated),
                         *   ordByLastName
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   RA.sort(ordUserByCreatedDescThenLastName)([
                         *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) },
                         *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },
                         *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) }
                         *   ]),
                         *   [
                         *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) },
                         *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },
                         *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) }
                         *   ]
                         * )
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: function (first, second) {
                                    return fromCompare(function (a, b) {
                                        var ox = first.compare(a, b);
                                        return ox !== 0 ? ox : second.compare(a, b);
                                    });
                                }
                            });
                        };
                        /**
                         * Returns a `Monoid` such that:
                         *
                         * - its `concat(ord1, ord2)` operation will order first by `ord1`, and then by `ord2`
                         * - its `empty` value is an `Ord` that always considers compared elements equal
                         *
                         * @example
                         * import { sort } from 'fp-ts/Array'
                         * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as B from 'fp-ts/boolean'
                         * import { pipe } from 'fp-ts/function'
                         * import { concatAll } from 'fp-ts/Monoid'
                         * import * as N from 'fp-ts/number'
                         *
                         * interface User {
                         *   readonly id: number
                         *   readonly name: string
                         *   readonly age: number
                         *   readonly rememberMe: boolean
                         * }
                         *
                         * const byName = pipe(
                         *   S.Ord,
                         *   contramap((p: User) => p.name)
                         * )
                         *
                         * const byAge = pipe(
                         *   N.Ord,
                         *   contramap((p: User) => p.age)
                         * )
                         *
                         * const byRememberMe = pipe(
                         *   B.Ord,
                         *   contramap((p: User) => p.rememberMe)
                         * )
                         *
                         * const M = getMonoid<User>()
                         *
                         * const users: Array<User> = [
                         *   { id: 1, name: 'Guido', age: 47, rememberMe: false },
                         *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
                         *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
                         *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }
                         * ]
                         *
                         * // sort by name, then by age, then by `rememberMe`
                         * const O1 = concatAll(M)([byName, byAge, byRememberMe])
                         * assert.deepStrictEqual(sort(O1)(users), [
                         *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
                         *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },
                         *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
                         *   { id: 1, name: 'Guido', age: 47, rememberMe: false }
                         * ])
                         *
                         * // now `rememberMe = true` first, then by name, then by age
                         * const O2 = concatAll(M)([reverse(byRememberMe), byName, byAge])
                         * assert.deepStrictEqual(sort(O2)(users), [
                         *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },
                         *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
                         *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
                         *   { id: 1, name: 'Guido', age: 47, rememberMe: false }
                         * ])
                         *
                         * @category instances
                         * @since 2.4.0
                         */
                        var getMonoid = function () {
                            return ({
                                concat: getSemigroup().concat,
                                empty: fromCompare(function () { return 0; })
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Contravariant = {
                            URI: URI,
                            contramap: contramap_
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.11.0
                         */
                        var trivial = {
                            equals: _function__WEBPACK_IMPORTED_MODULE_1__["constTrue"],
                            compare: /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_1__["constant"])(0)
                        };
                        /**
                         * @since 2.11.0
                         */
                        var equals = function (O) {
                            return function (second) {
                                return function (first) {
                                    return first === second || O.compare(first, second) === 0;
                                };
                            };
                        };
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _strictly less than_ another
                         *
                         * @since 2.0.0
                         */
                        var lt = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) === -1;
                            };
                        };
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _strictly greater than_ another
                         *
                         * @since 2.0.0
                         */
                        var gt = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) === 1;
                            };
                        };
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _non-strictly less than_ another
                         *
                         * @since 2.0.0
                         */
                        var leq = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) !== 1;
                            };
                        };
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _non-strictly greater than_ another
                         *
                         * @since 2.0.0
                         */
                        var geq = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) !== -1;
                            };
                        };
                        // TODO: curry in v3
                        /**
                         * Take the minimum of two values. If they are considered equal, the first argument is chosen
                         *
                         * @since 2.0.0
                         */
                        var min = function (O) {
                            return function (first, second) {
                                return first === second || O.compare(first, second) < 1 ? first : second;
                            };
                        };
                        // TODO: curry in v3
                        /**
                         * Take the maximum of two values. If they are considered equal, the first argument is chosen
                         *
                         * @since 2.0.0
                         */
                        var max = function (O) {
                            return function (first, second) {
                                return first === second || O.compare(first, second) > -1 ? first : second;
                            };
                        };
                        /**
                         * Clamp a value between a minimum and a maximum
                         *
                         * @since 2.0.0
                         */
                        var clamp = function (O) {
                            var minO = min(O);
                            var maxO = max(O);
                            return function (low, hi) { return function (a) { return maxO(minO(a, hi), low); }; };
                        };
                        /**
                         * Test whether a value is between a minimum and a maximum (inclusive)
                         *
                         * @since 2.0.0
                         */
                        var between = function (O) {
                            var ltO = lt(O);
                            var gtO = gt(O);
                            return function (low, hi) { return function (a) { return ltO(a, low) || gtO(a, hi) ? false : true; }; };
                        };
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use [`tuple`](#tuple) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getTupleOrd = tuple;
                        /**
                         * Use [`reverse`](#reverse) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getDualOrd = reverse;
                        /**
                         * Use [`Contravariant`](#contravariant) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var ord = Contravariant;
                        // default compare for primitive types
                        function compare(first, second) {
                            return first < second ? -1 : first > second ? 1 : 0;
                        }
                        var strictOrd = {
                            equals: _Eq__WEBPACK_IMPORTED_MODULE_0__["eqStrict"].equals,
                            compare: compare
                        };
                        /**
                         * Use [`Ord`](./boolean.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var ordBoolean = strictOrd;
                        /**
                         * Use [`Ord`](./string.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var ordString = strictOrd;
                        /**
                         * Use [`Ord`](./number.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var ordNumber = strictOrd;
                        /**
                         * Use [`Ord`](./Date.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var ordDate = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(ordNumber,
                            /*#__PURE__*/
                            contramap(function (date) { return date.valueOf(); }));


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Predicate.js":
/*!*********************************************!*\
  !*** ./node_modules/fp-ts/es6/Predicate.js ***!
  \*********************************************/
/*! exports provided: contramap, URI, getSemigroupAny, getMonoidAny, getSemigroupAll, getMonoidAll, Contravariant, not, or, and */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contramap", function () { return contramap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroupAny", function () { return getSemigroupAny; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoidAny", function () { return getMonoidAny; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroupAll", function () { return getSemigroupAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoidAll", function () { return getMonoidAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contravariant", function () { return Contravariant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "not", function () { return not; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "or", function () { return or; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "and", function () { return and; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");

                        var contramap_ = function (predicate, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(predicate, contramap(f)); };
                        /**
                         * @since 2.11.0
                         */
                        var contramap = function (f) {
                            return function (predicate) {
                                return Object(_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(f, predicate);
                            };
                        };
                        /**
                         * @category type lambdas
                         * @since 2.11.0
                         */
                        var URI = 'Predicate';
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getSemigroupAny = function () {
                            return ({
                                concat: function (first, second) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(first, or(second)); }
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getMonoidAny = function () {
                            return ({
                                concat: getSemigroupAny().concat,
                                empty: _function__WEBPACK_IMPORTED_MODULE_0__["constFalse"]
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getSemigroupAll = function () {
                            return ({
                                concat: function (first, second) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(first, and(second)); }
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getMonoidAll = function () {
                            return ({
                                concat: getSemigroupAll().concat,
                                empty: _function__WEBPACK_IMPORTED_MODULE_0__["constTrue"]
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var Contravariant = {
                            URI: URI,
                            contramap: contramap_
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.11.0
                         */
                        var not = function (predicate) {
                            return function (a) {
                                return !predicate(a);
                            };
                        };
                        /**
                         * @since 2.11.0
                         */
                        var or = function (second) {
                            return function (first) {
                                return function (a) {
                                    return first(a) || second(a);
                                };
                            };
                        };
                        /**
                         * @since 2.11.0
                         */
                        var and = function (second) {
                            return function (first) {
                                return function (a) {
                                    return first(a) && second(a);
                                };
                            };
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/ReadonlyArray.js":
/*!*************************************************!*\
  !*** ./node_modules/fp-ts/es6/ReadonlyArray.js ***!
  \*************************************************/
/*! exports provided: isEmpty, isNonEmpty, prepend, prependW, append, appendW, makeBy, replicate, fromPredicate, fromOption, fromEither, matchW, match, matchLeftW, matchLeft, foldLeft, matchRightW, matchRight, foldRight, chainWithIndex, scanLeft, scanRight, size, isOutOfBound, lookup, head, last, tail, init, takeLeft, takeRight, takeLeftWhile, spanLeft, dropLeft, dropRight, dropLeftWhile, findIndex, findFirst, findFirstMap, findLast, findLastMap, findLastIndex, insertAt, updateAt, deleteAt, modifyAt, reverse, rights, lefts, sort, zipWith, zip, unzip, prependAll, intersperse, rotate, elem, uniq, sortBy, chop, splitAt, chunksOf, fromOptionK, comprehension, concatW, concat, union, intersection, difference, _chainRecDepthFirst, _chainRecBreadthFirst, of, zero, altW, alt, ap, flatMap, flatten, map, mapWithIndex, separate, filter, filterMapWithIndex, filterMap, compact, partition, partitionWithIndex, partitionMap, partitionMapWithIndex, filterWithIndex, extend, duplicate, foldMapWithIndex, reduce, foldMap, reduceWithIndex, reduceRight, reduceRightWithIndex, traverse, sequence, traverseWithIndex, wither, wilt, unfold, URI, getShow, getSemigroup, getMonoid, getEq, getOrd, getUnionSemigroup, getUnionMonoid, getIntersectionSemigroup, getDifferenceMagma, Functor, flap, Pointed, FunctorWithIndex, Apply, apFirst, apSecond, Applicative, Chain, Monad, chainFirst, Unfoldable, Alt, Zero, guard, Alternative, Extend, Compactable, Filterable, FilterableWithIndex, Foldable, FoldableWithIndex, Traversable, TraversableWithIndex, chainRecDepthFirst, ChainRecDepthFirst, chainRecBreadthFirst, ChainRecBreadthFirst, Witherable, filterE, FromEither, fromEitherK, unsafeInsertAt, unsafeUpdateAt, unsafeDeleteAt, toArray, fromArray, empty, every, some, exists, intercalate, Do, bindTo, let, bind, apS, chain, range, cons, snoc, prependToAll, readonlyArray */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function () { return isEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNonEmpty", function () { return isNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function () { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependW", function () { return prependW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function () { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendW", function () { return appendW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeBy", function () { return makeBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replicate", function () { return replicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromPredicate", function () { return fromPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOption", function () { return fromOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEither", function () { return fromEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchW", function () { return matchW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "match", function () { return match; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchLeftW", function () { return matchLeftW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchLeft", function () { return matchLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldLeft", function () { return foldLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRightW", function () { return matchRightW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRight", function () { return matchRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldRight", function () { return foldRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainWithIndex", function () { return chainWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scanLeft", function () { return scanLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scanRight", function () { return scanRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "size", function () { return size; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOutOfBound", function () { return isOutOfBound; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookup", function () { return lookup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "head", function () { return head; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "last", function () { return last; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tail", function () { return tail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function () { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeLeft", function () { return takeLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeRight", function () { return takeRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeLeftWhile", function () { return takeLeftWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "spanLeft", function () { return spanLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropLeft", function () { return dropLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropRight", function () { return dropRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropLeftWhile", function () { return dropLeftWhile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findIndex", function () { return findIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirst", function () { return findFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirstMap", function () { return findFirstMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLast", function () { return findLast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLastMap", function () { return findLastMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findLastIndex", function () { return findLastIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAt", function () { return insertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateAt", function () { return updateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteAt", function () { return deleteAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyAt", function () { return modifyAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function () { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rights", function () { return rights; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lefts", function () { return lefts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sort", function () { return sort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipWith", function () { return zipWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function () { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unzip", function () { return unzip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependAll", function () { return prependAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersperse", function () { return intersperse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function () { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elem", function () { return elem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniq", function () { return uniq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortBy", function () { return sortBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chop", function () { return chop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitAt", function () { return splitAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chunksOf", function () { return chunksOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromOptionK", function () { return fromOptionK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "comprehension", function () { return comprehension; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatW", function () { return concatW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function () { return concat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "union", function () { return union; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersection", function () { return intersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "difference", function () { return difference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_chainRecDepthFirst", function () { return _chainRecDepthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_chainRecBreadthFirst", function () { return _chainRecBreadthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function () { return of; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zero", function () { return zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "altW", function () { return altW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function () { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function () { return flatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function () { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapWithIndex", function () { return mapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "separate", function () { return separate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMapWithIndex", function () { return filterMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMap", function () { return filterMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compact", function () { return compact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function () { return partition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionWithIndex", function () { return partitionWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMap", function () { return partitionMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMapWithIndex", function () { return partitionMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterWithIndex", function () { return filterWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function () { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicate", function () { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMapWithIndex", function () { return foldMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceWithIndex", function () { return reduceWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRightWithIndex", function () { return reduceRightWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseWithIndex", function () { return traverseWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wither", function () { return wither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wilt", function () { return wilt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unfold", function () { return unfold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOrd", function () { return getOrd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionSemigroup", function () { return getUnionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionMonoid", function () { return getUnionMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIntersectionSemigroup", function () { return getIntersectionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDifferenceMagma", function () { return getDifferenceMagma; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pointed", function () { return Pointed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctorWithIndex", function () { return FunctorWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Apply", function () { return Apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Applicative", function () { return Applicative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chain", function () { return Chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monad", function () { return Monad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unfoldable", function () { return Unfoldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alt", function () { return Alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Zero", function () { return Zero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guard", function () { return guard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alternative", function () { return Alternative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Extend", function () { return Extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compactable", function () { return Compactable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filterable", function () { return Filterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterableWithIndex", function () { return FilterableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foldable", function () { return Foldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FoldableWithIndex", function () { return FoldableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Traversable", function () { return Traversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraversableWithIndex", function () { return TraversableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainRecDepthFirst", function () { return chainRecDepthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChainRecDepthFirst", function () { return ChainRecDepthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainRecBreadthFirst", function () { return chainRecBreadthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChainRecBreadthFirst", function () { return ChainRecBreadthFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Witherable", function () { return Witherable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterE", function () { return filterE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FromEither", function () { return FromEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEitherK", function () { return fromEitherK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeInsertAt", function () { return unsafeInsertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeUpdateAt", function () { return unsafeUpdateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeDeleteAt", function () { return unsafeDeleteAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toArray", function () { return toArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromArray", function () { return fromArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function () { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "every", function () { return every; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function () { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exists", function () { return exists; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercalate", function () { return intercalate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Do", function () { return Do; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function () { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cons", function () { return cons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snoc", function () { return snoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependToAll", function () { return prependToAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readonlyArray", function () { return readonlyArray; });
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _Eq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/es6/Eq.js");
/* harmony import */ var _FromEither__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/es6/FromEither.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./number */ "./node_modules/fp-ts/es6/number.js");
/* harmony import */ var _Ord__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Ord */ "./node_modules/fp-ts/es6/Ord.js");
/* harmony import */ var _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ReadonlyNonEmptyArray */ "./node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js");
/* harmony import */ var _Separated__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/es6/Separated.js");
/* harmony import */ var _Witherable__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/es6/Witherable.js");
/* harmony import */ var _Zero__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Zero */ "./node_modules/fp-ts/es6/Zero.js");
                        var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };













                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * Test whether a `ReadonlyArray` is empty.
                         *
                         * @example
                         * import { isEmpty } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.strictEqual(isEmpty([]), true)
                         *
                         * @category refinements
                         * @since 2.5.0
                         */
                        var isEmpty = function (as) { return as.length === 0; };
                        /**
                         * Test whether a `ReadonlyArray` is non empty.
                         *
                         * @category refinements
                         * @since 2.5.0
                         */
                        var isNonEmpty = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["isNonEmpty"];
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Prepend an element to the front of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { prepend } from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])
                         *
                         * @since 2.10.0
                         */
                        var prepend = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["prepend"];
                        /**
                         * Less strict version of [`prepend`](#prepend).
                         *
                         * @since 2.11.0
                         */
                        var prependW = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["prependW"];
                        /**
                         * Append an element to the end of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { append } from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])
                         *
                         * @since 2.10.0
                         */
                        var append = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["append"];
                        /**
                         * Less strict version of [`append`](#append).
                         *
                         * @since 2.11.0
                         */
                        var appendW = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["appendW"];
                        /**
                         * Return a `ReadonlyArray` of length `n` with element `i` initialized with `f(i)`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { makeBy } from 'fp-ts/ReadonlyArray'
                         *
                         * const double = (n: number): number => n * 2
                         * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])
                         *
                         * @category constructors
                         * @since 2.5.0
                         */
                        var makeBy = function (n, f) { return (n <= 0 ? empty : _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["makeBy"](f)(n)); };
                        /**
                         * Create a `ReadonlyArray` containing a value repeated the specified number of times.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { replicate } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])
                         *
                         * @category constructors
                         * @since 2.5.0
                         */
                        var replicate = function (n, a) { return makeBy(n, function () { return a; }); };
                        function fromPredicate(predicate) {
                            return function (a) { return (predicate(a) ? [a] : empty); };
                        }
                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category conversions
                         * @since 2.11.0
                         */
                        var fromOption = function (ma) { return (_internal__WEBPACK_IMPORTED_MODULE_6__["isNone"](ma) ? empty : [ma.value]); };
                        /**
                         * Transforms an `Either` to a `ReadonlyArray`.
                         *
                         * @category conversions
                         * @since 2.11.0
                         */
                        var fromEither = function (e) { return (_internal__WEBPACK_IMPORTED_MODULE_6__["isLeft"](e) ? empty : [e.right]); };
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return isNonEmpty(as) ? onNonEmpty(as) : onEmpty();
                            };
                        };
                        /**
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var match = matchW;
                        /**
                         * Less strict version of [`matchLeft`](#matchleft).
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchLeftW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return isNonEmpty(as) ? onNonEmpty(_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["head"](as), _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["tail"](as)) : onEmpty();
                            };
                        };
                        /**
                         * Break a `ReadonlyArray` into its first element and remaining elements.
                         *
                         * @example
                         * import { matchLeft } from 'fp-ts/ReadonlyArray'
                         *
                         * const len: <A>(as: ReadonlyArray<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))
                         * assert.strictEqual(len([1, 2, 3]), 3)
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchLeft = matchLeftW;
                        /**
                         * Alias of [`matchLeft`](#matchleft).
                         *
                         * @category pattern matching
                         * @since 2.5.0
                         */
                        var foldLeft = matchLeft;
                        /**
                         * Less strict version of [`matchRight`](#matchright).
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchRightW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return isNonEmpty(as) ? onNonEmpty(_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["init"](as), _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["last"](as)) : onEmpty();
                            };
                        };
                        /**
                         * Break a `ReadonlyArray` into its initial elements and the last element.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchRight = matchRightW;
                        /**
                         * Alias of [`matchRight`](#matchright).
                         *
                         * @category pattern matching
                         * @since 2.5.0
                         */
                        var foldRight = matchRight;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category sequencing
                         * @since 2.7.0
                         */
                        var chainWithIndex = function (f) {
                            return function (as) {
                                if (isEmpty(as)) {
                                    return empty;
                                }
                                var out = [];
                                for (var i = 0; i < as.length; i++) {
                                    out.push.apply(out, f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        /**
                         * Same as `reduce` but it carries over the intermediate steps.
                         *
                         * @example
                         * import { scanLeft } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])
                         *
                         * @since 2.5.0
                         */
                        var scanLeft = function (b, f) {
                            return function (as) {
                                var len = as.length;
                                var out = new Array(len + 1);
                                out[0] = b;
                                for (var i = 0; i < len; i++) {
                                    out[i + 1] = f(out[i], as[i]);
                                }
                                return out;
                            };
                        };
                        /**
                         * Fold an array from the right, keeping all intermediate results instead of only the final result
                         *
                         * @example
                         * import { scanRight } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])
                         *
                         * @since 2.5.0
                         */
                        var scanRight = function (b, f) {
                            return function (as) {
                                var len = as.length;
                                var out = new Array(len + 1);
                                out[len] = b;
                                for (var i = len - 1; i >= 0; i--) {
                                    out[i] = f(as[i], out[i + 1]);
                                }
                                return out;
                            };
                        };
                        /**
                         * Calculate the number of elements in a `ReadonlyArray`.
                         *
                         * @since 2.10.0
                         */
                        var size = function (as) { return as.length; };
                        /**
                         * Test whether an array contains a particular index
                         *
                         * @since 2.5.0
                         */
                        var isOutOfBound = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["isOutOfBound"];
                        function lookup(i, as) {
                            return as === undefined ? function (as) { return lookup(i, as); } : isOutOfBound(i, as) ? _internal__WEBPACK_IMPORTED_MODULE_6__["none"] : _internal__WEBPACK_IMPORTED_MODULE_6__["some"](as[i]);
                        }
                        /**
                         * Get the first element in an array, or `None` if the array is empty
                         *
                         * @example
                         * import { head } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(head([1, 2, 3]), some(1))
                         * assert.deepStrictEqual(head([]), none)
                         *
                         * @since 2.5.0
                         */
                        var head = function (as) { return (isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_6__["some"](_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["head"](as)) : _internal__WEBPACK_IMPORTED_MODULE_6__["none"]); };
                        /**
                         * Get the last element in an array, or `None` if the array is empty
                         *
                         * @example
                         * import { last } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(last([1, 2, 3]), some(3))
                         * assert.deepStrictEqual(last([]), none)
                         *
                         * @since 2.5.0
                         */
                        var last = function (as) { return (isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_6__["some"](_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["last"](as)) : _internal__WEBPACK_IMPORTED_MODULE_6__["none"]); };
                        /**
                         * Get all but the first element of an array, creating a new array, or `None` if the array is empty
                         *
                         * @example
                         * import { tail } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))
                         * assert.deepStrictEqual(tail([]), none)
                         *
                         * @since 2.5.0
                         */
                        var tail = function (as) {
                            return isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_6__["some"](_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["tail"](as)) : _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                        };
                        /**
                         * Get all but the last element of an array, creating a new array, or `None` if the array is empty
                         *
                         * @example
                         * import { init } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))
                         * assert.deepStrictEqual(init([]), none)
                         *
                         * @since 2.5.0
                         */
                        var init = function (as) {
                            return isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_6__["some"](_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["init"](as)) : _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                        };
                        /**
                         * Keep only a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.takeLeft(2)), [1, 2])
                         *
                         * // out of bounds
                         * assert.strictEqual(pipe(input, RA.takeLeft(4)), input)
                         * assert.strictEqual(pipe(input, RA.takeLeft(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var takeLeft = function (n) {
                            return function (as) {
                                return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(0, n);
                            };
                        };
                        /**
                         * Keep only a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.takeRight(2)), [2, 3])
                         *
                         * // out of bounds
                         * assert.strictEqual(pipe(input, RA.takeRight(4)), input)
                         * assert.strictEqual(pipe(input, RA.takeRight(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var takeRight = function (n) {
                            return function (as) {
                                return isOutOfBound(n, as) ? as : n === 0 ? empty : as.slice(-n);
                            };
                        };
                        function takeLeftWhile(predicate) {
                            return function (as) {
                                var out = [];
                                for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {
                                    var a = as_1[_i];
                                    if (!predicate(a)) {
                                        break;
                                    }
                                    out.push(a);
                                }
                                var len = out.length;
                                return len === as.length ? as : len === 0 ? empty : out;
                            };
                        }
                        var spanLeftIndex = function (as, predicate) {
                            var l = as.length;
                            var i = 0;
                            for (; i < l; i++) {
                                if (!predicate(as[i])) {
                                    break;
                                }
                            }
                            return i;
                        };
                        function spanLeft(predicate) {
                            return function (as) {
                                var _a = splitAt(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];
                                return { init: init, rest: rest };
                            };
                        }
                        /**
                         * Drop a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.dropLeft(2)), [3])
                         * assert.strictEqual(pipe(input, RA.dropLeft(0)), input)
                         * assert.strictEqual(pipe(input, RA.dropLeft(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var dropLeft = function (n) {
                            return function (as) {
                                return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(n, as.length);
                            };
                        };
                        /**
                         * Drop a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.dropRight(2)), [1])
                         * assert.strictEqual(pipe(input, RA.dropRight(0)), input)
                         * assert.strictEqual(pipe(input, RA.dropRight(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var dropRight = function (n) {
                            return function (as) {
                                return n <= 0 || isEmpty(as) ? as : n >= as.length ? empty : as.slice(0, as.length - n);
                            };
                        };
                        function dropLeftWhile(predicate) {
                            return function (as) {
                                var i = spanLeftIndex(as, predicate);
                                return i === 0 ? as : i === as.length ? empty : as.slice(i);
                            };
                        }
                        /**
                         * Find the first index for which a predicate holds
                         *
                         * @example
                         * import { findIndex } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))
                         * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var findIndex = function (predicate) {
                            return function (as) {
                                for (var i = 0; i < as.length; i++) {
                                    if (predicate(as[i])) {
                                        return _internal__WEBPACK_IMPORTED_MODULE_6__["some"](i);
                                    }
                                }
                                return _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                            };
                        };
                        function findFirst(predicate) {
                            return function (as) {
                                for (var i = 0; i < as.length; i++) {
                                    if (predicate(as[i])) {
                                        return _internal__WEBPACK_IMPORTED_MODULE_6__["some"](as[i]);
                                    }
                                }
                                return _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                            };
                        }
                        /**
                         * Find the first element returned by an option based selector function
                         *
                         * @example
                         * import { findFirstMap } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age?: number
                         * }
                         *
                         * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
                         *
                         * // returns the name of the first person that has an age
                         * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))
                         *
                         * @since 2.5.0
                         */
                        var findFirstMap = function (f) {
                            return function (as) {
                                for (var i = 0; i < as.length; i++) {
                                    var out = f(as[i]);
                                    if (_internal__WEBPACK_IMPORTED_MODULE_6__["isSome"](out)) {
                                        return out;
                                    }
                                }
                                return _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                            };
                        };
                        function findLast(predicate) {
                            return function (as) {
                                for (var i = as.length - 1; i >= 0; i--) {
                                    if (predicate(as[i])) {
                                        return _internal__WEBPACK_IMPORTED_MODULE_6__["some"](as[i]);
                                    }
                                }
                                return _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                            };
                        }
                        /**
                         * Find the last element returned by an option based selector function
                         *
                         * @example
                         * import { findLastMap } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age?: number
                         * }
                         *
                         * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
                         *
                         * // returns the name of the last person that has an age
                         * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))
                         *
                         * @since 2.5.0
                         */
                        var findLastMap = function (f) {
                            return function (as) {
                                for (var i = as.length - 1; i >= 0; i--) {
                                    var out = f(as[i]);
                                    if (_internal__WEBPACK_IMPORTED_MODULE_6__["isSome"](out)) {
                                        return out;
                                    }
                                }
                                return _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                            };
                        };
                        /**
                         * Returns the index of the last element of the list which matches the predicate
                         *
                         * @example
                         * import { findLastIndex } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface X {
                         *   readonly a: number
                         *   readonly b: number
                         * }
                         * const xs: ReadonlyArray<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]
                         * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))
                         * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)
                         *
                         *
                         * @since 2.5.0
                         */
                        var findLastIndex = function (predicate) {
                            return function (as) {
                                for (var i = as.length - 1; i >= 0; i--) {
                                    if (predicate(as[i])) {
                                        return _internal__WEBPACK_IMPORTED_MODULE_6__["some"](i);
                                    }
                                }
                                return _internal__WEBPACK_IMPORTED_MODULE_6__["none"];
                            };
                        };
                        /**
                         * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds
                         *
                         * @example
                         * import { insertAt } from 'fp-ts/ReadonlyArray'
                         * import { some } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))
                         *
                         * @since 2.5.0
                         */
                        var insertAt = function (i, a) {
                            return function (as) {
                                return i < 0 || i > as.length ? _internal__WEBPACK_IMPORTED_MODULE_6__["none"] : _internal__WEBPACK_IMPORTED_MODULE_6__["some"](_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["unsafeInsertAt"](i, a, as));
                            };
                        };
                        /**
                         * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds
                         *
                         * @example
                         * import { updateAt } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))
                         * assert.deepStrictEqual(updateAt(1, 1)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var updateAt = function (i, a) {
                            return modifyAt(i, function () { return a; });
                        };
                        /**
                         * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds
                         *
                         * @example
                         * import { deleteAt } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))
                         * assert.deepStrictEqual(deleteAt(1)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var deleteAt = function (i) {
                            return function (as) {
                                return isOutOfBound(i, as) ? _internal__WEBPACK_IMPORTED_MODULE_6__["none"] : _internal__WEBPACK_IMPORTED_MODULE_6__["some"](unsafeDeleteAt(i, as));
                            };
                        };
                        /**
                         * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out
                         * of bounds
                         *
                         * @example
                         * import { modifyAt } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * const double = (x: number): number => x * 2
                         * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))
                         * assert.deepStrictEqual(modifyAt(1, double)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var modifyAt = function (i, f) {
                            return function (as) {
                                return isOutOfBound(i, as) ? _internal__WEBPACK_IMPORTED_MODULE_6__["none"] : _internal__WEBPACK_IMPORTED_MODULE_6__["some"](unsafeUpdateAt(i, f(as[i]), as));
                            };
                        };
                        /**
                         * Reverse an array, creating a new array
                         *
                         * @example
                         * import { reverse } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])
                         *
                         * @since 2.5.0
                         */
                        var reverse = function (as) { return (as.length <= 1 ? as : as.slice().reverse()); };
                        /**
                         * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order
                         *
                         * @example
                         * import { rights } from 'fp-ts/ReadonlyArray'
                         * import { right, left } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])
                         *
                         * @since 2.5.0
                         */
                        var rights = function (as) {
                            var r = [];
                            for (var i = 0; i < as.length; i++) {
                                var a = as[i];
                                if (a._tag === 'Right') {
                                    r.push(a.right);
                                }
                            }
                            return r;
                        };
                        /**
                         * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order
                         *
                         * @example
                         * import { lefts } from 'fp-ts/ReadonlyArray'
                         * import { left, right } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])
                         *
                         * @since 2.5.0
                         */
                        var lefts = function (as) {
                            var r = [];
                            for (var i = 0; i < as.length; i++) {
                                var a = as[i];
                                if (a._tag === 'Left') {
                                    r.push(a.left);
                                }
                            }
                            return r;
                        };
                        /**
                         * Sort the elements of an array in increasing order, creating a new array
                         *
                         * @example
                         * import { sort } from 'fp-ts/ReadonlyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])
                         *
                         * @since 2.5.0
                         */
                        var sort = function (O) {
                            return function (as) {
                                return as.length <= 1 ? as : as.slice().sort(O.compare);
                            };
                        };
                        // TODO: curry and make data-last in v3
                        /**
                         * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one
                         * input array is short, excess elements of the longer array are discarded.
                         *
                         * @example
                         * import { zipWith } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])
                         *
                         * @since 2.5.0
                         */
                        var zipWith = function (fa, fb, f) {
                            var fc = [];
                            var len = Math.min(fa.length, fb.length);
                            for (var i = 0; i < len; i++) {
                                fc[i] = f(fa[i], fb[i]);
                            }
                            return fc;
                        };
                        function zip(as, bs) {
                            if (bs === undefined) {
                                return function (bs) { return zip(bs, as); };
                            }
                            return zipWith(as, bs, function (a, b) { return [a, b]; });
                        }
                        /**
                         * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays
                         *
                         * @example
                         * import { unzip } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])
                         *
                         * @since 2.5.0
                         */
                        var unzip = function (as) {
                            var fa = [];
                            var fb = [];
                            for (var i = 0; i < as.length; i++) {
                                fa[i] = as[i][0];
                                fb[i] = as[i][1];
                            }
                            return [fa, fb];
                        };
                        /**
                         * Prepend an element to every member of an array
                         *
                         * @example
                         * import { prependAll } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.10.0
                         */
                        var prependAll = function (middle) {
                            var f = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["prependAll"](middle);
                            return function (as) { return (isNonEmpty(as) ? f(as) : as); };
                        };
                        /**
                         * Places an element in between members of an array
                         *
                         * @example
                         * import { intersperse } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.9.0
                         */
                        var intersperse = function (middle) {
                            var f = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["intersperse"](middle);
                            return function (as) { return (isNonEmpty(as) ? f(as) : as); };
                        };
                        /**
                         * Rotate a `ReadonlyArray` by `n` steps.
                         *
                         * @example
                         * import { rotate } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
                         *
                         * @since 2.5.0
                         */
                        var rotate = function (n) {
                            var f = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["rotate"](n);
                            return function (as) { return (isNonEmpty(as) ? f(as) : as); };
                        };
                        function elem(E) {
                            return function (a, as) {
                                if (as === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (as) { return elemE_1(a, as); };
                                }
                                var predicate = function (element) { return E.equals(element, a); };
                                var i = 0;
                                for (; i < as.length; i++) {
                                    if (predicate(as[i])) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                        }
                        /**
                         * Remove duplicates from an array, keeping the first occurrence of an element.
                         *
                         * @example
                         * import { uniq } from 'fp-ts/ReadonlyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])
                         *
                         * @since 2.5.0
                         */
                        var uniq = function (E) {
                            var f = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["uniq"](E);
                            return function (as) { return (isNonEmpty(as) ? f(as) : as); };
                        };
                        /**
                         * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,
                         * etc...
                         *
                         * @example
                         * import { sortBy } from 'fp-ts/ReadonlyArray'
                         * import { contramap } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age: number
                         * }
                         * const byName = pipe(S.Ord, contramap((p: Person) => p.name))
                         * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))
                         *
                         * const sortByNameByAge = sortBy([byName, byAge])
                         *
                         * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]
                         * assert.deepStrictEqual(sortByNameByAge(persons), [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 2 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 }
                         * ])
                         *
                         * @since 2.5.0
                         */
                        var sortBy = function (ords) {
                            var f = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["sortBy"](ords);
                            return function (as) { return (isNonEmpty(as) ? f(as) : as); };
                        };
                        /**
                         * A useful recursion pattern for processing a `ReadonlyArray` to produce a new `ReadonlyArray`, often used for "chopping" up the input
                         * `ReadonlyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyArray` and produce a
                         * value and the tail of the `ReadonlyArray`.
                         *
                         * @example
                         * import { Eq } from 'fp-ts/Eq'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const group = <A>(S: Eq<A>): ((as: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>) => {
                         *   return RA.chop(as => {
                         *     const { init, rest } = pipe(as, RA.spanLeft((a: A) => S.equals(a, as[0])))
                         *     return [init, rest]
                         *   })
                         * }
                         * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])
                         *
                         * @since 2.5.0
                         */
                        var chop = function (f) {
                            var g = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["chop"](f);
                            return function (as) { return (isNonEmpty(as) ? g(as) : empty); };
                        };
                        /**
                         * Splits a `ReadonlyArray` into two pieces, the first piece has max `n` elements.
                         *
                         * @example
                         * import { splitAt } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])
                         *
                         * @since 2.5.0
                         */
                        var splitAt = function (n) {
                            return function (as) {
                                return n >= 1 && isNonEmpty(as) ? _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["splitAt"](n)(as) : isEmpty(as) ? [as, empty] : [empty, as];
                            };
                        };
                        /**
                         * Splits a `ReadonlyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of
                         * the `ReadonlyArray`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive
                         * definition of `chunksOf`; it satisfies the property that:
                         *
                         * ```ts
                         * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))
                         * ```
                         *
                         * whenever `n` evenly divides the length of `as`.
                         *
                         * @example
                         * import { chunksOf } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])
                         *
                         * @since 2.5.0
                         */
                        var chunksOf = function (n) {
                            var f = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["chunksOf"](n);
                            return function (as) { return (isNonEmpty(as) ? f(as) : empty); };
                        };
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        var fromOptionK = function (f) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return fromOption(f.apply(void 0, a));
                            };
                        };
                        function comprehension(input, f, g) {
                            if (g === void 0) { g = function () { return true; }; }
                            var go = function (scope, input) {
                                return isNonEmpty(input)
                                    ? flatMap(_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["head"](input), function (a) { return go(Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(scope, append(a)), _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["tail"](input)); })
                                    : g.apply(void 0, scope) ? [f.apply(void 0, scope)]
                                        : empty;
                            };
                            return go(empty, input);
                        }
                        /**
                         * @since 2.11.0
                         */
                        var concatW = function (second) {
                            return function (first) {
                                return isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second);
                            };
                        };
                        /**
                         * @since 2.11.0
                         */
                        var concat = concatW;
                        function union(E) {
                            var unionE = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["union"](E);
                            return function (first, second) {
                                if (second === undefined) {
                                    var unionE_1 = union(E);
                                    return function (second) { return unionE_1(second, first); };
                                }
                                return isNonEmpty(first) && isNonEmpty(second) ? unionE(second)(first) : isNonEmpty(first) ? first : second;
                            };
                        }
                        function intersection(E) {
                            var elemE = elem(E);
                            return function (xs, ys) {
                                if (ys === undefined) {
                                    var intersectionE_1 = intersection(E);
                                    return function (ys) { return intersectionE_1(ys, xs); };
                                }
                                return xs.filter(function (a) { return elemE(a, ys); });
                            };
                        }
                        function difference(E) {
                            var elemE = elem(E);
                            return function (xs, ys) {
                                if (ys === undefined) {
                                    var differenceE_1 = difference(E);
                                    return function (ys) { return differenceE_1(ys, xs); };
                                }
                                return xs.filter(function (a) { return !elemE(a, ys); });
                            };
                        }
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, map(f)); };
                        var _mapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, mapWithIndex(f)); };
                        var _ap = function (fab, fa) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fab, ap(fa)); };
                        var _filter = function (fa, predicate) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, filter(predicate));
                        };
                        var _filterMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, filterMap(f)); };
                        var _partition = function (fa, predicate) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, partition(predicate));
                        };
                        var _partitionMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, partitionMap(f)); };
                        var _partitionWithIndex = function (fa, predicateWithIndex) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, partitionWithIndex(predicateWithIndex)); };
                        var _partitionMapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, partitionMapWithIndex(f)); };
                        var _alt = function (fa, that) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, alt(that)); };
                        var _reduce = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, reduce(b, f)); };
                        var _foldMap = function (M) {
                            var foldMapM = foldMap(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, foldMapM(f)); };
                        };
                        var _reduceRight = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, reduceRight(b, f)); };
                        var _reduceWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, reduceWithIndex(b, f));
                        };
                        var _foldMapWithIndex = function (M) {
                            var foldMapWithIndexM = foldMapWithIndex(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, foldMapWithIndexM(f)); };
                        };
                        var _reduceRightWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, reduceRightWithIndex(b, f));
                        };
                        var _filterMapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, filterMapWithIndex(f)); };
                        var _filterWithIndex = function (fa, predicateWithIndex) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, filterWithIndex(predicateWithIndex)); };
                        var _extend = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, extend(f)); };
                        var _traverse = function (F) {
                            var traverseF = traverse(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _traverseWithIndex = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(ta, traverseWithIndexF(f)); };
                        };
                        /** @internal */
                        var _chainRecDepthFirst = function (a, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(a, chainRecDepthFirst(f)); };
                        /** @internal */
                        var _chainRecBreadthFirst = function (a, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(a, chainRecBreadthFirst(f)); };
                        /**
                         * @category constructors
                         * @since 2.5.0
                         */
                        var of = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["of"];
                        /**
                         * @since 2.7.0
                         */
                        var zero = function () { return empty; };
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.altW(() => ['a', 'b'])
                         *   ),
                         *   [1, 2, 3, 'a', 'b']
                         * )
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (fa) {
                                return fa.concat(that());
                            };
                        };
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `ReadonlyArray` concatenates the inputs into a single array.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.alt(() => [4, 5])
                         *   ),
                         *   [1, 2, 3, 4, 5]
                         * )
                         *
                         * @category error handling
                         * @since 2.5.0
                         */
                        var alt = altW;
                        /**
                         * @since 2.5.0
                         */
                        var ap = function (fa) {
                            return flatMap(function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, map(f)); });
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.flatMap((n) => [`a${n}`, `b${n}`])
                         *   ),
                         *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.flatMap(() => [])
                         *   ),
                         *   []
                         * )
                         *
                         * @category sequencing
                         * @since 2.14.0
                         */
                        var flatMap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, function (ma, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(ma, chainWithIndex(function (i, a) { return f(a, i); }));
                        });
                        /**
                         * @category sequencing
                         * @since 2.5.0
                         */
                        var flatten = /*#__PURE__*/ flatMap(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.5.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return fa.map(function (a) { return f(a); });
                            };
                        };
                        /**
                         * @category mapping
                         * @since 2.5.0
                         */
                        var mapWithIndex = function (f) {
                            return function (fa) {
                                return fa.map(function (a, i) { return f(i, a); });
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var separate = function (fa) {
                            var left = [];
                            var right = [];
                            for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
                                var e = fa_1[_i];
                                if (e._tag === 'Left') {
                                    left.push(e.left);
                                }
                                else {
                                    right.push(e.right);
                                }
                            }
                            return Object(_Separated__WEBPACK_IMPORTED_MODULE_10__["separated"])(left, right);
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filter = function (predicate) {
                            return function (as) {
                                return as.filter(predicate);
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterMapWithIndex = function (f) {
                            return function (fa) {
                                var out = [];
                                for (var i = 0; i < fa.length; i++) {
                                    var optionB = f(i, fa[i]);
                                    if (_internal__WEBPACK_IMPORTED_MODULE_6__["isSome"](optionB)) {
                                        out.push(optionB.value);
                                    }
                                }
                                return out;
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterMap = function (f) {
                            return filterMapWithIndex(function (_, a) { return f(a); });
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var compact = /*#__PURE__*/ filterMap(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partition = function (predicate) {
                            return partitionWithIndex(function (_, a) { return predicate(a); });
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionWithIndex = function (predicateWithIndex) {
                            return function (as) {
                                var left = [];
                                var right = [];
                                for (var i = 0; i < as.length; i++) {
                                    var a = as[i];
                                    if (predicateWithIndex(i, a)) {
                                        right.push(a);
                                    }
                                    else {
                                        left.push(a);
                                    }
                                }
                                return Object(_Separated__WEBPACK_IMPORTED_MODULE_10__["separated"])(left, right);
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionMap = function (f) {
                            return partitionMapWithIndex(function (_, a) { return f(a); });
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionMapWithIndex = function (f) {
                            return function (fa) {
                                var left = [];
                                var right = [];
                                for (var i = 0; i < fa.length; i++) {
                                    var e = f(i, fa[i]);
                                    if (e._tag === 'Left') {
                                        left.push(e.left);
                                    }
                                    else {
                                        right.push(e.right);
                                    }
                                }
                                return Object(_Separated__WEBPACK_IMPORTED_MODULE_10__["separated"])(left, right);
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterWithIndex = function (predicateWithIndex) {
                            return function (as) {
                                return as.filter(function (a, i) { return predicateWithIndex(i, a); });
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var extend = function (f) {
                            return function (wa) {
                                return wa.map(function (_, i) { return f(wa.slice(i)); });
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var duplicate = /*#__PURE__*/ extend(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMapWithIndex = function (M) {
                            return function (f) {
                                return function (fa) {
                                    return fa.reduce(function (b, a, i) { return M.concat(b, f(i, a)); }, M.empty);
                                };
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduce = function (b, f) {
                            return reduceWithIndex(b, function (_, b, a) { return f(b, a); });
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMap = function (M) {
                            var foldMapWithIndexM = foldMapWithIndex(M);
                            return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceWithIndex = function (b, f) {
                            return function (fa) {
                                var len = fa.length;
                                var out = b;
                                for (var i = 0; i < len; i++) {
                                    out = f(i, out, fa[i]);
                                }
                                return out;
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRight = function (b, f) {
                            return reduceRightWithIndex(b, function (_, a, b) { return f(a, b); });
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRightWithIndex = function (b, f) {
                            return function (fa) {
                                return fa.reduceRight(function (b, a, i) { return f(i, a, b); }, b);
                            };
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) {
                            return function (ta) {
                                return _reduce(ta, F.of(zero()), function (fas, fa) {
                                    return F.ap(F.map(fas, function (as) { return function (a) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(as, append(a)); }; }), fa);
                                });
                            };
                        };
                        /**
                         * @category sequencing
                         * @since 2.6.3
                         */
                        var traverseWithIndex = function (F) {
                            return function (f) {
                                return reduceWithIndex(F.of(zero()), function (i, fbs, a) {
                                    return F.ap(F.map(fbs, function (bs) { return function (b) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(bs, append(b)); }; }), f(i, a));
                                });
                            };
                        };
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wither = function (F) {
                            var _witherF = _wither(F);
                            return function (f) { return function (fa) { return _witherF(fa, f); }; };
                        };
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wilt = function (F) {
                            var _wiltF = _wilt(F);
                            return function (f) { return function (fa) { return _wiltF(fa, f); }; };
                        };
                        /**
                         * @since 2.6.6
                         */
                        var unfold = function (b, f) {
                            var out = [];
                            var bb = b;
                            // eslint-disable-next-line no-constant-condition
                            while (true) {
                                var mt = f(bb);
                                if (_internal__WEBPACK_IMPORTED_MODULE_6__["isSome"](mt)) {
                                    var _a = mt.value, a = _a[0], b_1 = _a[1];
                                    out.push(a);
                                    bb = b_1;
                                }
                                else {
                                    break;
                                }
                            }
                            return out;
                        };
                        /**
                         * @category type lambdas
                         * @since 2.5.0
                         */
                        var URI = 'ReadonlyArray';
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        var getShow = function (S) {
                            return ({
                                show: function (as) { return "[".concat(as.map(S.show).join(', '), "]"); }
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: function (first, second) { return (isEmpty(first) ? second : isEmpty(second) ? first : first.concat(second)); }
                            });
                        };
                        /**
                         * Returns a `Monoid` for `ReadonlyArray<A>`.
                         *
                         * @example
                         * import { getMonoid } from 'fp-ts/ReadonlyArray'
                         *
                         * const M = getMonoid<number>()
                         * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getMonoid = function () {
                            return ({
                                concat: getSemigroup().concat,
                                empty: empty
                            });
                        };
                        /**
                         * Derives an `Eq` over the `ReadonlyArray` of a given element type from the `Eq` of that type. The derived `Eq` defines two
                         * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of
                         * different lengths, the result is non equality.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { getEq } from 'fp-ts/ReadonlyArray'
                         *
                         * const E = getEq(S.Eq)
                         * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)
                         * assert.strictEqual(E.equals(['a'], []), false)
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getEq = function (E) {
                            return Object(_Eq__WEBPACK_IMPORTED_MODULE_2__["fromEquals"])(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });
                        };
                        /**
                         * Derives an `Ord` over the `ReadonlyArray` of a given element type from the `Ord` of that type. The ordering between two such
                         * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in
                         * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have
                         * the same length, the result is equality.
                         *
                         * @example
                         * import { getOrd } from 'fp-ts/ReadonlyArray'
                         * import * as S from 'fp-ts/string'
                         *
                         * const O = getOrd(S.Ord)
                         * assert.strictEqual(O.compare(['b'], ['a']), 1)
                         * assert.strictEqual(O.compare(['a'], ['a']), 0)
                         * assert.strictEqual(O.compare(['a'], ['b']), -1)
                         *
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getOrd = function (O) {
                            return Object(_Ord__WEBPACK_IMPORTED_MODULE_8__["fromCompare"])(function (a, b) {
                                var aLen = a.length;
                                var bLen = b.length;
                                var len = Math.min(aLen, bLen);
                                for (var i = 0; i < len; i++) {
                                    var ordering = O.compare(a[i], b[i]);
                                    if (ordering !== 0) {
                                        return ordering;
                                    }
                                }
                                return _number__WEBPACK_IMPORTED_MODULE_7__["Ord"].compare(aLen, bLen);
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (E) {
                            var unionE = union(E);
                            return {
                                concat: function (first, second) { return unionE(second)(first); }
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionMonoid = function (E) {
                            return ({
                                concat: getUnionSemigroup(E).concat,
                                empty: empty
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getIntersectionSemigroup = function (E) {
                            var intersectionE = intersection(E);
                            return {
                                concat: function (first, second) { return intersectionE(second)(first); }
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getDifferenceMagma = function (E) {
                            var differenceE = difference(E);
                            return {
                                concat: function (first, second) { return differenceE(second)(first); }
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["flap"])(Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Pointed = {
                            URI: URI,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FunctorWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Apply = {
                            URI: URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.5.0
                         */
                        var apFirst = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apFirst"])(Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.5.0
                         */
                        var apSecond = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apSecond"])(Apply);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Applicative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Chain = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Monad = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.chainFirst(() => ['a', 'b'])
                         *   ),
                         *   [1, 1, 2, 2, 3, 3]
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.chainFirst(() => [])
                         *   ),
                         *   []
                         * )
                         *
                         * @category sequencing
                         * @since 2.5.0
                         */
                        var chainFirst =
/*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["chainFirst"])(Chain);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Unfoldable = {
                            URI: URI,
                            unfold: unfold
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alt = {
                            URI: URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var Zero = {
                            URI: URI,
                            zero: zero
                        };
                        /**
                         * @category do notation
                         * @since 2.11.0
                         */
                        var guard = /*#__PURE__*/ Object(_Zero__WEBPACK_IMPORTED_MODULE_12__["guard"])(Zero, Pointed);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alternative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            alt: _alt,
                            zero: zero
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Extend = {
                            URI: URI,
                            map: _map,
                            extend: _extend
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Compactable = {
                            URI: URI,
                            compact: compact,
                            separate: separate
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Filterable = {
                            URI: URI,
                            map: _map,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FilterableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex,
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Foldable = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FoldableWithIndex = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Traversable = {
                            URI: URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var TraversableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverse: _traverse,
                            sequence: sequence,
                            traverseWithIndex: _traverseWithIndex
                        };
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var chainRecDepthFirst = function (f) {
                            return function (a) {
                                var todo = __spreadArray([], f(a), true);
                                var out = [];
                                while (todo.length > 0) {
                                    var e = todo.shift();
                                    if (_internal__WEBPACK_IMPORTED_MODULE_6__["isLeft"](e)) {
                                        todo.unshift.apply(todo, f(e.left));
                                    }
                                    else {
                                        out.push(e.right);
                                    }
                                }
                                return out;
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var ChainRecDepthFirst = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap,
                            chainRec: _chainRecDepthFirst
                        };
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var chainRecBreadthFirst = function (f) {
                            return function (a) {
                                var initial = f(a);
                                var todo = [];
                                var out = [];
                                function go(e) {
                                    if (_internal__WEBPACK_IMPORTED_MODULE_6__["isLeft"](e)) {
                                        f(e.left).forEach(function (v) { return todo.push(v); });
                                    }
                                    else {
                                        out.push(e.right);
                                    }
                                }
                                for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {
                                    var e = initial_1[_i];
                                    go(e);
                                }
                                while (todo.length > 0) {
                                    go(todo.shift());
                                }
                                return out;
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var ChainRecBreadthFirst = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap,
                            chainRec: _chainRecBreadthFirst
                        };
                        var _wither = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_11__["witherDefault"])(Traversable, Compactable);
                        var _wilt = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_11__["wiltDefault"])(Traversable, Compactable);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Witherable = {
                            URI: URI,
                            map: _map,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            wither: _wither,
                            wilt: _wilt
                        };
                        /**
                         * Filter values inside a context.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as T from 'fp-ts/Task'
                         *
                         * const filterE = RA.filterE(T.ApplicativePar)
                         * async function test() {
                         *   assert.deepStrictEqual(
                         *     await pipe(
                         *       [-1, 2, 3],
                         *       filterE((n) => T.of(n > 0))
                         *     )(),
                         *     [2, 3]
                         *   )
                         * }
                         * test()
                         *
                         * @since 2.11.0
                         */
                        var filterE = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_11__["filterE"])(Witherable);
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var FromEither = {
                            URI: URI,
                            fromEither: fromEither
                        };
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        var fromEitherK = /*#__PURE__*/ Object(_FromEither__WEBPACK_IMPORTED_MODULE_3__["fromEitherK"])(FromEither);
                        // -------------------------------------------------------------------------------------
                        // unsafe
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category unsafe
                         * @since 2.5.0
                         */
                        var unsafeInsertAt = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["unsafeInsertAt"];
                        /**
                         * @category unsafe
                         * @since 2.5.0
                         */
                        var unsafeUpdateAt = function (i, a, as) {
                            return isNonEmpty(as) ? _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["unsafeUpdateAt"](i, a, as) : as;
                        };
                        /**
                         * @category unsafe
                         * @since 2.5.0
                         */
                        var unsafeDeleteAt = function (i, as) {
                            var xs = as.slice();
                            xs.splice(i, 1);
                            return xs;
                        };
                        /**
                         * @category conversions
                         * @since 2.5.0
                         */
                        var toArray = function (as) { return as.slice(); };
                        /**
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromArray = function (as) { return (isEmpty(as) ? empty : as.slice()); };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * An empty array
                         *
                         * @since 2.5.0
                         */
                        var empty = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["empty"];
                        function every(predicate) {
                            return function (as) { return as.every(predicate); };
                        }
                        /**
                         * Check if a predicate holds true for any array member.
                         *
                         * @example
                         * import { some } from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const isPositive = (n: number): boolean => n > 0
                         *
                         * assert.deepStrictEqual(pipe([-1, -2, 3], some(isPositive)), true)
                         * assert.deepStrictEqual(pipe([-1, -2, -3], some(isPositive)), false)
                         *
                         * @since 2.9.0
                         */
                        var some = function (predicate) {
                            return function (as) {
                                return as.some(predicate);
                            };
                        };
                        /**
                         * Alias of [`some`](#some)
                         *
                         * @since 2.11.0
                         */
                        var exists = some;
                        /**
                         * Places an element in between members of a `ReadonlyArray`, then folds the results using the provided `Monoid`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { intercalate } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')
                         *
                         * @since 2.12.0
                         */
                        var intercalate = function (M) {
                            var intercalateM = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["intercalate"](M);
                            return function (middle) { return match(function () { return M.empty; }, intercalateM(middle)); };
                        };
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        var Do = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_6__["emptyRecord"]);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindTo = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["bindTo"])(Functor);
                        var let_ = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["let"])(Functor);

                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bind = /*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["bind"])(Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apS = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apS"])(Apply);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.5.0
                         */
                        var chain = flatMap;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `ReadonlyNonEmptyArray` module instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var range = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["range"];
                        /**
                         * Use [`prepend`](#prepend) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var cons = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["cons"];
                        /**
                         * Use [`append`](#append) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var snoc = _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_9__["snoc"];
                        /**
                         * Use [`prependAll`](#prependall) instead.
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        var prependToAll = prependAll;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `RA.Functor` instead of `RA.readonlyArray`
                         * (where `RA` is from `import RA from 'fp-ts/ReadonlyArray'`)
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var readonlyArray = {
                            URI: URI,
                            compact: compact,
                            separate: separate,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            mapWithIndex: _mapWithIndex,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex,
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex,
                            alt: _alt,
                            zero: zero,
                            unfold: unfold,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex,
                            extend: _extend,
                            wither: _wither,
                            wilt: _wilt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js":
/*!*********************************************************!*\
  !*** ./node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js ***!
  \*********************************************************/
/*! exports provided: empty, isNonEmpty, isOutOfBound, prependW, prepend, appendW, append, unsafeInsertAt, unsafeUpdateAt, uniq, sortBy, union, rotate, fromReadonlyArray, makeBy, replicate, range, unprepend, unappend, fromArray, concatW, concat, reverse, group, groupBy, sort, updateAt, modifyAt, zipWith, zip, unzip, prependAll, intersperse, chainWithIndex, chop, splitAt, chunksOf, of, altW, alt, ap, flatMap, extend, duplicate, flatten, map, mapWithIndex, reduce, foldMap, reduceRight, reduceWithIndex, foldMapWithIndex, reduceRightWithIndex, traverse, sequence, traverseWithIndex, extract, URI, getShow, getSemigroup, getEq, getUnionSemigroup, Functor, flap, Pointed, FunctorWithIndex, Apply, apFirst, apSecond, Applicative, Chain, chainFirst, Monad, Foldable, FoldableWithIndex, Traversable, TraversableWithIndex, Alt, Comonad, Do, bindTo, let, bind, apS, head, tail, last, init, min, max, concatAll, matchLeft, matchRight, modifyHead, updateHead, modifyLast, updateLast, intercalate, chain, groupSort, filter, filterWithIndex, uncons, unsnoc, cons, snoc, insertAt, prependToAll, fold, readonlyNonEmptyArray */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function () { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNonEmpty", function () { return isNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOutOfBound", function () { return isOutOfBound; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependW", function () { return prependW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prepend", function () { return prepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendW", function () { return appendW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "append", function () { return append; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeInsertAt", function () { return unsafeInsertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeUpdateAt", function () { return unsafeUpdateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniq", function () { return uniq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortBy", function () { return sortBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "union", function () { return union; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function () { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromReadonlyArray", function () { return fromReadonlyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeBy", function () { return makeBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replicate", function () { return replicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function () { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unprepend", function () { return unprepend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unappend", function () { return unappend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromArray", function () { return fromArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatW", function () { return concatW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function () { return concat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function () { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function () { return group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupBy", function () { return groupBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sort", function () { return sort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateAt", function () { return updateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyAt", function () { return modifyAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipWith", function () { return zipWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function () { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unzip", function () { return unzip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependAll", function () { return prependAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersperse", function () { return intersperse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainWithIndex", function () { return chainWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chop", function () { return chop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitAt", function () { return splitAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chunksOf", function () { return chunksOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function () { return of; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "altW", function () { return altW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function () { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function () { return flatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function () { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "duplicate", function () { return duplicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function () { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapWithIndex", function () { return mapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceWithIndex", function () { return reduceWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMapWithIndex", function () { return foldMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRightWithIndex", function () { return reduceRightWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseWithIndex", function () { return traverseWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extract", function () { return extract; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionSemigroup", function () { return getUnionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pointed", function () { return Pointed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctorWithIndex", function () { return FunctorWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Apply", function () { return Apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Applicative", function () { return Applicative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chain", function () { return Chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monad", function () { return Monad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foldable", function () { return Foldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FoldableWithIndex", function () { return FoldableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Traversable", function () { return Traversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraversableWithIndex", function () { return TraversableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alt", function () { return Alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Comonad", function () { return Comonad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Do", function () { return Do; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "head", function () { return head; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tail", function () { return tail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "last", function () { return last; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function () { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function () { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function () { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatAll", function () { return concatAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchLeft", function () { return matchLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchRight", function () { return matchRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyHead", function () { return modifyHead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateHead", function () { return updateHead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyLast", function () { return modifyLast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateLast", function () { return updateLast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercalate", function () { return intercalate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupSort", function () { return groupSort; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterWithIndex", function () { return filterWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uncons", function () { return uncons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsnoc", function () { return unsnoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cons", function () { return cons; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "snoc", function () { return snoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAt", function () { return insertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prependToAll", function () { return prependToAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fold", function () { return fold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readonlyNonEmptyArray", function () { return readonlyNonEmptyArray; });
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _Eq__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/es6/Eq.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _Ord__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Ord */ "./node_modules/fp-ts/es6/Ord.js");
/* harmony import */ var _Semigroup__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Semigroup */ "./node_modules/fp-ts/es6/Semigroup.js");
                        var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };








                        // -------------------------------------------------------------------------------------
                        // internal
                        // -------------------------------------------------------------------------------------
                        /**
                         * @internal
                         */
                        var empty = _internal__WEBPACK_IMPORTED_MODULE_5__["emptyReadonlyArray"];
                        /**
                         * @internal
                         */
                        var isNonEmpty = _internal__WEBPACK_IMPORTED_MODULE_5__["isNonEmpty"];
                        /**
                         * @internal
                         */
                        var isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };
                        /**
                         * @internal
                         */
                        var prependW = function (head) {
                            return function (tail) {
                                return __spreadArray([head], tail, true);
                            };
                        };
                        /**
                         * @internal
                         */
                        var prepend = prependW;
                        /**
                         * @internal
                         */
                        var appendW = function (end) {
                            return function (init) {
                                return __spreadArray(__spreadArray([], init, true), [end], false);
                            };
                        };
                        /**
                         * @internal
                         */
                        var append = appendW;
                        /**
                         * @internal
                         */
                        var unsafeInsertAt = function (i, a, as) {
                            if (isNonEmpty(as)) {
                                var xs = _internal__WEBPACK_IMPORTED_MODULE_5__["fromReadonlyNonEmptyArray"](as);
                                xs.splice(i, 0, a);
                                return xs;
                            }
                            return [a];
                        };
                        /**
                         * @internal
                         */
                        var unsafeUpdateAt = function (i, a, as) {
                            if (as[i] === a) {
                                return as;
                            }
                            else {
                                var xs = _internal__WEBPACK_IMPORTED_MODULE_5__["fromReadonlyNonEmptyArray"](as);
                                xs[i] = a;
                                return xs;
                            }
                        };
                        /**
                         * Remove duplicates from a `ReadonlyNonEmptyArray`, keeping the first occurrence of an element.
                         *
                         * @example
                         * import { uniq } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])
                         *
                         * @since 2.11.0
                         */
                        var uniq = function (E) {
                            return function (as) {
                                if (as.length === 1) {
                                    return as;
                                }
                                var out = [head(as)];
                                var rest = tail(as);
                                var _loop_1 = function (a) {
                                    if (out.every(function (o) { return !E.equals(o, a); })) {
                                        out.push(a);
                                    }
                                };
                                for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
                                    var a = rest_1[_i];
                                    _loop_1(a);
                                }
                                return out;
                            };
                        };
                        /**
                         * Sort the elements of a `ReadonlyNonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,
                         * etc...
                         *
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { contramap } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Person {
                         *   name: string
                         *   age: number
                         * }
                         *
                         * const byName = pipe(S.Ord, contramap((p: Person) => p.name))
                         *
                         * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))
                         *
                         * const sortByNameByAge = RNEA.sortBy([byName, byAge])
                         *
                         * const persons: RNEA.ReadonlyNonEmptyArray<Person> = [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 },
                         *   { name: 'b', age: 2 }
                         * ]
                         *
                         * assert.deepStrictEqual(sortByNameByAge(persons), [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 2 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 }
                         * ])
                         *
                         * @since 2.11.0
                         */
                        var sortBy = function (ords) {
                            if (isNonEmpty(ords)) {
                                var M = Object(_Ord__WEBPACK_IMPORTED_MODULE_6__["getMonoid"])();
                                return sort(ords.reduce(M.concat, M.empty));
                            }
                            return _function__WEBPACK_IMPORTED_MODULE_3__["identity"];
                        };
                        /**
                         * @since 2.11.0
                         */
                        var union = function (E) {
                            var uniqE = uniq(E);
                            return function (second) { return function (first) { return uniqE(Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(first, concat(second))); }; };
                        };
                        /**
                         * Rotate a `ReadonlyNonEmptyArray` by `n` steps.
                         *
                         * @example
                         * import { rotate } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
                         * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])
                         *
                         * @since 2.11.0
                         */
                        var rotate = function (n) {
                            return function (as) {
                                var len = as.length;
                                var m = Math.round(n) % len;
                                if (isOutOfBound(Math.abs(m), as) || m === 0) {
                                    return as;
                                }
                                if (m < 0) {
                                    var _a = splitAt(-m)(as), f = _a[0], s = _a[1];
                                    return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(s, concat(f));
                                }
                                else {
                                    return rotate(m - len)(as);
                                }
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Return a `ReadonlyNonEmptyArray` from a `ReadonlyArray` returning `none` if the input is empty.
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromReadonlyArray = function (as) {
                            return isNonEmpty(as) ? _internal__WEBPACK_IMPORTED_MODULE_5__["some"](as) : _internal__WEBPACK_IMPORTED_MODULE_5__["none"];
                        };
                        /**
                         * Return a `ReadonlyNonEmptyArray` of length `n` with element `i` initialized with `f(i)`.
                         *
                         * **Note**. `n` is normalized to a natural number.
                         *
                         * @example
                         * import { makeBy } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const double = (n: number): number => n * 2
                         * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var makeBy = function (f) {
                            return function (n) {
                                var j = Math.max(0, Math.floor(n));
                                var out = [f(0)];
                                for (var i = 1; i < j; i++) {
                                    out.push(f(i));
                                }
                                return out;
                            };
                        };
                        /**
                         * Create a `ReadonlyNonEmptyArray` containing a value repeated the specified number of times.
                         *
                         * **Note**. `n` is normalized to a natural number.
                         *
                         * @example
                         * import { replicate } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var replicate = function (a) { return makeBy(function () { return a; }); };
                        /**
                         * Create a `ReadonlyNonEmptyArray` containing a range of integers, including both endpoints.
                         *
                         * @example
                         * import { range } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var range = function (start, end) {
                            return start <= end ? makeBy(function (i) { return start + i; })(end - start + 1) : [start];
                        };
                        /**
                         * Return the tuple of the `head` and the `tail`.
                         *
                         * @example
                         * import { unprepend } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(unprepend([1, 2, 3, 4]), [1, [2, 3, 4]])
                         *
                         * @since 2.9.0
                         */
                        var unprepend = function (as) { return [head(as), tail(as)]; };
                        /**
                         * Return the tuple of the `init` and the `last`.
                         *
                         * @example
                         * import { unappend } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])
                         *
                         * @since 2.9.0
                         */
                        var unappend = function (as) { return [init(as), last(as)]; };
                        /**
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromArray = function (as) { return fromReadonlyArray(as.slice()); };
                        function concatW(second) {
                            return function (first) { return first.concat(second); };
                        }
                        function concat(x, y) {
                            return y ? x.concat(y) : function (y) { return y.concat(x); };
                        }
                        /**
                         * @since 2.5.0
                         */
                        var reverse = function (as) {
                            return as.length === 1 ? as : __spreadArray([last(as)], as.slice(0, -1).reverse(), true);
                        };
                        function group(E) {
                            return function (as) {
                                var len = as.length;
                                if (len === 0) {
                                    return empty;
                                }
                                var out = [];
                                var head = as[0];
                                var nea = [head];
                                for (var i = 1; i < len; i++) {
                                    var a = as[i];
                                    if (E.equals(a, head)) {
                                        nea.push(a);
                                    }
                                    else {
                                        out.push(nea);
                                        head = a;
                                        nea = [head];
                                    }
                                }
                                out.push(nea);
                                return out;
                            };
                        }
                        /**
                         * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning
                         * function on each element, and grouping the results according to values returned
                         *
                         * @example
                         * import { groupBy } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {
                         *   '1': ['a', 'b'],
                         *   '2': ['ab']
                         * })
                         *
                         * @since 2.5.0
                         */
                        var groupBy = function (f) {
                            return function (as) {
                                var out = {};
                                for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {
                                    var a = as_1[_i];
                                    var k = f(a);
                                    if (_internal__WEBPACK_IMPORTED_MODULE_5__["has"].call(out, k)) {
                                        out[k].push(a);
                                    }
                                    else {
                                        out[k] = [a];
                                    }
                                }
                                return out;
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var sort = function (O) {
                            return function (as) {
                                return as.length === 1 ? as : as.slice().sort(O.compare);
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var updateAt = function (i, a) {
                            return modifyAt(i, function () { return a; });
                        };
                        /**
                         * @since 2.5.0
                         */
                        var modifyAt = function (i, f) {
                            return function (as) {
                                return isOutOfBound(i, as) ? _internal__WEBPACK_IMPORTED_MODULE_5__["none"] : _internal__WEBPACK_IMPORTED_MODULE_5__["some"](unsafeUpdateAt(i, f(as[i]), as));
                            };
                        };
                        /**
                         * @since 2.5.1
                         */
                        var zipWith = function (as, bs, f) {
                            var cs = [f(as[0], bs[0])];
                            var len = Math.min(as.length, bs.length);
                            for (var i = 1; i < len; i++) {
                                cs[i] = f(as[i], bs[i]);
                            }
                            return cs;
                        };
                        function zip(as, bs) {
                            if (bs === undefined) {
                                return function (bs) { return zip(bs, as); };
                            }
                            return zipWith(as, bs, function (a, b) { return [a, b]; });
                        }
                        /**
                         * @since 2.5.1
                         */
                        var unzip = function (abs) {
                            var fa = [abs[0][0]];
                            var fb = [abs[0][1]];
                            for (var i = 1; i < abs.length; i++) {
                                fa[i] = abs[i][0];
                                fb[i] = abs[i][1];
                            }
                            return [fa, fb];
                        };
                        /**
                         * Prepend an element to every member of a `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { prependAll } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.10.0
                         */
                        var prependAll = function (middle) {
                            return function (as) {
                                var out = [middle, as[0]];
                                for (var i = 1; i < as.length; i++) {
                                    out.push(middle, as[i]);
                                }
                                return out;
                            };
                        };
                        /**
                         * Places an element in between members of a `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { intersperse } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.9.0
                         */
                        var intersperse = function (middle) {
                            return function (as) {
                                var rest = tail(as);
                                return isNonEmpty(rest) ? Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(rest, prependAll(middle), prepend(head(as))) : as;
                            };
                        };
                        /**
                         * @category sequencing
                         * @since 2.10.0
                         */
                        var chainWithIndex = function (f) {
                            return function (as) {
                                var out = _internal__WEBPACK_IMPORTED_MODULE_5__["fromReadonlyNonEmptyArray"](f(0, head(as)));
                                for (var i = 1; i < as.length; i++) {
                                    out.push.apply(out, f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        /**
                         * A useful recursion pattern for processing a `ReadonlyNonEmptyArray` to produce a new `ReadonlyNonEmptyArray`, often used for "chopping" up the input
                         * `ReadonlyNonEmptyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyNonEmptyArray` and produce a
                         * value and the tail of the `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.10.0
                         */
                        var chop = function (f) {
                            return function (as) {
                                var _a = f(as), b = _a[0], rest = _a[1];
                                var out = [b];
                                var next = rest;
                                while (isNonEmpty(next)) {
                                    var _b = f(next), b_1 = _b[0], rest_2 = _b[1];
                                    out.push(b_1);
                                    next = rest_2;
                                }
                                return out;
                            };
                        };
                        /**
                         * Splits a `ReadonlyNonEmptyArray` into two pieces, the first piece has max `n` elements.
                         *
                         * @since 2.10.0
                         */
                        var splitAt = function (n) {
                            return function (as) {
                                var m = Math.max(1, n);
                                return m >= as.length ? [as, empty] : [Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(as.slice(1, m), prepend(head(as))), as.slice(m)];
                            };
                        };
                        /**
                         * Splits a `ReadonlyNonEmptyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of
                         * the `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.10.0
                         */
                        var chunksOf = function (n) { return chop(splitAt(n)); };
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, map(f)); };
                        /* istanbul ignore next */
                        var _mapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, mapWithIndex(f)); };
                        var _ap = function (fab, fa) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fab, ap(fa)); };
                        /* istanbul ignore next */
                        var _extend = function (wa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(wa, extend(f)); };
                        /* istanbul ignore next */
                        var _reduce = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduce(b, f)); };
                        /* istanbul ignore next */
                        var _foldMap = function (M) {
                            var foldMapM = foldMap(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, foldMapM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRight = function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduceRight(b, f)); };
                        /* istanbul ignore next */
                        var _traverse = function (F) {
                            var traverseF = traverse(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, alt(that)); };
                        /* istanbul ignore next */
                        var _reduceWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduceWithIndex(b, f));
                        };
                        /* istanbul ignore next */
                        var _foldMapWithIndex = function (M) {
                            var foldMapWithIndexM = foldMapWithIndex(M);
                            return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, foldMapWithIndexM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRightWithIndex = function (fa, b, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(fa, reduceRightWithIndex(b, f));
                        };
                        /* istanbul ignore next */
                        var _traverseWithIndex = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (ta, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(ta, traverseWithIndexF(f)); };
                        };
                        /**
                         * @category constructors
                         * @since 2.5.0
                         */
                        var of = _internal__WEBPACK_IMPORTED_MODULE_5__["singleton"];
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3] as RNEA.ReadonlyNonEmptyArray<number>,
                         *     RNEA.altW(() => ['a', 'b'])
                         *   ),
                         *   [1, 2, 3, 'a', 'b']
                         * )
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (as) {
                                return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(as, concatW(that()));
                            };
                        };
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `ReadonlyNonEmptyArray` concatenates the inputs into a single array.
                         *
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RNEA.alt(() => [4, 5])
                         *   ),
                         *   [1, 2, 3, 4, 5]
                         * )
                         *
                         * @category error handling
                         * @since 2.6.2
                         */
                        var alt = altW;
                        /**
                         * @since 2.5.0
                         */
                        var ap = function (as) { return flatMap(function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(as, map(f)); }); };
                        /**
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RNEA.flatMap((n) => [`a${n}`, `b${n}`])
                         *   ),
                         *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']
                         * )
                         *
                         * @category sequencing
                         * @since 2.14.0
                         */
                        var flatMap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_3__["dual"])(2, function (ma, f) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(ma, chainWithIndex(function (i, a) { return f(a, i); }));
                        });
                        /**
                         * @since 2.5.0
                         */
                        var extend = function (f) {
                            return function (as) {
                                var next = tail(as);
                                var out = [f(as)];
                                while (isNonEmpty(next)) {
                                    out.push(f(next));
                                    next = tail(next);
                                }
                                return out;
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var duplicate =
/*#__PURE__*/ extend(_function__WEBPACK_IMPORTED_MODULE_3__["identity"]);
                        /**
                         * @category sequencing
                         * @since 2.5.0
                         */
                        var flatten =
/*#__PURE__*/ flatMap(_function__WEBPACK_IMPORTED_MODULE_3__["identity"]);
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.5.0
                         */
                        var map = function (f) {
                            return mapWithIndex(function (_, a) { return f(a); });
                        };
                        /**
                         * @category mapping
                         * @since 2.5.0
                         */
                        var mapWithIndex = function (f) {
                            return function (as) {
                                var out = [f(0, head(as))];
                                for (var i = 1; i < as.length; i++) {
                                    out.push(f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduce = function (b, f) {
                            return reduceWithIndex(b, function (_, b, a) { return f(b, a); });
                        };
                        /**
                         * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.
                         *
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMap = function (S) {
                            return function (f) {
                                return function (as) {
                                    return as.slice(1).reduce(function (s, a) { return S.concat(s, f(a)); }, f(as[0]));
                                };
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRight = function (b, f) {
                            return reduceRightWithIndex(b, function (_, b, a) { return f(b, a); });
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceWithIndex = function (b, f) {
                            return function (as) {
                                return as.reduce(function (b, a, i) { return f(i, b, a); }, b);
                            };
                        };
                        /**
                         * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.
                         *
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMapWithIndex = function (S) {
                            return function (f) {
                                return function (as) {
                                    return as.slice(1).reduce(function (s, a, i) { return S.concat(s, f(i + 1, a)); }, f(0, as[0]));
                                };
                            };
                        };
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRightWithIndex = function (b, f) {
                            return function (as) {
                                return as.reduceRight(function (b, a, i) { return f(i, a, b); }, b);
                            };
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            var traverseWithIndexF = traverseWithIndex(F);
                            return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) { return traverseWithIndex(F)(_function__WEBPACK_IMPORTED_MODULE_3__["SK"]); };
                        /**
                         * @category sequencing
                         * @since 2.6.3
                         */
                        var traverseWithIndex = function (F) {
                            return function (f) {
                                return function (as) {
                                    var out = F.map(f(0, head(as)), of);
                                    for (var i = 1; i < as.length; i++) {
                                        out = F.ap(F.map(out, function (bs) { return function (b) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(bs, append(b)); }; }), f(i, as[i]));
                                    }
                                    return out;
                                };
                            };
                        };
                        /**
                         * @category Comonad
                         * @since 2.6.3
                         */
                        var extract = _internal__WEBPACK_IMPORTED_MODULE_5__["head"];
                        /**
                         * @category type lambdas
                         * @since 2.5.0
                         */
                        var URI = 'ReadonlyNonEmptyArray';
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        var getShow = function (S) {
                            return ({
                                show: function (as) { return "[".concat(as.map(S.show).join(', '), "]"); }
                            });
                        };
                        /**
                         * Builds a `Semigroup` instance for `ReadonlyNonEmptyArray`
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: concat
                            });
                        };
                        /**
                         * @example
                         * import { getEq } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * const E = getEq(N.Eq)
                         * assert.strictEqual(E.equals([1, 2], [1, 2]), true)
                         * assert.strictEqual(E.equals([1, 2], [1, 3]), false)
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getEq = function (E) {
                            return Object(_Eq__WEBPACK_IMPORTED_MODULE_2__["fromEquals"])(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });
                        };
                        /**
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (E) {
                            var unionE = union(E);
                            return {
                                concat: function (first, second) { return unionE(second)(first); }
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_4__["flap"])(Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Pointed = {
                            URI: URI,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FunctorWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Apply = {
                            URI: URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.5.0
                         */
                        var apFirst = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apFirst"])(Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.5.0
                         */
                        var apSecond = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apSecond"])(Apply);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Applicative = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Chain = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            chain: flatMap
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.chainFirst(() => ['a', 'b'])
                         *   ),
                         *   [1, 1, 2, 2, 3, 3]
                         * )
                         *
                         * @category sequencing
                         * @since 2.5.0
                         */
                        var chainFirst = /*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["chainFirst"])(Chain);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Monad = {
                            URI: URI,
                            map: _map,
                            ap: _ap,
                            of: of,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Foldable = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FoldableWithIndex = {
                            URI: URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Traversable = {
                            URI: URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var TraversableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Alt = {
                            URI: URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Comonad = {
                            URI: URI,
                            map: _map,
                            extend: _extend,
                            extract: extract
                        };
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        var Do = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_5__["emptyRecord"]);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindTo = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_4__["bindTo"])(Functor);
                        var let_ = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_4__["let"])(Functor);

                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bind = /*#__PURE__*/ Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["bind"])(Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apS = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apS"])(Apply);
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.5.0
                         */
                        var head = extract;
                        /**
                         * @since 2.5.0
                         */
                        var tail = _internal__WEBPACK_IMPORTED_MODULE_5__["tail"];
                        /**
                         * @since 2.5.0
                         */
                        var last = function (as) { return as[as.length - 1]; };
                        /**
                         * Get all but the last element of a non empty array, creating a new array.
                         *
                         * @example
                         * import { init } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])
                         * assert.deepStrictEqual(init([1]), [])
                         *
                         * @since 2.5.0
                         */
                        var init = function (as) { return as.slice(0, -1); };
                        /**
                         * @since 2.5.0
                         */
                        var min = function (O) {
                            var S = _Semigroup__WEBPACK_IMPORTED_MODULE_7__["min"](O);
                            return function (as) { return as.reduce(S.concat); };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var max = function (O) {
                            var S = _Semigroup__WEBPACK_IMPORTED_MODULE_7__["max"](O);
                            return function (as) { return as.reduce(S.concat); };
                        };
                        /**
                         * @since 2.10.0
                         */
                        var concatAll = function (S) {
                            return function (as) {
                                return as.reduce(S.concat);
                            };
                        };
                        /**
                         * Break a `ReadonlyArray` into its first element and remaining elements.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchLeft = function (f) {
                            return function (as) {
                                return f(head(as), tail(as));
                            };
                        };
                        /**
                         * Break a `ReadonlyArray` into its initial elements and the last element.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchRight = function (f) {
                            return function (as) {
                                return f(init(as), last(as));
                            };
                        };
                        /**
                         * Apply a function to the head, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var modifyHead = function (f) {
                            return function (as) {
                                return __spreadArray([f(head(as))], tail(as), true);
                            };
                        };
                        /**
                         * Change the head, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var updateHead = function (a) { return modifyHead(function () { return a; }); };
                        /**
                         * Apply a function to the last element, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var modifyLast = function (f) {
                            return function (as) {
                                return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(init(as), append(f(last(as))));
                            };
                        };
                        /**
                         * Change the last element, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var updateLast = function (a) { return modifyLast(function () { return a; }); };
                        /**
                         * Places an element in between members of a `ReadonlyNonEmptyArray`, then folds the results using the provided `Semigroup`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { intercalate } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(intercalate(S.Semigroup)('-')(['a', 'b', 'c']), 'a-b-c')
                         *
                         * @since 2.12.0
                         */
                        var intercalate = function (S) {
                            var concatAllS = concatAll(S);
                            return function (middle) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["flow"])(intersperse(middle), concatAllS); };
                        };
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.5.0
                         */
                        var chain = flatMap;
                        function groupSort(O) {
                            var sortO = sort(O);
                            var groupO = group(O);
                            return function (as) { return (isNonEmpty(as) ? groupO(sortO(as)) : empty); };
                        }
                        function filter(predicate) {
                            return filterWithIndex(function (_, a) { return predicate(a); });
                        }
                        /**
                         * Use [`filterWithIndex`](./ReadonlyArray.ts.html#filterwithindex) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var filterWithIndex = function (predicate) {
                            return function (as) {
                                return fromReadonlyArray(as.filter(function (a, i) { return predicate(i, a); }));
                            };
                        };
                        /**
                         * Use [`unprepend`](#unprepend) instead.
                         *
                         * @category zone of death
                         * @since 2.10.0
                         * @deprecated
                         */
                        var uncons = unprepend;
                        /**
                         * Use [`unappend`](#unappend) instead.
                         *
                         * @category zone of death
                         * @since 2.10.0
                         * @deprecated
                         */
                        var unsnoc = unappend;
                        function cons(head, tail) {
                            return tail === undefined ? prepend(head) : Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(tail, prepend(head));
                        }
                        /**
                         * Use [`append`](./ReadonlyArray.ts.html#append) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var snoc = function (init, end) { return Object(_function__WEBPACK_IMPORTED_MODULE_3__["pipe"])(init, concat([end])); };
                        /**
                         * Use [`insertAt`](./ReadonlyArray.ts.html#insertat) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var insertAt = function (i, a) {
                            return function (as) {
                                return i < 0 || i > as.length ? _internal__WEBPACK_IMPORTED_MODULE_5__["none"] : _internal__WEBPACK_IMPORTED_MODULE_5__["some"](unsafeInsertAt(i, a, as));
                            };
                        };
                        /**
                         * Use [`prependAll`](#prependall) instead.
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        var prependToAll = prependAll;
                        /**
                         * Use [`concatAll`](#concatall) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var fold = concatAll;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `RNEA.Functor` instead of `RNEA.readonlyNonEmptyArray`
                         * (where `RNEA` is from `import RNEA from 'fp-ts/ReadonlyNonEmptyArray'`)
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var readonlyNonEmptyArray = {
                            URI: URI,
                            of: of,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            ap: _ap,
                            chain: flatMap,
                            extend: _extend,
                            extract: extract,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex,
                            alt: _alt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/ReadonlyRecord.js":
/*!**************************************************!*\
  !*** ./node_modules/fp-ts/es6/ReadonlyRecord.js ***!
  \**************************************************/
/*! exports provided: fromRecord, toRecord, size, isEmpty, keys, collect, toReadonlyArray, toUnfoldable, upsertAt, has, deleteAt, updateAt, modifyAt, pop, isSubrecord, lookup, empty, mapWithIndex, map, reduceWithIndex, foldMapWithIndex, reduceRightWithIndex, singleton, traverseWithIndex, traverse, sequence, wither, wilt, partitionMapWithIndex, partitionWithIndex, filterMapWithIndex, filterWithIndex, fromFoldable, fromFoldableMap, toEntries, fromEntries, every, some, elem, union, intersection, difference, _map, _mapWithIndex, _reduce, _foldMap, _reduceRight, _filter, _filterMap, _partition, _partitionMap, _reduceWithIndex, _foldMapWithIndex, _reduceRightWithIndex, _partitionMapWithIndex, _partitionWithIndex, _filterMapWithIndex, _filterWithIndex, _traverse, _sequence, filter, filterMap, partition, partitionMap, reduce, foldMap, reduceRight, compact, separate, URI, getShow, getEq, getMonoid, Functor, flap, FunctorWithIndex, getFoldable, getFoldableWithIndex, Compactable, Filterable, FilterableWithIndex, getTraversable, getTraversableWithIndex, getWitherable, getUnionSemigroup, getUnionMonoid, getIntersectionSemigroup, getDifferenceMagma, Foldable, FoldableWithIndex, Traversable, TraversableWithIndex, Witherable, insertAt, hasOwnProperty, readonlyRecord */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromRecord", function () { return fromRecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toRecord", function () { return toRecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "size", function () { return size; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function () { return isEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keys", function () { return keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "collect", function () { return collect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toReadonlyArray", function () { return toReadonlyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toUnfoldable", function () { return toUnfoldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upsertAt", function () { return upsertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has", function () { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteAt", function () { return deleteAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateAt", function () { return updateAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyAt", function () { return modifyAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pop", function () { return pop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSubrecord", function () { return isSubrecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookup", function () { return lookup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function () { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapWithIndex", function () { return mapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceWithIndex", function () { return reduceWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMapWithIndex", function () { return foldMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRightWithIndex", function () { return reduceRightWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "singleton", function () { return singleton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseWithIndex", function () { return traverseWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function () { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wither", function () { return wither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wilt", function () { return wilt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMapWithIndex", function () { return partitionMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionWithIndex", function () { return partitionWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMapWithIndex", function () { return filterMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterWithIndex", function () { return filterWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromFoldable", function () { return fromFoldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromFoldableMap", function () { return fromFoldableMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toEntries", function () { return toEntries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEntries", function () { return fromEntries; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "every", function () { return every; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function () { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elem", function () { return elem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "union", function () { return union; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersection", function () { return intersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "difference", function () { return difference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_map", function () { return _map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_mapWithIndex", function () { return _mapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_reduce", function () { return _reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_foldMap", function () { return _foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_reduceRight", function () { return _reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_filter", function () { return _filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_filterMap", function () { return _filterMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_partition", function () { return _partition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_partitionMap", function () { return _partitionMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_reduceWithIndex", function () { return _reduceWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_foldMapWithIndex", function () { return _foldMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_reduceRightWithIndex", function () { return _reduceRightWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_partitionMapWithIndex", function () { return _partitionMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_partitionWithIndex", function () { return _partitionWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_filterMapWithIndex", function () { return _filterMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_filterWithIndex", function () { return _filterWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_traverse", function () { return _traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "_sequence", function () { return _sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMap", function () { return filterMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function () { return partition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMap", function () { return partitionMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compact", function () { return compact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "separate", function () { return separate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getShow", function () { return getShow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEq", function () { return getEq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctorWithIndex", function () { return FunctorWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFoldable", function () { return getFoldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFoldableWithIndex", function () { return getFoldableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compactable", function () { return Compactable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Filterable", function () { return Filterable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterableWithIndex", function () { return FilterableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTraversable", function () { return getTraversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTraversableWithIndex", function () { return getTraversableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getWitherable", function () { return getWitherable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionSemigroup", function () { return getUnionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUnionMonoid", function () { return getUnionMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIntersectionSemigroup", function () { return getIntersectionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDifferenceMagma", function () { return getDifferenceMagma; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Foldable", function () { return Foldable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FoldableWithIndex", function () { return FoldableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Traversable", function () { return Traversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TraversableWithIndex", function () { return TraversableWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Witherable", function () { return Witherable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "insertAt", function () { return insertAt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasOwnProperty", function () { return hasOwnProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readonlyRecord", function () { return readonlyRecord; });
/* harmony import */ var _Eq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/es6/Eq.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _Separated__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/es6/Separated.js");
/* harmony import */ var _string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./string */ "./node_modules/fp-ts/es6/string.js");
/* harmony import */ var _Witherable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/es6/Witherable.js");







                        /**
                         * Builds a `ReadonlyRecord` by copying a `Record`.
                         *
                         * @example
                         * import { ReadonlyRecord, fromRecord } from "fp-ts/ReadonlyRecord"
                         *
                         * const x: Record<string, number> = { a: 1, b: 2 };
                         * const y: ReadonlyRecord<string, number> = fromRecord(x);
                         * assert.deepStrictEqual(x,y);
                         * // `y.a = 5` gives compiler error
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromRecord = function (r) { return Object.assign({}, r); };
                        /**
                         * Builds a mutable `Record` from a `ReadonlyRecord`.
                         *
                         * @example
                         * import { ReadonlyRecord, toRecord } from "fp-ts/ReadonlyRecord"
                         *
                         * const x: ReadonlyRecord<string, number> = { a: 1, b: 2 };
                         * const y: Record<string, number> = toRecord(x);
                         * assert.deepStrictEqual(x,y);
                         * y.a = 5; // it's ok, y is mutable
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        var toRecord = function (r) { return Object.assign({}, r); };
                        /**
                         * Calculate the number of key/value pairs in a `ReadonlyRecord`,
                         *
                         * @example
                         * import { size } from "fp-ts/ReadonlyRecord";
                         *
                         * assert.deepStrictEqual(size({ a: true, b: 2, c: "three" }), 3);
                         *
                         * @since 2.5.0
                         */
                        var size = function (r) { return Object.keys(r).length; };
                        /**
                         * Test whether a `ReadonlyRecord` is empty.
                         *
                         * @example
                         * import { isEmpty } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(isEmpty({}), true);
                         * assert.deepStrictEqual(isEmpty({ a: 3 }), false);
                         * @since 2.5.0
                         */
                        var isEmpty = function (r) {
                            for (var k in r) {
                                if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                    return false;
                                }
                            }
                            return true;
                        };
                        var keys_ = function (O) {
                            return function (r) {
                                return Object.keys(r).sort(O.compare);
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        var keys = /*#__PURE__*/ keys_(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]);
                        function collect(O) {
                            if (typeof O === 'function') {
                                return collect(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(O);
                            }
                            var keysO = keys_(O);
                            return function (f) {
                                return function (r) {
                                    var out = [];
                                    for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {
                                        var key = _a[_i];
                                        out.push(f(key, r[key]));
                                    }
                                    return out;
                                };
                            };
                        }
                        /**
                         * Get a sorted `ReadonlyArray` of the key/value pairs contained in a `ReadonlyRecord`.
                         *
                         * @example
                         * import { toReadonlyArray } from 'fp-ts/ReadonlyRecord'
                         *
                         * const x = { c: 3, a: "foo", b: false };
                         * assert.deepStrictEqual(toReadonlyArray(x), [
                         *   ["a", "foo"],
                         *   ["b", false],
                         *   ["c", 3],
                         * ]);
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        var toReadonlyArray =
/*#__PURE__*/ collect(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(function (k, a) { return [k, a]; });
                        function toUnfoldable(U) {
                            return function (r) {
                                var sas = toReadonlyArray(r);
                                var len = sas.length;
                                return U.unfold(0, function (b) { return (b < len ? _internal__WEBPACK_IMPORTED_MODULE_3__["some"]([sas[b], b + 1]) : _internal__WEBPACK_IMPORTED_MODULE_3__["none"]); });
                            };
                        }
                        /**
                         * Insert or replace a key/value pair in a `ReadonlyRecord`.
                         *
                         * @example
                         * import { upsertAt } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(upsertAt("a", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });
                         * assert.deepStrictEqual(upsertAt("c", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });
                         *
                         * @since 2.10.0
                         */
                        var upsertAt = function (k, a) {
                            return function (r) {
                                if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k) && r[k] === a) {
                                    return r;
                                }
                                var out = Object.assign({}, r);
                                out[k] = a;
                                return out;
                            };
                        };
                        /**
                         * Test whether or not a key exists in a `ReadonlyRecord`.
                         *
                         * Note. This function is not pipeable because is a `Refinement`.
                         *
                         * @example
                         * import { has } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(has("a", { a: 1, b: 2 }), true);
                         * assert.deepStrictEqual(has("c", { a: 1, b: 2 }), false);
                         *
                         * @since 2.10.0
                         */
                        var has = function (k, r) { return _internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k); };
                        function deleteAt(k) {
                            return function (r) {
                                if (!_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                    return r;
                                }
                                var out = Object.assign({}, r);
                                delete out[k];
                                return out;
                            };
                        }
                        /**
                         * Replace a key/value pair in a `ReadonlyRecord`.
                         *
                         * @returns If the specified key exists it returns an `Option` containing a new `Record`
                         * with the entry updated, otherwise it returns `None`
                         *
                         * @example
                         * import { updateAt } from 'fp-ts/ReadonlyRecord'
                         * import { option } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(updateAt("a", 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));
                         * assert.deepStrictEqual(updateAt("c", 3)({ a: 1, b: 2 }), option.none);
                         *
                         * @since 2.5.0
                         */
                        var updateAt = function (k, a) {
                            return function (r) {
                                if (!has(k, r)) {
                                    return _internal__WEBPACK_IMPORTED_MODULE_3__["none"];
                                }
                                if (r[k] === a) {
                                    return _internal__WEBPACK_IMPORTED_MODULE_3__["some"](r);
                                }
                                var out = Object.assign({}, r);
                                out[k] = a;
                                return _internal__WEBPACK_IMPORTED_MODULE_3__["some"](out);
                            };
                        };
                        /**
                         * Applies a mapping function to one specific key/value pair in a `ReadonlyRecord`.
                         *
                         * @returns If the specified key exists it returns an `Option` containing a new `Record`
                         * with the entry updated, otherwise it returns `None`
                         *
                         * @example
                         * import { modifyAt } from 'fp-ts/ReadonlyRecord'
                         * import { option } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(modifyAt("a", (x: number) => x * 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));
                         * assert.deepStrictEqual(modifyAt("c", (x: number) => x * 3)({ a: 1, b: 2 }), option.none);
                         *
                         * @since 2.5.0
                         */
                        var modifyAt = function (k, f) {
                            return function (r) {
                                if (!has(k, r)) {
                                    return _internal__WEBPACK_IMPORTED_MODULE_3__["none"];
                                }
                                var next = f(r[k]);
                                if (next === r[k]) {
                                    return _internal__WEBPACK_IMPORTED_MODULE_3__["some"](r);
                                }
                                var out = Object.assign({}, r);
                                out[k] = next;
                                return _internal__WEBPACK_IMPORTED_MODULE_3__["some"](out);
                            };
                        };
                        function pop(k) {
                            var deleteAtk = deleteAt(k);
                            return function (r) {
                                var oa = lookup(k, r);
                                return _internal__WEBPACK_IMPORTED_MODULE_3__["isNone"](oa) ? _internal__WEBPACK_IMPORTED_MODULE_3__["none"] : _internal__WEBPACK_IMPORTED_MODULE_3__["some"]([oa.value, deleteAtk(r)]);
                            };
                        }
                        function isSubrecord(E) {
                            return function (me, that) {
                                if (that === undefined) {
                                    var isSubrecordE_1 = isSubrecord(E);
                                    return function (that) { return isSubrecordE_1(that, me); };
                                }
                                for (var k in me) {
                                    if (!_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(that, k) || !E.equals(me[k], that[k])) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                        }
                        function lookup(k, r) {
                            if (r === undefined) {
                                return function (r) { return lookup(k, r); };
                            }
                            return _internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k) ? _internal__WEBPACK_IMPORTED_MODULE_3__["some"](r[k]) : _internal__WEBPACK_IMPORTED_MODULE_3__["none"];
                        }
                        /**
                         * @since 2.5.0
                         */
                        var empty = {};
                        function mapWithIndex(f) {
                            return function (r) {
                                var out = {};
                                for (var k in r) {
                                    if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                        out[k] = f(k, r[k]);
                                    }
                                }
                                return out;
                            };
                        }
                        function map(f) {
                            return mapWithIndex(function (_, a) { return f(a); });
                        }
                        function reduceWithIndex() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 2) {
                                return reduceWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]).apply(void 0, args);
                            }
                            var keysO = keys_(args[0]);
                            return function (b, f) {
                                return function (fa) {
                                    var out = b;
                                    var ks = keysO(fa);
                                    var len = ks.length;
                                    for (var i = 0; i < len; i++) {
                                        var k = ks[i];
                                        out = f(k, out, fa[k]);
                                    }
                                    return out;
                                };
                            };
                        }
                        function foldMapWithIndex(O) {
                            if ('compare' in O) {
                                var keysO_1 = keys_(O);
                                return function (M) {
                                    return function (f) {
                                        return function (fa) {
                                            var out = M.empty;
                                            var ks = keysO_1(fa);
                                            var len = ks.length;
                                            for (var i = 0; i < len; i++) {
                                                var k = ks[i];
                                                out = M.concat(out, f(k, fa[k]));
                                            }
                                            return out;
                                        };
                                    };
                                };
                            }
                            return foldMapWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(O);
                        }
                        function reduceRightWithIndex() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 2) {
                                return reduceRightWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]).apply(void 0, args);
                            }
                            var keysO = keys_(args[0]);
                            return function (b, f) {
                                return function (fa) {
                                    var out = b;
                                    var ks = keysO(fa);
                                    var len = ks.length;
                                    for (var i = len - 1; i >= 0; i--) {
                                        var k = ks[i];
                                        out = f(k, fa[k], out);
                                    }
                                    return out;
                                };
                            };
                        }
                        /**
                         * Create a `ReadonlyRecord` with one key/value pair.
                         *
                         * @example
                         * import { singleton } from "fp-ts/ReadonlyRecord";
                         *
                         * assert.deepStrictEqual(singleton("a", 1), { a: 1 });
                         *
                         * @category constructors
                         * @since 2.5.0
                         */
                        var singleton = function (k, a) {
                            var _a;
                            return (_a = {}, _a[k] = a, _a);
                        };
                        function traverseWithIndex(F) {
                            var traverseWithIndexOF = _traverseWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(F);
                            return function (f) { return function (ta) { return traverseWithIndexOF(ta, f); }; };
                        }
                        function traverse(F) {
                            var traverseOF = _traverse(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(F);
                            return function (f) { return function (ta) { return traverseOF(ta, f); }; };
                        }
                        function sequence(F) {
                            return _sequence(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(F);
                        }
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wither = function (F) {
                            var traverseF = traverse(F);
                            return function (f) { return function (fa) { return F.map(Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, traverseF(f)), compact); }; };
                        };
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wilt = function (F) {
                            var traverseF = traverse(F);
                            return function (f) { return function (fa) { return F.map(Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, traverseF(f)), separate); }; };
                        };
                        function partitionMapWithIndex(f) {
                            return function (r) {
                                var left = {};
                                var right = {};
                                for (var k in r) {
                                    if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                        var e = f(k, r[k]);
                                        switch (e._tag) {
                                            case 'Left':
                                                left[k] = e.left;
                                                break;
                                            case 'Right':
                                                right[k] = e.right;
                                                break;
                                        }
                                    }
                                }
                                return Object(_Separated__WEBPACK_IMPORTED_MODULE_4__["separated"])(left, right);
                            };
                        }
                        function partitionWithIndex(predicateWithIndex) {
                            return function (r) {
                                var left = {};
                                var right = {};
                                for (var k in r) {
                                    if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                        var a = r[k];
                                        if (predicateWithIndex(k, a)) {
                                            right[k] = a;
                                        }
                                        else {
                                            left[k] = a;
                                        }
                                    }
                                }
                                return Object(_Separated__WEBPACK_IMPORTED_MODULE_4__["separated"])(left, right);
                            };
                        }
                        function filterMapWithIndex(f) {
                            return function (r) {
                                var out = {};
                                for (var k in r) {
                                    if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                        var ob = f(k, r[k]);
                                        if (_internal__WEBPACK_IMPORTED_MODULE_3__["isSome"](ob)) {
                                            out[k] = ob.value;
                                        }
                                    }
                                }
                                return out;
                            };
                        }
                        function filterWithIndex(predicateWithIndex) {
                            return function (fa) {
                                var out = {};
                                var changed = false;
                                for (var key in fa) {
                                    if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(fa, key)) {
                                        var a = fa[key];
                                        if (predicateWithIndex(key, a)) {
                                            out[key] = a;
                                        }
                                        else {
                                            changed = true;
                                        }
                                    }
                                }
                                return changed ? out : fa;
                            };
                        }
                        function fromFoldable(M, F) {
                            var fromFoldableMapM = fromFoldableMap(M, F);
                            return function (fka) { return fromFoldableMapM(fka, _function__WEBPACK_IMPORTED_MODULE_1__["identity"]); };
                        }
                        function fromFoldableMap(M, F) {
                            return function (ta, f) {
                                return F.reduce(ta, {}, function (r, a) {
                                    var _a = f(a), k = _a[0], b = _a[1];
                                    r[k] = _internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k) ? M.concat(r[k], b) : b;
                                    return r;
                                });
                            };
                        }
                        /**
                         * Alias of [`toReadonlyArray`](#toreadonlyarray).
                         *
                         * @example
                         * import { toEntries } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(toEntries({ b: 2, a: 1 }), [['a', 1], ['b', 2]])
                         *
                         * @category conversions
                         * @since 2.12.0
                         */
                        var toEntries = toReadonlyArray;
                        /**
                         * Converts a `ReadonlyArray` of `[key, value]` tuples into a `ReadonlyRecord`.
                         *
                         * @example
                         * import { fromEntries } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(fromEntries([['a', 1], ['b', 2], ['a', 3]]), { b: 2, a: 3 })
                         *
                         * @since 2.12.0
                         * @category conversions
                         */
                        var fromEntries = function (fa) {
                            var out = {};
                            for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
                                var a = fa_1[_i];
                                out[a[0]] = a[1];
                            }
                            return out;
                        };
                        function every(predicate) {
                            return function (r) {
                                for (var k in r) {
                                    if (!predicate(r[k])) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                        }
                        /**
                         * Test if at least one value in a `ReadonlyRecord` satisfies the predicate.
                         *
                         * @example
                         * import { some } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: 1, b: -2 }), true);
                         * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: -1, b: -2 }), false);
                         *
                         * @since 2.5.0
                         */
                        function some(predicate) {
                            return function (r) {
                                for (var k in r) {
                                    if (predicate(r[k])) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                        }
                        function elem(E) {
                            return function (a, fa) {
                                if (fa === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (fa) { return elemE_1(a, fa); };
                                }
                                for (var k in fa) {
                                    if (E.equals(fa[k], a)) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                        }
                        /**
                         * Union of two `ReadonlyRecord`s.
                         * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining all the
                         * entries of the two inputs.
                         * It uses the `concat` function of the provided `Magma` to
                         * combine the elements with the same key.
                         *
                         * @example
                         * import { union } from "fp-ts/ReadonlyRecord";
                         * import { Magma } from "fp-ts/Magma";
                         *
                         * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };
                         * assert.deepStrictEqual(union(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4, b: 2, c: 3 });
                         * const m2: Magma<number> = { concat: (x: number) => x };
                         * assert.deepStrictEqual(union(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1, b: 2, c: 3 });
                         *
                         * @since 2.11.0
                         */
                        var union = function (M) {
                            return function (second) {
                                return function (first) {
                                    if (isEmpty(first)) {
                                        return second;
                                    }
                                    if (isEmpty(second)) {
                                        return first;
                                    }
                                    var out = {};
                                    for (var k in first) {
                                        if (has(k, second)) {
                                            out[k] = M.concat(first[k], second[k]);
                                        }
                                        else {
                                            out[k] = first[k];
                                        }
                                    }
                                    for (var k in second) {
                                        if (!has(k, out)) {
                                            out[k] = second[k];
                                        }
                                    }
                                    return out;
                                };
                            };
                        };
                        /**
                         * Intersection of two `ReadonlyRecord`s.
                         * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining only the
                         * entries of the two inputswith the same key.
                         * It uses the `concat` function of the provided `Magma` to
                         * combine the elements.
                         *
                         * @example
                         * import { intersection } from "fp-ts/ReadonlyRecord";
                         * import { Magma } from "fp-ts/Magma";
                         *
                         * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };
                         * assert.deepStrictEqual(intersection(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4});
                         * const m2: Magma<number> = { concat: (x: number) => x };
                         * assert.deepStrictEqual(intersection(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1});
                         *
                         * @since 2.11.0
                         */
                        var intersection = function (M) {
                            return function (second) {
                                return function (first) {
                                    if (isEmpty(first) || isEmpty(second)) {
                                        return empty;
                                    }
                                    var out = {};
                                    for (var k in first) {
                                        if (has(k, second)) {
                                            out[k] = M.concat(first[k], second[k]);
                                        }
                                    }
                                    return out;
                                };
                            };
                        };
                        /**
                         * Difference between two `ReadonlyRecord`s.
                         * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` composed by the
                         * entries of the two inputs, removing the entries with the same
                         * key in both inputs.
                         *
                         * @example
                         * import { difference } from "fp-ts/ReadonlyRecord";
                         *
                         * assert.deepStrictEqual(difference({ a: 1 })({ a: 1, b: 2 }), { b: 2 });
                         * assert.deepStrictEqual(difference({ a: 3 })({ a: 1, b: 2 }), { b: 2 });
                         * assert.deepStrictEqual(difference({ a: 3, c: 3 })({ a: 1, b: 2 }), { b: 2, c: 3 });
                         *
                         * @since 2.11.0
                         */
                        var difference = function (second) {
                            return function (first) {
                                if (isEmpty(first)) {
                                    return second;
                                }
                                if (isEmpty(second)) {
                                    return first;
                                }
                                var out = {};
                                for (var k in first) {
                                    if (!has(k, second)) {
                                        out[k] = first[k];
                                    }
                                }
                                for (var k in second) {
                                    if (!has(k, first)) {
                                        out[k] = second[k];
                                    }
                                }
                                return out;
                            };
                        };
                        /** @internal */
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, map(f)); };
                        /** @internal */
                        /* istanbul ignore next */
                        var _mapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, mapWithIndex(f)); };
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduce = function (O) {
                            var reduceO = reduce(O);
                            return function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, reduceO(b, f)); };
                        };
                        /** @internal */
                        var _foldMap = function (O) {
                            return function (M) {
                                var foldMapM = foldMap(O)(M);
                                return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, foldMapM(f)); };
                            };
                        };
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduceRight = function (O) {
                            var reduceRightO = reduceRight(O);
                            return function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, reduceRightO(b, f)); };
                        };
                        /** @internal */
                        /* istanbul ignore next */
                        var _filter = function (fa, predicate) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, filter(predicate));
                        };
                        /** @internal */
                        /* istanbul ignore next */
                        var _filterMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, filterMap(f)); };
                        /** @internal */
                        /* istanbul ignore next */
                        var _partition = function (fa, predicate) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, partition(predicate)); };
                        /** @internal */
                        /* istanbul ignore next */
                        var _partitionMap = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, partitionMap(f)); };
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduceWithIndex = function (O) {
                            var reduceWithIndexO = reduceWithIndex(O);
                            return function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, reduceWithIndexO(b, f)); };
                        };
                        /** @internal */
                        var _foldMapWithIndex = function (O) {
                            var foldMapWithIndexO = foldMapWithIndex(O);
                            return function (M) {
                                var foldMapWithIndexM = foldMapWithIndexO(M);
                                return function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, foldMapWithIndexM(f)); };
                            };
                        };
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduceRightWithIndex = function (O) {
                            var reduceRightWithIndexO = reduceRightWithIndex(O);
                            return function (fa, b, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, reduceRightWithIndexO(b, f)); };
                        };
                        /** @internal */
                        /* istanbul ignore next */
                        var _partitionMapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, partitionMapWithIndex(f)); };
                        /** @internal */
                        /* istanbul ignore next */
                        var _partitionWithIndex = function (fa, predicateWithIndex) {
                            return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, partitionWithIndex(predicateWithIndex));
                        };
                        /** @internal */
                        /* istanbul ignore next */
                        var _filterMapWithIndex = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, filterMapWithIndex(f)); };
                        /** @internal */
                        /* istanbul ignore next */
                        var _filterWithIndex = function (fa, predicateWithIndex) { return Object(_function__WEBPACK_IMPORTED_MODULE_1__["pipe"])(fa, filterWithIndex(predicateWithIndex)); };
                        /** @internal */
                        var _traverse = function (O) {
                            var traverseWithIndexO = _traverseWithIndex(O);
                            return function (F) {
                                var traverseWithIndexOF = traverseWithIndexO(F);
                                return function (ta, f) { return traverseWithIndexOF(ta, Object(_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(_function__WEBPACK_IMPORTED_MODULE_1__["SK"], f)); };
                            };
                        };
                        /** @internal */
                        var _sequence = function (O) {
                            var traverseO = _traverse(O);
                            return function (F) {
                                var traverseOF = traverseO(F);
                                return function (ta) { return traverseOF(ta, _function__WEBPACK_IMPORTED_MODULE_1__["identity"]); };
                            };
                        };
                        var _traverseWithIndex = function (O) {
                            return function (F) {
                                var keysO = keys_(O);
                                return function (ta, f) {
                                    var ks = keysO(ta);
                                    if (ks.length === 0) {
                                        return F.of(empty);
                                    }
                                    var fr = F.of({});
                                    var _loop_1 = function (key) {
                                        fr = F.ap(F.map(fr, function (r) {
                                            return function (b) {
                                                var _a;
                                                return Object.assign({}, r, (_a = {}, _a[key] = b, _a));
                                            };
                                        }), f(key, ta[key]));
                                    };
                                    for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
                                        var key = ks_1[_i];
                                        _loop_1(key);
                                    }
                                    return fr;
                                };
                            };
                        };
                        /**
                         * Given a `Predicate`, it produces a new `ReadonlyRecord` keeping only the entries with a
                         * value that satisfies the provided predicate.
                         *
                         * @example
                         * import { filter } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(filter((s: string) => s.length < 4)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   a: "foo",
                         *   b: "bar",
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filter = function (predicate) {
                            return filterWithIndex(function (_, a) { return predicate(a); });
                        };
                        /**
                         * Maps a `ReadonlyRecord` with an iterating function that returns an `Option`
                         * and it keeps only the `Some` values discarding the `None`s.
                         *
                         * @example
                         * import { filterMap } from "fp-ts/ReadonlyRecord"
                         * import { option } from "fp-ts"
                         *
                         * const f = (s: string) => s.length < 4 ? option.some(`${s} is short`): option.none
                         * assert.deepStrictEqual(filterMap(f)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   a: "foo is short",
                         *   b: "bar is short",
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterMap = function (f) { return filterMapWithIndex(function (_, a) { return f(a); }); };
                        /**
                         * Partition a `ReadonlyRecord` into two parts according to a `Predicate`.
                         *
                         * @example
                         * import { partition } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(partition((s: string) => s.length < 4)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   left:{
                         *     c: "verylong"
                         *   },
                         *   right: {
                         *     a: "foo",
                         *     b: "bar",
                         *   },
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partition = function (predicate) {
                            return partitionWithIndex(function (_, a) { return predicate(a); });
                        };
                        /**
                         * Maps a `ReadonlyRecord` with a function returning an `Either` and
                         * partitions the resulting `ReadonlyRecord` into `Left`s and `Right`s.
                         *
                         * @example
                         * import { partitionMap } from "fp-ts/ReadonlyRecord"
                         * import { either } from "fp-ts"
                         *
                         * const f = (s: string) => (s.length < 4 ? either.right(`${s} is short`) : either.left(`${s} is not short`));
                         * assert.deepStrictEqual(partitionMap(f)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   left: {
                         *     c: "verylong is not short",
                         *   },
                         *   right: {
                         *     a: "foo is short",
                         *     b: "bar is short",
                         *   },
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionMap = function (f) {
                            return partitionMapWithIndex(function (_, a) { return f(a); });
                        };
                        function reduce() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 1) {
                                var reduceWithIndexO_1 = reduceWithIndex(args[0]);
                                return function (b, f) { return reduceWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };
                            }
                            return reduce(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]).apply(void 0, args);
                        }
                        function foldMap(O) {
                            if ('compare' in O) {
                                var foldMapWithIndexO_1 = foldMapWithIndex(O);
                                return function (M) {
                                    var foldMapWithIndexM = foldMapWithIndexO_1(M);
                                    return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };
                                };
                            }
                            return foldMap(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(O);
                        }
                        function reduceRight() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 1) {
                                var reduceRightWithIndexO_1 = reduceRightWithIndex(args[0]);
                                return function (b, f) { return reduceRightWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };
                            }
                            return reduceRight(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]).apply(void 0, args);
                        }
                        /**
                         * Compact a `ReadonlyRecord` of `Option`s discarding the `None` values and
                         * keeping the `Some` values.
                         *
                         * @example
                         * import { compact } from 'fp-ts/ReadonlyRecord'
                         * import { option } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(compact({ a: option.some("foo"), b: option.none, c: option.some("bar") }), {
                         *   a: "foo",
                         *   c: "bar",
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var compact = function (r) {
                            var out = {};
                            for (var k in r) {
                                if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                    var oa = r[k];
                                    if (_internal__WEBPACK_IMPORTED_MODULE_3__["isSome"](oa)) {
                                        out[k] = oa.value;
                                    }
                                }
                            }
                            return out;
                        };
                        /**
                         * Separate a `ReadonlyRecord` of `Either`s into `Left`s and `Right`s.
                         *
                         * @example
                         * import { separate } from 'fp-ts/ReadonlyRecord'
                         * import { either } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(
                         *   separate({ a: either.right("foo"), b: either.left("bar"), c: either.right("baz") }),
                         *   {
                         *     right: {
                         *       a: "foo",
                         *       c: "baz",
                         *     },
                         *     left: {
                         *       b: "bar",
                         *     },
                         *   }
                         * );
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var separate = function (r) {
                            var left = {};
                            var right = {};
                            for (var k in r) {
                                if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r, k)) {
                                    var e = r[k];
                                    if (_internal__WEBPACK_IMPORTED_MODULE_3__["isLeft"](e)) {
                                        left[k] = e.left;
                                    }
                                    else {
                                        right[k] = e.right;
                                    }
                                }
                            }
                            return Object(_Separated__WEBPACK_IMPORTED_MODULE_4__["separated"])(left, right);
                        };
                        /**
                         * @category type lambdas
                         * @since 2.5.0
                         */
                        var URI = 'ReadonlyRecord';
                        function getShow(O) {
                            if ('compare' in O) {
                                return function (S) {
                                    return ({
                                        show: function (r) {
                                            var elements = collect(O)(function (k, a) { return "".concat(JSON.stringify(k), ": ").concat(S.show(a)); })(r).join(', ');
                                            return elements === '' ? '{}' : "{ ".concat(elements, " }");
                                        }
                                    });
                                };
                            }
                            return getShow(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])(O);
                        }
                        function getEq(E) {
                            var isSubrecordE = isSubrecord(E);
                            return Object(_Eq__WEBPACK_IMPORTED_MODULE_0__["fromEquals"])(function (x, y) { return isSubrecordE(x)(y) && isSubrecordE(y)(x); });
                        }
                        function getMonoid(S) {
                            return {
                                concat: function (first, second) {
                                    if (isEmpty(first)) {
                                        return second;
                                    }
                                    if (isEmpty(second)) {
                                        return first;
                                    }
                                    var r = Object.assign({}, first);
                                    for (var k in second) {
                                        if (_internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(second, k)) {
                                            r[k] = _internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(first, k) ? S.concat(first[k], second[k]) : second[k];
                                        }
                                    }
                                    return r;
                                },
                                empty: empty
                            };
                        }
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * Takes a value and a `ReadonlyRecord` of functions and returns a
                         * `ReadonlyRecord` by applying each function to the input value.
                         *
                         * @example
                         * import { flap } from "fp-ts/ReadonlyRecord"
                         *
                         * const fab = { x: (n: number) => `${n} times 2`, y: (n: number) => `${n * 2}` };
                         * assert.deepStrictEqual(flap(3)(fab), {
                         *   x: "3 times 2",
                         *   y: "6",
                         * });
                         *
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_2__["flap"])(Functor);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FunctorWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex
                        };
                        /**
                         * Produces a `Foldable` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category folding
                         * @since 2.11.0
                         */
                        var getFoldable = function (O) {
                            return ({
                                URI: URI,
                                reduce: _reduce(O),
                                foldMap: _foldMap(O),
                                reduceRight: _reduceRight(O)
                            });
                        };
                        /**
                         * Produces a `FoldableWithIndex1` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category folding
                         * @since 2.11.0
                         */
                        var getFoldableWithIndex = function (O) {
                            return ({
                                URI: URI,
                                reduce: _reduce(O),
                                foldMap: _foldMap(O),
                                reduceRight: _reduceRight(O),
                                reduceWithIndex: _reduceWithIndex(O),
                                foldMapWithIndex: _foldMapWithIndex(O),
                                reduceRightWithIndex: _reduceRightWithIndex(O)
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Compactable = {
                            URI: URI,
                            compact: compact,
                            separate: separate
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Filterable = {
                            URI: URI,
                            map: _map,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var FilterableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex
                        };
                        /**
                         * Produces a `Traversable` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var getTraversable = function (O) {
                            return ({
                                URI: URI,
                                map: _map,
                                reduce: _reduce(O),
                                foldMap: _foldMap(O),
                                reduceRight: _reduceRight(O),
                                traverse: _traverse(O),
                                sequence: _sequence(O)
                            });
                        };
                        /**
                         * Produces a `TraversableWithIndex` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var getTraversableWithIndex = function (O) {
                            return ({
                                URI: URI,
                                map: _map,
                                mapWithIndex: _mapWithIndex,
                                reduce: _reduce(O),
                                foldMap: _foldMap(O),
                                reduceRight: _reduceRight(O),
                                reduceWithIndex: _reduceWithIndex(O),
                                foldMapWithIndex: _foldMapWithIndex(O),
                                reduceRightWithIndex: _reduceRightWithIndex(O),
                                traverse: _traverse(O),
                                sequence: _sequence(O),
                                traverseWithIndex: _traverseWithIndex(O)
                            });
                        };
                        /**
                         * @category filtering
                         * @since 2.11.0
                         */
                        var getWitherable = function (O) {
                            var T = getTraversable(O);
                            return {
                                URI: URI,
                                map: _map,
                                reduce: _reduce(O),
                                foldMap: _foldMap(O),
                                reduceRight: _reduceRight(O),
                                traverse: T.traverse,
                                sequence: T.sequence,
                                compact: compact,
                                separate: separate,
                                filter: _filter,
                                filterMap: _filterMap,
                                partition: _partition,
                                partitionMap: _partitionMap,
                                wither: Object(_Witherable__WEBPACK_IMPORTED_MODULE_6__["witherDefault"])(T, Compactable),
                                wilt: Object(_Witherable__WEBPACK_IMPORTED_MODULE_6__["wiltDefault"])(T, Compactable)
                            };
                        };
                        /**
                         * Given a `Semigroup` in the base type, it produces a `Semigroup`
                         * in the `ReadonlyRecord` of the base type.
                         * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by
                         * `union`.
                         *
                         * @example
                         * import { getUnionSemigroup, ReadonlyRecord } from "fp-ts/ReadonlyRecord"
                         * import { Semigroup } from "fp-ts/Semigroup"
                         *
                         * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };
                         * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getUnionSemigroup(sNumber);
                         * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { a: 1, b: -1, c: 4 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (S) {
                            var unionS = union(S);
                            return {
                                concat: function (first, second) { return unionS(second)(first); }
                            };
                        };
                        /**
                         * Same as `getMonoid`.
                         * Returns a `Monoid` instance for `ReadonlyRecord`s given a `Semigroup`
                         * instance for the base type.
                         * The `Monoid` makes the union of two `ReadonlyRecord`s combining the
                         * entries that have the same key with the provided `Semigroup`.
                         *
                         * @example
                         * import { SemigroupSum } from 'fp-ts/number'
                         * import { getUnionMonoid } from 'fp-ts/ReadonlyRecord'
                         *
                         * const M = getUnionMonoid(SemigroupSum);
                         * assert.deepStrictEqual(M.concat({ foo: 123, bar: 234 }, { foo: 456, baz: 567 }), { foo: 579 , bar: 234, baz: 567 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionMonoid = function (S) {
                            return ({
                                concat: getUnionSemigroup(S).concat,
                                empty: empty
                            });
                        };
                        /**
                         * Given a `Semigroup` in the base type, it produces a `Semigroup`
                         * in the `ReadonlyRecord` of the base type.
                         * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by
                         * `intersection`.
                         *
                         * @example
                         * import { getIntersectionSemigroup, ReadonlyRecord } from "fp-ts/ReadonlyRecord"
                         * import { Semigroup } from "fp-ts/Semigroup"
                         *
                         * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };
                         * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getIntersectionSemigroup(sNumber);
                         * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { b: -1 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getIntersectionSemigroup = function (S) {
                            var intersectionS = intersection(S);
                            return {
                                concat: function (first, second) { return intersectionS(second)(first); }
                            };
                        };
                        /**
                         * Produces a `Magma` with a `concat` function that combines
                         * two `ReadonlyRecord`s by making the `difference`.
                         *
                         * @example
                         * import { getDifferenceMagma, difference, ReadonlyRecord } from "fp-ts/ReadonlyRecord"
                         * import { Magma } from "fp-ts/Magma"
                         *
                         * const r1 = { a: 3, c: 3 };
                         * const r2 = { a: 1, b: 2 };
                         * const m: Magma<ReadonlyRecord<string, number>> = getDifferenceMagma<number>();
                         * assert.deepStrictEqual(m.concat(r1, r2), difference(r2)(r1));
                         * assert.deepStrictEqual(m.concat(r1, r2), { c: 3, b: 2 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getDifferenceMagma = function () {
                            return ({
                                concat: function (first, second) { return difference(second)(first); }
                            });
                        };
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `getFoldable` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        var Foldable = {
                            URI: URI,
                            reduce: /*#__PURE__*/ _reduce(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMap: /*#__PURE__*/ _foldMap(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRight: /*#__PURE__*/ _reduceRight(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])
                        };
                        /**
                         * Use `getFoldableWithIndex` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        var FoldableWithIndex = {
                            URI: URI,
                            reduce: /*#__PURE__*/ _reduce(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMap: /*#__PURE__*/ _foldMap(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRight: /*#__PURE__*/ _reduceRight(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])
                        };
                        /**
                         * Use `getTraversable` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        var Traversable = {
                            URI: URI,
                            map: _map,
                            reduce: /*#__PURE__*/ _reduce(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMap: /*#__PURE__*/ _foldMap(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRight: /*#__PURE__*/ _reduceRight(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            traverse: /*#__PURE__*/ _traverse(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            sequence: sequence
                        };
                        /**
                         * Use `getTraversableWithIndex` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        var TraversableWithIndex = {
                            URI: URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            reduce: /*#__PURE__*/ _reduce(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMap: /*#__PURE__*/ _foldMap(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRight: /*#__PURE__*/ _reduceRight(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            traverse: /*#__PURE__*/ _traverse(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            sequence: sequence,
                            traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"])
                        };
                        var _wither = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_6__["witherDefault"])(Traversable, Compactable);
                        var _wilt = /*#__PURE__*/ Object(_Witherable__WEBPACK_IMPORTED_MODULE_6__["wiltDefault"])(Traversable, Compactable);
                        /**
                         * Use `getWitherable` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        var Witherable = {
                            URI: URI,
                            map: _map,
                            reduce: /*#__PURE__*/ _reduce(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMap: /*#__PURE__*/ _foldMap(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRight: /*#__PURE__*/ _reduceRight(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            traverse: /*#__PURE__*/ _traverse(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            sequence: sequence,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            wither: _wither,
                            wilt: _wilt
                        };
                        /**
                         * Use [`upsertAt`](#upsertat) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var insertAt = upsertAt;
                        function hasOwnProperty(k, r) {
                            return _internal__WEBPACK_IMPORTED_MODULE_3__["has"].call(r === undefined ? this : r, k);
                        }
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `RR.Functor` instead of `RR.readonlyRecord`
                         * (where `RR` is from `import RR from 'fp-ts/ReadonlyRecord'`)
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var readonlyRecord = {
                            URI: URI,
                            map: _map,
                            reduce: /*#__PURE__*/ _reduce(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMap: /*#__PURE__*/ _foldMap(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRight: /*#__PURE__*/ _reduceRight(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            traverse: /*#__PURE__*/ _traverse(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            sequence: sequence,
                            compact: compact,
                            separate: separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            mapWithIndex: _mapWithIndex,
                            reduceWithIndex: /*#__PURE__*/ _reduceWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            foldMapWithIndex: /*#__PURE__*/ _foldMapWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            reduceRightWithIndex: /*#__PURE__*/ _reduceRightWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex,
                            traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(_string__WEBPACK_IMPORTED_MODULE_5__["Ord"]),
                            wither: _wither,
                            wilt: _wilt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Semigroup.js":
/*!*********************************************!*\
  !*** ./node_modules/fp-ts/es6/Semigroup.js ***!
  \*********************************************/
/*! exports provided: min, max, constant, reverse, struct, tuple, intercalate, first, last, concatAll, semigroupVoid, getObjectSemigroup, getLastSemigroup, getFirstSemigroup, getTupleSemigroup, getStructSemigroup, getDualSemigroup, getJoinSemigroup, getMeetSemigroup, getIntercalateSemigroup, fold, semigroupAll, semigroupAny, getFunctionSemigroup, semigroupString, semigroupSum, semigroupProduct */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function () { return min; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function () { return max; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constant", function () { return constant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reverse", function () { return reverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "struct", function () { return struct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function () { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intercalate", function () { return intercalate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "first", function () { return first; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "last", function () { return last; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatAll", function () { return concatAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "semigroupVoid", function () { return semigroupVoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getObjectSemigroup", function () { return getObjectSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLastSemigroup", function () { return getLastSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFirstSemigroup", function () { return getFirstSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTupleSemigroup", function () { return getTupleSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStructSemigroup", function () { return getStructSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDualSemigroup", function () { return getDualSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getJoinSemigroup", function () { return getJoinSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMeetSemigroup", function () { return getMeetSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIntercalateSemigroup", function () { return getIntercalateSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fold", function () { return fold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "semigroupAll", function () { return semigroupAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "semigroupAny", function () { return semigroupAny; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFunctionSemigroup", function () { return getFunctionSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "semigroupString", function () { return semigroupString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "semigroupSum", function () { return semigroupSum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "semigroupProduct", function () { return semigroupProduct; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
/* harmony import */ var _Magma__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Magma */ "./node_modules/fp-ts/es6/Magma.js");
/* harmony import */ var _Ord__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Ord */ "./node_modules/fp-ts/es6/Ord.js");
                        /**
                         * If a type `A` can form a `Semigroup` it has an **associative** binary operation.
                         *
                         * ```ts
                         * interface Semigroup<A> {
                         *   readonly concat: (x: A, y: A) => A
                         * }
                         * ```
                         *
                         * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.
                         *
                         * ```ts
                         * concat(x, concat(y, z)) = concat(concat(x, y), z)
                         * ```
                         *
                         * A common example of a semigroup is the type `string` with the operation `+`.
                         *
                         * ```ts
                         * import { Semigroup } from 'fp-ts/Semigroup'
                         *
                         * const semigroupString: Semigroup<string> = {
                         *   concat: (x, y) => x + y
                         * }
                         *
                         * const x = 'x'
                         * const y = 'y'
                         * const z = 'z'
                         *
                         * semigroupString.concat(x, y) // 'xy'
                         *
                         * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'
                         *
                         * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'
                         * ```
                         *
                         * *Adapted from https://typelevel.org/cats*
                         *
                         * @since 2.0.0
                         */




                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Get a semigroup where `concat` will return the minimum, based on the provided order.
                         *
                         * @example
                         * import * as N from 'fp-ts/number'
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * const S1 = S.min(N.Ord)
                         *
                         * assert.deepStrictEqual(S1.concat(1, 2), 1)
                         *
                         * @category constructors
                         * @since 2.10.0
                         */
                        var min = function (O) {
                            return ({
                                concat: _Ord__WEBPACK_IMPORTED_MODULE_3__["min"](O)
                            });
                        };
                        /**
                         * Get a semigroup where `concat` will return the maximum, based on the provided order.
                         *
                         * @example
                         * import * as N from 'fp-ts/number'
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * const S1 = S.max(N.Ord)
                         *
                         * assert.deepStrictEqual(S1.concat(1, 2), 2)
                         *
                         * @category constructors
                         * @since 2.10.0
                         */
                        var max = function (O) {
                            return ({
                                concat: _Ord__WEBPACK_IMPORTED_MODULE_3__["max"](O)
                            });
                        };
                        /**
                         * @category constructors
                         * @since 2.10.0
                         */
                        var constant = function (a) {
                            return ({
                                concat: function () { return a; }
                            });
                        };
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.
                         *
                         * @example
                         * import { reverse } from 'fp-ts/Semigroup'
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')
                         *
                         * @since 2.10.0
                         */
                        var reverse = _Magma__WEBPACK_IMPORTED_MODULE_2__["reverse"];
                        /**
                         * Given a struct of semigroups returns a semigroup for the struct.
                         *
                         * @example
                         * import { struct } from 'fp-ts/Semigroup'
                         * import * as N from 'fp-ts/number'
                         *
                         * interface Point {
                         *   readonly x: number
                         *   readonly y: number
                         * }
                         *
                         * const S = struct<Point>({
                         *   x: N.SemigroupSum,
                         *   y: N.SemigroupSum
                         * })
                         *
                         * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })
                         *
                         * @since 2.10.0
                         */
                        var struct = function (semigroups) {
                            return ({
                                concat: function (first, second) {
                                    var r = {};
                                    for (var k in semigroups) {
                                        if (_internal__WEBPACK_IMPORTED_MODULE_1__["has"].call(semigroups, k)) {
                                            r[k] = semigroups[k].concat(first[k], second[k]);
                                        }
                                    }
                                    return r;
                                }
                            });
                        };
                        /**
                         * Given a tuple of semigroups returns a semigroup for the tuple.
                         *
                         * @example
                         * import { tuple } from 'fp-ts/Semigroup'
                         * import * as B from 'fp-ts/boolean'
                         * import * as N from 'fp-ts/number'
                         * import * as S from 'fp-ts/string'
                         *
                         * const S1 = tuple(S.Semigroup, N.SemigroupSum)
                         * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])
                         *
                         * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)
                         * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])
                         *
                         * @since 2.10.0
                         */
                        var tuple = function () {
                            var semigroups = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                semigroups[_i] = arguments[_i];
                            }
                            return ({
                                concat: function (first, second) { return semigroups.map(function (s, i) { return s.concat(first[i], second[i]); }); }
                            });
                        };
                        /**
                         * Between each pair of elements insert `middle`.
                         *
                         * @example
                         * import { intercalate } from 'fp-ts/Semigroup'
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const S1 = pipe(S.Semigroup, intercalate(' + '))
                         *
                         * assert.strictEqual(S1.concat('a', 'b'), 'a + b')
                         *
                         * @since 2.10.0
                         */
                        var intercalate = function (middle) {
                            return function (S) {
                                return ({
                                    concat: function (x, y) { return S.concat(x, S.concat(middle, y)); }
                                });
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * Always return the first argument.
                         *
                         * @example
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var first = function () { return ({ concat: _function__WEBPACK_IMPORTED_MODULE_0__["identity"] }); };
                        /**
                         * Always return the last argument.
                         *
                         * @example
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var last = function () { return ({ concat: function (_, y) { return y; } }); };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Given a sequence of `as`, concat them and return the total.
                         *
                         * If `as` is empty, return the provided `startWith` value.
                         *
                         * @example
                         * import { concatAll } from 'fp-ts/Semigroup'
                         * import * as N from 'fp-ts/number'
                         *
                         * const sum = concatAll(N.SemigroupSum)(0)
                         *
                         * assert.deepStrictEqual(sum([1, 2, 3]), 6)
                         * assert.deepStrictEqual(sum([]), 0)
                         *
                         * @since 2.10.0
                         */
                        var concatAll = _Magma__WEBPACK_IMPORTED_MODULE_2__["concatAll"];
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `void` module instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var semigroupVoid = constant(undefined);
                        /**
                         * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getObjectSemigroup = function () {
                            return ({
                                concat: function (first, second) { return Object.assign({}, first, second); }
                            });
                        };
                        /**
                         * Use [`last`](#last) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getLastSemigroup = last;
                        /**
                         * Use [`first`](#first) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getFirstSemigroup = first;
                        /**
                         * Use [`tuple`](#tuple) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getTupleSemigroup = tuple;
                        /**
                         * Use [`struct`](#struct) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getStructSemigroup = struct;
                        /**
                         * Use [`reverse`](#reverse) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getDualSemigroup = reverse;
                        /**
                         * Use [`max`](#max) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getJoinSemigroup = max;
                        /**
                         * Use [`min`](#min) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getMeetSemigroup = min;
                        /**
                         * Use [`intercalate`](#intercalate) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var getIntercalateSemigroup = intercalate;
                        function fold(S) {
                            var concatAllS = concatAll(S);
                            return function (startWith, as) { return (as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as)); };
                        }
                        /**
                         * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var semigroupAll = {
                            concat: function (x, y) { return x && y; }
                        };
                        /**
                         * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var semigroupAny = {
                            concat: function (x, y) { return x || y; }
                        };
                        /**
                         * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getFunctionSemigroup = _function__WEBPACK_IMPORTED_MODULE_0__["getSemigroup"];
                        /**
                         * Use [`Semigroup`](./string.ts.html#Semigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var semigroupString = {
                            concat: function (x, y) { return x + y; }
                        };
                        /**
                         * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var semigroupSum = {
                            concat: function (x, y) { return x + y; }
                        };
                        /**
                         * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var semigroupProduct = {
                            concat: function (x, y) { return x * y; }
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Separated.js":
/*!*********************************************!*\
  !*** ./node_modules/fp-ts/es6/Separated.js ***!
  \*********************************************/
/*! exports provided: separated, map, mapLeft, bimap, URI, Bifunctor, Functor, flap, left, right */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "separated", function () { return separated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapLeft", function () { return mapLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bimap", function () { return bimap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bifunctor", function () { return Bifunctor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function () { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function () { return right; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
                        /**
                         * ```ts
                         * interface Separated<E, A> {
                         *    readonly left: E
                         *    readonly right: A
                         * }
                         * ```
                         *
                         * Represents a result of separating a whole into two parts.
                         *
                         * @since 2.10.0
                         */


                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.10.0
                         */
                        var separated = function (left, right) { return ({ left: left, right: right }); };
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, map(f)); };
                        var _mapLeft = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, mapLeft(f)); };
                        var _bimap = function (fa, g, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_0__["pipe"])(fa, bimap(g, f)); };
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.10.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return separated(left(fa), f(right(fa)));
                            };
                        };
                        /**
                         * Map a function over the first type argument of a bifunctor.
                         *
                         * @category error handling
                         * @since 2.10.0
                         */
                        var mapLeft = function (f) {
                            return function (fa) {
                                return separated(f(left(fa)), right(fa));
                            };
                        };
                        /**
                         * Map a pair of functions over the two type arguments of the bifunctor.
                         *
                         * @category mapping
                         * @since 2.10.0
                         */
                        var bimap = function (f, g) {
                            return function (fa) {
                                return separated(f(left(fa)), g(right(fa)));
                            };
                        };
                        /**
                         * @category type lambdas
                         * @since 2.10.0
                         */
                        var URI = 'Separated';
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Bifunctor = {
                            URI: URI,
                            mapLeft: _mapLeft,
                            bimap: _bimap
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_1__["flap"])(Functor);
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.10.0
                         */
                        var left = function (s) { return s.left; };
                        /**
                         * @since 2.10.0
                         */
                        var right = function (s) { return s.right; };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Task.js":
/*!****************************************!*\
  !*** ./node_modules/fp-ts/es6/Task.js ***!
  \****************************************/
/*! exports provided: fromIO, delay, map, ap, of, flatMap, flatten, URI, getRaceMonoid, Functor, as, asUnit, flap, Pointed, ApplyPar, apFirst, apSecond, ApplicativePar, ApplySeq, ApplicativeSeq, Chain, Monad, MonadIO, fromTask, MonadTask, FromIO, flatMapIO, tap, tapIO, fromIOK, chainIOK, chainFirstIOK, FromTask, never, Do, bindTo, let, bind, apS, ApT, traverseReadonlyNonEmptyArrayWithIndex, traverseReadonlyArrayWithIndex, traverseReadonlyNonEmptyArrayWithIndexSeq, traverseReadonlyArrayWithIndexSeq, traverseArrayWithIndex, traverseArray, sequenceArray, traverseSeqArrayWithIndex, traverseSeqArray, sequenceSeqArray, chain, chainFirst, task, taskSeq, getSemigroup, getMonoid */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromIO", function () { return fromIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "delay", function () { return delay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function () { return of; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMap", function () { return flatMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function () { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRaceMonoid", function () { return getRaceMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Functor", function () { return Functor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "as", function () { return as; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asUnit", function () { return asUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flap", function () { return flap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pointed", function () { return Pointed; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplyPar", function () { return ApplyPar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apFirst", function () { return apFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apSecond", function () { return apSecond; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicativePar", function () { return ApplicativePar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplySeq", function () { return ApplySeq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicativeSeq", function () { return ApplicativeSeq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Chain", function () { return Chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monad", function () { return Monad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonadIO", function () { return MonadIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTask", function () { return fromTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonadTask", function () { return MonadTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FromIO", function () { return FromIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapIO", function () { return flatMapIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tap", function () { return tap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tapIO", function () { return tapIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromIOK", function () { return fromIOK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainIOK", function () { return chainIOK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirstIOK", function () { return chainFirstIOK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FromTask", function () { return FromTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "never", function () { return never; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Do", function () { return Do; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindTo", function () { return bindTo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "let", function () { return let_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bind", function () { return bind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apS", function () { return apS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApT", function () { return ApT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyNonEmptyArrayWithIndex", function () { return traverseReadonlyNonEmptyArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyArrayWithIndex", function () { return traverseReadonlyArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyNonEmptyArrayWithIndexSeq", function () { return traverseReadonlyNonEmptyArrayWithIndexSeq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseReadonlyArrayWithIndexSeq", function () { return traverseReadonlyArrayWithIndexSeq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseArrayWithIndex", function () { return traverseArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseArray", function () { return traverseArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceArray", function () { return sequenceArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseSeqArrayWithIndex", function () { return traverseSeqArrayWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverseSeqArray", function () { return traverseSeqArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceSeqArray", function () { return sequenceSeqArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chainFirst", function () { return chainFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "task", function () { return task; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "taskSeq", function () { return taskSeq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony import */ var _Applicative__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Applicative */ "./node_modules/fp-ts/es6/Applicative.js");
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _FromIO__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FromIO */ "./node_modules/fp-ts/es6/FromIO.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var _Functor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/es6/Functor.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");
                        /**
                         * ```ts
                         * interface Task<A> {
                         *   (): Promise<A>
                         * }
                         * ```
                         *
                         * `Task<A>` represents an asynchronous computation that yields a value of type `A` and **never fails**.
                         * If you want to represent an asynchronous computation that may fail, please see `TaskEither`.
                         *
                         * @since 2.0.0
                         */







                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromIO = function (ma) { return function () { return Promise.resolve().then(ma); }; };
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * Creates a task that will complete after a time delay
                         *
                         * @example
                         * import { sequenceT } from 'fp-ts/Apply'
                         * import * as T from 'fp-ts/Task'
                         * import { takeRight } from 'fp-ts/Array'
                         *
                         * async function test() {
                         *   const log: Array<string> = []
                         *   const append = (message: string): T.Task<void> =>
                         *     T.fromIO(() => {
                         *       log.push(message)
                         *     })
                         *   const fa = append('a')
                         *   const fb = T.delay(20)(append('b'))
                         *   const fc = T.delay(10)(append('c'))
                         *   const fd = append('d')
                         *   await sequenceT(T.ApplyPar)(fa, fb, fc, fd)()
                         *   assert.deepStrictEqual(takeRight(2)(log), ['c', 'b'])
                         * }
                         *
                         * test()
                         *
                         * @since 2.0.0
                         */
                        function delay(millis) {
                            return function (ma) {
                                return function () {
                                    return new Promise(function (resolve) {
                                        setTimeout(function () {
                                            Promise.resolve().then(ma).then(resolve);
                                        }, millis);
                                    });
                                };
                            };
                        }
                        var _map = function (fa, f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, map(f)); };
                        var _apPar = function (fab, fa) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fab, ap(fa)); };
                        var _apSeq = function (fab, fa) { return flatMap(fab, function (f) { return Object(_function__WEBPACK_IMPORTED_MODULE_4__["pipe"])(fa, map(f)); }); };
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return function () {
                                    return Promise.resolve().then(fa).then(f);
                                };
                            };
                        };
                        /**
                         * @since 2.0.0
                         */
                        var ap = function (fa) {
                            return function (fab) {
                                return function () {
                                    return Promise.all([Promise.resolve().then(fab), Promise.resolve().then(fa)]).then(function (_a) {
                                        var f = _a[0], a = _a[1];
                                        return f(a);
                                    });
                                };
                            };
                        };
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var of = function (a) { return function () { return Promise.resolve(a); }; };
                        /**
                         * @category sequencing
                         * @since 2.14.0
                         */
                        var flatMap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, function (ma, f) {
                            return function () {
                                return Promise.resolve()
                                    .then(ma)
                                    .then(function (a) { return f(a)(); });
                            };
                        });
                        /**
                         * @category sequencing
                         * @since 2.0.0
                         */
                        var flatten = /*#__PURE__*/ flatMap(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        var URI = 'Task';
                        /**
                         * Monoid returning the first completed task.
                         *
                         * Note: uses `Promise.race` internally.
                         *
                         * @example
                         * import * as T from 'fp-ts/Task'
                         *
                         * async function test() {
                         *   const S = T.getRaceMonoid<string>()
                         *   const fa = T.delay(20)(T.of('a'))
                         *   const fb = T.delay(10)(T.of('b'))
                         *   assert.deepStrictEqual(await S.concat(fa, fb)(), 'b')
                         * }
                         *
                         * test()
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        function getRaceMonoid() {
                            return {
                                concat: function (x, y) { return function () { return Promise.race([Promise.resolve().then(x), Promise.resolve().then(y)]); }; },
                                empty: never
                            };
                        }
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        var Functor = {
                            URI: URI,
                            map: _map
                        };
                        /**
                         * Maps the value to the specified constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        var as = Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["as"])(Functor));
                        /**
                         * Maps the value to the void constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        var asUnit = Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["asUnit"])(Functor);
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        var flap = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["flap"])(Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Pointed = {
                            URI: URI,
                            of: of
                        };
                        /**
                         * Runs computations in parallel.
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var ApplyPar = {
                            URI: URI,
                            map: _map,
                            ap: _apPar
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.0.0
                         */
                        var apFirst = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apFirst"])(ApplyPar);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.0.0
                         */
                        var apSecond = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apSecond"])(ApplyPar);
                        /**
                         * Runs computations in parallel.
                         *
                         * @category instances
                         * @since 2.7.0
                         */
                        var ApplicativePar = {
                            URI: URI,
                            map: _map,
                            ap: _apPar,
                            of: of
                        };
                        /**
                         * Runs computations sequentially.
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var ApplySeq = {
                            URI: URI,
                            map: _map,
                            ap: _apSeq
                        };
                        /**
                         * Runs computations sequentially.
                         *
                         * @category instances
                         * @since 2.7.0
                         */
                        var ApplicativeSeq = {
                            URI: URI,
                            map: _map,
                            ap: _apSeq,
                            of: of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Chain = {
                            URI: URI,
                            map: _map,
                            ap: _apPar,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Monad = {
                            URI: URI,
                            map: _map,
                            of: of,
                            ap: _apPar,
                            chain: flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var MonadIO = {
                            URI: URI,
                            map: _map,
                            of: of,
                            ap: _apPar,
                            chain: flatMap,
                            fromIO: fromIO
                        };
                        /**
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        var fromTask = _function__WEBPACK_IMPORTED_MODULE_4__["identity"];
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var MonadTask = {
                            URI: URI,
                            map: _map,
                            of: of,
                            ap: _apPar,
                            chain: flatMap,
                            fromIO: fromIO,
                            fromTask: fromTask
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var FromIO = {
                            URI: URI,
                            fromIO: fromIO
                        };
                        /** @internal */
                        var _FlatMap = {
                            flatMap: flatMap
                        };
                        /** @internal */
                        var _FromIO = {
                            fromIO: FromIO.fromIO
                        };
                        /**
                         * @category sequencing
                         * @since 2.16.0
                         */
                        var flatMapIO = _internal__WEBPACK_IMPORTED_MODULE_6__["flatMapIO"](_FromIO, _FlatMap);
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category combinators
                         * @since 2.15.0
                         */
                        var tap = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, _Chain__WEBPACK_IMPORTED_MODULE_2__["tap"](Chain));
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as T from 'fp-ts/Task'
                         * import * as Console from 'fp-ts/Console'
                         *
                         * // Will produce `Hello, fp-ts` to the stdout
                         * const effect = pipe(
                         *   T.of('fp-ts'),
                         *   T.tapIO((value) => Console.log(`Hello, ${value}`)),
                         * )
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(await effect(), 'fp-ts')
                         * }
                         *
                         * test()
                         *
                         * @category combinators
                         * @since 2.16.0
                         */
                        var tapIO = /*#__PURE__*/ Object(_function__WEBPACK_IMPORTED_MODULE_4__["dual"])(2, Object(_FromIO__WEBPACK_IMPORTED_MODULE_3__["tapIO"])(FromIO, Chain));
                        /**
                         * @category lifting
                         * @since 2.4.0
                         */
                        var fromIOK =
/*#__PURE__*/ Object(_FromIO__WEBPACK_IMPORTED_MODULE_3__["fromIOK"])(FromIO);
                        /**
                         * Alias of `flatMapIO`.
                         *
                         * @category legacy
                         * @since 2.4.0
                         */
                        var chainIOK = flatMapIO;
                        /**
                         * Alias of `tapIO`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        var chainFirstIOK = tapIO;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var FromTask = {
                            URI: URI,
                            fromIO: fromIO,
                            fromTask: fromTask
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * A `Task` that never completes.
                         *
                         * @since 2.0.0
                         */
                        var never = function () { return new Promise(function (_) { return undefined; }); };
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        var Do = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_6__["emptyRecord"]);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bindTo = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["bindTo"])(Functor);
                        var let_ = /*#__PURE__*/ Object(_Functor__WEBPACK_IMPORTED_MODULE_5__["let"])(Functor);

                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var bind = /*#__PURE__*/ _Chain__WEBPACK_IMPORTED_MODULE_2__["bind"](Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        var apS = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["apS"])(ApplyPar);
                        /**
                         * @since 2.11.0
                         */
                        var ApT = /*#__PURE__*/ of(_internal__WEBPACK_IMPORTED_MODULE_6__["emptyReadonlyArray"]);
                        // -------------------------------------------------------------------------------------
                        // array utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndex = function (f) {
                            return function (as) {
                                return function () {
                                    return Promise.all(as.map(function (a, i) { return Promise.resolve().then(function () { return f(i, a)(); }); }));
                                };
                            };
                        };
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndex = function (f) {
                            var g = traverseReadonlyNonEmptyArrayWithIndex(f);
                            return function (as) { return (_internal__WEBPACK_IMPORTED_MODULE_6__["isNonEmpty"](as) ? g(as) : ApT); };
                        };
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {
                            return function (as) {
                                return function () {
                                    return _internal__WEBPACK_IMPORTED_MODULE_6__["tail"](as).reduce(function (acc, a, i) {
                                        return acc.then(function (bs) {
                                            return Promise.resolve()
                                                .then(f(i + 1, a))
                                                .then(function (b) {
                                                    bs.push(b);
                                                    return bs;
                                                });
                                        });
                                    }, Promise.resolve()
                                        .then(f(0, _internal__WEBPACK_IMPORTED_MODULE_6__["head"](as)))
                                        .then(_internal__WEBPACK_IMPORTED_MODULE_6__["singleton"]));
                                };
                            };
                        };
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndexSeq = function (f) {
                            var g = traverseReadonlyNonEmptyArrayWithIndexSeq(f);
                            return function (as) { return (_internal__WEBPACK_IMPORTED_MODULE_6__["isNonEmpty"](as) ? g(as) : ApT); };
                        };
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArrayWithIndex = traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArray = function (f) {
                            return traverseReadonlyArrayWithIndex(function (_, a) { return f(a); });
                        };
                        /**
                         * Equivalent to `ReadonlyArray#sequence(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var sequenceArray =
/*#__PURE__*/ traverseArray(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseSeqArrayWithIndex = traverseReadonlyArrayWithIndexSeq;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseSeqArray = function (f) {
                            return traverseReadonlyArrayWithIndexSeq(function (_, a) { return f(a); });
                        };
                        /**
                         * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var sequenceSeqArray =
/*#__PURE__*/ traverseSeqArray(_function__WEBPACK_IMPORTED_MODULE_4__["identity"]);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chain = flatMap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        var chainFirst = tap;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.task`
                         * (where `T` is from `import T from 'fp-ts/Task'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var task = {
                            URI: URI,
                            map: _map,
                            of: of,
                            ap: _apPar,
                            chain: flatMap,
                            fromIO: fromIO,
                            fromTask: fromTask
                        };
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.taskSeq`
                         * (where `T` is from `import T from 'fp-ts/Task'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var taskSeq = {
                            URI: URI,
                            map: _map,
                            of: of,
                            ap: _apSeq,
                            chain: flatMap,
                            fromIO: fromIO,
                            fromTask: fromTask
                        };
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getSemigroup = /*#__PURE__*/ Object(_Apply__WEBPACK_IMPORTED_MODULE_1__["getApplySemigroup"])(ApplySeq);
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * Lift a monoid into 'Task', the inner values are concatenated using the provided `Monoid`.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getMonoid = /*#__PURE__*/ Object(_Applicative__WEBPACK_IMPORTED_MODULE_0__["getApplicativeMonoid"])(ApplicativeSeq);


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Witherable.js":
/*!**********************************************!*\
  !*** ./node_modules/fp-ts/es6/Witherable.js ***!
  \**********************************************/
/*! exports provided: wiltDefault, witherDefault, filterE */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wiltDefault", function () { return wiltDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "witherDefault", function () { return witherDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterE", function () { return filterE; });
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal */ "./node_modules/fp-ts/es6/internal.js");

                        function wiltDefault(T, C) {
                            return function (F) {
                                var traverseF = T.traverse(F);
                                return function (wa, f) { return F.map(traverseF(wa, f), C.separate); };
                            };
                        }
                        function witherDefault(T, C) {
                            return function (F) {
                                var traverseF = T.traverse(F);
                                return function (wa, f) { return F.map(traverseF(wa, f), C.compact); };
                            };
                        }
                        function filterE(W) {
                            return function (F) {
                                var witherF = W.wither(F);
                                return function (predicate) { return function (ga) { return witherF(ga, function (a) { return F.map(predicate(a), function (b) { return (b ? _internal__WEBPACK_IMPORTED_MODULE_0__["some"](a) : _internal__WEBPACK_IMPORTED_MODULE_0__["none"]); }); }); }; };
                            };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/Zero.js":
/*!****************************************!*\
  !*** ./node_modules/fp-ts/es6/Zero.js ***!
  \****************************************/
/*! exports provided: guard */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "guard", function () { return guard; });
                        function guard(F, P) {
                            return function (b) { return (b ? P.of(undefined) : F.zero()); };
                        }


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/function.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/es6/function.js ***!
  \********************************************/
/*! exports provided: getBooleanAlgebra, getSemigroup, getMonoid, getSemiring, getRing, apply, identity, unsafeCoerce, constant, constTrue, constFalse, constNull, constUndefined, constVoid, flip, flow, tuple, increment, decrement, absurd, tupled, untupled, pipe, hole, SK, not, getEndomorphismMonoid, dual */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getBooleanAlgebra", function () { return getBooleanAlgebra; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemigroup", function () { return getSemigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMonoid", function () { return getMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSemiring", function () { return getSemiring; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRing", function () { return getRing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "apply", function () { return apply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function () { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unsafeCoerce", function () { return unsafeCoerce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constant", function () { return constant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constTrue", function () { return constTrue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constFalse", function () { return constFalse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constNull", function () { return constNull; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constUndefined", function () { return constUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "constVoid", function () { return constVoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flip", function () { return flip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flow", function () { return flow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function () { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "increment", function () { return increment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "decrement", function () { return decrement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "absurd", function () { return absurd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tupled", function () { return tupled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "untupled", function () { return untupled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function () { return pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hole", function () { return hole; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SK", function () { return SK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "not", function () { return not; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEndomorphismMonoid", function () { return getEndomorphismMonoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dual", function () { return dual; });
                        var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getBooleanAlgebra = function (B) {
                            return function () {
                                return ({
                                    meet: function (x, y) { return function (a) { return B.meet(x(a), y(a)); }; },
                                    join: function (x, y) { return function (a) { return B.join(x(a), y(a)); }; },
                                    zero: function () { return B.zero; },
                                    one: function () { return B.one; },
                                    implies: function (x, y) { return function (a) { return B.implies(x(a), y(a)); }; },
                                    not: function (x) { return function (a) { return B.not(x(a)); }; }
                                });
                            };
                        };
                        /**
                         * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.
                         *
                         * @example
                         * import { Predicate, getSemigroup } from 'fp-ts/function'
                         * import * as B from 'fp-ts/boolean'
                         *
                         * const f: Predicate<number> = (n) => n <= 2
                         * const g: Predicate<number> = (n) => n >= 0
                         *
                         * const S1 = getSemigroup(B.SemigroupAll)<number>()
                         *
                         * assert.deepStrictEqual(S1.concat(f, g)(1), true)
                         * assert.deepStrictEqual(S1.concat(f, g)(3), false)
                         *
                         * const S2 = getSemigroup(B.SemigroupAny)<number>()
                         *
                         * assert.deepStrictEqual(S2.concat(f, g)(1), true)
                         * assert.deepStrictEqual(S2.concat(f, g)(3), true)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var getSemigroup = function (S) {
                            return function () {
                                return ({
                                    concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }
                                });
                            };
                        };
                        /**
                         * Unary functions form a monoid as long as you can provide a monoid for the codomain.
                         *
                         * @example
                         * import { Predicate } from 'fp-ts/Predicate'
                         * import { getMonoid } from 'fp-ts/function'
                         * import * as B from 'fp-ts/boolean'
                         *
                         * const f: Predicate<number> = (n) => n <= 2
                         * const g: Predicate<number> = (n) => n >= 0
                         *
                         * const M1 = getMonoid(B.MonoidAll)<number>()
                         *
                         * assert.deepStrictEqual(M1.concat(f, g)(1), true)
                         * assert.deepStrictEqual(M1.concat(f, g)(3), false)
                         *
                         * const M2 = getMonoid(B.MonoidAny)<number>()
                         *
                         * assert.deepStrictEqual(M2.concat(f, g)(1), true)
                         * assert.deepStrictEqual(M2.concat(f, g)(3), true)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var getMonoid = function (M) {
                            var getSemigroupM = getSemigroup(M);
                            return function () {
                                return ({
                                    concat: getSemigroupM().concat,
                                    empty: function () { return M.empty; }
                                });
                            };
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getSemiring = function (S) {
                            return ({
                                add: function (f, g) { return function (x) { return S.add(f(x), g(x)); }; },
                                zero: function () { return S.zero; },
                                mul: function (f, g) { return function (x) { return S.mul(f(x), g(x)); }; },
                                one: function () { return S.one; }
                            });
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getRing = function (R) {
                            var S = getSemiring(R);
                            return {
                                add: S.add,
                                mul: S.mul,
                                one: S.one,
                                zero: S.zero,
                                sub: function (f, g) { return function (x) { return R.sub(f(x), g(x)); }; }
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.11.0
                         */
                        var apply = function (a) {
                            return function (f) {
                                return f(a);
                            };
                        };
                        /**
                         * @since 2.0.0
                         */
                        function identity(a) {
                            return a;
                        }
                        /**
                         * @since 2.0.0
                         */
                        var unsafeCoerce = identity;
                        /**
                         * @since 2.0.0
                         */
                        function constant(a) {
                            return function () { return a; };
                        }
                        /**
                         * A thunk that returns always `true`.
                         *
                         * @since 2.0.0
                         */
                        var constTrue = /*#__PURE__*/ constant(true);
                        /**
                         * A thunk that returns always `false`.
                         *
                         * @since 2.0.0
                         */
                        var constFalse = /*#__PURE__*/ constant(false);
                        /**
                         * A thunk that returns always `null`.
                         *
                         * @since 2.0.0
                         */
                        var constNull = /*#__PURE__*/ constant(null);
                        /**
                         * A thunk that returns always `undefined`.
                         *
                         * @since 2.0.0
                         */
                        var constUndefined = /*#__PURE__*/ constant(undefined);
                        /**
                         * A thunk that returns always `void`.
                         *
                         * @since 2.0.0
                         */
                        var constVoid = constUndefined;
                        function flip(f) {
                            return function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                if (args.length > 1) {
                                    return f(args[1], args[0]);
                                }
                                return function (a) { return f(a)(args[0]); };
                            };
                        }
                        function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
                            switch (arguments.length) {
                                case 1:
                                    return ab;
                                case 2:
                                    return function () {
                                        return bc(ab.apply(this, arguments));
                                    };
                                case 3:
                                    return function () {
                                        return cd(bc(ab.apply(this, arguments)));
                                    };
                                case 4:
                                    return function () {
                                        return de(cd(bc(ab.apply(this, arguments))));
                                    };
                                case 5:
                                    return function () {
                                        return ef(de(cd(bc(ab.apply(this, arguments)))));
                                    };
                                case 6:
                                    return function () {
                                        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
                                    };
                                case 7:
                                    return function () {
                                        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
                                    };
                                case 8:
                                    return function () {
                                        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
                                    };
                                case 9:
                                    return function () {
                                        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
                                    };
                            }
                            return;
                        }
                        /**
                         * @since 2.0.0
                         */
                        function tuple() {
                            var t = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                t[_i] = arguments[_i];
                            }
                            return t;
                        }
                        /**
                         * @since 2.0.0
                         */
                        function increment(n) {
                            return n + 1;
                        }
                        /**
                         * @since 2.0.0
                         */
                        function decrement(n) {
                            return n - 1;
                        }
                        /**
                         * @since 2.0.0
                         */
                        function absurd(_) {
                            throw new Error('Called `absurd` function which should be uncallable');
                        }
                        /**
                         * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.
                         *
                         * @example
                         * import { tupled } from 'fp-ts/function'
                         *
                         * const add = tupled((x: number, y: number): number => x + y)
                         *
                         * assert.strictEqual(add([1, 2]), 3)
                         *
                         * @since 2.4.0
                         */
                        function tupled(f) {
                            return function (a) { return f.apply(void 0, a); };
                        }
                        /**
                         * Inverse function of `tupled`
                         *
                         * @since 2.4.0
                         */
                        function untupled(f) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return f(a);
                            };
                        }
                        function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
                            switch (arguments.length) {
                                case 1:
                                    return a;
                                case 2:
                                    return ab(a);
                                case 3:
                                    return bc(ab(a));
                                case 4:
                                    return cd(bc(ab(a)));
                                case 5:
                                    return de(cd(bc(ab(a))));
                                case 6:
                                    return ef(de(cd(bc(ab(a)))));
                                case 7:
                                    return fg(ef(de(cd(bc(ab(a))))));
                                case 8:
                                    return gh(fg(ef(de(cd(bc(ab(a)))))));
                                case 9:
                                    return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
                                default: {
                                    var ret = arguments[0];
                                    for (var i = 1; i < arguments.length; i++) {
                                        ret = arguments[i](ret);
                                    }
                                    return ret;
                                }
                            }
                        }
                        /**
                         * Type hole simulation
                         *
                         * @since 2.7.0
                         */
                        var hole = absurd;
                        /**
                         * @since 2.11.0
                         */
                        var SK = function (_, b) { return b; };
                        /**
                         * Use `Predicate` module instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function not(predicate) {
                            return function (a) { return !predicate(a); };
                        }
                        /**
                         * Use `Endomorphism` module instead.
                         *
                         * @category zone of death
                         * @since 2.10.0
                         * @deprecated
                         */
                        var getEndomorphismMonoid = function () {
                            return ({
                                concat: function (first, second) { return flow(first, second); },
                                empty: identity
                            });
                        };
                        /** @internal */
                        var dual = function (arity, body) {
                            var isDataFirst = typeof arity === 'number' ? function (args) { return args.length >= arity; } : arity;
                            return function () {
                                var args = Array.from(arguments);
                                if (isDataFirst(arguments)) {
                                    return body.apply(this, args);
                                }
                                return function (self) { return body.apply(void 0, __spreadArray([self], args, false)); };
                            };
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/internal.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/es6/internal.js ***!
  \********************************************/
/*! exports provided: isNone, isSome, none, some, isLeft, isRight, left, right, singleton, isNonEmpty, head, tail, emptyReadonlyArray, emptyRecord, has, fromReadonlyNonEmptyArray, liftNullable, liftOption, flatMapNullable, flatMapOption, flatMapEither, flatMapIO, flatMapTask, flatMapReader */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNone", function () { return isNone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSome", function () { return isSome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "none", function () { return none; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function () { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isLeft", function () { return isLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRight", function () { return isRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function () { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function () { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "singleton", function () { return singleton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNonEmpty", function () { return isNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "head", function () { return head; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tail", function () { return tail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "emptyReadonlyArray", function () { return emptyReadonlyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "emptyRecord", function () { return emptyRecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has", function () { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromReadonlyNonEmptyArray", function () { return fromReadonlyNonEmptyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "liftNullable", function () { return liftNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "liftOption", function () { return liftOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapNullable", function () { return flatMapNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapOption", function () { return flatMapOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapEither", function () { return flatMapEither; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapIO", function () { return flatMapIO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapTask", function () { return flatMapTask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatMapReader", function () { return flatMapReader; });
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");
                        var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };

                        // -------------------------------------------------------------------------------------
                        // Option
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var isNone = function (fa) { return fa._tag === 'None'; };
                        /** @internal */
                        var isSome = function (fa) { return fa._tag === 'Some'; };
                        /** @internal */
                        var none = { _tag: 'None' };
                        /** @internal */
                        var some = function (a) { return ({ _tag: 'Some', value: a }); };
                        // -------------------------------------------------------------------------------------
                        // Either
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var isLeft = function (ma) { return ma._tag === 'Left'; };
                        /** @internal */
                        var isRight = function (ma) { return ma._tag === 'Right'; };
                        /** @internal */
                        var left = function (e) { return ({ _tag: 'Left', left: e }); };
                        /** @internal */
                        var right = function (a) { return ({ _tag: 'Right', right: a }); };
                        // -------------------------------------------------------------------------------------
                        // ReadonlyNonEmptyArray
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var singleton = function (a) { return [a]; };
                        /** @internal */
                        var isNonEmpty = function (as) { return as.length > 0; };
                        /** @internal */
                        var head = function (as) { return as[0]; };
                        /** @internal */
                        var tail = function (as) { return as.slice(1); };
                        // -------------------------------------------------------------------------------------
                        // empty
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var emptyReadonlyArray = [];
                        /** @internal */
                        var emptyRecord = {};
                        // -------------------------------------------------------------------------------------
                        // Record
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var has = Object.prototype.hasOwnProperty;
                        // -------------------------------------------------------------------------------------
                        // NonEmptyArray
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var fromReadonlyNonEmptyArray = function (as) { return __spreadArray([as[0]], as.slice(1), true); };
                        /** @internal */
                        var liftNullable = function (F) {
                            return function (f, onNullable) {
                                return function () {
                                    var a = [];
                                    for (var _i = 0; _i < arguments.length; _i++) {
                                        a[_i] = arguments[_i];
                                    }
                                    var o = f.apply(void 0, a);
                                    return F.fromEither(o == null ? left(onNullable.apply(void 0, a)) : right(o));
                                };
                            };
                        };
                        /** @internal */
                        var liftOption = function (F) {
                            return function (f, onNone) {
                                return function () {
                                    var a = [];
                                    for (var _i = 0; _i < arguments.length; _i++) {
                                        a[_i] = arguments[_i];
                                    }
                                    var o = f.apply(void 0, a);
                                    return F.fromEither(isNone(o) ? left(onNone.apply(void 0, a)) : right(o.value));
                                };
                            };
                        };
                        /** @internal */
                        var flatMapNullable = function (F, M) {
    /*#__PURE__*/ return Object(_function__WEBPACK_IMPORTED_MODULE_0__["dual"])(3, function (self, f, onNullable) {
                            return M.flatMap(self, liftNullable(F)(f, onNullable));
                        });
                        };
                        /** @internal */
                        var flatMapOption = function (F, M) {
    /*#__PURE__*/ return Object(_function__WEBPACK_IMPORTED_MODULE_0__["dual"])(3, function (self, f, onNone) { return M.flatMap(self, liftOption(F)(f, onNone)); });
                        };
                        /** @internal */
                        var flatMapEither = function (F, M) {
    /*#__PURE__*/ return Object(_function__WEBPACK_IMPORTED_MODULE_0__["dual"])(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromEither(f(a)); });
                        });
                        };
                        /** @internal */
                        var flatMapIO = function (F, M) {
    /*#__PURE__*/ return Object(_function__WEBPACK_IMPORTED_MODULE_0__["dual"])(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromIO(f(a)); });
                        });
                        };
                        /** @internal */
                        var flatMapTask = function (F, M) {
    /*#__PURE__*/ return Object(_function__WEBPACK_IMPORTED_MODULE_0__["dual"])(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromTask(f(a)); });
                        });
                        };
                        /** @internal */
                        var flatMapReader = function (F, M) {
    /*#__PURE__*/ return Object(_function__WEBPACK_IMPORTED_MODULE_0__["dual"])(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromReader(f(a)); });
                        });
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/number.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/es6/number.js ***!
  \******************************************/
/*! exports provided: isNumber, Eq, Ord, Bounded, Show, MagmaSub, SemigroupSum, SemigroupProduct, MonoidSum, MonoidProduct, Field */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function () { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Eq", function () { return Eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ord", function () { return Ord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Bounded", function () { return Bounded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Show", function () { return Show; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MagmaSub", function () { return MagmaSub; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SemigroupSum", function () { return SemigroupSum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SemigroupProduct", function () { return SemigroupProduct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonoidSum", function () { return MonoidSum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MonoidProduct", function () { return MonoidProduct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Field", function () { return Field; });
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category refinements
                         * @since 2.11.0
                         */
                        var isNumber = function (u) { return typeof u === 'number'; };
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Eq = {
                            equals: function (first, second) { return first === second; }
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Ord = {
                            equals: Eq.equals,
                            compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Bounded = {
                            equals: Eq.equals,
                            compare: Ord.compare,
                            top: Infinity,
                            bottom: -Infinity
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Show = {
                            show: function (n) { return JSON.stringify(n); }
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var MagmaSub = {
                            concat: function (first, second) { return first - second; }
                        };
                        /**
                         * `number` semigroup under addition.
                         *
                         * @example
                         * import { SemigroupSum } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(SemigroupSum.concat(2, 3), 5)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var SemigroupSum = {
                            concat: function (first, second) { return first + second; }
                        };
                        /**
                         * `number` semigroup under multiplication.
                         *
                         * @example
                         * import { SemigroupProduct } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(SemigroupProduct.concat(2, 3), 6)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var SemigroupProduct = {
                            concat: function (first, second) { return first * second; }
                        };
                        /**
                         * `number` monoid under addition.
                         *
                         * The `empty` value is `0`.
                         *
                         * @example
                         * import { MonoidSum } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(MonoidSum.concat(2, MonoidSum.empty), 2)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var MonoidSum = {
                            concat: SemigroupSum.concat,
                            empty: 0
                        };
                        /**
                         * `number` monoid under multiplication.
                         *
                         * The `empty` value is `1`.
                         *
                         * @example
                         * import { MonoidProduct } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(MonoidProduct.concat(2, MonoidProduct.empty), 2)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var MonoidProduct = {
                            concat: SemigroupProduct.concat,
                            empty: 1
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var Field = {
                            add: SemigroupSum.concat,
                            zero: 0,
                            mul: SemigroupProduct.concat,
                            one: 1,
                            sub: MagmaSub.concat,
                            degree: function (_) { return 1; },
                            div: function (first, second) { return first / second; },
                            mod: function (first, second) { return first % second; }
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/pipeable.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/es6/pipeable.js ***!
  \********************************************/
/*! exports provided: map, contramap, mapWithIndex, ap, chain, bimap, mapLeft, extend, reduce, foldMap, reduceRight, reduceWithIndex, foldMapWithIndex, reduceRightWithIndex, alt, filter, filterMap, partition, partitionMap, filterWithIndex, filterMapWithIndex, partitionWithIndex, partitionMapWithIndex, promap, compose, pipeable, pipe */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function () { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contramap", function () { return contramap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapWithIndex", function () { return mapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ap", function () { return ap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "chain", function () { return chain; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bimap", function () { return bimap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapLeft", function () { return mapLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function () { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function () { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRight", function () { return reduceRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceWithIndex", function () { return reduceWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMapWithIndex", function () { return foldMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduceRightWithIndex", function () { return reduceRightWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alt", function () { return alt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMap", function () { return filterMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function () { return partition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMap", function () { return partitionMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterWithIndex", function () { return filterWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterMapWithIndex", function () { return filterMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionWithIndex", function () { return partitionWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partitionMapWithIndex", function () { return partitionMapWithIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "promap", function () { return promap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function () { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipeable", function () { return pipeable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function () { return pipe; });
/* harmony import */ var _Apply__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/es6/Apply.js");
/* harmony import */ var _Chain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/es6/Chain.js");
/* harmony import */ var _function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/es6/function.js");



                        function map(F) {
                            return function (f) { return function (fa) { return F.map(fa, f); }; };
                        }
                        function contramap(F) {
                            return function (f) { return function (fa) { return F.contramap(fa, f); }; };
                        }
                        function mapWithIndex(F) {
                            return function (f) { return function (fa) { return F.mapWithIndex(fa, f); }; };
                        }
                        function ap(F) {
                            return function (fa) { return function (fab) { return F.ap(fab, fa); }; };
                        }
                        function chain(F) {
                            return function (f) { return function (fa) { return F.chain(fa, f); }; };
                        }
                        function bimap(F) {
                            return function (f, g) { return function (fea) { return F.bimap(fea, f, g); }; };
                        }
                        function mapLeft(F) {
                            return function (f) { return function (fea) { return F.mapLeft(fea, f); }; };
                        }
                        function extend(F) {
                            return function (f) { return function (wa) { return F.extend(wa, f); }; };
                        }
                        function reduce(F) {
                            return function (b, f) { return function (fa) { return F.reduce(fa, b, f); }; };
                        }
                        function foldMap(F) {
                            return function (M) {
                                var foldMapM = F.foldMap(M);
                                return function (f) { return function (fa) { return foldMapM(fa, f); }; };
                            };
                        }
                        function reduceRight(F) {
                            return function (b, f) { return function (fa) { return F.reduceRight(fa, b, f); }; };
                        }
                        function reduceWithIndex(F) {
                            return function (b, f) { return function (fa) { return F.reduceWithIndex(fa, b, f); }; };
                        }
                        function foldMapWithIndex(F) {
                            return function (M) {
                                var foldMapWithIndexM = F.foldMapWithIndex(M);
                                return function (f) { return function (fa) { return foldMapWithIndexM(fa, f); }; };
                            };
                        }
                        function reduceRightWithIndex(F) {
                            return function (b, f) { return function (fa) { return F.reduceRightWithIndex(fa, b, f); }; };
                        }
                        function alt(F) {
                            return function (that) { return function (fa) { return F.alt(fa, that); }; };
                        }
                        function filter(F) {
                            return function (predicate) { return function (fa) { return F.filter(fa, predicate); }; };
                        }
                        function filterMap(F) {
                            return function (f) { return function (fa) { return F.filterMap(fa, f); }; };
                        }
                        function partition(F) {
                            return function (f) { return function (fa) { return F.partition(fa, f); }; };
                        }
                        function partitionMap(F) {
                            return function (f) { return function (fa) { return F.partitionMap(fa, f); }; };
                        }
                        function filterWithIndex(F) {
                            return function (predicate) { return function (fa) { return F.filterWithIndex(fa, predicate); }; };
                        }
                        function filterMapWithIndex(F) {
                            return function (f) { return function (fa) { return F.filterMapWithIndex(fa, f); }; };
                        }
                        function partitionWithIndex(F) {
                            return function (f) { return function (fa) { return F.partitionWithIndex(fa, f); }; };
                        }
                        function partitionMapWithIndex(F) {
                            return function (f) { return function (fa) { return F.partitionMapWithIndex(fa, f); }; };
                        }
                        function promap(F) {
                            return function (f, g) { return function (fbc) { return F.promap(fbc, f, g); }; };
                        }
                        function compose(F) {
                            return function (ea) { return function (ab) { return F.compose(ab, ea); }; };
                        }
                        var isFunctor = function (I) { return typeof I.map === 'function'; };
                        var isContravariant = function (I) { return typeof I.contramap === 'function'; };
                        var isFunctorWithIndex = function (I) { return typeof I.mapWithIndex === 'function'; };
                        var isApply = function (I) { return typeof I.ap === 'function'; };
                        var isChain = function (I) { return typeof I.chain === 'function'; };
                        var isBifunctor = function (I) { return typeof I.bimap === 'function'; };
                        var isExtend = function (I) { return typeof I.extend === 'function'; };
                        var isFoldable = function (I) { return typeof I.reduce === 'function'; };
                        var isFoldableWithIndex = function (I) { return typeof I.reduceWithIndex === 'function'; };
                        var isAlt = function (I) { return typeof I.alt === 'function'; };
                        var isCompactable = function (I) { return typeof I.compact === 'function'; };
                        var isFilterable = function (I) { return typeof I.filter === 'function'; };
                        var isFilterableWithIndex = function (I) {
                            return typeof I.filterWithIndex === 'function';
                        };
                        var isProfunctor = function (I) { return typeof I.promap === 'function'; };
                        var isSemigroupoid = function (I) { return typeof I.compose === 'function'; };
                        var isMonadThrow = function (I) { return typeof I.throwError === 'function'; };
                        /** @deprecated */
                        function pipeable(I) {
                            var r = {};
                            if (isFunctor(I)) {
                                r.map = map(I);
                            }
                            if (isContravariant(I)) {
                                r.contramap = contramap(I);
                            }
                            if (isFunctorWithIndex(I)) {
                                r.mapWithIndex = mapWithIndex(I);
                            }
                            if (isApply(I)) {
                                r.ap = ap(I);
                                r.apFirst = Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apFirst"])(I);
                                r.apSecond = Object(_Apply__WEBPACK_IMPORTED_MODULE_0__["apSecond"])(I);
                            }
                            if (isChain(I)) {
                                r.chain = chain(I);
                                r.chainFirst = Object(_Chain__WEBPACK_IMPORTED_MODULE_1__["chainFirst"])(I);
                                r.flatten = r.chain(_function__WEBPACK_IMPORTED_MODULE_2__["identity"]);
                            }
                            if (isBifunctor(I)) {
                                r.bimap = bimap(I);
                                r.mapLeft = mapLeft(I);
                            }
                            if (isExtend(I)) {
                                r.extend = extend(I);
                                r.duplicate = r.extend(_function__WEBPACK_IMPORTED_MODULE_2__["identity"]);
                            }
                            if (isFoldable(I)) {
                                r.reduce = reduce(I);
                                r.foldMap = foldMap(I);
                                r.reduceRight = reduceRight(I);
                            }
                            if (isFoldableWithIndex(I)) {
                                r.reduceWithIndex = reduceWithIndex(I);
                                r.foldMapWithIndex = foldMapWithIndex(I);
                                r.reduceRightWithIndex = reduceRightWithIndex(I);
                            }
                            if (isAlt(I)) {
                                r.alt = alt(I);
                            }
                            if (isCompactable(I)) {
                                r.compact = I.compact;
                                r.separate = I.separate;
                            }
                            if (isFilterable(I)) {
                                r.filter = filter(I);
                                r.filterMap = filterMap(I);
                                r.partition = partition(I);
                                r.partitionMap = partitionMap(I);
                            }
                            if (isFilterableWithIndex(I)) {
                                r.filterWithIndex = filterWithIndex(I);
                                r.filterMapWithIndex = filterMapWithIndex(I);
                                r.partitionWithIndex = partitionWithIndex(I);
                                r.partitionMapWithIndex = partitionMapWithIndex(I);
                            }
                            if (isProfunctor(I)) {
                                r.promap = promap(I);
                            }
                            if (isSemigroupoid(I)) {
                                r.compose = compose(I);
                            }
                            if (isMonadThrow(I)) {
                                var fromOption = function (onNone) {
                                    return function (ma) {
                                        return ma._tag === 'None' ? I.throwError(onNone()) : I.of(ma.value);
                                    };
                                };
                                var fromEither = function (ma) {
                                    return ma._tag === 'Left' ? I.throwError(ma.left) : I.of(ma.right);
                                };
                                var fromPredicate = function (predicate, onFalse) {
                                    return function (a) {
                                        return predicate(a) ? I.of(a) : I.throwError(onFalse(a));
                                    };
                                };
                                var filterOrElse = function (predicate, onFalse) {
                                    return function (ma) {
                                        return I.chain(ma, function (a) { return (predicate(a) ? I.of(a) : I.throwError(onFalse(a))); });
                                    };
                                };
                                r.fromOption = fromOption;
                                r.fromEither = fromEither;
                                r.fromPredicate = fromPredicate;
                                r.filterOrElse = filterOrElse;
                            }
                            return r;
                        }
                        /**
                         * Use [`pipe`](https://gcanti.github.io/fp-ts/modules/function.ts.html#pipe) from `function` module instead.
                         *
                         * @since 2.0.0
                         * @deprecated
                         */
                        var pipe = _function__WEBPACK_IMPORTED_MODULE_2__["pipe"];


                        /***/
                    }),

/***/ "./node_modules/fp-ts/es6/string.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/es6/string.js ***!
  \******************************************/
/*! exports provided: Eq, Semigroup, empty, Monoid, Ord, Show, isString, toUpperCase, toLowerCase, replace, trim, trimLeft, trimRight, slice, isEmpty, size, split, includes, startsWith, endsWith */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Eq", function () { return Eq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Semigroup", function () { return Semigroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function () { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Monoid", function () { return Monoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ord", function () { return Ord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Show", function () { return Show; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function () { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toUpperCase", function () { return toUpperCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toLowerCase", function () { return toLowerCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "replace", function () { return replace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trim", function () { return trim; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trimLeft", function () { return trimLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trimRight", function () { return trimRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slice", function () { return slice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function () { return isEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "size", function () { return size; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "split", function () { return split; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "includes", function () { return includes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startsWith", function () { return startsWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endsWith", function () { return endsWith; });
/* harmony import */ var _ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ReadonlyNonEmptyArray */ "./node_modules/fp-ts/es6/ReadonlyNonEmptyArray.js");

                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Eq.equals('a', 'a'), true)
                         * assert.deepStrictEqual(S.Eq.equals('a', 'b'), false)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var Eq = {
                            equals: function (first, second) { return first === second; }
                        };
                        /**
                         * `string` semigroup under concatenation.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Semigroup.concat('a', 'b'), 'ab')
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var Semigroup = {
                            concat: function (first, second) { return first + second; }
                        };
                        /**
                         * An empty `string`.
                         *
                         * @since 2.10.0
                         */
                        var empty = '';
                        /**
                         * `string` monoid under concatenation.
                         *
                         * The `empty` value is `''`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Monoid.concat('a', 'b'), 'ab')
                         * assert.deepStrictEqual(S.Monoid.concat('a', S.Monoid.empty), 'a')
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var Monoid = {
                            concat: Semigroup.concat,
                            empty: empty
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Ord.compare('a', 'a'), 0)
                         * assert.deepStrictEqual(S.Ord.compare('a', 'b'), -1)
                         * assert.deepStrictEqual(S.Ord.compare('b', 'a'), 1)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var Ord = {
                            equals: Eq.equals,
                            compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Show.show('a'), '"a"')
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var Show = {
                            show: function (s) { return JSON.stringify(s); }
                        };
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.isString('a'), true)
                         * assert.deepStrictEqual(S.isString(1), false)
                         *
                         * @category refinements
                         * @since 2.11.0
                         */
                        var isString = function (u) { return typeof u === 'string'; };
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('a', S.toUpperCase), 'A')
                         *
                         * @since 2.11.0
                         */
                        var toUpperCase = function (s) { return s.toUpperCase(); };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('A', S.toLowerCase), 'a')
                         *
                         * @since 2.11.0
                         */
                        var toLowerCase = function (s) { return s.toLowerCase(); };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.replace('b', 'd')), 'adc')
                         *
                         * @since 2.11.0
                         */
                        var replace = function (searchValue, replaceValue) {
                            return function (s) {
                                return s.replace(searchValue, replaceValue);
                            };
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(' a ', S.trim), 'a')
                         *
                         * @since 2.11.0
                         */
                        var trim = function (s) { return s.trim(); };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(' a ', S.trimLeft), 'a ')
                         *
                         * @since 2.11.0
                         */
                        var trimLeft = function (s) { return s.trimLeft(); };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(' a ', S.trimRight), ' a')
                         *
                         * @since 2.11.0
                         */
                        var trimRight = function (s) { return s.trimRight(); };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abcd', S.slice(1, 3)), 'bc')
                         *
                         * @since 2.11.0
                         */
                        var slice = function (start, end) {
                            return function (s) {
                                return s.slice(start, end);
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Test whether a `string` is empty.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('', S.isEmpty), true)
                         * assert.deepStrictEqual(pipe('a', S.isEmpty), false)
                         *
                         * @since 2.10.0
                         */
                        var isEmpty = function (s) { return s.length === 0; };
                        /**
                         * Calculate the number of characters in a `string`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.size), 3)
                         *
                         * @since 2.10.0
                         */
                        var size = function (s) { return s.length; };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.split('')), ['a', 'b', 'c'])
                         * assert.deepStrictEqual(pipe('', S.split('')), [''])
                         *
                         * @since 2.11.0
                         */
                        var split = function (separator) {
                            return function (s) {
                                var out = s.split(separator);
                                return Object(_ReadonlyNonEmptyArray__WEBPACK_IMPORTED_MODULE_0__["isNonEmpty"])(out) ? out : [s];
                            };
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.includes('b')), true)
                         * assert.deepStrictEqual(pipe('abc', S.includes('d')), false)
                         *
                         * @since 2.11.0
                         */
                        var includes = function (searchString, position) {
                            return function (s) {
                                return s.includes(searchString, position);
                            };
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.startsWith('a')), true)
                         * assert.deepStrictEqual(pipe('bc', S.startsWith('a')), false)
                         *
                         * @since 2.11.0
                         */
                        var startsWith = function (searchString, position) {
                            return function (s) {
                                return s.startsWith(searchString, position);
                            };
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.endsWith('c')), true)
                         * assert.deepStrictEqual(pipe('ab', S.endsWith('c')), false)
                         *
                         * @since 2.11.0
                         */
                        var endsWith = function (searchString, position) {
                            return function (s) {
                                return s.endsWith(searchString, position);
                            };
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Applicative.js":
/*!***********************************************!*\
  !*** ./node_modules/fp-ts/lib/Applicative.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.getApplicativeComposition = exports.getApplicativeMonoid = void 0;
                        /**
                         * The `Applicative` type class extends the `Apply` type class with a `of` function, which can be used to create values
                         * of type `f a` from values of type `a`.
                         *
                         * Where `Apply` provides the ability to lift functions of two or more arguments to functions whose arguments are
                         * wrapped using `f`, and `Functor` provides the ability to lift functions of one argument, `pure` can be seen as the
                         * function which lifts functions of _zero_ arguments. That is, `Applicative` functors support a lifting operation for
                         * any number of function arguments.
                         *
                         * Instances must satisfy the following laws in addition to the `Apply` laws:
                         *
                         * 1. Identity: `A.ap(A.of(a => a), fa) <-> fa`
                         * 2. Homomorphism: `A.ap(A.of(ab), A.of(a)) <-> A.of(ab(a))`
                         * 3. Interchange: `A.ap(fab, A.of(a)) <-> A.ap(A.of(ab => ab(a)), fab)`
                         *
                         * Note. `Functor`'s `map` can be derived: `A.map(x, f) = A.ap(A.of(f), x)`
                         *
                         * @since 2.0.0
                         */
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        function getApplicativeMonoid(F) {
                            var f = (0, Apply_1.getApplySemigroup)(F);
                            return function (M) {
                                return ({
                                    concat: f(M).concat,
                                    empty: F.of(M.empty)
                                });
                            };
                        }
                        exports.getApplicativeMonoid = getApplicativeMonoid;
                        /** @deprecated */
                        function getApplicativeComposition(F, G) {
                            var map = (0, Functor_1.getFunctorComposition)(F, G).map;
                            var _ap = (0, Apply_1.ap)(F, G);
                            return {
                                map: map,
                                of: function (a) { return F.of(G.of(a)); },
                                ap: function (fgab, fga) { return (0, function_1.pipe)(fgab, _ap(fga)); }
                            };
                        }
                        exports.getApplicativeComposition = getApplicativeComposition;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Apply.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/lib/Apply.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.sequenceS = exports.sequenceT = exports.getApplySemigroup = exports.apS = exports.apSecond = exports.apFirst = exports.ap = void 0;
                        /**
                         * The `Apply` class provides the `ap` which is used to apply a function to an argument under a type constructor.
                         *
                         * `Apply` can be used to lift functions of two or more arguments to work on values wrapped with the type constructor
                         * `f`.
                         *
                         * Instances must satisfy the following law in addition to the `Functor` laws:
                         *
                         * 1. Associative composition: `F.ap(F.ap(F.map(fbc, bc => ab => a => bc(ab(a))), fab), fa) <-> F.ap(fbc, F.ap(fab, fa))`
                         *
                         * Formally, `Apply` represents a strong lax semi-monoidal endofunctor.
                         *
                         * @example
                         * import * as O from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const f = (a: string) => (b: number) => (c: boolean) => a + String(b) + String(c)
                         * const fa: O.Option<string> = O.some('s')
                         * const fb: O.Option<number> = O.some(1)
                         * const fc: O.Option<boolean> = O.some(true)
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     // lift a function
                         *     O.some(f),
                         *     // apply the first argument
                         *     O.ap(fa),
                         *     // apply the second argument
                         *     O.ap(fb),
                         *     // apply the third argument
                         *     O.ap(fc)
                         *   ),
                         *   O.some('s1true')
                         * )
                         *
                         * @since 2.0.0
                         */
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        function ap(F, G) {
                            return function (fa) {
                                return function (fab) {
                                    return F.ap(F.map(fab, function (gab) { return function (ga) { return G.ap(gab, ga); }; }), fa);
                                };
                            };
                        }
                        exports.ap = ap;
                        function apFirst(A) {
                            return function (second) {
                                return function (first) {
                                    return A.ap(A.map(first, function (a) { return function () { return a; }; }), second);
                                };
                            };
                        }
                        exports.apFirst = apFirst;
                        function apSecond(A) {
                            return function (second) {
                                return function (first) {
                                    return A.ap(A.map(first, function () { return function (b) { return b; }; }), second);
                                };
                            };
                        }
                        exports.apSecond = apSecond;
                        function apS(F) {
                            return function (name, fb) {
                                return function (fa) {
                                    return F.ap(F.map(fa, function (a) {
                                        return function (b) {
                                            var _a;
                                            return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
                                        };
                                    }), fb);
                                };
                            };
                        }
                        exports.apS = apS;
                        function getApplySemigroup(F) {
                            return function (S) {
                                return ({
                                    concat: function (first, second) {
                                        return F.ap(F.map(first, function (x) { return function (y) { return S.concat(x, y); }; }), second);
                                    }
                                });
                            };
                        }
                        exports.getApplySemigroup = getApplySemigroup;
                        function curried(f, n, acc) {
                            return function (x) {
                                var combined = Array(acc.length + 1);
                                for (var i = 0; i < acc.length; i++) {
                                    combined[i] = acc[i];
                                }
                                combined[acc.length] = x;
                                return n === 0 ? f.apply(null, combined) : curried(f, n - 1, combined);
                            };
                        }
                        var tupleConstructors = {
                            1: function (a) { return [a]; },
                            2: function (a) { return function (b) { return [a, b]; }; },
                            3: function (a) { return function (b) { return function (c) { return [a, b, c]; }; }; },
                            4: function (a) { return function (b) { return function (c) { return function (d) { return [a, b, c, d]; }; }; }; },
                            5: function (a) { return function (b) { return function (c) { return function (d) { return function (e) { return [a, b, c, d, e]; }; }; }; }; }
                        };
                        function getTupleConstructor(len) {
                            if (!_.has.call(tupleConstructors, len)) {
                                tupleConstructors[len] = curried(function_1.tuple, len - 1, []);
                            }
                            return tupleConstructors[len];
                        }
                        function sequenceT(F) {
                            return function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                var len = args.length;
                                var f = getTupleConstructor(len);
                                var fas = F.map(args[0], f);
                                for (var i = 1; i < len; i++) {
                                    fas = F.ap(fas, args[i]);
                                }
                                return fas;
                            };
                        }
                        exports.sequenceT = sequenceT;
                        function getRecordConstructor(keys) {
                            var len = keys.length;
                            switch (len) {
                                case 1:
                                    return function (a) {
                                        var _a;
                                        return (_a = {}, _a[keys[0]] = a, _a);
                                    };
                                case 2:
                                    return function (a) {
                                        return function (b) {
                                            var _a;
                                            return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a);
                                        };
                                    };
                                case 3:
                                    return function (a) {
                                        return function (b) {
                                            return function (c) {
                                                var _a;
                                                return (_a = {}, _a[keys[0]] = a, _a[keys[1]] = b, _a[keys[2]] = c, _a);
                                            };
                                        };
                                    };
                                case 4:
                                    return function (a) {
                                        return function (b) {
                                            return function (c) {
                                                return function (d) {
                                                    var _a;
                                                    return (_a = {},
                                                        _a[keys[0]] = a,
                                                        _a[keys[1]] = b,
                                                        _a[keys[2]] = c,
                                                        _a[keys[3]] = d,
                                                        _a);
                                                };
                                            };
                                        };
                                    };
                                case 5:
                                    return function (a) {
                                        return function (b) {
                                            return function (c) {
                                                return function (d) {
                                                    return function (e) {
                                                        var _a;
                                                        return (_a = {},
                                                            _a[keys[0]] = a,
                                                            _a[keys[1]] = b,
                                                            _a[keys[2]] = c,
                                                            _a[keys[3]] = d,
                                                            _a[keys[4]] = e,
                                                            _a);
                                                    };
                                                };
                                            };
                                        };
                                    };
                                default:
                                    return curried(function () {
                                        var args = [];
                                        for (var _i = 0; _i < arguments.length; _i++) {
                                            args[_i] = arguments[_i];
                                        }
                                        var r = {};
                                        for (var i = 0; i < len; i++) {
                                            r[keys[i]] = args[i];
                                        }
                                        return r;
                                    }, len - 1, []);
                            }
                        }
                        function sequenceS(F) {
                            return function (r) {
                                var keys = Object.keys(r);
                                var len = keys.length;
                                var f = getRecordConstructor(keys);
                                var fr = F.map(r[keys[0]], f);
                                for (var i = 1; i < len; i++) {
                                    fr = F.ap(fr, r[keys[i]]);
                                }
                                return fr;
                            };
                        }
                        exports.sequenceS = sequenceS;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Chain.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/lib/Chain.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.bind = exports.tap = exports.chainFirst = void 0;
                        function chainFirst(M) {
                            var tapM = tap(M);
                            return function (f) { return function (first) { return tapM(first, f); }; };
                        }
                        exports.chainFirst = chainFirst;
                        /** @internal */
                        function tap(M) {
                            return function (first, f) { return M.chain(first, function (a) { return M.map(f(a), function () { return a; }); }); };
                        }
                        exports.tap = tap;
                        function bind(M) {
                            return function (name, f) {
                                return function (ma) {
                                    return M.chain(ma, function (a) {
                                        return M.map(f(a), function (b) {
                                            var _a;
                                            return Object.assign({}, a, (_a = {}, _a[name] = b, _a));
                                        });
                                    });
                                };
                            };
                        }
                        exports.bind = bind;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/ChainRec.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/lib/ChainRec.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.tailRec = void 0;
                        /**
                         * @since 2.0.0
                         */
                        var tailRec = function (startWith, f) {
                            var ab = f(startWith);
                            while (ab._tag === 'Left') {
                                ab = f(ab.left);
                            }
                            return ab.right;
                        };
                        exports.tailRec = tailRec;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Compactable.js":
/*!***********************************************!*\
  !*** ./node_modules/fp-ts/lib/Compactable.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.getCompactableComposition = exports.separate = exports.compact = void 0;
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var Option_1 = __webpack_require__(/*! ./Option */ "./node_modules/fp-ts/lib/Option.js");
                        var S = __importStar(__webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/lib/Separated.js"));
                        function compact(F, G) {
                            return function (fga) { return F.map(fga, G.compact); };
                        }
                        exports.compact = compact;
                        function separate(F, C, G) {
                            var _compact = compact(F, C);
                            var _map = (0, Functor_1.map)(F, G);
                            return function (fge) { return S.separated(_compact((0, function_1.pipe)(fge, _map(Option_1.getLeft))), _compact((0, function_1.pipe)(fge, _map(Option_1.getRight)))); };
                        }
                        exports.separate = separate;
                        /** @deprecated */
                        function getCompactableComposition(F, G) {
                            var map = (0, Functor_1.getFunctorComposition)(F, G).map;
                            return {
                                map: map,
                                compact: compact(F, G),
                                separate: separate(F, G, G)
                            };
                        }
                        exports.getCompactableComposition = getCompactableComposition;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Const.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/lib/Const.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.const_ = exports.Bifunctor = exports.Contravariant = exports.flap = exports.Functor = exports.URI = exports.mapLeft = exports.bimap = exports.map = exports.contramap = exports.getApplicative = exports.getApply = exports.getBooleanAlgebra = exports.getHeytingAlgebra = exports.getRing = exports.getSemiring = exports.getMonoid = exports.getSemigroup = exports.getBounded = exports.getOrd = exports.getEq = exports.getShow = exports.make = void 0;
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.make = function_1.unsafeCoerce;
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        function getShow(S) {
                            return {
                                show: function (c) { return "make(".concat(S.show(c), ")"); }
                            };
                        }
                        exports.getShow = getShow;
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        exports.getEq = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getOrd = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getBounded = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getSemigroup = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getMonoid = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getSemiring = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getRing = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getHeytingAlgebra = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        exports.getBooleanAlgebra = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        function getApply(S) {
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                ap: function (fab, fa) { return (0, exports.make)(S.concat(fab, fa)); }
                            };
                        }
                        exports.getApply = getApply;
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        function getApplicative(M) {
                            var A = getApply(M);
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: A.map,
                                ap: A.ap,
                                of: function () { return (0, exports.make)(M.empty); }
                            };
                        }
                        exports.getApplicative = getApplicative;
                        var _contramap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.contramap)(f)); };
                        /* istanbul ignore next */
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        /* istanbul ignore next */
                        var _bimap = function (fa, f, g) { return (0, function_1.pipe)(fa, (0, exports.bimap)(f, g)); };
                        /* istanbul ignore next */
                        var _mapLeft = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapLeft)(f)); };
                        /**
                         * @since 2.0.0
                         */
                        var contramap = function () { return function_1.unsafeCoerce; };
                        exports.contramap = contramap;
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function () { return function_1.unsafeCoerce; };
                        exports.map = map;
                        /**
                         * Map a pair of functions over the two type arguments of the bifunctor.
                         *
                         * @category mapping
                         * @since 2.6.2
                         */
                        var bimap = function (f) {
                            return function (fa) {
                                return (0, exports.make)(f(fa));
                            };
                        };
                        exports.bimap = bimap;
                        /**
                         * Map a function over the first type argument of a bifunctor.
                         *
                         * @category error handling
                         * @since 2.6.2
                         */
                        var mapLeft = function (f) { return function (fa) { return (0, exports.make)(f(fa)); }; };
                        exports.mapLeft = mapLeft;
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        exports.URI = 'Const';
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Contravariant = {
                            URI: exports.URI,
                            contramap: _contramap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Bifunctor = {
                            URI: exports.URI,
                            bimap: _bimap,
                            mapLeft: _mapLeft
                        };
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `C.Functor` instead of `C.const_`
                         * (where `C` is from `import C from 'fp-ts/Const'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.const_ = {
                            URI: exports.URI,
                            map: _map,
                            contramap: _contramap,
                            bimap: _bimap,
                            mapLeft: _mapLeft
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Either.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/lib/Either.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.match = exports.foldW = exports.matchW = exports.isRight = exports.isLeft = exports.fromOption = exports.fromPredicate = exports.FromEither = exports.MonadThrow = exports.throwError = exports.ChainRec = exports.Extend = exports.extend = exports.Alt = exports.alt = exports.altW = exports.Bifunctor = exports.mapLeft = exports.bimap = exports.Traversable = exports.sequence = exports.traverse = exports.Foldable = exports.reduceRight = exports.foldMap = exports.reduce = exports.Monad = exports.Chain = exports.Applicative = exports.Apply = exports.ap = exports.apW = exports.Pointed = exports.of = exports.asUnit = exports.as = exports.Functor = exports.map = exports.getAltValidation = exports.getApplicativeValidation = exports.getWitherable = exports.getFilterable = exports.getCompactable = exports.getSemigroup = exports.getEq = exports.getShow = exports.URI = exports.flatMap = exports.right = exports.left = void 0;
                        exports.chainFirstW = exports.chainFirst = exports.chain = exports.chainW = exports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex = exports.traverseReadonlyNonEmptyArrayWithIndex = exports.ApT = exports.apSW = exports.apS = exports.bindW = exports.bind = exports.let = exports.bindTo = exports.Do = exports.exists = exports.elem = exports.toError = exports.toUnion = exports.chainNullableK = exports.fromNullableK = exports.tryCatchK = exports.tryCatch = exports.fromNullable = exports.orElse = exports.orElseW = exports.swap = exports.filterOrElseW = exports.filterOrElse = exports.flatMapOption = exports.flatMapNullable = exports.liftOption = exports.liftNullable = exports.chainOptionKW = exports.chainOptionK = exports.fromOptionK = exports.duplicate = exports.flatten = exports.flattenW = exports.tap = exports.apSecondW = exports.apSecond = exports.apFirstW = exports.apFirst = exports.flap = exports.getOrElse = exports.getOrElseW = exports.fold = void 0;
                        exports.getValidation = exports.getValidationMonoid = exports.getValidationSemigroup = exports.getApplyMonoid = exports.getApplySemigroup = exports.either = exports.stringifyJSON = exports.parseJSON = void 0;
                        var Applicative_1 = __webpack_require__(/*! ./Applicative */ "./node_modules/fp-ts/lib/Applicative.js");
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var chainable = __importStar(__webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js"));
                        var ChainRec_1 = __webpack_require__(/*! ./ChainRec */ "./node_modules/fp-ts/lib/ChainRec.js");
                        var FromEither_1 = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/lib/FromEither.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        var Separated_1 = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/lib/Separated.js");
                        var Witherable_1 = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/lib/Witherable.js");
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this
                         * structure.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.left = _.left;
                        /**
                         * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias
                         * of this structure.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.right = _.right;
                        /**
                         * @category sequencing
                         * @since 2.14.0
                         */
                        exports.flatMap = (0, function_1.dual)(2, function (ma, f) { return ((0, exports.isLeft)(ma) ? ma : f(ma.right)); });
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        var _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };
                        /* istanbul ignore next */
                        var _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };
                        /* istanbul ignore next */
                        var _foldMap = function (M) {
                            return function (fa, f) {
                                var foldMapM = (0, exports.foldMap)(M);
                                return (0, function_1.pipe)(fa, foldMapM(f));
                            };
                        };
                        /* istanbul ignore next */
                        var _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };
                        var _traverse = function (F) {
                            var traverseF = (0, exports.traverse)(F);
                            return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };
                        };
                        var _bimap = function (fa, f, g) { return (0, function_1.pipe)(fa, (0, exports.bimap)(f, g)); };
                        var _mapLeft = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapLeft)(f)); };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };
                        /* istanbul ignore next */
                        var _extend = function (wa, f) { return (0, function_1.pipe)(wa, (0, exports.extend)(f)); };
                        var _chainRec = function (a, f) {
                            return (0, ChainRec_1.tailRec)(f(a), function (e) {
                                return (0, exports.isLeft)(e) ? (0, exports.right)((0, exports.left)(e.left)) : (0, exports.isLeft)(e.right) ? (0, exports.left)(f(e.right.left)) : (0, exports.right)((0, exports.right)(e.right.right));
                            });
                        };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        exports.URI = 'Either';
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getShow = function (SE, SA) {
                            return ({
                                show: function (ma) { return ((0, exports.isLeft)(ma) ? "left(".concat(SE.show(ma.left), ")") : "right(".concat(SA.show(ma.right), ")")); }
                            });
                        };
                        exports.getShow = getShow;
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getEq = function (EL, EA) {
                            return ({
                                equals: function (x, y) {
                                    return x === y || ((0, exports.isLeft)(x) ? (0, exports.isLeft)(y) && EL.equals(x.left, y.left) : (0, exports.isRight)(y) && EA.equals(x.right, y.right));
                                }
                            });
                        };
                        exports.getEq = getEq;
                        /**
                         * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are
                         * concatenated using the provided `Semigroup`
                         *
                         * @example
                         * import { getSemigroup, left, right } from 'fp-ts/Either'
                         * import { SemigroupSum } from 'fp-ts/number'
                         *
                         * const S = getSemigroup<string, number>(SemigroupSum)
                         * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))
                         * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))
                         * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))
                         * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getSemigroup = function (S) {
                            return ({
                                concat: function (x, y) { return ((0, exports.isLeft)(y) ? x : (0, exports.isLeft)(x) ? y : (0, exports.right)(S.concat(x.right, y.right))); }
                            });
                        };
                        exports.getSemigroup = getSemigroup;
                        /**
                         * Builds a `Compactable` instance for `Either` given `Monoid` for the left side.
                         *
                         * @category filtering
                         * @since 2.10.0
                         */
                        var getCompactable = function (M) {
                            var empty = (0, exports.left)(M.empty);
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                compact: function (ma) { return ((0, exports.isLeft)(ma) ? ma : ma.right._tag === 'None' ? empty : (0, exports.right)(ma.right.value)); },
                                separate: function (ma) {
                                    return (0, exports.isLeft)(ma)
                                        ? (0, Separated_1.separated)(ma, ma)
                                        : (0, exports.isLeft)(ma.right)
                                            ? (0, Separated_1.separated)((0, exports.right)(ma.right.left), empty)
                                            : (0, Separated_1.separated)(empty, (0, exports.right)(ma.right.right));
                                }
                            };
                        };
                        exports.getCompactable = getCompactable;
                        /**
                         * Builds a `Filterable` instance for `Either` given `Monoid` for the left side
                         *
                         * @category filtering
                         * @since 2.10.0
                         */
                        var getFilterable = function (M) {
                            var empty = (0, exports.left)(M.empty);
                            var _a = (0, exports.getCompactable)(M), compact = _a.compact, separate = _a.separate;
                            var filter = function (ma, predicate) {
                                return (0, exports.isLeft)(ma) ? ma : predicate(ma.right) ? ma : empty;
                            };
                            var partition = function (ma, p) {
                                return (0, exports.isLeft)(ma)
                                    ? (0, Separated_1.separated)(ma, ma)
                                    : p(ma.right)
                                        ? (0, Separated_1.separated)(empty, (0, exports.right)(ma.right))
                                        : (0, Separated_1.separated)((0, exports.right)(ma.right), empty);
                            };
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                compact: compact,
                                separate: separate,
                                filter: filter,
                                filterMap: function (ma, f) {
                                    if ((0, exports.isLeft)(ma)) {
                                        return ma;
                                    }
                                    var ob = f(ma.right);
                                    return ob._tag === 'None' ? empty : (0, exports.right)(ob.value);
                                },
                                partition: partition,
                                partitionMap: function (ma, f) {
                                    if ((0, exports.isLeft)(ma)) {
                                        return (0, Separated_1.separated)(ma, ma);
                                    }
                                    var e = f(ma.right);
                                    return (0, exports.isLeft)(e) ? (0, Separated_1.separated)((0, exports.right)(e.left), empty) : (0, Separated_1.separated)(empty, (0, exports.right)(e.right));
                                }
                            };
                        };
                        exports.getFilterable = getFilterable;
                        /**
                         * Builds `Witherable` instance for `Either` given `Monoid` for the left side
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        var getWitherable = function (M) {
                            var F_ = (0, exports.getFilterable)(M);
                            var C = (0, exports.getCompactable)(M);
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                compact: F_.compact,
                                separate: F_.separate,
                                filter: F_.filter,
                                filterMap: F_.filterMap,
                                partition: F_.partition,
                                partitionMap: F_.partitionMap,
                                traverse: _traverse,
                                sequence: exports.sequence,
                                reduce: _reduce,
                                foldMap: _foldMap,
                                reduceRight: _reduceRight,
                                wither: (0, Witherable_1.witherDefault)(exports.Traversable, C),
                                wilt: (0, Witherable_1.wiltDefault)(exports.Traversable, C)
                            };
                        };
                        exports.getWitherable = getWitherable;
                        /**
                         * The default [`Applicative`](#applicative) instance returns the first error, if you want to
                         * get all errors you need to provide a way to concatenate them via a `Semigroup`.
                         *
                         * @example
                         * import * as A from 'fp-ts/Apply'
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as S from 'fp-ts/Semigroup'
                         * import * as string from 'fp-ts/string'
                         *
                         * const parseString = (u: unknown): E.Either<string, string> =>
                         *   typeof u === 'string' ? E.right(u) : E.left('not a string')
                         *
                         * const parseNumber = (u: unknown): E.Either<string, number> =>
                         *   typeof u === 'number' ? E.right(u) : E.left('not a number')
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age: number
                         * }
                         *
                         * const parsePerson = (
                         *   input: Record<string, unknown>
                         * ): E.Either<string, Person> =>
                         *   pipe(
                         *     E.Do,
                         *     E.apS('name', parseString(input.name)),
                         *     E.apS('age', parseNumber(input.age))
                         *   )
                         *
                         * assert.deepStrictEqual(parsePerson({}), E.left('not a string')) // <= first error
                         *
                         * const Applicative = E.getApplicativeValidation(
                         *   pipe(string.Semigroup, S.intercalate(', '))
                         * )
                         *
                         * const apS = A.apS(Applicative)
                         *
                         * const parsePersonAll = (
                         *   input: Record<string, unknown>
                         * ): E.Either<string, Person> =>
                         *   pipe(
                         *     E.Do,
                         *     apS('name', parseString(input.name)),
                         *     apS('age', parseNumber(input.age))
                         *   )
                         *
                         * assert.deepStrictEqual(parsePersonAll({}), E.left('not a string, not a number')) // <= all errors
                         *
                         * @category error handling
                         * @since 2.7.0
                         */
                        var getApplicativeValidation = function (SE) {
                            return ({
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                ap: function (fab, fa) {
                                    return (0, exports.isLeft)(fab)
                                        ? (0, exports.isLeft)(fa)
                                            ? (0, exports.left)(SE.concat(fab.left, fa.left))
                                            : fab
                                        : (0, exports.isLeft)(fa)
                                            ? fa
                                            : (0, exports.right)(fab.right(fa.right));
                                },
                                of: exports.of
                            });
                        };
                        exports.getApplicativeValidation = getApplicativeValidation;
                        /**
                         * The default [`Alt`](#alt) instance returns the last error, if you want to
                         * get all errors you need to provide a way to concatenate them via a `Semigroup`.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as S from 'fp-ts/Semigroup'
                         * import * as string from 'fp-ts/string'
                         *
                         * const parseString = (u: unknown): E.Either<string, string> =>
                         *   typeof u === 'string' ? E.right(u) : E.left('not a string')
                         *
                         * const parseNumber = (u: unknown): E.Either<string, number> =>
                         *   typeof u === 'number' ? E.right(u) : E.left('not a number')
                         *
                         * const parse = (u: unknown): E.Either<string, string | number> =>
                         *   pipe(
                         *     parseString(u),
                         *     E.alt<string, string | number>(() => parseNumber(u))
                         *   )
                         *
                         * assert.deepStrictEqual(parse(true), E.left('not a number')) // <= last error
                         *
                         * const Alt = E.getAltValidation(pipe(string.Semigroup, S.intercalate(', ')))
                         *
                         * const parseAll = (u: unknown): E.Either<string, string | number> =>
                         *   Alt.alt<string | number>(parseString(u), () => parseNumber(u))
                         *
                         * assert.deepStrictEqual(parseAll(true), E.left('not a string, not a number')) // <= all errors
                         *
                         * @category error handling
                         * @since 2.7.0
                         */
                        var getAltValidation = function (SE) {
                            return ({
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                alt: function (me, that) {
                                    if ((0, exports.isRight)(me)) {
                                        return me;
                                    }
                                    var ea = that();
                                    return (0, exports.isLeft)(ea) ? (0, exports.left)(SE.concat(me.left, ea.left)) : ea;
                                }
                            });
                        };
                        exports.getAltValidation = getAltValidation;
                        /**
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return (0, exports.isLeft)(fa) ? fa : (0, exports.right)(f(fa.right));
                            };
                        };
                        exports.map = map;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * Maps the `Right` value of this `Either` to the specified constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.as = (0, function_1.dual)(2, (0, Functor_1.as)(exports.Functor));
                        /**
                         * Maps the `Right` value of this `Either` to the void constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.asUnit = (0, Functor_1.asUnit)(exports.Functor);
                        /**
                         * @category constructors
                         * @since 2.7.0
                         */
                        exports.of = exports.right;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Pointed = {
                            URI: exports.URI,
                            of: exports.of
                        };
                        /**
                         * Less strict version of [`ap`](#ap).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.8.0
                         */
                        var apW = function (fa) {
                            return function (fab) {
                                return (0, exports.isLeft)(fab) ? fab : (0, exports.isLeft)(fa) ? fa : (0, exports.right)(fab.right(fa.right));
                            };
                        };
                        exports.apW = apW;
                        /**
                         * @since 2.0.0
                         */
                        exports.ap = exports.apW;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Apply = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Applicative = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Chain = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            chain: exports.flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Monad = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            chain: exports.flatMap
                        };
                        /**
                         * Left-associative fold of a structure.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         *
                         * const startWith = 'prefix'
                         * const concat = (a: string, b: string) => `${a}:${b}`
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right('a'), E.reduce(startWith, concat)),
                         *   'prefix:a'
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.left('e'), E.reduce(startWith, concat)),
                         *   'prefix'
                         * )
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduce = function (b, f) {
                            return function (fa) {
                                return (0, exports.isLeft)(fa) ? b : f(b, fa.right);
                            };
                        };
                        exports.reduce = reduce;
                        /**
                         * Map each element of the structure to a monoid, and combine the results.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         * import * as S from 'fp-ts/string'
                         *
                         * const yell = (a: string) => `${a}!`
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right('a'), E.foldMap(S.Monoid)(yell)),
                         *   'a!'
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.left('e'), E.foldMap(S.Monoid)(yell)),
                         *   S.Monoid.empty
                         * )
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMap = function (M) {
                            return function (f) {
                                return function (fa) {
                                    return (0, exports.isLeft)(fa) ? M.empty : f(fa.right);
                                };
                            };
                        };
                        exports.foldMap = foldMap;
                        /**
                         * Right-associative fold of a structure.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         *
                         * const startWith = 'postfix'
                         * const concat = (a: string, b: string) => `${a}:${b}`
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right('a'), E.reduceRight(startWith, concat)),
                         *   'a:postfix'
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.left('e'), E.reduceRight(startWith, concat)),
                         *   'postfix'
                         * )
                         *
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRight = function (b, f) {
                            return function (fa) {
                                return (0, exports.isLeft)(fa) ? b : f(fa.right, b);
                            };
                        };
                        exports.reduceRight = reduceRight;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Foldable = {
                            URI: exports.URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as E from 'fp-ts/Either'
                         * import * as O from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right(['a']), E.traverse(O.Applicative)(RA.head)),
                         *   O.some(E.right('a'))
                         *  )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right([]), E.traverse(O.Applicative)(RA.head)),
                         *   O.none
                         * )
                         *
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            return function (f) {
                                return function (ta) {
                                    return (0, exports.isLeft)(ta) ? F.of((0, exports.left)(ta.left)) : F.map(f(ta.right), exports.right);
                                };
                            };
                        };
                        exports.traverse = traverse;
                        /**
                         * Evaluate each monadic action in the structure from left to right, and collect the results.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as E from 'fp-ts/Either'
                         * import * as O from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right(O.some('a')), E.sequence(O.Applicative)),
                         *   O.some(E.right('a'))
                         *  )
                         *
                         * assert.deepStrictEqual(
                         *   pipe(E.right(O.none), E.sequence(O.Applicative)),
                         *   O.none
                         * )
                         *
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) {
                            return function (ma) {
                                return (0, exports.isLeft)(ma) ? F.of((0, exports.left)(ma.left)) : F.map(ma.right, exports.right);
                            };
                        };
                        exports.sequence = sequence;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Traversable = {
                            URI: exports.URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence
                        };
                        /**
                         * Map a pair of functions over the two type arguments of the bifunctor.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var bimap = function (f, g) {
                            return function (fa) {
                                return (0, exports.isLeft)(fa) ? (0, exports.left)(f(fa.left)) : (0, exports.right)(g(fa.right));
                            };
                        };
                        exports.bimap = bimap;
                        /**
                         * Map a function over the first type argument of a bifunctor.
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        var mapLeft = function (f) {
                            return function (fa) {
                                return (0, exports.isLeft)(fa) ? (0, exports.left)(f(fa.left)) : fa;
                            };
                        };
                        exports.mapLeft = mapLeft;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Bifunctor = {
                            URI: exports.URI,
                            bimap: _bimap,
                            mapLeft: _mapLeft
                        };
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the error and the return types will be merged.
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (fa) {
                                return (0, exports.isLeft)(fa) ? that() : fa;
                            };
                        };
                        exports.altW = altW;
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `Either` returns the left-most non-`Left` value (or the right-most `Left` value if both values are `Left`).
                         *
                         * | x        | y        | pipe(x, alt(() => y) |
                         * | -------- | -------- | -------------------- |
                         * | left(a)  | left(b)  | left(b)              |
                         * | left(a)  | right(2) | right(2)             |
                         * | right(1) | left(b)  | right(1)             |
                         * | right(1) | right(2) | right(1)             |
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.left('a'),
                         *     E.alt(() => E.left('b'))
                         *   ),
                         *   E.left('b')
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.left('a'),
                         *     E.alt(() => E.right(2))
                         *   ),
                         *   E.right(2)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(1),
                         *     E.alt(() => E.left('b'))
                         *   ),
                         *   E.right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(1),
                         *     E.alt(() => E.right(2))
                         *   ),
                         *   E.right(1)
                         * )
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        exports.alt = exports.altW;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Alt = {
                            URI: exports.URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @since 2.0.0
                         */
                        var extend = function (f) {
                            return function (wa) {
                                return (0, exports.isLeft)(wa) ? wa : (0, exports.right)(f(wa));
                            };
                        };
                        exports.extend = extend;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Extend = {
                            URI: exports.URI,
                            map: _map,
                            extend: _extend
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.ChainRec = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            chain: exports.flatMap,
                            chainRec: _chainRec
                        };
                        /**
                         * @since 2.6.3
                         */
                        exports.throwError = exports.left;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.MonadThrow = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            chain: exports.flatMap,
                            throwError: exports.throwError
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.FromEither = {
                            URI: exports.URI,
                            fromEither: function_1.identity
                        };
                        /**
                         * @example
                         * import { fromPredicate, left, right } from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     1,
                         *     fromPredicate(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     -1,
                         *     fromPredicate(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   left('error')
                         * )
                         *
                         * @category lifting
                         * @since 2.0.0
                         */
                        exports.fromPredicate = (0, FromEither_1.fromPredicate)(exports.FromEither);
                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as O from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     O.some(1),
                         *     E.fromOption(() => 'error')
                         *   ),
                         *   E.right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     O.none,
                         *     E.fromOption(() => 'error')
                         *   ),
                         *   E.left('error')
                         * )
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        exports.fromOption =
/*#__PURE__*/ (0, FromEither_1.fromOption)(exports.FromEither);
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * Returns `true` if the either is an instance of `Left`, `false` otherwise.
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        exports.isLeft = _.isLeft;
                        /**
                         * Returns `true` if the either is an instance of `Right`, `false` otherwise.
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        exports.isRight = _.isRight;
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchW = function (onLeft, onRight) {
                            return function (ma) {
                                return (0, exports.isLeft)(ma) ? onLeft(ma.left) : onRight(ma.right);
                            };
                        };
                        exports.matchW = matchW;
                        /**
                         * Alias of [`matchW`](#matchw).
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.foldW = exports.matchW;
                        /**
                         * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,
                         * if the value is a `Right` the inner value is applied to the second function.
                         *
                         * @example
                         * import { match, left, right } from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * function onLeft(errors: Array<string>): string {
                         *   return `Errors: ${errors.join(', ')}`
                         * }
                         *
                         * function onRight(value: number): string {
                         *   return `Ok: ${value}`
                         * }
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     right(1),
                         *     match(onLeft, onRight)
                         *   ),
                         *   'Ok: 1'
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     left(['error 1', 'error 2']),
                         *     match(onLeft, onRight)
                         *   ),
                         *   'Errors: error 1, error 2'
                         * )
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.match = exports.matchW;
                        /**
                         * Alias of [`match`](#match).
                         *
                         * @category pattern matching
                         * @since 2.0.0
                         */
                        exports.fold = exports.match;
                        /**
                         * Less strict version of [`getOrElse`](#getorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return type will be merged.
                         *
                         * @category error handling
                         * @since 2.6.0
                         */
                        var getOrElseW = function (onLeft) {
                            return function (ma) {
                                return (0, exports.isLeft)(ma) ? onLeft(ma.left) : ma.right;
                            };
                        };
                        exports.getOrElseW = getOrElseW;
                        /**
                         * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.
                         *
                         * @example
                         * import { getOrElse, left, right } from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     right(1),
                         *     getOrElse(() => 0)
                         *   ),
                         *   1
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     left('error'),
                         *     getOrElse(() => 0)
                         *   ),
                         *   0
                         * )
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        exports.getOrElse = exports.getOrElseW;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.0.0
                         */
                        exports.apFirst = (0, Apply_1.apFirst)(exports.Apply);
                        /**
                         * Less strict version of [`apFirst`](#apfirst)
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.12.0
                         */
                        exports.apFirstW = exports.apFirst;
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.0.0
                         */
                        exports.apSecond = (0, Apply_1.apSecond)(exports.Apply);
                        /**
                         * Less strict version of [`apSecond`](#apsecond)
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.12.0
                         */
                        exports.apSecondW = exports.apSecond;
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category combinators
                         * @since 2.15.0
                         */
                        exports.tap = (0, function_1.dual)(2, chainable.tap(exports.Chain));
                        /**
                         * Less strict version of [`flatten`](#flatten).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category sequencing
                         * @since 2.11.0
                         */
                        exports.flattenW =
/*#__PURE__*/ (0, exports.flatMap)(function_1.identity);
                        /**
                         * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))
                         * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))
                         * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))
                         *
                         * @category sequencing
                         * @since 2.0.0
                         */
                        exports.flatten = exports.flattenW;
                        /**
                         * @since 2.0.0
                         */
                        exports.duplicate = (0, exports.extend)(function_1.identity);
                        /**
                         * Use `liftOption`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.fromOptionK =
/*#__PURE__*/ (0, FromEither_1.fromOptionK)(exports.FromEither);
                        /**
                         * Use `flatMapOption`.
                         *
                         * @category legacy
                         * @since 2.11.0
                         */
                        exports.chainOptionK = (0, FromEither_1.chainOptionK)(exports.FromEither, exports.Chain);
                        /**
                         * Use `flatMapOption`.
                         *
                         * @category legacy
                         * @since 2.13.2
                         */
                        exports.chainOptionKW = exports.chainOptionK;
                        /** @internal */
                        var _FromEither = {
                            fromEither: exports.FromEither.fromEither
                        };
                        /**
                         * @category lifting
                         * @since 2.15.0
                         */
                        exports.liftNullable = _.liftNullable(_FromEither);
                        /**
                         * @category lifting
                         * @since 2.15.0
                         */
                        exports.liftOption = _.liftOption(_FromEither);
                        /** @internal */
                        var _FlatMap = {
                            flatMap: exports.flatMap
                        };
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        exports.flatMapNullable = _.flatMapNullable(_FromEither, _FlatMap);
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        exports.flatMapOption = _.flatMapOption(_FromEither, _FlatMap);
                        /**
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(1),
                         *     E.filterOrElse(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   E.right(1)
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.right(-1),
                         *     E.filterOrElse(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   E.left('error')
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     E.left('a'),
                         *     E.filterOrElse(
                         *       (n) => n > 0,
                         *       () => 'error'
                         *     )
                         *   ),
                         *   E.left('a')
                         * )
                         *
                         * @category filtering
                         * @since 2.0.0
                         */
                        exports.filterOrElse = (0, FromEither_1.filterOrElse)(exports.FromEither, exports.Chain);
                        /**
                         * Less strict version of [`filterOrElse`](#filterorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category filtering
                         * @since 2.9.0
                         */
                        exports.filterOrElseW = exports.filterOrElse;
                        /**
                         * Returns a `Right` if is a `Left` (and vice versa).
                         *
                         * @since 2.0.0
                         */
                        var swap = function (ma) { return ((0, exports.isLeft)(ma) ? (0, exports.right)(ma.left) : (0, exports.left)(ma.right)); };
                        exports.swap = swap;
                        /**
                         * Less strict version of [`orElse`](#orelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @category error handling
                         * @since 2.10.0
                         */
                        var orElseW = function (onLeft) {
                            return function (ma) {
                                return (0, exports.isLeft)(ma) ? onLeft(ma.left) : ma;
                            };
                        };
                        exports.orElseW = orElseW;
                        /**
                         * Useful for recovering from errors.
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        exports.orElse = exports.orElseW;
                        /**
                         * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use
                         * the provided default as a `Left`.
                         *
                         * @example
                         * import { fromNullable, left, right } from 'fp-ts/Either'
                         *
                         * const parse = fromNullable('nully')
                         *
                         * assert.deepStrictEqual(parse(1), right(1))
                         * assert.deepStrictEqual(parse(null), left('nully'))
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromNullable = function (e) {
                            return function (a) {
                                return a == null ? (0, exports.left)(e) : (0, exports.right)(a);
                            };
                        };
                        exports.fromNullable = fromNullable;
                        /**
                         * Constructs a new `Either` from a function that might throw.
                         *
                         * See also [`tryCatchK`](#trycatchk).
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         *
                         * const unsafeHead = <A>(as: ReadonlyArray<A>): A => {
                         *   if (as.length > 0) {
                         *     return as[0]
                         *   } else {
                         *     throw new Error('empty array')
                         *   }
                         * }
                         *
                         * const head = <A>(as: ReadonlyArray<A>): E.Either<Error, A> =>
                         *   E.tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))
                         *
                         * assert.deepStrictEqual(head([]), E.left(new Error('empty array')))
                         * assert.deepStrictEqual(head([1, 2, 3]), E.right(1))
                         *
                         * @category interop
                         * @since 2.0.0
                         */
                        var tryCatch = function (f, onThrow) {
                            try {
                                return (0, exports.right)(f());
                            }
                            catch (e) {
                                return (0, exports.left)(onThrow(e));
                            }
                        };
                        exports.tryCatch = tryCatch;
                        /**
                         * Converts a function that may throw to one returning a `Either`.
                         *
                         * @category interop
                         * @since 2.10.0
                         */
                        var tryCatchK = function (f, onThrow) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return (0, exports.tryCatch)(function () { return f.apply(void 0, a); }, onThrow);
                            };
                        };
                        exports.tryCatchK = tryCatchK;
                        /**
                         * Use `liftNullable`.
                         *
                         * @category legacy
                         * @since 2.9.0
                         */
                        var fromNullableK = function (e) {
                            var from = (0, exports.fromNullable)(e);
                            return function (f) { return (0, function_1.flow)(f, from); };
                        };
                        exports.fromNullableK = fromNullableK;
                        /**
                         * Use `flatMapNullable`.
                         *
                         * @category legacy
                         * @since 2.9.0
                         */
                        var chainNullableK = function (e) {
                            var from = (0, exports.fromNullableK)(e);
                            return function (f) { return (0, exports.flatMap)(from(f)); };
                        };
                        exports.chainNullableK = chainNullableK;
                        /**
                         * @category conversions
                         * @since 2.10.0
                         */
                        exports.toUnion = (0, exports.foldW)(function_1.identity, function_1.identity);
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Default value for the `onError` argument of `tryCatch`
                         *
                         * @since 2.0.0
                         */
                        function toError(e) {
                            return e instanceof Error ? e : new Error(String(e));
                        }
                        exports.toError = toError;
                        function elem(E) {
                            return function (a, ma) {
                                if (ma === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (ma) { return elemE_1(a, ma); };
                                }
                                return (0, exports.isLeft)(ma) ? false : E.equals(a, ma.right);
                            };
                        }
                        exports.elem = elem;
                        /**
                         * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.
                         *
                         * @example
                         * import { exists, left, right } from 'fp-ts/Either'
                         *
                         * const gt2 = exists((n: number) => n > 2)
                         *
                         * assert.strictEqual(gt2(left('a')), false)
                         * assert.strictEqual(gt2(right(1)), false)
                         * assert.strictEqual(gt2(right(3)), true)
                         *
                         * @since 2.0.0
                         */
                        var exists = function (predicate) {
                            return function (ma) {
                                return (0, exports.isLeft)(ma) ? false : predicate(ma.right);
                            };
                        };
                        exports.exists = exists;
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        exports.Do = (0, exports.of)(_.emptyRecord);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindTo = (0, Functor_1.bindTo)(exports.Functor);
                        var let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);
                        exports.let = let_;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bind = chainable.bind(exports.Chain);
                        /**
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindW = exports.bind;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apS = (0, Apply_1.apS)(exports.Apply);
                        /**
                         * Less strict version of [`apS`](#aps).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apSW = exports.apS;
                        /**
                         * @since 2.11.0
                         */
                        exports.ApT = (0, exports.of)(_.emptyReadonlyArray);
                        // -------------------------------------------------------------------------------------
                        // array utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndex = function (f) {
                            return function (as) {
                                var e = f(0, _.head(as));
                                if ((0, exports.isLeft)(e)) {
                                    return e;
                                }
                                var out = [e.right];
                                for (var i = 1; i < as.length; i++) {
                                    var e_1 = f(i, as[i]);
                                    if ((0, exports.isLeft)(e_1)) {
                                        return e_1;
                                    }
                                    out.push(e_1.right);
                                }
                                return (0, exports.right)(out);
                            };
                        };
                        exports.traverseReadonlyNonEmptyArrayWithIndex = traverseReadonlyNonEmptyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndex = function (f) {
                            var g = (0, exports.traverseReadonlyNonEmptyArrayWithIndex)(f);
                            return function (as) { return (_.isNonEmpty(as) ? g(as) : exports.ApT); };
                        };
                        exports.traverseReadonlyArrayWithIndex = traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArray = function (f) { return (0, exports.traverseReadonlyArrayWithIndex)(function (_, a) { return f(a); }); };
                        exports.traverseArray = traverseArray;
                        /**
                         * Equivalent to `ReadonlyArray#sequence(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.sequenceArray =
/*#__PURE__*/ (0, exports.traverseArray)(function_1.identity);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.6.0
                         */
                        exports.chainW = exports.flatMap;
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chain = exports.flatMap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chainFirst = exports.tap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.8.0
                         */
                        exports.chainFirstW = exports.tap;
                        /**
                         * Use [`parse`](./Json.ts.html#parse) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function parseJSON(s, onError) {
                            return (0, exports.tryCatch)(function () { return JSON.parse(s); }, onError);
                        }
                        exports.parseJSON = parseJSON;
                        /**
                         * Use [`stringify`](./Json.ts.html#stringify) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var stringifyJSON = function (u, onError) {
                            return (0, exports.tryCatch)(function () {
                                var s = JSON.stringify(u);
                                if (typeof s !== 'string') {
                                    throw new Error('Converting unsupported structure to JSON');
                                }
                                return s;
                            }, onError);
                        };
                        exports.stringifyJSON = stringifyJSON;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `E.Functor` instead of `E.either`
                         * (where `E` is from `import E from 'fp-ts/Either'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.either = {
                            URI: exports.URI,
                            map: _map,
                            of: exports.of,
                            ap: _ap,
                            chain: exports.flatMap,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            bimap: _bimap,
                            mapLeft: _mapLeft,
                            alt: _alt,
                            extend: _extend,
                            chainRec: _chainRec,
                            throwError: exports.throwError
                        };
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values
                         * are concatenated using the provided `Semigroup`
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getApplySemigroup =
/*#__PURE__*/ (0, Apply_1.getApplySemigroup)(exports.Apply);
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getApplyMonoid =
/*#__PURE__*/ (0, Applicative_1.getApplicativeMonoid)(exports.Applicative);
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getValidationSemigroup = function (SE, SA) {
                            return (0, Apply_1.getApplySemigroup)((0, exports.getApplicativeValidation)(SE))(SA);
                        };
                        exports.getValidationSemigroup = getValidationSemigroup;
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getValidationMonoid = function (SE, MA) {
                            return (0, Applicative_1.getApplicativeMonoid)((0, exports.getApplicativeValidation)(SE))(MA);
                        };
                        exports.getValidationMonoid = getValidationMonoid;
                        /**
                         * Use [`getApplicativeValidation`](#getapplicativevalidation) and [`getAltValidation`](#getaltvalidation) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function getValidation(SE) {
                            var ap = (0, exports.getApplicativeValidation)(SE).ap;
                            var alt = (0, exports.getAltValidation)(SE).alt;
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                of: exports.of,
                                chain: exports.flatMap,
                                bimap: _bimap,
                                mapLeft: _mapLeft,
                                reduce: _reduce,
                                foldMap: _foldMap,
                                reduceRight: _reduceRight,
                                extend: _extend,
                                traverse: _traverse,
                                sequence: exports.sequence,
                                chainRec: _chainRec,
                                throwError: exports.throwError,
                                ap: ap,
                                alt: alt
                            };
                        }
                        exports.getValidation = getValidation;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/EitherT.js":
/*!*******************************************!*\
  !*** ./node_modules/fp-ts/lib/EitherT.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.getEitherM = exports.toUnion = exports.swap = exports.orLeft = exports.tapError = exports.orElseFirst = exports.orElse = exports.getOrElse = exports.matchE = exports.match = exports.altValidation = exports.mapError = exports.mapLeft = exports.mapBoth = exports.bimap = exports.alt = exports.flatMap = exports.chain = exports.ap = exports.map = exports.chainNullableK = exports.fromNullableK = exports.fromNullable = exports.leftF = exports.rightF = exports.left = exports.right = void 0;
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var E = __importStar(__webpack_require__(/*! ./Either */ "./node_modules/fp-ts/lib/Either.js"));
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        function right(F) {
                            return (0, function_1.flow)(E.right, F.of);
                        }
                        exports.right = right;
                        function left(F) {
                            return (0, function_1.flow)(E.left, F.of);
                        }
                        exports.left = left;
                        function rightF(F) {
                            return function (fa) { return F.map(fa, E.right); };
                        }
                        exports.rightF = rightF;
                        function leftF(F) {
                            return function (fe) { return F.map(fe, E.left); };
                        }
                        exports.leftF = leftF;
                        function fromNullable(F) {
                            return function (e) { return (0, function_1.flow)(E.fromNullable(e), F.of); };
                        }
                        exports.fromNullable = fromNullable;
                        function fromNullableK(F) {
                            var fromNullableF = fromNullable(F);
                            return function (e) {
                                var fromNullableFE = fromNullableF(e);
                                return function (f) { return (0, function_1.flow)(f, fromNullableFE); };
                            };
                        }
                        exports.fromNullableK = fromNullableK;
                        function chainNullableK(M) {
                            var chainM = chain(M);
                            var fromNullableKM = fromNullableK(M);
                            return function (e) {
                                var fromNullableKMe = fromNullableKM(e);
                                return function (f) { return chainM(fromNullableKMe(f)); };
                            };
                        }
                        exports.chainNullableK = chainNullableK;
                        function map(F) {
                            return (0, Functor_1.map)(F, E.Functor);
                        }
                        exports.map = map;
                        function ap(F) {
                            return (0, Apply_1.ap)(F, E.Apply);
                        }
                        exports.ap = ap;
                        function chain(M) {
                            var flatMapM = flatMap(M);
                            return function (f) { return function (ma) { return flatMapM(ma, f); }; };
                        }
                        exports.chain = chain;
                        /** @internal */
                        function flatMap(M) {
                            return function (ma, f) { return M.chain(ma, function (e) { return (E.isLeft(e) ? M.of(e) : f(e.right)); }); };
                        }
                        exports.flatMap = flatMap;
                        function alt(M) {
                            return function (second) { return function (first) { return M.chain(first, function (e) { return (E.isLeft(e) ? second() : M.of(e)); }); }; };
                        }
                        exports.alt = alt;
                        function bimap(F) {
                            var mapBothF = mapBoth(F);
                            return function (f, g) { return function (self) { return mapBothF(self, f, g); }; };
                        }
                        exports.bimap = bimap;
                        /** @internal */
                        function mapBoth(F) {
                            return function (self, f, g) { return F.map(self, E.bimap(f, g)); };
                        }
                        exports.mapBoth = mapBoth;
                        function mapLeft(F) {
                            var mapErrorF = mapError(F);
                            return function (f) { return function (self) { return mapErrorF(self, f); }; };
                        }
                        exports.mapLeft = mapLeft;
                        /** @internal */
                        function mapError(F) {
                            return function (self, f) { return F.map(self, E.mapLeft(f)); };
                        }
                        exports.mapError = mapError;
                        function altValidation(M, S) {
                            return function (second) {
                                return function (first) {
                                    return M.chain(first, E.match(function (e1) {
                                        return M.map(second(), E.mapLeft(function (e2) { return S.concat(e1, e2); }));
                                    }, right(M)));
                                };
                            };
                        }
                        exports.altValidation = altValidation;
                        function match(F) {
                            return function (onLeft, onRight) { return function (ma) { return F.map(ma, E.match(onLeft, onRight)); }; };
                        }
                        exports.match = match;
                        function matchE(M) {
                            return function (onLeft, onRight) { return function (ma) { return M.chain(ma, E.match(onLeft, onRight)); }; };
                        }
                        exports.matchE = matchE;
                        function getOrElse(M) {
                            return function (onLeft) { return function (ma) { return M.chain(ma, E.match(onLeft, M.of)); }; };
                        }
                        exports.getOrElse = getOrElse;
                        function orElse(M) {
                            return function (onLeft) { return function (ma) { return M.chain(ma, function (e) { return (E.isLeft(e) ? onLeft(e.left) : M.of(e)); }); }; };
                        }
                        exports.orElse = orElse;
                        function orElseFirst(M) {
                            var tapErrorM = tapError(M);
                            return function (onLeft) { return function (ma) { return tapErrorM(ma, onLeft); }; };
                        }
                        exports.orElseFirst = orElseFirst;
                        /** @internal */
                        function tapError(M) {
                            var orElseM = orElse(M);
                            return function (ma, onLeft) {
                                return (0, function_1.pipe)(ma, orElseM(function (e) { return M.map(onLeft(e), function (eb) { return (E.isLeft(eb) ? eb : E.left(e)); }); }));
                            };
                        }
                        exports.tapError = tapError;
                        function orLeft(M) {
                            return function (onLeft) {
                                return function (ma) {
                                    return M.chain(ma, E.match(function (e) { return M.map(onLeft(e), E.left); }, function (a) { return M.of(E.right(a)); }));
                                };
                            };
                        }
                        exports.orLeft = orLeft;
                        function swap(F) {
                            return function (ma) { return F.map(ma, E.swap); };
                        }
                        exports.swap = swap;
                        function toUnion(F) {
                            return function (fa) { return F.map(fa, E.toUnion); };
                        }
                        exports.toUnion = toUnion;
                        /** @deprecated  */
                        /* istanbul ignore next */
                        function getEitherM(M) {
                            var _ap = ap(M);
                            var _map = map(M);
                            var _chain = chain(M);
                            var _alt = alt(M);
                            var _bimap = bimap(M);
                            var _mapLeft = mapLeft(M);
                            var _fold = matchE(M);
                            var _getOrElse = getOrElse(M);
                            var _orElse = orElse(M);
                            return {
                                map: function (fa, f) { return (0, function_1.pipe)(fa, _map(f)); },
                                ap: function (fab, fa) { return (0, function_1.pipe)(fab, _ap(fa)); },
                                of: right(M),
                                chain: function (ma, f) { return (0, function_1.pipe)(ma, _chain(f)); },
                                alt: function (fa, that) { return (0, function_1.pipe)(fa, _alt(that)); },
                                bimap: function (fea, f, g) { return (0, function_1.pipe)(fea, _bimap(f, g)); },
                                mapLeft: function (fea, f) { return (0, function_1.pipe)(fea, _mapLeft(f)); },
                                fold: function (fa, onLeft, onRight) { return (0, function_1.pipe)(fa, _fold(onLeft, onRight)); },
                                getOrElse: function (fa, onLeft) { return (0, function_1.pipe)(fa, _getOrElse(onLeft)); },
                                orElse: function (fa, f) { return (0, function_1.pipe)(fa, _orElse(f)); },
                                swap: swap(M),
                                rightM: rightF(M),
                                leftM: leftF(M),
                                left: left(M)
                            };
                        }
                        exports.getEitherM = getEitherM;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Eq.js":
/*!**************************************!*\
  !*** ./node_modules/fp-ts/lib/Eq.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.eqDate = exports.eqNumber = exports.eqString = exports.eqBoolean = exports.eq = exports.strictEqual = exports.getStructEq = exports.getTupleEq = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.eqStrict = exports.URI = exports.contramap = exports.tuple = exports.struct = exports.fromEquals = void 0;
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var fromEquals = function (equals) {
                            return ({
                                equals: function (x, y) { return x === y || equals(x, y); }
                            });
                        };
                        exports.fromEquals = fromEquals;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.10.0
                         */
                        var struct = function (eqs) {
                            return (0, exports.fromEquals)(function (first, second) {
                                for (var key in eqs) {
                                    if (!eqs[key].equals(first[key], second[key])) {
                                        return false;
                                    }
                                }
                                return true;
                            });
                        };
                        exports.struct = struct;
                        /**
                         * Given a tuple of `Eq`s returns a `Eq` for the tuple
                         *
                         * @example
                         * import { tuple } from 'fp-ts/Eq'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import * as B from 'fp-ts/boolean'
                         *
                         * const E = tuple(S.Eq, N.Eq, B.Eq)
                         * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)
                         * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)
                         * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)
                         * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)
                         *
                         * @since 2.10.0
                         */
                        var tuple = function () {
                            var eqs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                eqs[_i] = arguments[_i];
                            }
                            return (0, exports.fromEquals)(function (first, second) { return eqs.every(function (E, i) { return E.equals(first[i], second[i]); }); });
                        };
                        exports.tuple = tuple;
                        /* istanbul ignore next */
                        var contramap_ = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.contramap)(f)); };
                        /**
                         * A typical use case for `contramap` would be like, given some `User` type, to construct an `Eq<User>`.
                         *
                         * We can do so with a function from `User -> X` where `X` is some value that we know how to compare
                         * for equality (meaning we have an `Eq<X>`)
                         *
                         * For example, given the following `User` type, we want to construct an `Eq<User>` that just looks at the `key` field
                         * for each user (since it's known to be unique).
                         *
                         * If we have a way of comparing `UUID`s for equality (`eqUUID: Eq<UUID>`) and we know how to go from `User -> UUID`,
                         * using `contramap` we can do this
                         *
                         * @example
                         * import { contramap, Eq } from 'fp-ts/Eq'
                         * import { pipe } from 'fp-ts/function'
                         * import * as S from 'fp-ts/string'
                         *
                         * type UUID = string
                         *
                         * interface User {
                         *   readonly key: UUID
                         *   readonly firstName: string
                         *   readonly lastName: string
                         * }
                         *
                         * const eqUUID: Eq<UUID> = S.Eq
                         *
                         * const eqUserByKey: Eq<User> = pipe(
                         *   eqUUID,
                         *   contramap((user) => user.key)
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   eqUserByKey.equals(
                         *     { key: 'k1', firstName: 'a1', lastName: 'b1' },
                         *     { key: 'k2', firstName: 'a1', lastName: 'b1' }
                         *   ),
                         *   false
                         * )
                         * assert.deepStrictEqual(
                         *   eqUserByKey.equals(
                         *     { key: 'k1', firstName: 'a1', lastName: 'b1' },
                         *     { key: 'k1', firstName: 'a2', lastName: 'b1' }
                         *   ),
                         *   true
                         * )
                         *
                         * @since 2.0.0
                         */
                        var contramap = function (f) {
                            return function (fa) {
                                return (0, exports.fromEquals)(function (x, y) { return fa.equals(f(x), f(y)); });
                            };
                        };
                        exports.contramap = contramap;
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        exports.URI = 'Eq';
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        exports.eqStrict = {
                            equals: function (a, b) { return a === b; }
                        };
                        var empty = {
                            equals: function () { return true; }
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: function (x, y) { return (0, exports.fromEquals)(function (a, b) { return x.equals(a, b) && y.equals(a, b); }); }
                            });
                        };
                        exports.getSemigroup = getSemigroup;
                        /**
                         * @category instances
                         * @since 2.6.0
                         */
                        var getMonoid = function () {
                            return ({
                                concat: (0, exports.getSemigroup)().concat,
                                empty: empty
                            });
                        };
                        exports.getMonoid = getMonoid;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Contravariant = {
                            URI: exports.URI,
                            contramap: contramap_
                        };
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use [`tuple`](#tuple) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getTupleEq = exports.tuple;
                        /**
                         * Use [`struct`](#struct) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getStructEq = exports.struct;
                        /**
                         * Use [`eqStrict`](#eqstrict) instead
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.strictEqual = exports.eqStrict.equals;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Contravariant` instance, pass `E.Contravariant` instead of `E.eq`
                         * (where `E` is from `import E from 'fp-ts/Eq'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.eq = exports.Contravariant;
                        /**
                         * Use [`Eq`](./boolean.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.eqBoolean = exports.eqStrict;
                        /**
                         * Use [`Eq`](./string.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.eqString = exports.eqStrict;
                        /**
                         * Use [`Eq`](./number.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.eqNumber = exports.eqStrict;
                        /**
                         * Use [`Eq`](./Date.ts.html#eq) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.eqDate = {
                            equals: function (first, second) { return first.valueOf() === second.valueOf(); }
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Filterable.js":
/*!**********************************************!*\
  !*** ./node_modules/fp-ts/lib/Filterable.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.getFilterableComposition = exports.partitionMap = exports.partition = exports.filterMap = exports.filter = void 0;
                        /**
                         * `Filterable` represents data structures which can be _partitioned_/_filtered_.
                         *
                         * Adapted from https://github.com/LiamGoodacre/purescript-filterable/blob/master/src/Data/Filterable.purs
                         *
                         * @since 2.0.0
                         */
                        var Compactable_1 = __webpack_require__(/*! ./Compactable */ "./node_modules/fp-ts/lib/Compactable.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var Option_1 = __webpack_require__(/*! ./Option */ "./node_modules/fp-ts/lib/Option.js");
                        var Predicate_1 = __webpack_require__(/*! ./Predicate */ "./node_modules/fp-ts/lib/Predicate.js");
                        var Separated_1 = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/lib/Separated.js");
                        function filter(F, G) {
                            return function (predicate) { return function (fga) { return F.map(fga, function (ga) { return G.filter(ga, predicate); }); }; };
                        }
                        exports.filter = filter;
                        function filterMap(F, G) {
                            return function (f) { return function (fga) { return F.map(fga, function (ga) { return G.filterMap(ga, f); }); }; };
                        }
                        exports.filterMap = filterMap;
                        function partition(F, G) {
                            var _filter = filter(F, G);
                            return function (predicate) {
                                var left = _filter((0, Predicate_1.not)(predicate));
                                var right = _filter(predicate);
                                return function (fgb) { return (0, Separated_1.separated)(left(fgb), right(fgb)); };
                            };
                        }
                        exports.partition = partition;
                        function partitionMap(F, G) {
                            var _filterMap = filterMap(F, G);
                            return function (f) {
                                return function (fga) {
                                    return (0, Separated_1.separated)((0, function_1.pipe)(fga, _filterMap(function (a) { return (0, Option_1.getLeft)(f(a)); })), (0, function_1.pipe)(fga, _filterMap(function (a) { return (0, Option_1.getRight)(f(a)); })));
                                };
                            };
                        }
                        exports.partitionMap = partitionMap;
                        /** @deprecated */
                        function getFilterableComposition(F, G) {
                            var map = (0, Functor_1.getFunctorComposition)(F, G).map;
                            var _compact = (0, Compactable_1.compact)(F, G);
                            var _separate = (0, Compactable_1.separate)(F, G, G);
                            var _filter = filter(F, G);
                            var _filterMap = filterMap(F, G);
                            var _partition = partition(F, G);
                            var _partitionMap = partitionMap(F, G);
                            return {
                                map: map,
                                compact: _compact,
                                separate: _separate,
                                filter: function (fga, f) { return (0, function_1.pipe)(fga, _filter(f)); },
                                filterMap: function (fga, f) { return (0, function_1.pipe)(fga, _filterMap(f)); },
                                partition: function (fga, p) { return (0, function_1.pipe)(fga, _partition(p)); },
                                partitionMap: function (fga, f) { return (0, function_1.pipe)(fga, _partitionMap(f)); }
                            };
                        }
                        exports.getFilterableComposition = getFilterableComposition;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/FromEither.js":
/*!**********************************************!*\
  !*** ./node_modules/fp-ts/lib/FromEither.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        /**
                         * The `FromEither` type class represents those data types which support errors.
                         *
                         * @since 2.10.0
                         */
                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.tapEither = exports.filterOrElse = exports.chainFirstEitherK = exports.chainEitherK = exports.fromEitherK = exports.chainOptionK = exports.fromOptionK = exports.fromPredicate = exports.fromOption = void 0;
                        var Chain_1 = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        function fromOption(F) {
                            return function (onNone) { return function (ma) { return F.fromEither(_.isNone(ma) ? _.left(onNone()) : _.right(ma.value)); }; };
                        }
                        exports.fromOption = fromOption;
                        function fromPredicate(F) {
                            return function (predicate, onFalse) {
                                return function (a) {
                                    return F.fromEither(predicate(a) ? _.right(a) : _.left(onFalse(a)));
                                };
                            };
                        }
                        exports.fromPredicate = fromPredicate;
                        function fromOptionK(F) {
                            var fromOptionF = fromOption(F);
                            return function (onNone) {
                                var from = fromOptionF(onNone);
                                return function (f) { return (0, function_1.flow)(f, from); };
                            };
                        }
                        exports.fromOptionK = fromOptionK;
                        function chainOptionK(F, M) {
                            var fromOptionKF = fromOptionK(F);
                            return function (onNone) {
                                var from = fromOptionKF(onNone);
                                return function (f) { return function (ma) { return M.chain(ma, from(f)); }; };
                            };
                        }
                        exports.chainOptionK = chainOptionK;
                        function fromEitherK(F) {
                            return function (f) { return (0, function_1.flow)(f, F.fromEither); };
                        }
                        exports.fromEitherK = fromEitherK;
                        function chainEitherK(F, M) {
                            var fromEitherKF = fromEitherK(F);
                            return function (f) { return function (ma) { return M.chain(ma, fromEitherKF(f)); }; };
                        }
                        exports.chainEitherK = chainEitherK;
                        function chainFirstEitherK(F, M) {
                            var tapEitherM = tapEither(F, M);
                            return function (f) { return function (ma) { return tapEitherM(ma, f); }; };
                        }
                        exports.chainFirstEitherK = chainFirstEitherK;
                        function filterOrElse(F, M) {
                            return function (predicate, onFalse) {
                                return function (ma) {
                                    return M.chain(ma, function (a) { return F.fromEither(predicate(a) ? _.right(a) : _.left(onFalse(a))); });
                                };
                            };
                        }
                        exports.filterOrElse = filterOrElse;
                        /** @internal */
                        function tapEither(F, M) {
                            var fromEither = fromEitherK(F);
                            var tapM = (0, Chain_1.tap)(M);
                            return function (self, f) { return tapM(self, fromEither(f)); };
                        }
                        exports.tapEither = tapEither;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/FromIO.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/lib/FromIO.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.tapIO = exports.chainFirstIOK = exports.chainIOK = exports.fromIOK = void 0;
                        /**
                         * Lift a computation from the `IO` monad
                         *
                         * @since 2.10.0
                         */
                        var Chain_1 = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        function fromIOK(F) {
                            return function (f) { return (0, function_1.flow)(f, F.fromIO); };
                        }
                        exports.fromIOK = fromIOK;
                        function chainIOK(F, M) {
                            return function (f) {
                                var g = (0, function_1.flow)(f, F.fromIO);
                                return function (first) { return M.chain(first, g); };
                            };
                        }
                        exports.chainIOK = chainIOK;
                        function chainFirstIOK(F, M) {
                            var tapIOM = tapIO(F, M);
                            return function (f) { return function (first) { return tapIOM(first, f); }; };
                        }
                        exports.chainFirstIOK = chainFirstIOK;
                        /** @internal */
                        function tapIO(F, M) {
                            var chainFirstM = (0, Chain_1.tap)(M);
                            return function (self, f) { return chainFirstM(self, (0, function_1.flow)(f, F.fromIO)); };
                        }
                        exports.tapIO = tapIO;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/FromTask.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/lib/FromTask.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.tapTask = exports.chainFirstTaskK = exports.chainTaskK = exports.fromTaskK = void 0;
                        /**
                         * Lift a computation from the `Task` monad
                         *
                         * @since 2.10.0
                         */
                        var Chain_1 = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        function fromTaskK(F) {
                            return function (f) { return (0, function_1.flow)(f, F.fromTask); };
                        }
                        exports.fromTaskK = fromTaskK;
                        function chainTaskK(F, M) {
                            return function (f) {
                                var g = (0, function_1.flow)(f, F.fromTask);
                                return function (first) { return M.chain(first, g); };
                            };
                        }
                        exports.chainTaskK = chainTaskK;
                        function chainFirstTaskK(F, M) {
                            var tapTaskM = tapTask(F, M);
                            return function (f) { return function (first) { return tapTaskM(first, f); }; };
                        }
                        exports.chainFirstTaskK = chainFirstTaskK;
                        /** @internal */
                        function tapTask(F, M) {
                            var tapM = (0, Chain_1.tap)(M);
                            return function (self, f) { return tapM(self, (0, function_1.flow)(f, F.fromTask)); };
                        }
                        exports.tapTask = tapTask;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Functor.js":
/*!*******************************************!*\
  !*** ./node_modules/fp-ts/lib/Functor.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.asUnit = exports.as = exports.getFunctorComposition = exports.let = exports.bindTo = exports.flap = exports.map = void 0;
                        /**
                         * A `Functor` is a type constructor which supports a mapping operation `map`.
                         *
                         * `map` can be used to turn functions `a -> b` into functions `f a -> f b` whose argument and return types use the type
                         * constructor `f` to represent some computational context.
                         *
                         * Instances must satisfy the following laws:
                         *
                         * 1. Identity: `F.map(fa, a => a) <-> fa`
                         * 2. Composition: `F.map(fa, a => bc(ab(a))) <-> F.map(F.map(fa, ab), bc)`
                         *
                         * @since 2.0.0
                         */
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        function map(F, G) {
                            return function (f) { return function (fa) { return F.map(fa, function (ga) { return G.map(ga, f); }); }; };
                        }
                        exports.map = map;
                        function flap(F) {
                            return function (a) { return function (fab) { return F.map(fab, function (f) { return f(a); }); }; };
                        }
                        exports.flap = flap;
                        function bindTo(F) {
                            return function (name) {
                                return function (fa) {
                                    return F.map(fa, function (a) {
                                        var _a;
                                        return (_a = {}, _a[name] = a, _a);
                                    });
                                };
                            };
                        }
                        exports.bindTo = bindTo;
                        function let_(F) {
                            return function (name, f) {
                                return function (fa) {
                                    return F.map(fa, function (a) {
                                        var _a;
                                        return Object.assign({}, a, (_a = {}, _a[name] = f(a), _a));
                                    });
                                };
                            };
                        }
                        exports.let = let_;
                        /** @deprecated */
                        function getFunctorComposition(F, G) {
                            var _map = map(F, G);
                            return {
                                map: function (fga, f) { return (0, function_1.pipe)(fga, _map(f)); }
                            };
                        }
                        exports.getFunctorComposition = getFunctorComposition;
                        /** @internal */
                        function as(F) {
                            return function (self, b) { return F.map(self, function () { return b; }); };
                        }
                        exports.as = as;
                        /** @internal */
                        function asUnit(F) {
                            var asM = as(F);
                            return function (self) { return asM(self, undefined); };
                        }
                        exports.asUnit = asUnit;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Json.js":
/*!****************************************!*\
  !*** ./node_modules/fp-ts/lib/Json.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.stringify = exports.parse = void 0;
                        /**
                         * @since 2.10.0
                         */
                        var Either_1 = __webpack_require__(/*! ./Either */ "./node_modules/fp-ts/lib/Either.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        /**
                         * Converts a JavaScript Object Notation (JSON) string into a `Json` type.
                         *
                         * @example
                         * import * as J from 'fp-ts/Json'
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('{"a":1}', J.parse), E.right({ a: 1 }))
                         * assert.deepStrictEqual(pipe('{"a":}', J.parse), E.left(new SyntaxError('Unexpected token } in JSON at position 5')))
                         *
                         * @since 2.10.0
                         */
                        var parse = function (s) { return (0, Either_1.tryCatch)(function () { return JSON.parse(s); }, function_1.identity); };
                        exports.parse = parse;
                        /**
                         * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import * as J from 'fp-ts/Json'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(J.stringify({ a: 1 }), E.right('{"a":1}'))
                         * const circular: any = { ref: null }
                         * circular.ref = circular
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     J.stringify(circular),
                         *     E.mapLeft(e => e instanceof Error && e.message.includes('Converting circular structure to JSON'))
                         *   ),
                         *   E.left(true)
                         * )
                         *
                         *  @since 2.10.0
                         */
                        var stringify = function (a) {
                            return (0, Either_1.tryCatch)(function () {
                                var s = JSON.stringify(a);
                                if (typeof s !== 'string') {
                                    throw new Error('Converting unsupported structure to JSON');
                                }
                                return s;
                            }, function_1.identity);
                        };
                        exports.stringify = stringify;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Magma.js":
/*!*****************************************!*\
  !*** ./node_modules/fp-ts/lib/Magma.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        /**
                         * A `Magma` is a pair `(A, concat)` in which `A` is a non-empty set and `concat` is a binary operation on `A`
                         *
                         * See [Semigroup](https://gcanti.github.io/fp-ts/modules/Semigroup.ts.html) for some instances.
                         *
                         * @since 2.0.0
                         */
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.concatAll = exports.endo = exports.filterSecond = exports.filterFirst = exports.reverse = void 0;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * The dual of a `Magma`, obtained by swapping the arguments of `concat`.
                         *
                         * @example
                         * import { reverse, concatAll } from 'fp-ts/Magma'
                         * import * as N from 'fp-ts/number'
                         *
                         * const subAll = concatAll(reverse(N.MagmaSub))(0)
                         *
                         * assert.deepStrictEqual(subAll([1, 2, 3]), 2)
                         *
                         * @since 2.11.0
                         */
                        var reverse = function (M) {
                            return ({
                                concat: function (first, second) { return M.concat(second, first); }
                            });
                        };
                        exports.reverse = reverse;
                        /**
                         * @since 2.11.0
                         */
                        var filterFirst = function (predicate) {
                            return function (M) {
                                return ({
                                    concat: function (first, second) { return (predicate(first) ? M.concat(first, second) : second); }
                                });
                            };
                        };
                        exports.filterFirst = filterFirst;
                        /**
                         * @since 2.11.0
                         */
                        var filterSecond = function (predicate) {
                            return function (M) {
                                return ({
                                    concat: function (first, second) { return (predicate(second) ? M.concat(first, second) : first); }
                                });
                            };
                        };
                        exports.filterSecond = filterSecond;
                        /**
                         * @since 2.11.0
                         */
                        var endo = function (f) {
                            return function (M) {
                                return ({
                                    concat: function (first, second) { return M.concat(f(first), f(second)); }
                                });
                            };
                        };
                        exports.endo = endo;
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Given a sequence of `as`, concat them and return the total.
                         *
                         * If `as` is empty, return the provided `startWith` value.
                         *
                         * @example
                         * import { concatAll } from 'fp-ts/Magma'
                         * import * as N from 'fp-ts/number'
                         *
                         * const subAll = concatAll(N.MagmaSub)(0)
                         *
                         * assert.deepStrictEqual(subAll([1, 2, 3]), -6)
                         *
                         * @since 2.11.0
                         */
                        var concatAll = function (M) {
                            return function (startWith) {
                                return function (as) {
                                    return as.reduce(function (a, acc) { return M.concat(a, acc); }, startWith);
                                };
                            };
                        };
                        exports.concatAll = concatAll;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Option.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/lib/Option.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.Witherable = exports.wilt = exports.wither = exports.Traversable = exports.sequence = exports.traverse = exports.Filterable = exports.partitionMap = exports.partition = exports.filterMap = exports.filter = exports.Compactable = exports.separate = exports.compact = exports.Extend = exports.extend = exports.Alternative = exports.guard = exports.Zero = exports.zero = exports.Alt = exports.alt = exports.altW = exports.orElse = exports.Foldable = exports.reduceRight = exports.foldMap = exports.reduce = exports.Monad = exports.Chain = exports.flatMap = exports.Applicative = exports.Apply = exports.ap = exports.Pointed = exports.of = exports.asUnit = exports.as = exports.Functor = exports.map = exports.getMonoid = exports.getOrd = exports.getEq = exports.getShow = exports.URI = exports.getRight = exports.getLeft = exports.fromPredicate = exports.some = exports.none = void 0;
                        exports.getFirstMonoid = exports.getApplyMonoid = exports.getApplySemigroup = exports.option = exports.mapNullable = exports.getRefinement = exports.chainFirst = exports.chain = exports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex = exports.traverseReadonlyNonEmptyArrayWithIndex = exports.ApT = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.exists = exports.elem = exports.toUndefined = exports.toNullable = exports.chainNullableK = exports.fromNullableK = exports.tryCatchK = exports.tryCatch = exports.fromNullable = exports.chainFirstEitherK = exports.chainEitherK = exports.fromEitherK = exports.duplicate = exports.tapEither = exports.tap = exports.flatten = exports.apSecond = exports.apFirst = exports.flap = exports.getOrElse = exports.getOrElseW = exports.fold = exports.match = exports.foldW = exports.matchW = exports.isNone = exports.isSome = exports.FromEither = exports.fromEither = exports.MonadThrow = exports.throwError = void 0;
                        exports.getLastMonoid = void 0;
                        var Applicative_1 = __webpack_require__(/*! ./Applicative */ "./node_modules/fp-ts/lib/Applicative.js");
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var chainable = __importStar(__webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js"));
                        var FromEither_1 = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/lib/FromEither.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        var Predicate_1 = __webpack_require__(/*! ./Predicate */ "./node_modules/fp-ts/lib/Predicate.js");
                        var Semigroup_1 = __webpack_require__(/*! ./Semigroup */ "./node_modules/fp-ts/lib/Semigroup.js");
                        var Separated_1 = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/lib/Separated.js");
                        var Witherable_1 = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/lib/Witherable.js");
                        var Zero_1 = __webpack_require__(/*! ./Zero */ "./node_modules/fp-ts/lib/Zero.js");
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * `None` doesn't have a constructor, instead you can use it directly as a value. Represents a missing value.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.none = _.none;
                        /**
                         * Constructs a `Some`. Represents an optional value that exists.
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.some = _.some;
                        function fromPredicate(predicate) {
                            return function (a) { return (predicate(a) ? (0, exports.some)(a) : exports.none); };
                        }
                        exports.fromPredicate = fromPredicate;
                        /**
                         * Returns the `Left` value of an `Either` if possible.
                         *
                         * @example
                         * import { getLeft, none, some } from 'fp-ts/Option'
                         * import { right, left } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(getLeft(right(1)), none)
                         * assert.deepStrictEqual(getLeft(left('a')), some('a'))
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var getLeft = function (ma) { return (ma._tag === 'Right' ? exports.none : (0, exports.some)(ma.left)); };
                        exports.getLeft = getLeft;
                        /**
                         * Returns the `Right` value of an `Either` if possible.
                         *
                         * @example
                         * import { getRight, none, some } from 'fp-ts/Option'
                         * import { right, left } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(getRight(right(1)), some(1))
                         * assert.deepStrictEqual(getRight(left('a')), none)
                         *
                         * @category constructors
                         * @since 2.0.0
                         */
                        var getRight = function (ma) { return (ma._tag === 'Left' ? exports.none : (0, exports.some)(ma.right)); };
                        exports.getRight = getRight;
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        var _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };
                        var _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };
                        var _foldMap = function (M) {
                            var foldMapM = (0, exports.foldMap)(M);
                            return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };
                        };
                        var _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };
                        var _traverse = function (F) {
                            var traverseF = (0, exports.traverse)(F);
                            return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };
                        var _filter = function (fa, predicate) { return (0, function_1.pipe)(fa, (0, exports.filter)(predicate)); };
                        /* istanbul ignore next */
                        var _filterMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMap)(f)); };
                        /* istanbul ignore next */
                        var _extend = function (wa, f) { return (0, function_1.pipe)(wa, (0, exports.extend)(f)); };
                        /* istanbul ignore next */
                        var _partition = function (fa, predicate) {
                            return (0, function_1.pipe)(fa, (0, exports.partition)(predicate));
                        };
                        /* istanbul ignore next */
                        var _partitionMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMap)(f)); };
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        exports.URI = 'Option';
                        /**
                         * @category instances
                         * @since 2.0.0
                         */
                        var getShow = function (S) {
                            return ({
                                show: function (ma) { return ((0, exports.isNone)(ma) ? 'none' : "some(".concat(S.show(ma.value), ")")); }
                            });
                        };
                        exports.getShow = getShow;
                        /**
                         * @example
                         * import { none, some, getEq } from 'fp-ts/Option'
                         * import * as N from 'fp-ts/number'
                         *
                         * const E = getEq(N.Eq)
                         * assert.strictEqual(E.equals(none, none), true)
                         * assert.strictEqual(E.equals(none, some(1)), false)
                         * assert.strictEqual(E.equals(some(1), none), false)
                         * assert.strictEqual(E.equals(some(1), some(2)), false)
                         * assert.strictEqual(E.equals(some(1), some(1)), true)
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getEq = function (E) {
                            return ({
                                equals: function (x, y) { return x === y || ((0, exports.isNone)(x) ? (0, exports.isNone)(y) : (0, exports.isNone)(y) ? false : E.equals(x.value, y.value)); }
                            });
                        };
                        exports.getEq = getEq;
                        /**
                         * The `Ord` instance allows `Option` values to be compared with
                         * `compare`, whenever there is an `Ord` instance for
                         * the type the `Option` contains.
                         *
                         * `None` is considered to be less than any `Some` value.
                         *
                         *
                         * @example
                         * import { none, some, getOrd } from 'fp-ts/Option'
                         * import * as N from 'fp-ts/number'
                         *
                         * const O = getOrd(N.Ord)
                         * assert.strictEqual(O.compare(none, none), 0)
                         * assert.strictEqual(O.compare(none, some(1)), -1)
                         * assert.strictEqual(O.compare(some(1), none), 1)
                         * assert.strictEqual(O.compare(some(1), some(2)), -1)
                         * assert.strictEqual(O.compare(some(1), some(1)), 0)
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getOrd = function (O) {
                            return ({
                                equals: (0, exports.getEq)(O).equals,
                                compare: function (x, y) { return (x === y ? 0 : (0, exports.isSome)(x) ? ((0, exports.isSome)(y) ? O.compare(x.value, y.value) : 1) : -1); }
                            });
                        };
                        exports.getOrd = getOrd;
                        /**
                         * Monoid returning the left-most non-`None` value. If both operands are `Some`s then the inner values are
                         * concatenated using the provided `Semigroup`
                         *
                         * | x       | y       | concat(x, y)       |
                         * | ------- | ------- | ------------------ |
                         * | none    | none    | none               |
                         * | some(a) | none    | some(a)            |
                         * | none    | some(b) | some(b)            |
                         * | some(a) | some(b) | some(concat(a, b)) |
                         *
                         * @example
                         * import { getMonoid, some, none } from 'fp-ts/Option'
                         * import { SemigroupSum } from 'fp-ts/number'
                         *
                         * const M = getMonoid(SemigroupSum)
                         * assert.deepStrictEqual(M.concat(none, none), none)
                         * assert.deepStrictEqual(M.concat(some(1), none), some(1))
                         * assert.deepStrictEqual(M.concat(none, some(1)), some(1))
                         * assert.deepStrictEqual(M.concat(some(1), some(2)), some(3))
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getMonoid = function (S) {
                            return ({
                                concat: function (x, y) { return ((0, exports.isNone)(x) ? y : (0, exports.isNone)(y) ? x : (0, exports.some)(S.concat(x.value, y.value))); },
                                empty: exports.none
                            });
                        };
                        exports.getMonoid = getMonoid;
                        /**
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return (0, exports.isNone)(fa) ? exports.none : (0, exports.some)(f(fa.value));
                            };
                        };
                        exports.map = map;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * Maps the `Some` value of this `Option` to the specified constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.as = (0, function_1.dual)(2, (0, Functor_1.as)(exports.Functor));
                        /**
                         * Maps the `Some` value of this `Option` to the void constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.asUnit = (0, Functor_1.asUnit)(exports.Functor);
                        /**
                         * @category constructors
                         * @since 2.7.0
                         */
                        exports.of = exports.some;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Pointed = {
                            URI: exports.URI,
                            of: exports.of
                        };
                        /**
                         * @since 2.0.0
                         */
                        var ap = function (fa) {
                            return function (fab) {
                                return (0, exports.isNone)(fab) ? exports.none : (0, exports.isNone)(fa) ? exports.none : (0, exports.some)(fab.value(fa.value));
                            };
                        };
                        exports.ap = ap;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Apply = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Applicative = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of
                        };
                        /**
                         * @category sequencing
                         * @since 2.14.0
                         */
                        exports.flatMap = (0, function_1.dual)(2, function (ma, f) { return ((0, exports.isNone)(ma) ? exports.none : f(ma.value)); });
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Chain = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            chain: exports.flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Monad = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            chain: exports.flatMap
                        };
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduce = function (b, f) {
                            return function (fa) {
                                return (0, exports.isNone)(fa) ? b : f(b, fa.value);
                            };
                        };
                        exports.reduce = reduce;
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var foldMap = function (M) {
                            return function (f) {
                                return function (fa) {
                                    return (0, exports.isNone)(fa) ? M.empty : f(fa.value);
                                };
                            };
                        };
                        exports.foldMap = foldMap;
                        /**
                         * @category folding
                         * @since 2.0.0
                         */
                        var reduceRight = function (b, f) {
                            return function (fa) {
                                return (0, exports.isNone)(fa) ? b : f(fa.value, b);
                            };
                        };
                        exports.reduceRight = reduceRight;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Foldable = {
                            URI: exports.URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.
                         *
                         * @param self - The first `Option` to be checked.
                         * @param that - The `Option` to return if `self` is `None`.
                         *
                         * @example
                         * import * as O from "fp-ts/Option"
                         *
                         * assert.deepStrictEqual(O.orElse(O.none, () => O.none), O.none)
                         * assert.deepStrictEqual(O.orElse(O.some(1), () => O.none), O.some(1))
                         * assert.deepStrictEqual(O.orElse(O.none, () => O.some('b')), O.some('b'))
                         * assert.deepStrictEqual(O.orElse(O.some(1), () => O.some('b')), O.some(1))
                         *
                         * @category error handling
                         * @since 2.16.0
                         */
                        exports.orElse = (0, function_1.dual)(2, function (self, that) { return ((0, exports.isNone)(self) ? that() : self); });
                        /**
                         * Alias of `orElse`.
                         *
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @category legacy
                         * @since 2.9.0
                         */
                        exports.altW = exports.orElse;
                        /**
                         * Alias of `orElse`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.alt = exports.orElse;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Alt = {
                            URI: exports.URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @since 2.7.0
                         */
                        var zero = function () { return exports.none; };
                        exports.zero = zero;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.Zero = {
                            URI: exports.URI,
                            zero: exports.zero
                        };
                        /**
                         * @category do notation
                         * @since 2.11.0
                         */
                        exports.guard = (0, Zero_1.guard)(exports.Zero, exports.Pointed);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Alternative = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            alt: _alt,
                            zero: exports.zero
                        };
                        /**
                         * @since 2.0.0
                         */
                        var extend = function (f) {
                            return function (wa) {
                                return (0, exports.isNone)(wa) ? exports.none : (0, exports.some)(f(wa));
                            };
                        };
                        exports.extend = extend;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Extend = {
                            URI: exports.URI,
                            map: _map,
                            extend: _extend
                        };
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        exports.compact = (0, exports.flatMap)(function_1.identity);
                        var defaultSeparated = /*#__PURE__*/ (0, Separated_1.separated)(exports.none, exports.none);
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var separate = function (ma) {
                            return (0, exports.isNone)(ma) ? defaultSeparated : (0, Separated_1.separated)((0, exports.getLeft)(ma.value), (0, exports.getRight)(ma.value));
                        };
                        exports.separate = separate;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Compactable = {
                            URI: exports.URI,
                            compact: exports.compact,
                            separate: exports.separate
                        };
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filter = function (predicate) {
                            return function (fa) {
                                return (0, exports.isNone)(fa) ? exports.none : predicate(fa.value) ? fa : exports.none;
                            };
                        };
                        exports.filter = filter;
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var filterMap = function (f) {
                            return function (fa) {
                                return (0, exports.isNone)(fa) ? exports.none : f(fa.value);
                            };
                        };
                        exports.filterMap = filterMap;
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partition = function (predicate) {
                            return function (fa) {
                                return (0, Separated_1.separated)(_filter(fa, (0, Predicate_1.not)(predicate)), _filter(fa, predicate));
                            };
                        };
                        exports.partition = partition;
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        var partitionMap = function (f) { return (0, function_1.flow)((0, exports.map)(f), exports.separate); };
                        exports.partitionMap = partitionMap;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Filterable = {
                            URI: exports.URI,
                            map: _map,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap
                        };
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            return function (f) {
                                return function (ta) {
                                    return (0, exports.isNone)(ta) ? F.of(exports.none) : F.map(f(ta.value), exports.some);
                                };
                            };
                        };
                        exports.traverse = traverse;
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) {
                            return function (ta) {
                                return (0, exports.isNone)(ta) ? F.of(exports.none) : F.map(ta.value, exports.some);
                            };
                        };
                        exports.sequence = sequence;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Traversable = {
                            URI: exports.URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence
                        };
                        var _wither = /*#__PURE__*/ (0, Witherable_1.witherDefault)(exports.Traversable, exports.Compactable);
                        var _wilt = /*#__PURE__*/ (0, Witherable_1.wiltDefault)(exports.Traversable, exports.Compactable);
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wither = function (F) {
                            var _witherF = _wither(F);
                            return function (f) { return function (fa) { return _witherF(fa, f); }; };
                        };
                        exports.wither = wither;
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wilt = function (F) {
                            var _wiltF = _wilt(F);
                            return function (f) { return function (fa) { return _wiltF(fa, f); }; };
                        };
                        exports.wilt = wilt;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Witherable = {
                            URI: exports.URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            wither: _wither,
                            wilt: _wilt
                        };
                        /**
                         * @since 2.7.0
                         */
                        var throwError = function () { return exports.none; };
                        exports.throwError = throwError;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.MonadThrow = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            chain: exports.flatMap,
                            throwError: exports.throwError
                        };
                        /**
                         * Transforms an `Either` to an `Option` discarding the error.
                         *
                         * Alias of [getRight](#getright)
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        exports.fromEither = exports.getRight;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.FromEither = {
                            URI: exports.URI,
                            fromEither: exports.fromEither
                        };
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * Returns `true` if the option is an instance of `Some`, `false` otherwise.
                         *
                         * @example
                         * import { some, none, isSome } from 'fp-ts/Option'
                         *
                         * assert.strictEqual(isSome(some(1)), true)
                         * assert.strictEqual(isSome(none), false)
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        exports.isSome = _.isSome;
                        /**
                         * Returns `true` if the option is `None`, `false` otherwise.
                         *
                         * @example
                         * import { some, none, isNone } from 'fp-ts/Option'
                         *
                         * assert.strictEqual(isNone(some(1)), false)
                         * assert.strictEqual(isNone(none), true)
                         *
                         * @category refinements
                         * @since 2.0.0
                         */
                        var isNone = function (fa) { return fa._tag === 'None'; };
                        exports.isNone = isNone;
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        var matchW = function (onNone, onSome) {
                            return function (ma) {
                                return (0, exports.isNone)(ma) ? onNone() : onSome(ma.value);
                            };
                        };
                        exports.matchW = matchW;
                        /**
                         * Alias of [`matchW`](#matchw).
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.foldW = exports.matchW;
                        /**
                         * Takes a (lazy) default value, a function, and an `Option` value, if the `Option` value is `None` the default value is
                         * returned, otherwise the function is applied to the value inside the `Some` and the result is returned.
                         *
                         * @example
                         * import { some, none, match } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     match(() => 'a none', a => `a some containing ${a}`)
                         *   ),
                         *   'a some containing 1'
                         * )
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     match(() => 'a none', a => `a some containing ${a}`)
                         *   ),
                         *   'a none'
                         * )
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.match = exports.matchW;
                        /**
                         * Alias of [`match`](#match).
                         *
                         * @category pattern matching
                         * @since 2.0.0
                         */
                        exports.fold = exports.match;
                        /**
                         * Less strict version of [`getOrElse`](#getorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return type will be merged.
                         *
                         * @category error handling
                         * @since 2.6.0
                         */
                        var getOrElseW = function (onNone) {
                            return function (ma) {
                                return (0, exports.isNone)(ma) ? onNone() : ma.value;
                            };
                        };
                        exports.getOrElseW = getOrElseW;
                        /**
                         * Extracts the value out of the structure, if it exists. Otherwise returns the given default value
                         *
                         * @example
                         * import { some, none, getOrElse } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     getOrElse(() => 0)
                         *   ),
                         *   1
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     getOrElse(() => 0)
                         *   ),
                         *   0
                         * )
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        exports.getOrElse = exports.getOrElseW;
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.0.0
                         */
                        exports.apFirst = (0, Apply_1.apFirst)(exports.Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.0.0
                         */
                        exports.apSecond = (0, Apply_1.apSecond)(exports.Apply);
                        /**
                         * @category sequencing
                         * @since 2.0.0
                         */
                        exports.flatten = exports.compact;
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category combinators
                         * @since 2.15.0
                         */
                        exports.tap = (0, function_1.dual)(2, chainable.tap(exports.Chain));
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as O from 'fp-ts/Option'
                         * import * as E from 'fp-ts/Either'
                         *
                         * const compute = (value: number) => pipe(
                         *   O.of(value),
                         *   O.tapEither((value) => value > 0 ? E.right('ok') : E.left('error')),
                         * )
                         *
                         * assert.deepStrictEqual(compute(1), O.of(1))
                         * assert.deepStrictEqual(compute(-42), O.none)
                         *
                         * @category combinators
                         * @since 2.16.0
                         */
                        exports.tapEither = (0, function_1.dual)(2, (0, FromEither_1.tapEither)(exports.FromEither, exports.Chain));
                        /**
                         * @since 2.0.0
                         */
                        exports.duplicate = (0, exports.extend)(function_1.identity);
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        exports.fromEitherK = (0, FromEither_1.fromEitherK)(exports.FromEither);
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        exports.chainEitherK =
/*#__PURE__*/ (0, FromEither_1.chainEitherK)(exports.FromEither, exports.Chain);
                        /**
                         * Alias of `tapEither`.
                         *
                         * @category legacy
                         * @since 2.12.0
                         */
                        exports.chainFirstEitherK = exports.tapEither;
                        /**
                         * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise
                         * returns the value wrapped in a `Some`.
                         *
                         * @example
                         * import { none, some, fromNullable } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(fromNullable(undefined), none)
                         * assert.deepStrictEqual(fromNullable(null), none)
                         * assert.deepStrictEqual(fromNullable(1), some(1))
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromNullable = function (a) { return (a == null ? exports.none : (0, exports.some)(a)); };
                        exports.fromNullable = fromNullable;
                        /**
                         * Transforms an exception into an `Option`. If `f` throws, returns `None`, otherwise returns the output wrapped in a
                         * `Some`.
                         *
                         * See also [`tryCatchK`](#trycatchk).
                         *
                         * @example
                         * import { none, some, tryCatch } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(
                         *   tryCatch(() => {
                         *     throw new Error()
                         *   }),
                         *   none
                         * )
                         * assert.deepStrictEqual(tryCatch(() => 1), some(1))
                         *
                         * @category interop
                         * @since 2.0.0
                         */
                        var tryCatch = function (f) {
                            try {
                                return (0, exports.some)(f());
                            }
                            catch (e) {
                                return exports.none;
                            }
                        };
                        exports.tryCatch = tryCatch;
                        /**
                         * Converts a function that may throw to one returning a `Option`.
                         *
                         * @category interop
                         * @since 2.10.0
                         */
                        var tryCatchK = function (f) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return (0, exports.tryCatch)(function () { return f.apply(void 0, a); });
                            };
                        };
                        exports.tryCatchK = tryCatchK;
                        /**
                         * Returns a *smart constructor* from a function that returns a nullable value.
                         *
                         * @example
                         * import { fromNullableK, none, some } from 'fp-ts/Option'
                         *
                         * const f = (s: string): number | undefined => {
                         *   const n = parseFloat(s)
                         *   return isNaN(n) ? undefined : n
                         * }
                         *
                         * const g = fromNullableK(f)
                         *
                         * assert.deepStrictEqual(g('1'), some(1))
                         * assert.deepStrictEqual(g('a'), none)
                         *
                         * @category lifting
                         * @since 2.9.0
                         */
                        var fromNullableK = function (f) { return (0, function_1.flow)(f, exports.fromNullable); };
                        exports.fromNullableK = fromNullableK;
                        /**
                         * This is `chain` + `fromNullable`, useful when working with optional values.
                         *
                         * @example
                         * import { some, none, fromNullable, chainNullableK } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Employee {
                         *   readonly company?: {
                         *     readonly address?: {
                         *       readonly street?: {
                         *         readonly name?: string
                         *       }
                         *     }
                         *   }
                         * }
                         *
                         * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     fromNullable(employee1.company),
                         *     chainNullableK(company => company.address),
                         *     chainNullableK(address => address.street),
                         *     chainNullableK(street => street.name)
                         *   ),
                         *   some('high street')
                         * )
                         *
                         * const employee2: Employee = { company: { address: { street: {} } } }
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     fromNullable(employee2.company),
                         *     chainNullableK(company => company.address),
                         *     chainNullableK(address => address.street),
                         *     chainNullableK(street => street.name)
                         *   ),
                         *   none
                         * )
                         *
                         * @category sequencing
                         * @since 2.9.0
                         */
                        var chainNullableK = function (f) {
                            return function (ma) {
                                return (0, exports.isNone)(ma) ? exports.none : (0, exports.fromNullable)(f(ma.value));
                            };
                        };
                        exports.chainNullableK = chainNullableK;
                        /**
                         * Extracts the value out of the structure, if it exists. Otherwise returns `null`.
                         *
                         * @example
                         * import { some, none, toNullable } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     toNullable
                         *   ),
                         *   1
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     toNullable
                         *   ),
                         *   null
                         * )
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        exports.toNullable = (0, exports.match)(function_1.constNull, function_1.identity);
                        /**
                         * Extracts the value out of the structure, if it exists. Otherwise returns `undefined`.
                         *
                         * @example
                         * import { some, none, toUndefined } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     toUndefined
                         *   ),
                         *   1
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     toUndefined
                         *   ),
                         *   undefined
                         * )
                         *
                         * @category conversions
                         * @since 2.0.0
                         */
                        exports.toUndefined = (0, exports.match)(function_1.constUndefined, function_1.identity);
                        function elem(E) {
                            return function (a, ma) {
                                if (ma === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (ma) { return elemE_1(a, ma); };
                                }
                                return (0, exports.isNone)(ma) ? false : E.equals(a, ma.value);
                            };
                        }
                        exports.elem = elem;
                        /**
                         * Returns `true` if the predicate is satisfied by the wrapped value
                         *
                         * @example
                         * import { some, none, exists } from 'fp-ts/Option'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     exists(n => n > 0)
                         *   ),
                         *   true
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     some(1),
                         *     exists(n => n > 1)
                         *   ),
                         *   false
                         * )
                         * assert.strictEqual(
                         *   pipe(
                         *     none,
                         *     exists(n => n > 0)
                         *   ),
                         *   false
                         * )
                         *
                         * @since 2.0.0
                         */
                        var exists = function (predicate) {
                            return function (ma) {
                                return (0, exports.isNone)(ma) ? false : predicate(ma.value);
                            };
                        };
                        exports.exists = exists;
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        exports.Do = (0, exports.of)(_.emptyRecord);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindTo = (0, Functor_1.bindTo)(exports.Functor);
                        var let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);
                        exports.let = let_;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bind = chainable.bind(exports.Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apS = (0, Apply_1.apS)(exports.Apply);
                        /**
                         * @since 2.11.0
                         */
                        exports.ApT = (0, exports.of)(_.emptyReadonlyArray);
                        // -------------------------------------------------------------------------------------
                        // array utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndex = function (f) {
                            return function (as) {
                                var o = f(0, _.head(as));
                                if ((0, exports.isNone)(o)) {
                                    return exports.none;
                                }
                                var out = [o.value];
                                for (var i = 1; i < as.length; i++) {
                                    var o_1 = f(i, as[i]);
                                    if ((0, exports.isNone)(o_1)) {
                                        return exports.none;
                                    }
                                    out.push(o_1.value);
                                }
                                return (0, exports.some)(out);
                            };
                        };
                        exports.traverseReadonlyNonEmptyArrayWithIndex = traverseReadonlyNonEmptyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndex = function (f) {
                            var g = (0, exports.traverseReadonlyNonEmptyArrayWithIndex)(f);
                            return function (as) { return (_.isNonEmpty(as) ? g(as) : exports.ApT); };
                        };
                        exports.traverseReadonlyArrayWithIndex = traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArray = function (f) {
                            return (0, exports.traverseReadonlyArrayWithIndex)(function (_, a) { return f(a); });
                        };
                        exports.traverseArray = traverseArray;
                        /**
                         * Equivalent to `ReadonlyArray#sequence(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.sequenceArray =
/*#__PURE__*/ (0, exports.traverseArray)(function_1.identity);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chain = exports.flatMap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chainFirst = exports.tap;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `Refinement` module instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function getRefinement(getOption) {
                            return function (a) { return (0, exports.isSome)(getOption(a)); };
                        }
                        exports.getRefinement = getRefinement;
                        /**
                         * Use [`chainNullableK`](#chainnullablek) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.mapNullable = exports.chainNullableK;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `O.Functor` instead of `O.option`
                         * (where `O` is from `import O from 'fp-ts/Option'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.option = {
                            URI: exports.URI,
                            map: _map,
                            of: exports.of,
                            ap: _ap,
                            chain: exports.flatMap,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            zero: exports.zero,
                            alt: _alt,
                            extend: _extend,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            wither: _wither,
                            wilt: _wilt,
                            throwError: exports.throwError
                        };
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getApplySemigroup = (0, Apply_1.getApplySemigroup)(exports.Apply);
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getApplyMonoid = (0, Applicative_1.getApplicativeMonoid)(exports.Applicative);
                        /**
                         * Use
                         *
                         * ```ts
                         * import { first } from 'fp-ts/Semigroup'
                         * import { getMonoid } from 'fp-ts/Option'
                         *
                         * getMonoid(first())
                         * ```
                         *
                         * instead.
                         *
                         * Monoid returning the left-most non-`None` value
                         *
                         * | x       | y       | concat(x, y) |
                         * | ------- | ------- | ------------ |
                         * | none    | none    | none         |
                         * | some(a) | none    | some(a)      |
                         * | none    | some(b) | some(b)      |
                         * | some(a) | some(b) | some(a)      |
                         *
                         * @example
                         * import { getFirstMonoid, some, none } from 'fp-ts/Option'
                         *
                         * const M = getFirstMonoid<number>()
                         * assert.deepStrictEqual(M.concat(none, none), none)
                         * assert.deepStrictEqual(M.concat(some(1), none), some(1))
                         * assert.deepStrictEqual(M.concat(none, some(2)), some(2))
                         * assert.deepStrictEqual(M.concat(some(1), some(2)), some(1))
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getFirstMonoid = function () { return (0, exports.getMonoid)((0, Semigroup_1.first)()); };
                        exports.getFirstMonoid = getFirstMonoid;
                        /**
                         * Use
                         *
                         * ```ts
                         * import { last } from 'fp-ts/Semigroup'
                         * import { getMonoid } from 'fp-ts/Option'
                         *
                         * getMonoid(last())
                         * ```
                         *
                         * instead.
                         *
                         * Monoid returning the right-most non-`None` value
                         *
                         * | x       | y       | concat(x, y) |
                         * | ------- | ------- | ------------ |
                         * | none    | none    | none         |
                         * | some(a) | none    | some(a)      |
                         * | none    | some(b) | some(b)      |
                         * | some(a) | some(b) | some(b)      |
                         *
                         * @example
                         * import { getLastMonoid, some, none } from 'fp-ts/Option'
                         *
                         * const M = getLastMonoid<number>()
                         * assert.deepStrictEqual(M.concat(none, none), none)
                         * assert.deepStrictEqual(M.concat(some(1), none), some(1))
                         * assert.deepStrictEqual(M.concat(none, some(2)), some(2))
                         * assert.deepStrictEqual(M.concat(some(1), some(2)), some(2))
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getLastMonoid = function () { return (0, exports.getMonoid)((0, Semigroup_1.last)()); };
                        exports.getLastMonoid = getLastMonoid;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Ord.js":
/*!***************************************!*\
  !*** ./node_modules/fp-ts/lib/Ord.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.ordDate = exports.ordNumber = exports.ordString = exports.ordBoolean = exports.ord = exports.getDualOrd = exports.getTupleOrd = exports.between = exports.clamp = exports.max = exports.min = exports.geq = exports.leq = exports.gt = exports.lt = exports.equals = exports.trivial = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.URI = exports.contramap = exports.reverse = exports.tuple = exports.fromCompare = exports.equalsDefault = void 0;
                        var Eq_1 = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/lib/Eq.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        // -------------------------------------------------------------------------------------
                        // defaults
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category defaults
                         * @since 2.10.0
                         */
                        var equalsDefault = function (compare) {
                            return function (first, second) {
                                return first === second || compare(first, second) === 0;
                            };
                        };
                        exports.equalsDefault = equalsDefault;
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var fromCompare = function (compare) {
                            return ({
                                equals: (0, exports.equalsDefault)(compare),
                                compare: function (first, second) { return (first === second ? 0 : compare(first, second)); }
                            });
                        };
                        exports.fromCompare = fromCompare;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * Given a tuple of `Ord`s returns an `Ord` for the tuple.
                         *
                         * @example
                         * import { tuple } from 'fp-ts/Ord'
                         * import * as B from 'fp-ts/boolean'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         *
                         * const O = tuple(S.Ord, N.Ord, B.Ord)
                         * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)
                         * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)
                         * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)
                         *
                         * @since 2.10.0
                         */
                        var tuple = function () {
                            var ords = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                ords[_i] = arguments[_i];
                            }
                            return (0, exports.fromCompare)(function (first, second) {
                                var i = 0;
                                for (; i < ords.length - 1; i++) {
                                    var r = ords[i].compare(first[i], second[i]);
                                    if (r !== 0) {
                                        return r;
                                    }
                                }
                                return ords[i].compare(first[i], second[i]);
                            });
                        };
                        exports.tuple = tuple;
                        /**
                         * @since 2.10.0
                         */
                        var reverse = function (O) { return (0, exports.fromCompare)(function (first, second) { return O.compare(second, first); }); };
                        exports.reverse = reverse;
                        /* istanbul ignore next */
                        var contramap_ = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.contramap)(f)); };
                        /**
                         * A typical use case for `contramap` would be like, given some `User` type, to construct an `Ord<User>`.
                         *
                         * We can do so with a function from `User -> X` where `X` is some value that we know how to compare
                         * for ordering (meaning we have an `Ord<X>`)
                         *
                         * For example, given the following `User` type, there are lots of possible choices for `X`,
                         * but let's say we want to sort a list of users by `lastName`.
                         *
                         * If we have a way of comparing `lastName`s for ordering (`ordLastName: Ord<string>`) and we know how to go from `User -> string`,
                         * using `contramap` we can do this
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import { contramap, Ord } from 'fp-ts/Ord'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as S from 'fp-ts/string'
                         *
                         * interface User {
                         *   readonly firstName: string
                         *   readonly lastName: string
                         * }
                         *
                         * const ordLastName: Ord<string> = S.Ord
                         *
                         * const ordByLastName: Ord<User> = pipe(
                         *   ordLastName,
                         *   contramap((user) => user.lastName)
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   RA.sort(ordByLastName)([
                         *     { firstName: 'a', lastName: 'd' },
                         *     { firstName: 'c', lastName: 'b' }
                         *   ]),
                         *   [
                         *     { firstName: 'c', lastName: 'b' },
                         *     { firstName: 'a', lastName: 'd' }
                         *   ]
                         * )
                         *
                         * @since 2.0.0
                         */
                        var contramap = function (f) {
                            return function (fa) {
                                return (0, exports.fromCompare)(function (first, second) { return fa.compare(f(first), f(second)); });
                            };
                        };
                        exports.contramap = contramap;
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        exports.URI = 'Ord';
                        /**
                         * A typical use case for the `Semigroup` instance of `Ord` is merging two or more orderings.
                         *
                         * For example the following snippet builds an `Ord` for a type `User` which
                         * sorts by `created` date descending, and **then** `lastName`
                         *
                         * @example
                         * import * as D from 'fp-ts/Date'
                         * import { pipe } from 'fp-ts/function'
                         * import { contramap, getSemigroup, Ord, reverse } from 'fp-ts/Ord'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as S from 'fp-ts/string'
                         *
                         * interface User {
                         *   readonly id: string
                         *   readonly lastName: string
                         *   readonly created: Date
                         * }
                         *
                         * const ordByLastName: Ord<User> = pipe(
                         *   S.Ord,
                         *   contramap((user) => user.lastName)
                         * )
                         *
                         * const ordByCreated: Ord<User> = pipe(
                         *   D.Ord,
                         *   contramap((user) => user.created)
                         * )
                         *
                         * const ordUserByCreatedDescThenLastName = getSemigroup<User>().concat(
                         *   reverse(ordByCreated),
                         *   ordByLastName
                         * )
                         *
                         * assert.deepStrictEqual(
                         *   RA.sort(ordUserByCreatedDescThenLastName)([
                         *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) },
                         *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },
                         *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) }
                         *   ]),
                         *   [
                         *     { id: 'e', lastName: 'f', created: new Date(1980, 10, 30) },
                         *     { id: 'a', lastName: 'b', created: new Date(1973, 10, 30) },
                         *     { id: 'c', lastName: 'd', created: new Date(1973, 10, 30) }
                         *   ]
                         * )
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: function (first, second) {
                                    return (0, exports.fromCompare)(function (a, b) {
                                        var ox = first.compare(a, b);
                                        return ox !== 0 ? ox : second.compare(a, b);
                                    });
                                }
                            });
                        };
                        exports.getSemigroup = getSemigroup;
                        /**
                         * Returns a `Monoid` such that:
                         *
                         * - its `concat(ord1, ord2)` operation will order first by `ord1`, and then by `ord2`
                         * - its `empty` value is an `Ord` that always considers compared elements equal
                         *
                         * @example
                         * import { sort } from 'fp-ts/Array'
                         * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as B from 'fp-ts/boolean'
                         * import { pipe } from 'fp-ts/function'
                         * import { concatAll } from 'fp-ts/Monoid'
                         * import * as N from 'fp-ts/number'
                         *
                         * interface User {
                         *   readonly id: number
                         *   readonly name: string
                         *   readonly age: number
                         *   readonly rememberMe: boolean
                         * }
                         *
                         * const byName = pipe(
                         *   S.Ord,
                         *   contramap((p: User) => p.name)
                         * )
                         *
                         * const byAge = pipe(
                         *   N.Ord,
                         *   contramap((p: User) => p.age)
                         * )
                         *
                         * const byRememberMe = pipe(
                         *   B.Ord,
                         *   contramap((p: User) => p.rememberMe)
                         * )
                         *
                         * const M = getMonoid<User>()
                         *
                         * const users: Array<User> = [
                         *   { id: 1, name: 'Guido', age: 47, rememberMe: false },
                         *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
                         *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
                         *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }
                         * ]
                         *
                         * // sort by name, then by age, then by `rememberMe`
                         * const O1 = concatAll(M)([byName, byAge, byRememberMe])
                         * assert.deepStrictEqual(sort(O1)(users), [
                         *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
                         *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },
                         *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
                         *   { id: 1, name: 'Guido', age: 47, rememberMe: false }
                         * ])
                         *
                         * // now `rememberMe = true` first, then by name, then by age
                         * const O2 = concatAll(M)([reverse(byRememberMe), byName, byAge])
                         * assert.deepStrictEqual(sort(O2)(users), [
                         *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },
                         *   { id: 2, name: 'Guido', age: 46, rememberMe: true },
                         *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },
                         *   { id: 1, name: 'Guido', age: 47, rememberMe: false }
                         * ])
                         *
                         * @category instances
                         * @since 2.4.0
                         */
                        var getMonoid = function () {
                            return ({
                                concat: (0, exports.getSemigroup)().concat,
                                empty: (0, exports.fromCompare)(function () { return 0; })
                            });
                        };
                        exports.getMonoid = getMonoid;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Contravariant = {
                            URI: exports.URI,
                            contramap: contramap_
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.11.0
                         */
                        exports.trivial = {
                            equals: function_1.constTrue,
                            compare: /*#__PURE__*/ (0, function_1.constant)(0)
                        };
                        /**
                         * @since 2.11.0
                         */
                        var equals = function (O) {
                            return function (second) {
                                return function (first) {
                                    return first === second || O.compare(first, second) === 0;
                                };
                            };
                        };
                        exports.equals = equals;
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _strictly less than_ another
                         *
                         * @since 2.0.0
                         */
                        var lt = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) === -1;
                            };
                        };
                        exports.lt = lt;
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _strictly greater than_ another
                         *
                         * @since 2.0.0
                         */
                        var gt = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) === 1;
                            };
                        };
                        exports.gt = gt;
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _non-strictly less than_ another
                         *
                         * @since 2.0.0
                         */
                        var leq = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) !== 1;
                            };
                        };
                        exports.leq = leq;
                        // TODO: curry in v3
                        /**
                         * Test whether one value is _non-strictly greater than_ another
                         *
                         * @since 2.0.0
                         */
                        var geq = function (O) {
                            return function (first, second) {
                                return O.compare(first, second) !== -1;
                            };
                        };
                        exports.geq = geq;
                        // TODO: curry in v3
                        /**
                         * Take the minimum of two values. If they are considered equal, the first argument is chosen
                         *
                         * @since 2.0.0
                         */
                        var min = function (O) {
                            return function (first, second) {
                                return first === second || O.compare(first, second) < 1 ? first : second;
                            };
                        };
                        exports.min = min;
                        // TODO: curry in v3
                        /**
                         * Take the maximum of two values. If they are considered equal, the first argument is chosen
                         *
                         * @since 2.0.0
                         */
                        var max = function (O) {
                            return function (first, second) {
                                return first === second || O.compare(first, second) > -1 ? first : second;
                            };
                        };
                        exports.max = max;
                        /**
                         * Clamp a value between a minimum and a maximum
                         *
                         * @since 2.0.0
                         */
                        var clamp = function (O) {
                            var minO = (0, exports.min)(O);
                            var maxO = (0, exports.max)(O);
                            return function (low, hi) { return function (a) { return maxO(minO(a, hi), low); }; };
                        };
                        exports.clamp = clamp;
                        /**
                         * Test whether a value is between a minimum and a maximum (inclusive)
                         *
                         * @since 2.0.0
                         */
                        var between = function (O) {
                            var ltO = (0, exports.lt)(O);
                            var gtO = (0, exports.gt)(O);
                            return function (low, hi) { return function (a) { return ltO(a, low) || gtO(a, hi) ? false : true; }; };
                        };
                        exports.between = between;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use [`tuple`](#tuple) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getTupleOrd = exports.tuple;
                        /**
                         * Use [`reverse`](#reverse) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getDualOrd = exports.reverse;
                        /**
                         * Use [`Contravariant`](#contravariant) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.ord = exports.Contravariant;
                        // default compare for primitive types
                        function compare(first, second) {
                            return first < second ? -1 : first > second ? 1 : 0;
                        }
                        var strictOrd = {
                            equals: Eq_1.eqStrict.equals,
                            compare: compare
                        };
                        /**
                         * Use [`Ord`](./boolean.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.ordBoolean = strictOrd;
                        /**
                         * Use [`Ord`](./string.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.ordString = strictOrd;
                        /**
                         * Use [`Ord`](./number.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.ordNumber = strictOrd;
                        /**
                         * Use [`Ord`](./Date.ts.html#ord) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.ordDate = (0, function_1.pipe)(exports.ordNumber,
                            /*#__PURE__*/
                            (0, exports.contramap)(function (date) { return date.valueOf(); }));


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Predicate.js":
/*!*********************************************!*\
  !*** ./node_modules/fp-ts/lib/Predicate.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.and = exports.or = exports.not = exports.Contravariant = exports.getMonoidAll = exports.getSemigroupAll = exports.getMonoidAny = exports.getSemigroupAny = exports.URI = exports.contramap = void 0;
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var contramap_ = function (predicate, f) { return (0, function_1.pipe)(predicate, (0, exports.contramap)(f)); };
                        /**
                         * @since 2.11.0
                         */
                        var contramap = function (f) {
                            return function (predicate) {
                                return (0, function_1.flow)(f, predicate);
                            };
                        };
                        exports.contramap = contramap;
                        /**
                         * @category type lambdas
                         * @since 2.11.0
                         */
                        exports.URI = 'Predicate';
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getSemigroupAny = function () {
                            return ({
                                concat: function (first, second) { return (0, function_1.pipe)(first, (0, exports.or)(second)); }
                            });
                        };
                        exports.getSemigroupAny = getSemigroupAny;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getMonoidAny = function () {
                            return ({
                                concat: (0, exports.getSemigroupAny)().concat,
                                empty: function_1.constFalse
                            });
                        };
                        exports.getMonoidAny = getMonoidAny;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getSemigroupAll = function () {
                            return ({
                                concat: function (first, second) { return (0, function_1.pipe)(first, (0, exports.and)(second)); }
                            });
                        };
                        exports.getSemigroupAll = getSemigroupAll;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getMonoidAll = function () {
                            return ({
                                concat: (0, exports.getSemigroupAll)().concat,
                                empty: function_1.constTrue
                            });
                        };
                        exports.getMonoidAll = getMonoidAll;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.Contravariant = {
                            URI: exports.URI,
                            contramap: contramap_
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.11.0
                         */
                        var not = function (predicate) {
                            return function (a) {
                                return !predicate(a);
                            };
                        };
                        exports.not = not;
                        /**
                         * @since 2.11.0
                         */
                        var or = function (second) {
                            return function (first) {
                                return function (a) {
                                    return first(a) || second(a);
                                };
                            };
                        };
                        exports.or = or;
                        /**
                         * @since 2.11.0
                         */
                        var and = function (second) {
                            return function (first) {
                                return function (a) {
                                    return first(a) && second(a);
                                };
                            };
                        };
                        exports.and = and;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/ReadonlyArray.js":
/*!*************************************************!*\
  !*** ./node_modules/fp-ts/lib/ReadonlyArray.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.sort = exports.lefts = exports.rights = exports.reverse = exports.modifyAt = exports.deleteAt = exports.updateAt = exports.insertAt = exports.findLastIndex = exports.findLastMap = exports.findLast = exports.findFirstMap = exports.findFirst = exports.findIndex = exports.dropLeftWhile = exports.dropRight = exports.dropLeft = exports.spanLeft = exports.takeLeftWhile = exports.takeRight = exports.takeLeft = exports.init = exports.tail = exports.last = exports.head = exports.lookup = exports.isOutOfBound = exports.size = exports.scanRight = exports.scanLeft = exports.chainWithIndex = exports.foldRight = exports.matchRight = exports.matchRightW = exports.foldLeft = exports.matchLeft = exports.matchLeftW = exports.match = exports.matchW = exports.fromEither = exports.fromOption = exports.fromPredicate = exports.replicate = exports.makeBy = exports.appendW = exports.append = exports.prependW = exports.prepend = exports.isNonEmpty = exports.isEmpty = void 0;
                        exports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.reduceRight = exports.reduceWithIndex = exports.foldMap = exports.reduce = exports.foldMapWithIndex = exports.duplicate = exports.extend = exports.filterWithIndex = exports.partitionMapWithIndex = exports.partitionMap = exports.partitionWithIndex = exports.partition = exports.compact = exports.filterMap = exports.filterMapWithIndex = exports.filter = exports.separate = exports.mapWithIndex = exports.map = exports.flatten = exports.flatMap = exports.ap = exports.alt = exports.altW = exports.zero = exports.of = exports._chainRecBreadthFirst = exports._chainRecDepthFirst = exports.difference = exports.intersection = exports.union = exports.concat = exports.concatW = exports.comprehension = exports.fromOptionK = exports.chunksOf = exports.splitAt = exports.chop = exports.sortBy = exports.uniq = exports.elem = exports.rotate = exports.intersperse = exports.prependAll = exports.unzip = exports.zip = exports.zipWith = void 0;
                        exports.toArray = exports.unsafeDeleteAt = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.fromEitherK = exports.FromEither = exports.filterE = exports.Witherable = exports.ChainRecBreadthFirst = exports.chainRecBreadthFirst = exports.ChainRecDepthFirst = exports.chainRecDepthFirst = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.FilterableWithIndex = exports.Filterable = exports.Compactable = exports.Extend = exports.Alternative = exports.guard = exports.Zero = exports.Alt = exports.Unfoldable = exports.chainFirst = exports.Monad = exports.Chain = exports.Applicative = exports.apSecond = exports.apFirst = exports.Apply = exports.FunctorWithIndex = exports.Pointed = exports.flap = exports.Functor = exports.getDifferenceMagma = exports.getIntersectionSemigroup = exports.getUnionMonoid = exports.getUnionSemigroup = exports.getOrd = exports.getEq = exports.getMonoid = exports.getSemigroup = exports.getShow = exports.URI = exports.unfold = exports.wilt = exports.wither = exports.traverseWithIndex = void 0;
                        exports.readonlyArray = exports.prependToAll = exports.snoc = exports.cons = exports.range = exports.chain = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.intercalate = exports.exists = exports.some = exports.every = exports.empty = exports.fromArray = void 0;
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var Chain_1 = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js");
                        var Eq_1 = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/lib/Eq.js");
                        var FromEither_1 = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/lib/FromEither.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        var N = __importStar(__webpack_require__(/*! ./number */ "./node_modules/fp-ts/lib/number.js"));
                        var Ord_1 = __webpack_require__(/*! ./Ord */ "./node_modules/fp-ts/lib/Ord.js");
                        var RNEA = __importStar(__webpack_require__(/*! ./ReadonlyNonEmptyArray */ "./node_modules/fp-ts/lib/ReadonlyNonEmptyArray.js"));
                        var Separated_1 = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/lib/Separated.js");
                        var Witherable_1 = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/lib/Witherable.js");
                        var Zero_1 = __webpack_require__(/*! ./Zero */ "./node_modules/fp-ts/lib/Zero.js");
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * Test whether a `ReadonlyArray` is empty.
                         *
                         * @example
                         * import { isEmpty } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.strictEqual(isEmpty([]), true)
                         *
                         * @category refinements
                         * @since 2.5.0
                         */
                        var isEmpty = function (as) { return as.length === 0; };
                        exports.isEmpty = isEmpty;
                        /**
                         * Test whether a `ReadonlyArray` is non empty.
                         *
                         * @category refinements
                         * @since 2.5.0
                         */
                        exports.isNonEmpty = RNEA.isNonEmpty;
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Prepend an element to the front of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { prepend } from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([2, 3, 4], prepend(1)), [1, 2, 3, 4])
                         *
                         * @since 2.10.0
                         */
                        exports.prepend = RNEA.prepend;
                        /**
                         * Less strict version of [`prepend`](#prepend).
                         *
                         * @since 2.11.0
                         */
                        exports.prependW = RNEA.prependW;
                        /**
                         * Append an element to the end of a `ReadonlyArray`, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { append } from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe([1, 2, 3], append(4)), [1, 2, 3, 4])
                         *
                         * @since 2.10.0
                         */
                        exports.append = RNEA.append;
                        /**
                         * Less strict version of [`append`](#append).
                         *
                         * @since 2.11.0
                         */
                        exports.appendW = RNEA.appendW;
                        /**
                         * Return a `ReadonlyArray` of length `n` with element `i` initialized with `f(i)`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { makeBy } from 'fp-ts/ReadonlyArray'
                         *
                         * const double = (n: number): number => n * 2
                         * assert.deepStrictEqual(makeBy(5, double), [0, 2, 4, 6, 8])
                         *
                         * @category constructors
                         * @since 2.5.0
                         */
                        var makeBy = function (n, f) { return (n <= 0 ? exports.empty : RNEA.makeBy(f)(n)); };
                        exports.makeBy = makeBy;
                        /**
                         * Create a `ReadonlyArray` containing a value repeated the specified number of times.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import { replicate } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(replicate(3, 'a'), ['a', 'a', 'a'])
                         *
                         * @category constructors
                         * @since 2.5.0
                         */
                        var replicate = function (n, a) { return (0, exports.makeBy)(n, function () { return a; }); };
                        exports.replicate = replicate;
                        function fromPredicate(predicate) {
                            return function (a) { return (predicate(a) ? [a] : exports.empty); };
                        }
                        exports.fromPredicate = fromPredicate;
                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category conversions
                         * @since 2.11.0
                         */
                        var fromOption = function (ma) { return (_.isNone(ma) ? exports.empty : [ma.value]); };
                        exports.fromOption = fromOption;
                        /**
                         * Transforms an `Either` to a `ReadonlyArray`.
                         *
                         * @category conversions
                         * @since 2.11.0
                         */
                        var fromEither = function (e) { return (_.isLeft(e) ? exports.empty : [e.right]); };
                        exports.fromEither = fromEither;
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return (0, exports.isNonEmpty)(as) ? onNonEmpty(as) : onEmpty();
                            };
                        };
                        exports.matchW = matchW;
                        /**
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        exports.match = exports.matchW;
                        /**
                         * Less strict version of [`matchLeft`](#matchleft).
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchLeftW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return (0, exports.isNonEmpty)(as) ? onNonEmpty(RNEA.head(as), RNEA.tail(as)) : onEmpty();
                            };
                        };
                        exports.matchLeftW = matchLeftW;
                        /**
                         * Break a `ReadonlyArray` into its first element and remaining elements.
                         *
                         * @example
                         * import { matchLeft } from 'fp-ts/ReadonlyArray'
                         *
                         * const len: <A>(as: ReadonlyArray<A>) => number = matchLeft(() => 0, (_, tail) => 1 + len(tail))
                         * assert.strictEqual(len([1, 2, 3]), 3)
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.matchLeft = exports.matchLeftW;
                        /**
                         * Alias of [`matchLeft`](#matchleft).
                         *
                         * @category pattern matching
                         * @since 2.5.0
                         */
                        exports.foldLeft = exports.matchLeft;
                        /**
                         * Less strict version of [`matchRight`](#matchright).
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchRightW = function (onEmpty, onNonEmpty) {
                            return function (as) {
                                return (0, exports.isNonEmpty)(as) ? onNonEmpty(RNEA.init(as), RNEA.last(as)) : onEmpty();
                            };
                        };
                        exports.matchRightW = matchRightW;
                        /**
                         * Break a `ReadonlyArray` into its initial elements and the last element.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.matchRight = exports.matchRightW;
                        /**
                         * Alias of [`matchRight`](#matchright).
                         *
                         * @category pattern matching
                         * @since 2.5.0
                         */
                        exports.foldRight = exports.matchRight;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category sequencing
                         * @since 2.7.0
                         */
                        var chainWithIndex = function (f) {
                            return function (as) {
                                if ((0, exports.isEmpty)(as)) {
                                    return exports.empty;
                                }
                                var out = [];
                                for (var i = 0; i < as.length; i++) {
                                    out.push.apply(out, f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        exports.chainWithIndex = chainWithIndex;
                        /**
                         * Same as `reduce` but it carries over the intermediate steps.
                         *
                         * @example
                         * import { scanLeft } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(scanLeft(10, (b, a: number) => b - a)([1, 2, 3]), [10, 9, 7, 4])
                         *
                         * @since 2.5.0
                         */
                        var scanLeft = function (b, f) {
                            return function (as) {
                                var len = as.length;
                                var out = new Array(len + 1);
                                out[0] = b;
                                for (var i = 0; i < len; i++) {
                                    out[i + 1] = f(out[i], as[i]);
                                }
                                return out;
                            };
                        };
                        exports.scanLeft = scanLeft;
                        /**
                         * Fold an array from the right, keeping all intermediate results instead of only the final result
                         *
                         * @example
                         * import { scanRight } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(scanRight(10, (a: number, b) => b - a)([1, 2, 3]), [4, 5, 7, 10])
                         *
                         * @since 2.5.0
                         */
                        var scanRight = function (b, f) {
                            return function (as) {
                                var len = as.length;
                                var out = new Array(len + 1);
                                out[len] = b;
                                for (var i = len - 1; i >= 0; i--) {
                                    out[i] = f(as[i], out[i + 1]);
                                }
                                return out;
                            };
                        };
                        exports.scanRight = scanRight;
                        /**
                         * Calculate the number of elements in a `ReadonlyArray`.
                         *
                         * @since 2.10.0
                         */
                        var size = function (as) { return as.length; };
                        exports.size = size;
                        /**
                         * Test whether an array contains a particular index
                         *
                         * @since 2.5.0
                         */
                        exports.isOutOfBound = RNEA.isOutOfBound;
                        function lookup(i, as) {
                            return as === undefined ? function (as) { return lookup(i, as); } : (0, exports.isOutOfBound)(i, as) ? _.none : _.some(as[i]);
                        }
                        exports.lookup = lookup;
                        /**
                         * Get the first element in an array, or `None` if the array is empty
                         *
                         * @example
                         * import { head } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(head([1, 2, 3]), some(1))
                         * assert.deepStrictEqual(head([]), none)
                         *
                         * @since 2.5.0
                         */
                        var head = function (as) { return ((0, exports.isNonEmpty)(as) ? _.some(RNEA.head(as)) : _.none); };
                        exports.head = head;
                        /**
                         * Get the last element in an array, or `None` if the array is empty
                         *
                         * @example
                         * import { last } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(last([1, 2, 3]), some(3))
                         * assert.deepStrictEqual(last([]), none)
                         *
                         * @since 2.5.0
                         */
                        var last = function (as) { return ((0, exports.isNonEmpty)(as) ? _.some(RNEA.last(as)) : _.none); };
                        exports.last = last;
                        /**
                         * Get all but the first element of an array, creating a new array, or `None` if the array is empty
                         *
                         * @example
                         * import { tail } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(tail([1, 2, 3]), some([2, 3]))
                         * assert.deepStrictEqual(tail([]), none)
                         *
                         * @since 2.5.0
                         */
                        var tail = function (as) {
                            return (0, exports.isNonEmpty)(as) ? _.some(RNEA.tail(as)) : _.none;
                        };
                        exports.tail = tail;
                        /**
                         * Get all but the last element of an array, creating a new array, or `None` if the array is empty
                         *
                         * @example
                         * import { init } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(init([1, 2, 3]), some([1, 2]))
                         * assert.deepStrictEqual(init([]), none)
                         *
                         * @since 2.5.0
                         */
                        var init = function (as) {
                            return (0, exports.isNonEmpty)(as) ? _.some(RNEA.init(as)) : _.none;
                        };
                        exports.init = init;
                        /**
                         * Keep only a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.takeLeft(2)), [1, 2])
                         *
                         * // out of bounds
                         * assert.strictEqual(pipe(input, RA.takeLeft(4)), input)
                         * assert.strictEqual(pipe(input, RA.takeLeft(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var takeLeft = function (n) {
                            return function (as) {
                                return (0, exports.isOutOfBound)(n, as) ? as : n === 0 ? exports.empty : as.slice(0, n);
                            };
                        };
                        exports.takeLeft = takeLeft;
                        /**
                         * Keep only a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.takeRight(2)), [2, 3])
                         *
                         * // out of bounds
                         * assert.strictEqual(pipe(input, RA.takeRight(4)), input)
                         * assert.strictEqual(pipe(input, RA.takeRight(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var takeRight = function (n) {
                            return function (as) {
                                return (0, exports.isOutOfBound)(n, as) ? as : n === 0 ? exports.empty : as.slice(-n);
                            };
                        };
                        exports.takeRight = takeRight;
                        function takeLeftWhile(predicate) {
                            return function (as) {
                                var out = [];
                                for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {
                                    var a = as_1[_i];
                                    if (!predicate(a)) {
                                        break;
                                    }
                                    out.push(a);
                                }
                                var len = out.length;
                                return len === as.length ? as : len === 0 ? exports.empty : out;
                            };
                        }
                        exports.takeLeftWhile = takeLeftWhile;
                        var spanLeftIndex = function (as, predicate) {
                            var l = as.length;
                            var i = 0;
                            for (; i < l; i++) {
                                if (!predicate(as[i])) {
                                    break;
                                }
                            }
                            return i;
                        };
                        function spanLeft(predicate) {
                            return function (as) {
                                var _a = (0, exports.splitAt)(spanLeftIndex(as, predicate))(as), init = _a[0], rest = _a[1];
                                return { init: init, rest: rest };
                            };
                        }
                        exports.spanLeft = spanLeft;
                        /**
                         * Drop a max number of elements from the start of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.dropLeft(2)), [3])
                         * assert.strictEqual(pipe(input, RA.dropLeft(0)), input)
                         * assert.strictEqual(pipe(input, RA.dropLeft(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var dropLeft = function (n) {
                            return function (as) {
                                return n <= 0 || (0, exports.isEmpty)(as) ? as : n >= as.length ? exports.empty : as.slice(n, as.length);
                            };
                        };
                        exports.dropLeft = dropLeft;
                        /**
                         * Drop a max number of elements from the end of an `ReadonlyArray`, creating a new `ReadonlyArray`.
                         *
                         * **Note**. `n` is normalized to a non negative integer.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const input: ReadonlyArray<number> = [1, 2, 3]
                         * assert.deepStrictEqual(pipe(input, RA.dropRight(2)), [1])
                         * assert.strictEqual(pipe(input, RA.dropRight(0)), input)
                         * assert.strictEqual(pipe(input, RA.dropRight(-1)), input)
                         *
                         * @since 2.5.0
                         */
                        var dropRight = function (n) {
                            return function (as) {
                                return n <= 0 || (0, exports.isEmpty)(as) ? as : n >= as.length ? exports.empty : as.slice(0, as.length - n);
                            };
                        };
                        exports.dropRight = dropRight;
                        function dropLeftWhile(predicate) {
                            return function (as) {
                                var i = spanLeftIndex(as, predicate);
                                return i === 0 ? as : i === as.length ? exports.empty : as.slice(i);
                            };
                        }
                        exports.dropLeftWhile = dropLeftWhile;
                        /**
                         * Find the first index for which a predicate holds
                         *
                         * @example
                         * import { findIndex } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(findIndex((n: number) => n === 2)([1, 2, 3]), some(1))
                         * assert.deepStrictEqual(findIndex((n: number) => n === 2)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var findIndex = function (predicate) {
                            return function (as) {
                                for (var i = 0; i < as.length; i++) {
                                    if (predicate(as[i])) {
                                        return _.some(i);
                                    }
                                }
                                return _.none;
                            };
                        };
                        exports.findIndex = findIndex;
                        function findFirst(predicate) {
                            return function (as) {
                                for (var i = 0; i < as.length; i++) {
                                    if (predicate(as[i])) {
                                        return _.some(as[i]);
                                    }
                                }
                                return _.none;
                            };
                        }
                        exports.findFirst = findFirst;
                        /**
                         * Find the first element returned by an option based selector function
                         *
                         * @example
                         * import { findFirstMap } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age?: number
                         * }
                         *
                         * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
                         *
                         * // returns the name of the first person that has an age
                         * assert.deepStrictEqual(findFirstMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Mary'))
                         *
                         * @since 2.5.0
                         */
                        var findFirstMap = function (f) {
                            return function (as) {
                                for (var i = 0; i < as.length; i++) {
                                    var out = f(as[i]);
                                    if (_.isSome(out)) {
                                        return out;
                                    }
                                }
                                return _.none;
                            };
                        };
                        exports.findFirstMap = findFirstMap;
                        function findLast(predicate) {
                            return function (as) {
                                for (var i = as.length - 1; i >= 0; i--) {
                                    if (predicate(as[i])) {
                                        return _.some(as[i]);
                                    }
                                }
                                return _.none;
                            };
                        }
                        exports.findLast = findLast;
                        /**
                         * Find the last element returned by an option based selector function
                         *
                         * @example
                         * import { findLastMap } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age?: number
                         * }
                         *
                         * const persons: ReadonlyArray<Person> = [{ name: 'John' }, { name: 'Mary', age: 45 }, { name: 'Joey', age: 28 }]
                         *
                         * // returns the name of the last person that has an age
                         * assert.deepStrictEqual(findLastMap((p: Person) => (p.age === undefined ? none : some(p.name)))(persons), some('Joey'))
                         *
                         * @since 2.5.0
                         */
                        var findLastMap = function (f) {
                            return function (as) {
                                for (var i = as.length - 1; i >= 0; i--) {
                                    var out = f(as[i]);
                                    if (_.isSome(out)) {
                                        return out;
                                    }
                                }
                                return _.none;
                            };
                        };
                        exports.findLastMap = findLastMap;
                        /**
                         * Returns the index of the last element of the list which matches the predicate
                         *
                         * @example
                         * import { findLastIndex } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * interface X {
                         *   readonly a: number
                         *   readonly b: number
                         * }
                         * const xs: ReadonlyArray<X> = [{ a: 1, b: 0 }, { a: 1, b: 1 }]
                         * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 1)(xs), some(1))
                         * assert.deepStrictEqual(findLastIndex((x: { readonly a: number }) => x.a === 4)(xs), none)
                         *
                         *
                         * @since 2.5.0
                         */
                        var findLastIndex = function (predicate) {
                            return function (as) {
                                for (var i = as.length - 1; i >= 0; i--) {
                                    if (predicate(as[i])) {
                                        return _.some(i);
                                    }
                                }
                                return _.none;
                            };
                        };
                        exports.findLastIndex = findLastIndex;
                        /**
                         * Insert an element at the specified index, creating a new array, or returning `None` if the index is out of bounds
                         *
                         * @example
                         * import { insertAt } from 'fp-ts/ReadonlyArray'
                         * import { some } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(insertAt(2, 5)([1, 2, 3, 4]), some([1, 2, 5, 3, 4]))
                         *
                         * @since 2.5.0
                         */
                        var insertAt = function (i, a) {
                            return function (as) {
                                return i < 0 || i > as.length ? _.none : _.some(RNEA.unsafeInsertAt(i, a, as));
                            };
                        };
                        exports.insertAt = insertAt;
                        /**
                         * Change the element at the specified index, creating a new array, or returning `None` if the index is out of bounds
                         *
                         * @example
                         * import { updateAt } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(updateAt(1, 1)([1, 2, 3]), some([1, 1, 3]))
                         * assert.deepStrictEqual(updateAt(1, 1)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var updateAt = function (i, a) {
                            return (0, exports.modifyAt)(i, function () { return a; });
                        };
                        exports.updateAt = updateAt;
                        /**
                         * Delete the element at the specified index, creating a new array, or returning `None` if the index is out of bounds
                         *
                         * @example
                         * import { deleteAt } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * assert.deepStrictEqual(deleteAt(0)([1, 2, 3]), some([2, 3]))
                         * assert.deepStrictEqual(deleteAt(1)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var deleteAt = function (i) {
                            return function (as) {
                                return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeDeleteAt)(i, as));
                            };
                        };
                        exports.deleteAt = deleteAt;
                        /**
                         * Apply a function to the element at the specified index, creating a new array, or returning `None` if the index is out
                         * of bounds
                         *
                         * @example
                         * import { modifyAt } from 'fp-ts/ReadonlyArray'
                         * import { some, none } from 'fp-ts/Option'
                         *
                         * const double = (x: number): number => x * 2
                         * assert.deepStrictEqual(modifyAt(1, double)([1, 2, 3]), some([1, 4, 3]))
                         * assert.deepStrictEqual(modifyAt(1, double)([]), none)
                         *
                         * @since 2.5.0
                         */
                        var modifyAt = function (i, f) {
                            return function (as) {
                                return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeUpdateAt)(i, f(as[i]), as));
                            };
                        };
                        exports.modifyAt = modifyAt;
                        /**
                         * Reverse an array, creating a new array
                         *
                         * @example
                         * import { reverse } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(reverse([1, 2, 3]), [3, 2, 1])
                         *
                         * @since 2.5.0
                         */
                        var reverse = function (as) { return (as.length <= 1 ? as : as.slice().reverse()); };
                        exports.reverse = reverse;
                        /**
                         * Extracts from an array of `Either` all the `Right` elements. All the `Right` elements are extracted in order
                         *
                         * @example
                         * import { rights } from 'fp-ts/ReadonlyArray'
                         * import { right, left } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(rights([right(1), left('foo'), right(2)]), [1, 2])
                         *
                         * @since 2.5.0
                         */
                        var rights = function (as) {
                            var r = [];
                            for (var i = 0; i < as.length; i++) {
                                var a = as[i];
                                if (a._tag === 'Right') {
                                    r.push(a.right);
                                }
                            }
                            return r;
                        };
                        exports.rights = rights;
                        /**
                         * Extracts from an array of `Either` all the `Left` elements. All the `Left` elements are extracted in order
                         *
                         * @example
                         * import { lefts } from 'fp-ts/ReadonlyArray'
                         * import { left, right } from 'fp-ts/Either'
                         *
                         * assert.deepStrictEqual(lefts([right(1), left('foo'), right(2)]), ['foo'])
                         *
                         * @since 2.5.0
                         */
                        var lefts = function (as) {
                            var r = [];
                            for (var i = 0; i < as.length; i++) {
                                var a = as[i];
                                if (a._tag === 'Left') {
                                    r.push(a.left);
                                }
                            }
                            return r;
                        };
                        exports.lefts = lefts;
                        /**
                         * Sort the elements of an array in increasing order, creating a new array
                         *
                         * @example
                         * import { sort } from 'fp-ts/ReadonlyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(sort(N.Ord)([3, 2, 1]), [1, 2, 3])
                         *
                         * @since 2.5.0
                         */
                        var sort = function (O) {
                            return function (as) {
                                return as.length <= 1 ? as : as.slice().sort(O.compare);
                            };
                        };
                        exports.sort = sort;
                        // TODO: curry and make data-last in v3
                        /**
                         * Apply a function to pairs of elements at the same index in two arrays, collecting the results in a new array. If one
                         * input array is short, excess elements of the longer array are discarded.
                         *
                         * @example
                         * import { zipWith } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(zipWith([1, 2, 3], ['a', 'b', 'c', 'd'], (n, s) => s + n), ['a1', 'b2', 'c3'])
                         *
                         * @since 2.5.0
                         */
                        var zipWith = function (fa, fb, f) {
                            var fc = [];
                            var len = Math.min(fa.length, fb.length);
                            for (var i = 0; i < len; i++) {
                                fc[i] = f(fa[i], fb[i]);
                            }
                            return fc;
                        };
                        exports.zipWith = zipWith;
                        function zip(as, bs) {
                            if (bs === undefined) {
                                return function (bs) { return zip(bs, as); };
                            }
                            return (0, exports.zipWith)(as, bs, function (a, b) { return [a, b]; });
                        }
                        exports.zip = zip;
                        /**
                         * The function is reverse of `zip`. Takes an array of pairs and return two corresponding arrays
                         *
                         * @example
                         * import { unzip } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(unzip([[1, 'a'], [2, 'b'], [3, 'c']]), [[1, 2, 3], ['a', 'b', 'c']])
                         *
                         * @since 2.5.0
                         */
                        var unzip = function (as) {
                            var fa = [];
                            var fb = [];
                            for (var i = 0; i < as.length; i++) {
                                fa[i] = as[i][0];
                                fb[i] = as[i][1];
                            }
                            return [fa, fb];
                        };
                        exports.unzip = unzip;
                        /**
                         * Prepend an element to every member of an array
                         *
                         * @example
                         * import { prependAll } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.10.0
                         */
                        var prependAll = function (middle) {
                            var f = RNEA.prependAll(middle);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };
                        };
                        exports.prependAll = prependAll;
                        /**
                         * Places an element in between members of an array
                         *
                         * @example
                         * import { intersperse } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.9.0
                         */
                        var intersperse = function (middle) {
                            var f = RNEA.intersperse(middle);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };
                        };
                        exports.intersperse = intersperse;
                        /**
                         * Rotate a `ReadonlyArray` by `n` steps.
                         *
                         * @example
                         * import { rotate } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
                         *
                         * @since 2.5.0
                         */
                        var rotate = function (n) {
                            var f = RNEA.rotate(n);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };
                        };
                        exports.rotate = rotate;
                        function elem(E) {
                            return function (a, as) {
                                if (as === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (as) { return elemE_1(a, as); };
                                }
                                var predicate = function (element) { return E.equals(element, a); };
                                var i = 0;
                                for (; i < as.length; i++) {
                                    if (predicate(as[i])) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                        }
                        exports.elem = elem;
                        /**
                         * Remove duplicates from an array, keeping the first occurrence of an element.
                         *
                         * @example
                         * import { uniq } from 'fp-ts/ReadonlyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])
                         *
                         * @since 2.5.0
                         */
                        var uniq = function (E) {
                            var f = RNEA.uniq(E);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };
                        };
                        exports.uniq = uniq;
                        /**
                         * Sort the elements of an array in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,
                         * etc...
                         *
                         * @example
                         * import { sortBy } from 'fp-ts/ReadonlyArray'
                         * import { contramap } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Person {
                         *   readonly name: string
                         *   readonly age: number
                         * }
                         * const byName = pipe(S.Ord, contramap((p: Person) => p.name))
                         * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))
                         *
                         * const sortByNameByAge = sortBy([byName, byAge])
                         *
                         * const persons = [{ name: 'a', age: 1 }, { name: 'b', age: 3 }, { name: 'c', age: 2 }, { name: 'b', age: 2 }]
                         * assert.deepStrictEqual(sortByNameByAge(persons), [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 2 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 }
                         * ])
                         *
                         * @since 2.5.0
                         */
                        var sortBy = function (ords) {
                            var f = RNEA.sortBy(ords);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : as); };
                        };
                        exports.sortBy = sortBy;
                        /**
                         * A useful recursion pattern for processing a `ReadonlyArray` to produce a new `ReadonlyArray`, often used for "chopping" up the input
                         * `ReadonlyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyArray` and produce a
                         * value and the tail of the `ReadonlyArray`.
                         *
                         * @example
                         * import { Eq } from 'fp-ts/Eq'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const group = <A>(S: Eq<A>): ((as: ReadonlyArray<A>) => ReadonlyArray<ReadonlyArray<A>>) => {
                         *   return RA.chop(as => {
                         *     const { init, rest } = pipe(as, RA.spanLeft((a: A) => S.equals(a, as[0])))
                         *     return [init, rest]
                         *   })
                         * }
                         * assert.deepStrictEqual(group(N.Eq)([1, 1, 2, 3, 3, 4]), [[1, 1], [2], [3, 3], [4]])
                         *
                         * @since 2.5.0
                         */
                        var chop = function (f) {
                            var g = RNEA.chop(f);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? g(as) : exports.empty); };
                        };
                        exports.chop = chop;
                        /**
                         * Splits a `ReadonlyArray` into two pieces, the first piece has max `n` elements.
                         *
                         * @example
                         * import { splitAt } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(splitAt(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])
                         *
                         * @since 2.5.0
                         */
                        var splitAt = function (n) {
                            return function (as) {
                                return n >= 1 && (0, exports.isNonEmpty)(as) ? RNEA.splitAt(n)(as) : (0, exports.isEmpty)(as) ? [as, exports.empty] : [exports.empty, as];
                            };
                        };
                        exports.splitAt = splitAt;
                        /**
                         * Splits a `ReadonlyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of
                         * the `ReadonlyArray`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive
                         * definition of `chunksOf`; it satisfies the property that:
                         *
                         * ```ts
                         * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))
                         * ```
                         *
                         * whenever `n` evenly divides the length of `as`.
                         *
                         * @example
                         * import { chunksOf } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(chunksOf(2)([1, 2, 3, 4, 5]), [[1, 2], [3, 4], [5]])
                         *
                         * @since 2.5.0
                         */
                        var chunksOf = function (n) {
                            var f = RNEA.chunksOf(n);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? f(as) : exports.empty); };
                        };
                        exports.chunksOf = chunksOf;
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        var fromOptionK = function (f) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return (0, exports.fromOption)(f.apply(void 0, a));
                            };
                        };
                        exports.fromOptionK = fromOptionK;
                        function comprehension(input, f, g) {
                            if (g === void 0) { g = function () { return true; }; }
                            var go = function (scope, input) {
                                return (0, exports.isNonEmpty)(input)
                                    ? (0, exports.flatMap)(RNEA.head(input), function (a) { return go((0, function_1.pipe)(scope, (0, exports.append)(a)), RNEA.tail(input)); })
                                    : g.apply(void 0, scope) ? [f.apply(void 0, scope)]
                                        : exports.empty;
                            };
                            return go(exports.empty, input);
                        }
                        exports.comprehension = comprehension;
                        /**
                         * @since 2.11.0
                         */
                        var concatW = function (second) {
                            return function (first) {
                                return (0, exports.isEmpty)(first) ? second : (0, exports.isEmpty)(second) ? first : first.concat(second);
                            };
                        };
                        exports.concatW = concatW;
                        /**
                         * @since 2.11.0
                         */
                        exports.concat = exports.concatW;
                        function union(E) {
                            var unionE = RNEA.union(E);
                            return function (first, second) {
                                if (second === undefined) {
                                    var unionE_1 = union(E);
                                    return function (second) { return unionE_1(second, first); };
                                }
                                return (0, exports.isNonEmpty)(first) && (0, exports.isNonEmpty)(second) ? unionE(second)(first) : (0, exports.isNonEmpty)(first) ? first : second;
                            };
                        }
                        exports.union = union;
                        function intersection(E) {
                            var elemE = elem(E);
                            return function (xs, ys) {
                                if (ys === undefined) {
                                    var intersectionE_1 = intersection(E);
                                    return function (ys) { return intersectionE_1(ys, xs); };
                                }
                                return xs.filter(function (a) { return elemE(a, ys); });
                            };
                        }
                        exports.intersection = intersection;
                        function difference(E) {
                            var elemE = elem(E);
                            return function (xs, ys) {
                                if (ys === undefined) {
                                    var differenceE_1 = difference(E);
                                    return function (ys) { return differenceE_1(ys, xs); };
                                }
                                return xs.filter(function (a) { return !elemE(a, ys); });
                            };
                        }
                        exports.difference = difference;
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        var _mapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapWithIndex)(f)); };
                        var _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };
                        var _filter = function (fa, predicate) {
                            return (0, function_1.pipe)(fa, (0, exports.filter)(predicate));
                        };
                        var _filterMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMap)(f)); };
                        var _partition = function (fa, predicate) {
                            return (0, function_1.pipe)(fa, (0, exports.partition)(predicate));
                        };
                        var _partitionMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMap)(f)); };
                        var _partitionWithIndex = function (fa, predicateWithIndex) { return (0, function_1.pipe)(fa, (0, exports.partitionWithIndex)(predicateWithIndex)); };
                        var _partitionMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMapWithIndex)(f)); };
                        var _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };
                        var _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };
                        var _foldMap = function (M) {
                            var foldMapM = (0, exports.foldMap)(M);
                            return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };
                        };
                        var _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };
                        var _reduceWithIndex = function (fa, b, f) {
                            return (0, function_1.pipe)(fa, (0, exports.reduceWithIndex)(b, f));
                        };
                        var _foldMapWithIndex = function (M) {
                            var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);
                            return function (fa, f) { return (0, function_1.pipe)(fa, foldMapWithIndexM(f)); };
                        };
                        var _reduceRightWithIndex = function (fa, b, f) {
                            return (0, function_1.pipe)(fa, (0, exports.reduceRightWithIndex)(b, f));
                        };
                        var _filterMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMapWithIndex)(f)); };
                        var _filterWithIndex = function (fa, predicateWithIndex) { return (0, function_1.pipe)(fa, (0, exports.filterWithIndex)(predicateWithIndex)); };
                        var _extend = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.extend)(f)); };
                        var _traverse = function (F) {
                            var traverseF = (0, exports.traverse)(F);
                            return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _traverseWithIndex = function (F) {
                            var traverseWithIndexF = (0, exports.traverseWithIndex)(F);
                            return function (ta, f) { return (0, function_1.pipe)(ta, traverseWithIndexF(f)); };
                        };
                        /** @internal */
                        var _chainRecDepthFirst = function (a, f) { return (0, function_1.pipe)(a, (0, exports.chainRecDepthFirst)(f)); };
                        exports._chainRecDepthFirst = _chainRecDepthFirst;
                        /** @internal */
                        var _chainRecBreadthFirst = function (a, f) { return (0, function_1.pipe)(a, (0, exports.chainRecBreadthFirst)(f)); };
                        exports._chainRecBreadthFirst = _chainRecBreadthFirst;
                        /**
                         * @category constructors
                         * @since 2.5.0
                         */
                        exports.of = RNEA.of;
                        /**
                         * @since 2.7.0
                         */
                        var zero = function () { return exports.empty; };
                        exports.zero = zero;
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.altW(() => ['a', 'b'])
                         *   ),
                         *   [1, 2, 3, 'a', 'b']
                         * )
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (fa) {
                                return fa.concat(that());
                            };
                        };
                        exports.altW = altW;
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `ReadonlyArray` concatenates the inputs into a single array.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.alt(() => [4, 5])
                         *   ),
                         *   [1, 2, 3, 4, 5]
                         * )
                         *
                         * @category error handling
                         * @since 2.5.0
                         */
                        exports.alt = exports.altW;
                        /**
                         * @since 2.5.0
                         */
                        var ap = function (fa) {
                            return (0, exports.flatMap)(function (f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); });
                        };
                        exports.ap = ap;
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.flatMap((n) => [`a${n}`, `b${n}`])
                         *   ),
                         *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.flatMap(() => [])
                         *   ),
                         *   []
                         * )
                         *
                         * @category sequencing
                         * @since 2.14.0
                         */
                        exports.flatMap = (0, function_1.dual)(2, function (ma, f) {
                            return (0, function_1.pipe)(ma, (0, exports.chainWithIndex)(function (i, a) { return f(a, i); }));
                        });
                        /**
                         * @category sequencing
                         * @since 2.5.0
                         */
                        exports.flatten = (0, exports.flatMap)(function_1.identity);
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.5.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return fa.map(function (a) { return f(a); });
                            };
                        };
                        exports.map = map;
                        /**
                         * @category mapping
                         * @since 2.5.0
                         */
                        var mapWithIndex = function (f) {
                            return function (fa) {
                                return fa.map(function (a, i) { return f(i, a); });
                            };
                        };
                        exports.mapWithIndex = mapWithIndex;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var separate = function (fa) {
                            var left = [];
                            var right = [];
                            for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
                                var e = fa_1[_i];
                                if (e._tag === 'Left') {
                                    left.push(e.left);
                                }
                                else {
                                    right.push(e.right);
                                }
                            }
                            return (0, Separated_1.separated)(left, right);
                        };
                        exports.separate = separate;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filter = function (predicate) {
                            return function (as) {
                                return as.filter(predicate);
                            };
                        };
                        exports.filter = filter;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterMapWithIndex = function (f) {
                            return function (fa) {
                                var out = [];
                                for (var i = 0; i < fa.length; i++) {
                                    var optionB = f(i, fa[i]);
                                    if (_.isSome(optionB)) {
                                        out.push(optionB.value);
                                    }
                                }
                                return out;
                            };
                        };
                        exports.filterMapWithIndex = filterMapWithIndex;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterMap = function (f) {
                            return (0, exports.filterMapWithIndex)(function (_, a) { return f(a); });
                        };
                        exports.filterMap = filterMap;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        exports.compact = (0, exports.filterMap)(function_1.identity);
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partition = function (predicate) {
                            return (0, exports.partitionWithIndex)(function (_, a) { return predicate(a); });
                        };
                        exports.partition = partition;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionWithIndex = function (predicateWithIndex) {
                            return function (as) {
                                var left = [];
                                var right = [];
                                for (var i = 0; i < as.length; i++) {
                                    var a = as[i];
                                    if (predicateWithIndex(i, a)) {
                                        right.push(a);
                                    }
                                    else {
                                        left.push(a);
                                    }
                                }
                                return (0, Separated_1.separated)(left, right);
                            };
                        };
                        exports.partitionWithIndex = partitionWithIndex;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionMap = function (f) {
                            return (0, exports.partitionMapWithIndex)(function (_, a) { return f(a); });
                        };
                        exports.partitionMap = partitionMap;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionMapWithIndex = function (f) {
                            return function (fa) {
                                var left = [];
                                var right = [];
                                for (var i = 0; i < fa.length; i++) {
                                    var e = f(i, fa[i]);
                                    if (e._tag === 'Left') {
                                        left.push(e.left);
                                    }
                                    else {
                                        right.push(e.right);
                                    }
                                }
                                return (0, Separated_1.separated)(left, right);
                            };
                        };
                        exports.partitionMapWithIndex = partitionMapWithIndex;
                        /**
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterWithIndex = function (predicateWithIndex) {
                            return function (as) {
                                return as.filter(function (a, i) { return predicateWithIndex(i, a); });
                            };
                        };
                        exports.filterWithIndex = filterWithIndex;
                        /**
                         * @since 2.5.0
                         */
                        var extend = function (f) {
                            return function (wa) {
                                return wa.map(function (_, i) { return f(wa.slice(i)); });
                            };
                        };
                        exports.extend = extend;
                        /**
                         * @since 2.5.0
                         */
                        exports.duplicate = (0, exports.extend)(function_1.identity);
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMapWithIndex = function (M) {
                            return function (f) {
                                return function (fa) {
                                    return fa.reduce(function (b, a, i) { return M.concat(b, f(i, a)); }, M.empty);
                                };
                            };
                        };
                        exports.foldMapWithIndex = foldMapWithIndex;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduce = function (b, f) {
                            return (0, exports.reduceWithIndex)(b, function (_, b, a) { return f(b, a); });
                        };
                        exports.reduce = reduce;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMap = function (M) {
                            var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);
                            return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };
                        };
                        exports.foldMap = foldMap;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceWithIndex = function (b, f) {
                            return function (fa) {
                                var len = fa.length;
                                var out = b;
                                for (var i = 0; i < len; i++) {
                                    out = f(i, out, fa[i]);
                                }
                                return out;
                            };
                        };
                        exports.reduceWithIndex = reduceWithIndex;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRight = function (b, f) {
                            return (0, exports.reduceRightWithIndex)(b, function (_, a, b) { return f(a, b); });
                        };
                        exports.reduceRight = reduceRight;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRightWithIndex = function (b, f) {
                            return function (fa) {
                                return fa.reduceRight(function (b, a, i) { return f(i, a, b); }, b);
                            };
                        };
                        exports.reduceRightWithIndex = reduceRightWithIndex;
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            var traverseWithIndexF = (0, exports.traverseWithIndex)(F);
                            return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };
                        };
                        exports.traverse = traverse;
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) {
                            return function (ta) {
                                return _reduce(ta, F.of((0, exports.zero)()), function (fas, fa) {
                                    return F.ap(F.map(fas, function (as) { return function (a) { return (0, function_1.pipe)(as, (0, exports.append)(a)); }; }), fa);
                                });
                            };
                        };
                        exports.sequence = sequence;
                        /**
                         * @category sequencing
                         * @since 2.6.3
                         */
                        var traverseWithIndex = function (F) {
                            return function (f) {
                                return (0, exports.reduceWithIndex)(F.of((0, exports.zero)()), function (i, fbs, a) {
                                    return F.ap(F.map(fbs, function (bs) { return function (b) { return (0, function_1.pipe)(bs, (0, exports.append)(b)); }; }), f(i, a));
                                });
                            };
                        };
                        exports.traverseWithIndex = traverseWithIndex;
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wither = function (F) {
                            var _witherF = _wither(F);
                            return function (f) { return function (fa) { return _witherF(fa, f); }; };
                        };
                        exports.wither = wither;
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wilt = function (F) {
                            var _wiltF = _wilt(F);
                            return function (f) { return function (fa) { return _wiltF(fa, f); }; };
                        };
                        exports.wilt = wilt;
                        /**
                         * @since 2.6.6
                         */
                        var unfold = function (b, f) {
                            var out = [];
                            var bb = b;
                            // eslint-disable-next-line no-constant-condition
                            while (true) {
                                var mt = f(bb);
                                if (_.isSome(mt)) {
                                    var _a = mt.value, a = _a[0], b_1 = _a[1];
                                    out.push(a);
                                    bb = b_1;
                                }
                                else {
                                    break;
                                }
                            }
                            return out;
                        };
                        exports.unfold = unfold;
                        /**
                         * @category type lambdas
                         * @since 2.5.0
                         */
                        exports.URI = 'ReadonlyArray';
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        var getShow = function (S) {
                            return ({
                                show: function (as) { return "[".concat(as.map(S.show).join(', '), "]"); }
                            });
                        };
                        exports.getShow = getShow;
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: function (first, second) { return ((0, exports.isEmpty)(first) ? second : (0, exports.isEmpty)(second) ? first : first.concat(second)); }
                            });
                        };
                        exports.getSemigroup = getSemigroup;
                        /**
                         * Returns a `Monoid` for `ReadonlyArray<A>`.
                         *
                         * @example
                         * import { getMonoid } from 'fp-ts/ReadonlyArray'
                         *
                         * const M = getMonoid<number>()
                         * assert.deepStrictEqual(M.concat([1, 2], [3, 4]), [1, 2, 3, 4])
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getMonoid = function () {
                            return ({
                                concat: (0, exports.getSemigroup)().concat,
                                empty: exports.empty
                            });
                        };
                        exports.getMonoid = getMonoid;
                        /**
                         * Derives an `Eq` over the `ReadonlyArray` of a given element type from the `Eq` of that type. The derived `Eq` defines two
                         * arrays as equal if all elements of both arrays are compared equal pairwise with the given `E`. In case of arrays of
                         * different lengths, the result is non equality.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { getEq } from 'fp-ts/ReadonlyArray'
                         *
                         * const E = getEq(S.Eq)
                         * assert.strictEqual(E.equals(['a', 'b'], ['a', 'b']), true)
                         * assert.strictEqual(E.equals(['a'], []), false)
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getEq = function (E) {
                            return (0, Eq_1.fromEquals)(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });
                        };
                        exports.getEq = getEq;
                        /**
                         * Derives an `Ord` over the `ReadonlyArray` of a given element type from the `Ord` of that type. The ordering between two such
                         * arrays is equal to: the first non equal comparison of each arrays elements taken pairwise in increasing order, in
                         * case of equality over all the pairwise elements; the longest array is considered the greatest, if both arrays have
                         * the same length, the result is equality.
                         *
                         * @example
                         * import { getOrd } from 'fp-ts/ReadonlyArray'
                         * import * as S from 'fp-ts/string'
                         *
                         * const O = getOrd(S.Ord)
                         * assert.strictEqual(O.compare(['b'], ['a']), 1)
                         * assert.strictEqual(O.compare(['a'], ['a']), 0)
                         * assert.strictEqual(O.compare(['a'], ['b']), -1)
                         *
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getOrd = function (O) {
                            return (0, Ord_1.fromCompare)(function (a, b) {
                                var aLen = a.length;
                                var bLen = b.length;
                                var len = Math.min(aLen, bLen);
                                for (var i = 0; i < len; i++) {
                                    var ordering = O.compare(a[i], b[i]);
                                    if (ordering !== 0) {
                                        return ordering;
                                    }
                                }
                                return N.Ord.compare(aLen, bLen);
                            });
                        };
                        exports.getOrd = getOrd;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (E) {
                            var unionE = union(E);
                            return {
                                concat: function (first, second) { return unionE(second)(first); }
                            };
                        };
                        exports.getUnionSemigroup = getUnionSemigroup;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionMonoid = function (E) {
                            return ({
                                concat: (0, exports.getUnionSemigroup)(E).concat,
                                empty: exports.empty
                            });
                        };
                        exports.getUnionMonoid = getUnionMonoid;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getIntersectionSemigroup = function (E) {
                            var intersectionE = intersection(E);
                            return {
                                concat: function (first, second) { return intersectionE(second)(first); }
                            };
                        };
                        exports.getIntersectionSemigroup = getIntersectionSemigroup;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        var getDifferenceMagma = function (E) {
                            var differenceE = difference(E);
                            return {
                                concat: function (first, second) { return differenceE(second)(first); }
                            };
                        };
                        exports.getDifferenceMagma = getDifferenceMagma;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Pointed = {
                            URI: exports.URI,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.FunctorWithIndex = {
                            URI: exports.URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Apply = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.5.0
                         */
                        exports.apFirst = (0, Apply_1.apFirst)(exports.Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.5.0
                         */
                        exports.apSecond = (0, Apply_1.apSecond)(exports.Apply);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Applicative = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Chain = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            chain: exports.flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Monad = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            chain: exports.flatMap
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.chainFirst(() => ['a', 'b'])
                         *   ),
                         *   [1, 1, 2, 2, 3, 3]
                         * )
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.chainFirst(() => [])
                         *   ),
                         *   []
                         * )
                         *
                         * @category sequencing
                         * @since 2.5.0
                         */
                        exports.chainFirst =
/*#__PURE__*/ (0, Chain_1.chainFirst)(exports.Chain);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Unfoldable = {
                            URI: exports.URI,
                            unfold: exports.unfold
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Alt = {
                            URI: exports.URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.Zero = {
                            URI: exports.URI,
                            zero: exports.zero
                        };
                        /**
                         * @category do notation
                         * @since 2.11.0
                         */
                        exports.guard = (0, Zero_1.guard)(exports.Zero, exports.Pointed);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Alternative = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            alt: _alt,
                            zero: exports.zero
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Extend = {
                            URI: exports.URI,
                            map: _map,
                            extend: _extend
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Compactable = {
                            URI: exports.URI,
                            compact: exports.compact,
                            separate: exports.separate
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Filterable = {
                            URI: exports.URI,
                            map: _map,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.FilterableWithIndex = {
                            URI: exports.URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex,
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Foldable = {
                            URI: exports.URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.FoldableWithIndex = {
                            URI: exports.URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Traversable = {
                            URI: exports.URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.TraversableWithIndex = {
                            URI: exports.URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            traverseWithIndex: _traverseWithIndex
                        };
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var chainRecDepthFirst = function (f) {
                            return function (a) {
                                var todo = __spreadArray([], f(a), true);
                                var out = [];
                                while (todo.length > 0) {
                                    var e = todo.shift();
                                    if (_.isLeft(e)) {
                                        todo.unshift.apply(todo, f(e.left));
                                    }
                                    else {
                                        out.push(e.right);
                                    }
                                }
                                return out;
                            };
                        };
                        exports.chainRecDepthFirst = chainRecDepthFirst;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.ChainRecDepthFirst = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            chain: exports.flatMap,
                            chainRec: exports._chainRecDepthFirst
                        };
                        /**
                         * @category sequencing
                         * @since 2.11.0
                         */
                        var chainRecBreadthFirst = function (f) {
                            return function (a) {
                                var initial = f(a);
                                var todo = [];
                                var out = [];
                                function go(e) {
                                    if (_.isLeft(e)) {
                                        f(e.left).forEach(function (v) { return todo.push(v); });
                                    }
                                    else {
                                        out.push(e.right);
                                    }
                                }
                                for (var _i = 0, initial_1 = initial; _i < initial_1.length; _i++) {
                                    var e = initial_1[_i];
                                    go(e);
                                }
                                while (todo.length > 0) {
                                    go(todo.shift());
                                }
                                return out;
                            };
                        };
                        exports.chainRecBreadthFirst = chainRecBreadthFirst;
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.ChainRecBreadthFirst = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            chain: exports.flatMap,
                            chainRec: exports._chainRecBreadthFirst
                        };
                        var _wither = /*#__PURE__*/ (0, Witherable_1.witherDefault)(exports.Traversable, exports.Compactable);
                        var _wilt = /*#__PURE__*/ (0, Witherable_1.wiltDefault)(exports.Traversable, exports.Compactable);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Witherable = {
                            URI: exports.URI,
                            map: _map,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            wither: _wither,
                            wilt: _wilt
                        };
                        /**
                         * Filter values inside a context.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as T from 'fp-ts/Task'
                         *
                         * const filterE = RA.filterE(T.ApplicativePar)
                         * async function test() {
                         *   assert.deepStrictEqual(
                         *     await pipe(
                         *       [-1, 2, 3],
                         *       filterE((n) => T.of(n > 0))
                         *     )(),
                         *     [2, 3]
                         *   )
                         * }
                         * test()
                         *
                         * @since 2.11.0
                         */
                        exports.filterE = (0, Witherable_1.filterE)(exports.Witherable);
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.FromEither = {
                            URI: exports.URI,
                            fromEither: exports.fromEither
                        };
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        exports.fromEitherK = (0, FromEither_1.fromEitherK)(exports.FromEither);
                        // -------------------------------------------------------------------------------------
                        // unsafe
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category unsafe
                         * @since 2.5.0
                         */
                        exports.unsafeInsertAt = RNEA.unsafeInsertAt;
                        /**
                         * @category unsafe
                         * @since 2.5.0
                         */
                        var unsafeUpdateAt = function (i, a, as) {
                            return (0, exports.isNonEmpty)(as) ? RNEA.unsafeUpdateAt(i, a, as) : as;
                        };
                        exports.unsafeUpdateAt = unsafeUpdateAt;
                        /**
                         * @category unsafe
                         * @since 2.5.0
                         */
                        var unsafeDeleteAt = function (i, as) {
                            var xs = as.slice();
                            xs.splice(i, 1);
                            return xs;
                        };
                        exports.unsafeDeleteAt = unsafeDeleteAt;
                        /**
                         * @category conversions
                         * @since 2.5.0
                         */
                        var toArray = function (as) { return as.slice(); };
                        exports.toArray = toArray;
                        /**
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromArray = function (as) { return ((0, exports.isEmpty)(as) ? exports.empty : as.slice()); };
                        exports.fromArray = fromArray;
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * An empty array
                         *
                         * @since 2.5.0
                         */
                        exports.empty = RNEA.empty;
                        function every(predicate) {
                            return function (as) { return as.every(predicate); };
                        }
                        exports.every = every;
                        /**
                         * Check if a predicate holds true for any array member.
                         *
                         * @example
                         * import { some } from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const isPositive = (n: number): boolean => n > 0
                         *
                         * assert.deepStrictEqual(pipe([-1, -2, 3], some(isPositive)), true)
                         * assert.deepStrictEqual(pipe([-1, -2, -3], some(isPositive)), false)
                         *
                         * @since 2.9.0
                         */
                        var some = function (predicate) {
                            return function (as) {
                                return as.some(predicate);
                            };
                        };
                        exports.some = some;
                        /**
                         * Alias of [`some`](#some)
                         *
                         * @since 2.11.0
                         */
                        exports.exists = exports.some;
                        /**
                         * Places an element in between members of a `ReadonlyArray`, then folds the results using the provided `Monoid`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { intercalate } from 'fp-ts/ReadonlyArray'
                         *
                         * assert.deepStrictEqual(intercalate(S.Monoid)('-')(['a', 'b', 'c']), 'a-b-c')
                         *
                         * @since 2.12.0
                         */
                        var intercalate = function (M) {
                            var intercalateM = RNEA.intercalate(M);
                            return function (middle) { return (0, exports.match)(function () { return M.empty; }, intercalateM(middle)); };
                        };
                        exports.intercalate = intercalate;
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        exports.Do = (0, exports.of)(_.emptyRecord);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindTo = (0, Functor_1.bindTo)(exports.Functor);
                        var let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);
                        exports.let = let_;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bind = (0, Chain_1.bind)(exports.Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apS = (0, Apply_1.apS)(exports.Apply);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.5.0
                         */
                        exports.chain = exports.flatMap;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `ReadonlyNonEmptyArray` module instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.range = RNEA.range;
                        /**
                         * Use [`prepend`](#prepend) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.cons = RNEA.cons;
                        /**
                         * Use [`append`](#append) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.snoc = RNEA.snoc;
                        /**
                         * Use [`prependAll`](#prependall) instead.
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        exports.prependToAll = exports.prependAll;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `RA.Functor` instead of `RA.readonlyArray`
                         * (where `RA` is from `import RA from 'fp-ts/ReadonlyArray'`)
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.readonlyArray = {
                            URI: exports.URI,
                            compact: exports.compact,
                            separate: exports.separate,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            chain: exports.flatMap,
                            filter: _filter,
                            filterMap: _filterMap,
                            partition: _partition,
                            partitionMap: _partitionMap,
                            mapWithIndex: _mapWithIndex,
                            partitionMapWithIndex: _partitionMapWithIndex,
                            partitionWithIndex: _partitionWithIndex,
                            filterMapWithIndex: _filterMapWithIndex,
                            filterWithIndex: _filterWithIndex,
                            alt: _alt,
                            zero: exports.zero,
                            unfold: exports.unfold,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex,
                            extend: _extend,
                            wither: _wither,
                            wilt: _wilt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/ReadonlyNonEmptyArray.js":
/*!*********************************************************!*\
  !*** ./node_modules/fp-ts/lib/ReadonlyNonEmptyArray.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.reduceRight = exports.foldMap = exports.reduce = exports.mapWithIndex = exports.map = exports.flatten = exports.duplicate = exports.extend = exports.flatMap = exports.ap = exports.alt = exports.altW = exports.of = exports.chunksOf = exports.splitAt = exports.chop = exports.chainWithIndex = exports.intersperse = exports.prependAll = exports.unzip = exports.zip = exports.zipWith = exports.modifyAt = exports.updateAt = exports.sort = exports.groupBy = exports.group = exports.reverse = exports.concat = exports.concatW = exports.fromArray = exports.unappend = exports.unprepend = exports.range = exports.replicate = exports.makeBy = exports.fromReadonlyArray = exports.rotate = exports.union = exports.sortBy = exports.uniq = exports.unsafeUpdateAt = exports.unsafeInsertAt = exports.append = exports.appendW = exports.prepend = exports.prependW = exports.isOutOfBound = exports.isNonEmpty = exports.empty = void 0;
                        exports.groupSort = exports.chain = exports.intercalate = exports.updateLast = exports.modifyLast = exports.updateHead = exports.modifyHead = exports.matchRight = exports.matchLeft = exports.concatAll = exports.max = exports.min = exports.init = exports.last = exports.tail = exports.head = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.Comonad = exports.Alt = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.Monad = exports.chainFirst = exports.Chain = exports.Applicative = exports.apSecond = exports.apFirst = exports.Apply = exports.FunctorWithIndex = exports.Pointed = exports.flap = exports.Functor = exports.getUnionSemigroup = exports.getEq = exports.getSemigroup = exports.getShow = exports.URI = exports.extract = exports.traverseWithIndex = exports.sequence = exports.traverse = exports.reduceRightWithIndex = exports.foldMapWithIndex = exports.reduceWithIndex = void 0;
                        exports.readonlyNonEmptyArray = exports.fold = exports.prependToAll = exports.insertAt = exports.snoc = exports.cons = exports.unsnoc = exports.uncons = exports.filterWithIndex = exports.filter = void 0;
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var Chain_1 = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js");
                        var Eq_1 = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/lib/Eq.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        var Ord_1 = __webpack_require__(/*! ./Ord */ "./node_modules/fp-ts/lib/Ord.js");
                        var Se = __importStar(__webpack_require__(/*! ./Semigroup */ "./node_modules/fp-ts/lib/Semigroup.js"));
                        // -------------------------------------------------------------------------------------
                        // internal
                        // -------------------------------------------------------------------------------------
                        /**
                         * @internal
                         */
                        exports.empty = _.emptyReadonlyArray;
                        /**
                         * @internal
                         */
                        exports.isNonEmpty = _.isNonEmpty;
                        /**
                         * @internal
                         */
                        var isOutOfBound = function (i, as) { return i < 0 || i >= as.length; };
                        exports.isOutOfBound = isOutOfBound;
                        /**
                         * @internal
                         */
                        var prependW = function (head) {
                            return function (tail) {
                                return __spreadArray([head], tail, true);
                            };
                        };
                        exports.prependW = prependW;
                        /**
                         * @internal
                         */
                        exports.prepend = exports.prependW;
                        /**
                         * @internal
                         */
                        var appendW = function (end) {
                            return function (init) {
                                return __spreadArray(__spreadArray([], init, true), [end], false);
                            };
                        };
                        exports.appendW = appendW;
                        /**
                         * @internal
                         */
                        exports.append = exports.appendW;
                        /**
                         * @internal
                         */
                        var unsafeInsertAt = function (i, a, as) {
                            if ((0, exports.isNonEmpty)(as)) {
                                var xs = _.fromReadonlyNonEmptyArray(as);
                                xs.splice(i, 0, a);
                                return xs;
                            }
                            return [a];
                        };
                        exports.unsafeInsertAt = unsafeInsertAt;
                        /**
                         * @internal
                         */
                        var unsafeUpdateAt = function (i, a, as) {
                            if (as[i] === a) {
                                return as;
                            }
                            else {
                                var xs = _.fromReadonlyNonEmptyArray(as);
                                xs[i] = a;
                                return xs;
                            }
                        };
                        exports.unsafeUpdateAt = unsafeUpdateAt;
                        /**
                         * Remove duplicates from a `ReadonlyNonEmptyArray`, keeping the first occurrence of an element.
                         *
                         * @example
                         * import { uniq } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(uniq(N.Eq)([1, 2, 1]), [1, 2])
                         *
                         * @since 2.11.0
                         */
                        var uniq = function (E) {
                            return function (as) {
                                if (as.length === 1) {
                                    return as;
                                }
                                var out = [(0, exports.head)(as)];
                                var rest = (0, exports.tail)(as);
                                var _loop_1 = function (a) {
                                    if (out.every(function (o) { return !E.equals(o, a); })) {
                                        out.push(a);
                                    }
                                };
                                for (var _i = 0, rest_1 = rest; _i < rest_1.length; _i++) {
                                    var a = rest_1[_i];
                                    _loop_1(a);
                                }
                                return out;
                            };
                        };
                        exports.uniq = uniq;
                        /**
                         * Sort the elements of a `ReadonlyNonEmptyArray` in increasing order, where elements are compared using first `ords[0]`, then `ords[1]`,
                         * etc...
                         *
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { contramap } from 'fp-ts/Ord'
                         * import * as S from 'fp-ts/string'
                         * import * as N from 'fp-ts/number'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * interface Person {
                         *   name: string
                         *   age: number
                         * }
                         *
                         * const byName = pipe(S.Ord, contramap((p: Person) => p.name))
                         *
                         * const byAge = pipe(N.Ord, contramap((p: Person) => p.age))
                         *
                         * const sortByNameByAge = RNEA.sortBy([byName, byAge])
                         *
                         * const persons: RNEA.ReadonlyNonEmptyArray<Person> = [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 },
                         *   { name: 'b', age: 2 }
                         * ]
                         *
                         * assert.deepStrictEqual(sortByNameByAge(persons), [
                         *   { name: 'a', age: 1 },
                         *   { name: 'b', age: 2 },
                         *   { name: 'b', age: 3 },
                         *   { name: 'c', age: 2 }
                         * ])
                         *
                         * @since 2.11.0
                         */
                        var sortBy = function (ords) {
                            if ((0, exports.isNonEmpty)(ords)) {
                                var M = (0, Ord_1.getMonoid)();
                                return (0, exports.sort)(ords.reduce(M.concat, M.empty));
                            }
                            return function_1.identity;
                        };
                        exports.sortBy = sortBy;
                        /**
                         * @since 2.11.0
                         */
                        var union = function (E) {
                            var uniqE = (0, exports.uniq)(E);
                            return function (second) { return function (first) { return uniqE((0, function_1.pipe)(first, concat(second))); }; };
                        };
                        exports.union = union;
                        /**
                         * Rotate a `ReadonlyNonEmptyArray` by `n` steps.
                         *
                         * @example
                         * import { rotate } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(rotate(2)([1, 2, 3, 4, 5]), [4, 5, 1, 2, 3])
                         * assert.deepStrictEqual(rotate(-2)([1, 2, 3, 4, 5]), [3, 4, 5, 1, 2])
                         *
                         * @since 2.11.0
                         */
                        var rotate = function (n) {
                            return function (as) {
                                var len = as.length;
                                var m = Math.round(n) % len;
                                if ((0, exports.isOutOfBound)(Math.abs(m), as) || m === 0) {
                                    return as;
                                }
                                if (m < 0) {
                                    var _a = (0, exports.splitAt)(-m)(as), f = _a[0], s = _a[1];
                                    return (0, function_1.pipe)(s, concat(f));
                                }
                                else {
                                    return (0, exports.rotate)(m - len)(as);
                                }
                            };
                        };
                        exports.rotate = rotate;
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Return a `ReadonlyNonEmptyArray` from a `ReadonlyArray` returning `none` if the input is empty.
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromReadonlyArray = function (as) {
                            return (0, exports.isNonEmpty)(as) ? _.some(as) : _.none;
                        };
                        exports.fromReadonlyArray = fromReadonlyArray;
                        /**
                         * Return a `ReadonlyNonEmptyArray` of length `n` with element `i` initialized with `f(i)`.
                         *
                         * **Note**. `n` is normalized to a natural number.
                         *
                         * @example
                         * import { makeBy } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const double = (n: number): number => n * 2
                         * assert.deepStrictEqual(pipe(5, makeBy(double)), [0, 2, 4, 6, 8])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var makeBy = function (f) {
                            return function (n) {
                                var j = Math.max(0, Math.floor(n));
                                var out = [f(0)];
                                for (var i = 1; i < j; i++) {
                                    out.push(f(i));
                                }
                                return out;
                            };
                        };
                        exports.makeBy = makeBy;
                        /**
                         * Create a `ReadonlyNonEmptyArray` containing a value repeated the specified number of times.
                         *
                         * **Note**. `n` is normalized to a natural number.
                         *
                         * @example
                         * import { replicate } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(3, replicate('a')), ['a', 'a', 'a'])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var replicate = function (a) { return (0, exports.makeBy)(function () { return a; }); };
                        exports.replicate = replicate;
                        /**
                         * Create a `ReadonlyNonEmptyArray` containing a range of integers, including both endpoints.
                         *
                         * @example
                         * import { range } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(range(1, 5), [1, 2, 3, 4, 5])
                         *
                         * @category constructors
                         * @since 2.11.0
                         */
                        var range = function (start, end) {
                            return start <= end ? (0, exports.makeBy)(function (i) { return start + i; })(end - start + 1) : [start];
                        };
                        exports.range = range;
                        /**
                         * Return the tuple of the `head` and the `tail`.
                         *
                         * @example
                         * import { unprepend } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(unprepend([1, 2, 3, 4]), [1, [2, 3, 4]])
                         *
                         * @since 2.9.0
                         */
                        var unprepend = function (as) { return [(0, exports.head)(as), (0, exports.tail)(as)]; };
                        exports.unprepend = unprepend;
                        /**
                         * Return the tuple of the `init` and the `last`.
                         *
                         * @example
                         * import { unappend } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(unappend([1, 2, 3, 4]), [[1, 2, 3], 4])
                         *
                         * @since 2.9.0
                         */
                        var unappend = function (as) { return [(0, exports.init)(as), (0, exports.last)(as)]; };
                        exports.unappend = unappend;
                        /**
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromArray = function (as) { return (0, exports.fromReadonlyArray)(as.slice()); };
                        exports.fromArray = fromArray;
                        function concatW(second) {
                            return function (first) { return first.concat(second); };
                        }
                        exports.concatW = concatW;
                        function concat(x, y) {
                            return y ? x.concat(y) : function (y) { return y.concat(x); };
                        }
                        exports.concat = concat;
                        /**
                         * @since 2.5.0
                         */
                        var reverse = function (as) {
                            return as.length === 1 ? as : __spreadArray([(0, exports.last)(as)], as.slice(0, -1).reverse(), true);
                        };
                        exports.reverse = reverse;
                        function group(E) {
                            return function (as) {
                                var len = as.length;
                                if (len === 0) {
                                    return exports.empty;
                                }
                                var out = [];
                                var head = as[0];
                                var nea = [head];
                                for (var i = 1; i < len; i++) {
                                    var a = as[i];
                                    if (E.equals(a, head)) {
                                        nea.push(a);
                                    }
                                    else {
                                        out.push(nea);
                                        head = a;
                                        nea = [head];
                                    }
                                }
                                out.push(nea);
                                return out;
                            };
                        }
                        exports.group = group;
                        /**
                         * Splits an array into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning
                         * function on each element, and grouping the results according to values returned
                         *
                         * @example
                         * import { groupBy } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(groupBy((s: string) => String(s.length))(['a', 'b', 'ab']), {
                         *   '1': ['a', 'b'],
                         *   '2': ['ab']
                         * })
                         *
                         * @since 2.5.0
                         */
                        var groupBy = function (f) {
                            return function (as) {
                                var out = {};
                                for (var _i = 0, as_1 = as; _i < as_1.length; _i++) {
                                    var a = as_1[_i];
                                    var k = f(a);
                                    if (_.has.call(out, k)) {
                                        out[k].push(a);
                                    }
                                    else {
                                        out[k] = [a];
                                    }
                                }
                                return out;
                            };
                        };
                        exports.groupBy = groupBy;
                        /**
                         * @since 2.5.0
                         */
                        var sort = function (O) {
                            return function (as) {
                                return as.length === 1 ? as : as.slice().sort(O.compare);
                            };
                        };
                        exports.sort = sort;
                        /**
                         * @since 2.5.0
                         */
                        var updateAt = function (i, a) {
                            return (0, exports.modifyAt)(i, function () { return a; });
                        };
                        exports.updateAt = updateAt;
                        /**
                         * @since 2.5.0
                         */
                        var modifyAt = function (i, f) {
                            return function (as) {
                                return (0, exports.isOutOfBound)(i, as) ? _.none : _.some((0, exports.unsafeUpdateAt)(i, f(as[i]), as));
                            };
                        };
                        exports.modifyAt = modifyAt;
                        /**
                         * @since 2.5.1
                         */
                        var zipWith = function (as, bs, f) {
                            var cs = [f(as[0], bs[0])];
                            var len = Math.min(as.length, bs.length);
                            for (var i = 1; i < len; i++) {
                                cs[i] = f(as[i], bs[i]);
                            }
                            return cs;
                        };
                        exports.zipWith = zipWith;
                        function zip(as, bs) {
                            if (bs === undefined) {
                                return function (bs) { return zip(bs, as); };
                            }
                            return (0, exports.zipWith)(as, bs, function (a, b) { return [a, b]; });
                        }
                        exports.zip = zip;
                        /**
                         * @since 2.5.1
                         */
                        var unzip = function (abs) {
                            var fa = [abs[0][0]];
                            var fb = [abs[0][1]];
                            for (var i = 1; i < abs.length; i++) {
                                fa[i] = abs[i][0];
                                fb[i] = abs[i][1];
                            }
                            return [fa, fb];
                        };
                        exports.unzip = unzip;
                        /**
                         * Prepend an element to every member of a `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { prependAll } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(prependAll(9)([1, 2, 3, 4]), [9, 1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.10.0
                         */
                        var prependAll = function (middle) {
                            return function (as) {
                                var out = [middle, as[0]];
                                for (var i = 1; i < as.length; i++) {
                                    out.push(middle, as[i]);
                                }
                                return out;
                            };
                        };
                        exports.prependAll = prependAll;
                        /**
                         * Places an element in between members of a `ReadonlyNonEmptyArray`.
                         *
                         * @example
                         * import { intersperse } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(intersperse(9)([1, 2, 3, 4]), [1, 9, 2, 9, 3, 9, 4])
                         *
                         * @since 2.9.0
                         */
                        var intersperse = function (middle) {
                            return function (as) {
                                var rest = (0, exports.tail)(as);
                                return (0, exports.isNonEmpty)(rest) ? (0, function_1.pipe)(rest, (0, exports.prependAll)(middle), (0, exports.prepend)((0, exports.head)(as))) : as;
                            };
                        };
                        exports.intersperse = intersperse;
                        /**
                         * @category sequencing
                         * @since 2.10.0
                         */
                        var chainWithIndex = function (f) {
                            return function (as) {
                                var out = _.fromReadonlyNonEmptyArray(f(0, (0, exports.head)(as)));
                                for (var i = 1; i < as.length; i++) {
                                    out.push.apply(out, f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        exports.chainWithIndex = chainWithIndex;
                        /**
                         * A useful recursion pattern for processing a `ReadonlyNonEmptyArray` to produce a new `ReadonlyNonEmptyArray`, often used for "chopping" up the input
                         * `ReadonlyNonEmptyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `ReadonlyNonEmptyArray` and produce a
                         * value and the tail of the `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.10.0
                         */
                        var chop = function (f) {
                            return function (as) {
                                var _a = f(as), b = _a[0], rest = _a[1];
                                var out = [b];
                                var next = rest;
                                while ((0, exports.isNonEmpty)(next)) {
                                    var _b = f(next), b_1 = _b[0], rest_2 = _b[1];
                                    out.push(b_1);
                                    next = rest_2;
                                }
                                return out;
                            };
                        };
                        exports.chop = chop;
                        /**
                         * Splits a `ReadonlyNonEmptyArray` into two pieces, the first piece has max `n` elements.
                         *
                         * @since 2.10.0
                         */
                        var splitAt = function (n) {
                            return function (as) {
                                var m = Math.max(1, n);
                                return m >= as.length ? [as, exports.empty] : [(0, function_1.pipe)(as.slice(1, m), (0, exports.prepend)((0, exports.head)(as))), as.slice(m)];
                            };
                        };
                        exports.splitAt = splitAt;
                        /**
                         * Splits a `ReadonlyNonEmptyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of
                         * the `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.10.0
                         */
                        var chunksOf = function (n) { return (0, exports.chop)((0, exports.splitAt)(n)); };
                        exports.chunksOf = chunksOf;
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        /* istanbul ignore next */
                        var _mapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapWithIndex)(f)); };
                        var _ap = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };
                        /* istanbul ignore next */
                        var _extend = function (wa, f) { return (0, function_1.pipe)(wa, (0, exports.extend)(f)); };
                        /* istanbul ignore next */
                        var _reduce = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduce)(b, f)); };
                        /* istanbul ignore next */
                        var _foldMap = function (M) {
                            var foldMapM = (0, exports.foldMap)(M);
                            return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRight = function (fa, b, f) { return (0, function_1.pipe)(fa, (0, exports.reduceRight)(b, f)); };
                        /* istanbul ignore next */
                        var _traverse = function (F) {
                            var traverseF = (0, exports.traverse)(F);
                            return function (ta, f) { return (0, function_1.pipe)(ta, traverseF(f)); };
                        };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };
                        /* istanbul ignore next */
                        var _reduceWithIndex = function (fa, b, f) {
                            return (0, function_1.pipe)(fa, (0, exports.reduceWithIndex)(b, f));
                        };
                        /* istanbul ignore next */
                        var _foldMapWithIndex = function (M) {
                            var foldMapWithIndexM = (0, exports.foldMapWithIndex)(M);
                            return function (fa, f) { return (0, function_1.pipe)(fa, foldMapWithIndexM(f)); };
                        };
                        /* istanbul ignore next */
                        var _reduceRightWithIndex = function (fa, b, f) {
                            return (0, function_1.pipe)(fa, (0, exports.reduceRightWithIndex)(b, f));
                        };
                        /* istanbul ignore next */
                        var _traverseWithIndex = function (F) {
                            var traverseWithIndexF = (0, exports.traverseWithIndex)(F);
                            return function (ta, f) { return (0, function_1.pipe)(ta, traverseWithIndexF(f)); };
                        };
                        /**
                         * @category constructors
                         * @since 2.5.0
                         */
                        exports.of = _.singleton;
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3] as RNEA.ReadonlyNonEmptyArray<number>,
                         *     RNEA.altW(() => ['a', 'b'])
                         *   ),
                         *   [1, 2, 3, 'a', 'b']
                         * )
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        var altW = function (that) {
                            return function (as) {
                                return (0, function_1.pipe)(as, concatW(that()));
                            };
                        };
                        exports.altW = altW;
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `ReadonlyNonEmptyArray` concatenates the inputs into a single array.
                         *
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RNEA.alt(() => [4, 5])
                         *   ),
                         *   [1, 2, 3, 4, 5]
                         * )
                         *
                         * @category error handling
                         * @since 2.6.2
                         */
                        exports.alt = exports.altW;
                        /**
                         * @since 2.5.0
                         */
                        var ap = function (as) { return (0, exports.flatMap)(function (f) { return (0, function_1.pipe)(as, (0, exports.map)(f)); }); };
                        exports.ap = ap;
                        /**
                         * @example
                         * import * as RNEA from 'fp-ts/ReadonlyNonEmptyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RNEA.flatMap((n) => [`a${n}`, `b${n}`])
                         *   ),
                         *   ['a1', 'b1', 'a2', 'b2', 'a3', 'b3']
                         * )
                         *
                         * @category sequencing
                         * @since 2.14.0
                         */
                        exports.flatMap = (0, function_1.dual)(2, function (ma, f) {
                            return (0, function_1.pipe)(ma, (0, exports.chainWithIndex)(function (i, a) { return f(a, i); }));
                        });
                        /**
                         * @since 2.5.0
                         */
                        var extend = function (f) {
                            return function (as) {
                                var next = (0, exports.tail)(as);
                                var out = [f(as)];
                                while ((0, exports.isNonEmpty)(next)) {
                                    out.push(f(next));
                                    next = (0, exports.tail)(next);
                                }
                                return out;
                            };
                        };
                        exports.extend = extend;
                        /**
                         * @since 2.5.0
                         */
                        exports.duplicate =
/*#__PURE__*/ (0, exports.extend)(function_1.identity);
                        /**
                         * @category sequencing
                         * @since 2.5.0
                         */
                        exports.flatten =
/*#__PURE__*/ (0, exports.flatMap)(function_1.identity);
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.5.0
                         */
                        var map = function (f) {
                            return (0, exports.mapWithIndex)(function (_, a) { return f(a); });
                        };
                        exports.map = map;
                        /**
                         * @category mapping
                         * @since 2.5.0
                         */
                        var mapWithIndex = function (f) {
                            return function (as) {
                                var out = [f(0, (0, exports.head)(as))];
                                for (var i = 1; i < as.length; i++) {
                                    out.push(f(i, as[i]));
                                }
                                return out;
                            };
                        };
                        exports.mapWithIndex = mapWithIndex;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduce = function (b, f) {
                            return (0, exports.reduceWithIndex)(b, function (_, b, a) { return f(b, a); });
                        };
                        exports.reduce = reduce;
                        /**
                         * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.
                         *
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMap = function (S) {
                            return function (f) {
                                return function (as) {
                                    return as.slice(1).reduce(function (s, a) { return S.concat(s, f(a)); }, f(as[0]));
                                };
                            };
                        };
                        exports.foldMap = foldMap;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRight = function (b, f) {
                            return (0, exports.reduceRightWithIndex)(b, function (_, b, a) { return f(b, a); });
                        };
                        exports.reduceRight = reduceRight;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceWithIndex = function (b, f) {
                            return function (as) {
                                return as.reduce(function (b, a, i) { return f(i, b, a); }, b);
                            };
                        };
                        exports.reduceWithIndex = reduceWithIndex;
                        /**
                         * **Note**. The constraint is relaxed: a `Semigroup` instead of a `Monoid`.
                         *
                         * @category folding
                         * @since 2.5.0
                         */
                        var foldMapWithIndex = function (S) {
                            return function (f) {
                                return function (as) {
                                    return as.slice(1).reduce(function (s, a, i) { return S.concat(s, f(i + 1, a)); }, f(0, as[0]));
                                };
                            };
                        };
                        exports.foldMapWithIndex = foldMapWithIndex;
                        /**
                         * @category folding
                         * @since 2.5.0
                         */
                        var reduceRightWithIndex = function (b, f) {
                            return function (as) {
                                return as.reduceRight(function (b, a, i) { return f(i, a, b); }, b);
                            };
                        };
                        exports.reduceRightWithIndex = reduceRightWithIndex;
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var traverse = function (F) {
                            var traverseWithIndexF = (0, exports.traverseWithIndex)(F);
                            return function (f) { return traverseWithIndexF(function (_, a) { return f(a); }); };
                        };
                        exports.traverse = traverse;
                        /**
                         * @category traversing
                         * @since 2.6.3
                         */
                        var sequence = function (F) { return (0, exports.traverseWithIndex)(F)(function_1.SK); };
                        exports.sequence = sequence;
                        /**
                         * @category sequencing
                         * @since 2.6.3
                         */
                        var traverseWithIndex = function (F) {
                            return function (f) {
                                return function (as) {
                                    var out = F.map(f(0, (0, exports.head)(as)), exports.of);
                                    for (var i = 1; i < as.length; i++) {
                                        out = F.ap(F.map(out, function (bs) { return function (b) { return (0, function_1.pipe)(bs, (0, exports.append)(b)); }; }), f(i, as[i]));
                                    }
                                    return out;
                                };
                            };
                        };
                        exports.traverseWithIndex = traverseWithIndex;
                        /**
                         * @category Comonad
                         * @since 2.6.3
                         */
                        exports.extract = _.head;
                        /**
                         * @category type lambdas
                         * @since 2.5.0
                         */
                        exports.URI = 'ReadonlyNonEmptyArray';
                        /**
                         * @category instances
                         * @since 2.5.0
                         */
                        var getShow = function (S) {
                            return ({
                                show: function (as) { return "[".concat(as.map(S.show).join(', '), "]"); }
                            });
                        };
                        exports.getShow = getShow;
                        /**
                         * Builds a `Semigroup` instance for `ReadonlyNonEmptyArray`
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getSemigroup = function () {
                            return ({
                                concat: concat
                            });
                        };
                        exports.getSemigroup = getSemigroup;
                        /**
                         * @example
                         * import { getEq } from 'fp-ts/ReadonlyNonEmptyArray'
                         * import * as N from 'fp-ts/number'
                         *
                         * const E = getEq(N.Eq)
                         * assert.strictEqual(E.equals([1, 2], [1, 2]), true)
                         * assert.strictEqual(E.equals([1, 2], [1, 3]), false)
                         *
                         * @category instances
                         * @since 2.5.0
                         */
                        var getEq = function (E) {
                            return (0, Eq_1.fromEquals)(function (xs, ys) { return xs.length === ys.length && xs.every(function (x, i) { return E.equals(x, ys[i]); }); });
                        };
                        exports.getEq = getEq;
                        /**
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (E) {
                            var unionE = (0, exports.union)(E);
                            return {
                                concat: function (first, second) { return unionE(second)(first); }
                            };
                        };
                        exports.getUnionSemigroup = getUnionSemigroup;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Pointed = {
                            URI: exports.URI,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.FunctorWithIndex = {
                            URI: exports.URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Apply = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.5.0
                         */
                        exports.apFirst = (0, Apply_1.apFirst)(exports.Apply);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.5.0
                         */
                        exports.apSecond = (0, Apply_1.apSecond)(exports.Apply);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Applicative = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Chain = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            chain: exports.flatMap
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(
                         *   pipe(
                         *     [1, 2, 3],
                         *     RA.chainFirst(() => ['a', 'b'])
                         *   ),
                         *   [1, 1, 2, 2, 3, 3]
                         * )
                         *
                         * @category sequencing
                         * @since 2.5.0
                         */
                        exports.chainFirst = (0, Chain_1.chainFirst)(exports.Chain);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Monad = {
                            URI: exports.URI,
                            map: _map,
                            ap: _ap,
                            of: exports.of,
                            chain: exports.flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Foldable = {
                            URI: exports.URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.FoldableWithIndex = {
                            URI: exports.URI,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Traversable = {
                            URI: exports.URI,
                            map: _map,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.TraversableWithIndex = {
                            URI: exports.URI,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Alt = {
                            URI: exports.URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Comonad = {
                            URI: exports.URI,
                            map: _map,
                            extend: _extend,
                            extract: exports.extract
                        };
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        exports.Do = (0, exports.of)(_.emptyRecord);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindTo = (0, Functor_1.bindTo)(exports.Functor);
                        var let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);
                        exports.let = let_;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bind = (0, Chain_1.bind)(exports.Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apS = (0, Apply_1.apS)(exports.Apply);
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.5.0
                         */
                        exports.head = exports.extract;
                        /**
                         * @since 2.5.0
                         */
                        exports.tail = _.tail;
                        /**
                         * @since 2.5.0
                         */
                        var last = function (as) { return as[as.length - 1]; };
                        exports.last = last;
                        /**
                         * Get all but the last element of a non empty array, creating a new array.
                         *
                         * @example
                         * import { init } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(init([1, 2, 3]), [1, 2])
                         * assert.deepStrictEqual(init([1]), [])
                         *
                         * @since 2.5.0
                         */
                        var init = function (as) { return as.slice(0, -1); };
                        exports.init = init;
                        /**
                         * @since 2.5.0
                         */
                        var min = function (O) {
                            var S = Se.min(O);
                            return function (as) { return as.reduce(S.concat); };
                        };
                        exports.min = min;
                        /**
                         * @since 2.5.0
                         */
                        var max = function (O) {
                            var S = Se.max(O);
                            return function (as) { return as.reduce(S.concat); };
                        };
                        exports.max = max;
                        /**
                         * @since 2.10.0
                         */
                        var concatAll = function (S) {
                            return function (as) {
                                return as.reduce(S.concat);
                            };
                        };
                        exports.concatAll = concatAll;
                        /**
                         * Break a `ReadonlyArray` into its first element and remaining elements.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchLeft = function (f) {
                            return function (as) {
                                return f((0, exports.head)(as), (0, exports.tail)(as));
                            };
                        };
                        exports.matchLeft = matchLeft;
                        /**
                         * Break a `ReadonlyArray` into its initial elements and the last element.
                         *
                         * @category pattern matching
                         * @since 2.11.0
                         */
                        var matchRight = function (f) {
                            return function (as) {
                                return f((0, exports.init)(as), (0, exports.last)(as));
                            };
                        };
                        exports.matchRight = matchRight;
                        /**
                         * Apply a function to the head, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var modifyHead = function (f) {
                            return function (as) {
                                return __spreadArray([f((0, exports.head)(as))], (0, exports.tail)(as), true);
                            };
                        };
                        exports.modifyHead = modifyHead;
                        /**
                         * Change the head, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var updateHead = function (a) { return (0, exports.modifyHead)(function () { return a; }); };
                        exports.updateHead = updateHead;
                        /**
                         * Apply a function to the last element, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var modifyLast = function (f) {
                            return function (as) {
                                return (0, function_1.pipe)((0, exports.init)(as), (0, exports.append)(f((0, exports.last)(as))));
                            };
                        };
                        exports.modifyLast = modifyLast;
                        /**
                         * Change the last element, creating a new `ReadonlyNonEmptyArray`.
                         *
                         * @since 2.11.0
                         */
                        var updateLast = function (a) { return (0, exports.modifyLast)(function () { return a; }); };
                        exports.updateLast = updateLast;
                        /**
                         * Places an element in between members of a `ReadonlyNonEmptyArray`, then folds the results using the provided `Semigroup`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { intercalate } from 'fp-ts/ReadonlyNonEmptyArray'
                         *
                         * assert.deepStrictEqual(intercalate(S.Semigroup)('-')(['a', 'b', 'c']), 'a-b-c')
                         *
                         * @since 2.12.0
                         */
                        var intercalate = function (S) {
                            var concatAllS = (0, exports.concatAll)(S);
                            return function (middle) { return (0, function_1.flow)((0, exports.intersperse)(middle), concatAllS); };
                        };
                        exports.intercalate = intercalate;
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.5.0
                         */
                        exports.chain = exports.flatMap;
                        function groupSort(O) {
                            var sortO = (0, exports.sort)(O);
                            var groupO = group(O);
                            return function (as) { return ((0, exports.isNonEmpty)(as) ? groupO(sortO(as)) : exports.empty); };
                        }
                        exports.groupSort = groupSort;
                        function filter(predicate) {
                            return (0, exports.filterWithIndex)(function (_, a) { return predicate(a); });
                        }
                        exports.filter = filter;
                        /**
                         * Use [`filterWithIndex`](./ReadonlyArray.ts.html#filterwithindex) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var filterWithIndex = function (predicate) {
                            return function (as) {
                                return (0, exports.fromReadonlyArray)(as.filter(function (a, i) { return predicate(i, a); }));
                            };
                        };
                        exports.filterWithIndex = filterWithIndex;
                        /**
                         * Use [`unprepend`](#unprepend) instead.
                         *
                         * @category zone of death
                         * @since 2.10.0
                         * @deprecated
                         */
                        exports.uncons = exports.unprepend;
                        /**
                         * Use [`unappend`](#unappend) instead.
                         *
                         * @category zone of death
                         * @since 2.10.0
                         * @deprecated
                         */
                        exports.unsnoc = exports.unappend;
                        function cons(head, tail) {
                            return tail === undefined ? (0, exports.prepend)(head) : (0, function_1.pipe)(tail, (0, exports.prepend)(head));
                        }
                        exports.cons = cons;
                        /**
                         * Use [`append`](./ReadonlyArray.ts.html#append) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var snoc = function (init, end) { return (0, function_1.pipe)(init, concat([end])); };
                        exports.snoc = snoc;
                        /**
                         * Use [`insertAt`](./ReadonlyArray.ts.html#insertat) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        var insertAt = function (i, a) {
                            return function (as) {
                                return i < 0 || i > as.length ? _.none : _.some((0, exports.unsafeInsertAt)(i, a, as));
                            };
                        };
                        exports.insertAt = insertAt;
                        /**
                         * Use [`prependAll`](#prependall) instead.
                         *
                         * @category zone of death
                         * @since 2.9.0
                         * @deprecated
                         */
                        exports.prependToAll = exports.prependAll;
                        /**
                         * Use [`concatAll`](#concatall) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.fold = exports.concatAll;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `RNEA.Functor` instead of `RNEA.readonlyNonEmptyArray`
                         * (where `RNEA` is from `import RNEA from 'fp-ts/ReadonlyNonEmptyArray'`)
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.readonlyNonEmptyArray = {
                            URI: exports.URI,
                            of: exports.of,
                            map: _map,
                            mapWithIndex: _mapWithIndex,
                            ap: _ap,
                            chain: exports.flatMap,
                            extend: _extend,
                            extract: exports.extract,
                            reduce: _reduce,
                            foldMap: _foldMap,
                            reduceRight: _reduceRight,
                            traverse: _traverse,
                            sequence: exports.sequence,
                            reduceWithIndex: _reduceWithIndex,
                            foldMapWithIndex: _foldMapWithIndex,
                            reduceRightWithIndex: _reduceRightWithIndex,
                            traverseWithIndex: _traverseWithIndex,
                            alt: _alt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/ReadonlyRecord.js":
/*!**************************************************!*\
  !*** ./node_modules/fp-ts/lib/ReadonlyRecord.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports._partition = exports._filterMap = exports._filter = exports._reduceRight = exports._foldMap = exports._reduce = exports._mapWithIndex = exports._map = exports.difference = exports.intersection = exports.union = exports.elem = exports.some = exports.every = exports.fromEntries = exports.toEntries = exports.fromFoldableMap = exports.fromFoldable = exports.filterWithIndex = exports.filterMapWithIndex = exports.partitionWithIndex = exports.partitionMapWithIndex = exports.wilt = exports.wither = exports.sequence = exports.traverse = exports.traverseWithIndex = exports.singleton = exports.reduceRightWithIndex = exports.foldMapWithIndex = exports.reduceWithIndex = exports.map = exports.mapWithIndex = exports.empty = exports.lookup = exports.isSubrecord = exports.pop = exports.modifyAt = exports.updateAt = exports.deleteAt = exports.has = exports.upsertAt = exports.toUnfoldable = exports.toReadonlyArray = exports.collect = exports.keys = exports.isEmpty = exports.size = exports.toRecord = exports.fromRecord = void 0;
                        exports.readonlyRecord = exports.hasOwnProperty = exports.insertAt = exports.Witherable = exports.TraversableWithIndex = exports.Traversable = exports.FoldableWithIndex = exports.Foldable = exports.getDifferenceMagma = exports.getIntersectionSemigroup = exports.getUnionMonoid = exports.getUnionSemigroup = exports.getWitherable = exports.getTraversableWithIndex = exports.getTraversable = exports.FilterableWithIndex = exports.Filterable = exports.Compactable = exports.getFoldableWithIndex = exports.getFoldable = exports.FunctorWithIndex = exports.flap = exports.Functor = exports.getMonoid = exports.getEq = exports.getShow = exports.URI = exports.separate = exports.compact = exports.reduceRight = exports.foldMap = exports.reduce = exports.partitionMap = exports.partition = exports.filterMap = exports.filter = exports._sequence = exports._traverse = exports._filterWithIndex = exports._filterMapWithIndex = exports._partitionWithIndex = exports._partitionMapWithIndex = exports._reduceRightWithIndex = exports._foldMapWithIndex = exports._reduceWithIndex = exports._partitionMap = void 0;
                        var Eq_1 = __webpack_require__(/*! ./Eq */ "./node_modules/fp-ts/lib/Eq.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        var Separated_1 = __webpack_require__(/*! ./Separated */ "./node_modules/fp-ts/lib/Separated.js");
                        var S = __importStar(__webpack_require__(/*! ./string */ "./node_modules/fp-ts/lib/string.js"));
                        var Witherable_1 = __webpack_require__(/*! ./Witherable */ "./node_modules/fp-ts/lib/Witherable.js");
                        /**
                         * Builds a `ReadonlyRecord` by copying a `Record`.
                         *
                         * @example
                         * import { ReadonlyRecord, fromRecord } from "fp-ts/ReadonlyRecord"
                         *
                         * const x: Record<string, number> = { a: 1, b: 2 };
                         * const y: ReadonlyRecord<string, number> = fromRecord(x);
                         * assert.deepStrictEqual(x,y);
                         * // `y.a = 5` gives compiler error
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        var fromRecord = function (r) { return Object.assign({}, r); };
                        exports.fromRecord = fromRecord;
                        /**
                         * Builds a mutable `Record` from a `ReadonlyRecord`.
                         *
                         * @example
                         * import { ReadonlyRecord, toRecord } from "fp-ts/ReadonlyRecord"
                         *
                         * const x: ReadonlyRecord<string, number> = { a: 1, b: 2 };
                         * const y: Record<string, number> = toRecord(x);
                         * assert.deepStrictEqual(x,y);
                         * y.a = 5; // it's ok, y is mutable
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        var toRecord = function (r) { return Object.assign({}, r); };
                        exports.toRecord = toRecord;
                        /**
                         * Calculate the number of key/value pairs in a `ReadonlyRecord`,
                         *
                         * @example
                         * import { size } from "fp-ts/ReadonlyRecord";
                         *
                         * assert.deepStrictEqual(size({ a: true, b: 2, c: "three" }), 3);
                         *
                         * @since 2.5.0
                         */
                        var size = function (r) { return Object.keys(r).length; };
                        exports.size = size;
                        /**
                         * Test whether a `ReadonlyRecord` is empty.
                         *
                         * @example
                         * import { isEmpty } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(isEmpty({}), true);
                         * assert.deepStrictEqual(isEmpty({ a: 3 }), false);
                         * @since 2.5.0
                         */
                        var isEmpty = function (r) {
                            for (var k in r) {
                                if (_.has.call(r, k)) {
                                    return false;
                                }
                            }
                            return true;
                        };
                        exports.isEmpty = isEmpty;
                        var keys_ = function (O) {
                            return function (r) {
                                return Object.keys(r).sort(O.compare);
                            };
                        };
                        /**
                         * @since 2.5.0
                         */
                        exports.keys = keys_(S.Ord);
                        function collect(O) {
                            if (typeof O === 'function') {
                                return collect(S.Ord)(O);
                            }
                            var keysO = keys_(O);
                            return function (f) {
                                return function (r) {
                                    var out = [];
                                    for (var _i = 0, _a = keysO(r); _i < _a.length; _i++) {
                                        var key = _a[_i];
                                        out.push(f(key, r[key]));
                                    }
                                    return out;
                                };
                            };
                        }
                        exports.collect = collect;
                        /**
                         * Get a sorted `ReadonlyArray` of the key/value pairs contained in a `ReadonlyRecord`.
                         *
                         * @example
                         * import { toReadonlyArray } from 'fp-ts/ReadonlyRecord'
                         *
                         * const x = { c: 3, a: "foo", b: false };
                         * assert.deepStrictEqual(toReadonlyArray(x), [
                         *   ["a", "foo"],
                         *   ["b", false],
                         *   ["c", 3],
                         * ]);
                         *
                         * @category conversions
                         * @since 2.5.0
                         */
                        exports.toReadonlyArray =
/*#__PURE__*/ collect(S.Ord)(function (k, a) { return [k, a]; });
                        function toUnfoldable(U) {
                            return function (r) {
                                var sas = (0, exports.toReadonlyArray)(r);
                                var len = sas.length;
                                return U.unfold(0, function (b) { return (b < len ? _.some([sas[b], b + 1]) : _.none); });
                            };
                        }
                        exports.toUnfoldable = toUnfoldable;
                        /**
                         * Insert or replace a key/value pair in a `ReadonlyRecord`.
                         *
                         * @example
                         * import { upsertAt } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(upsertAt("a", 5)({ a: 1, b: 2 }), { a: 5, b: 2 });
                         * assert.deepStrictEqual(upsertAt("c", 5)({ a: 1, b: 2 }), { a: 1, b: 2, c: 5 });
                         *
                         * @since 2.10.0
                         */
                        var upsertAt = function (k, a) {
                            return function (r) {
                                if (_.has.call(r, k) && r[k] === a) {
                                    return r;
                                }
                                var out = Object.assign({}, r);
                                out[k] = a;
                                return out;
                            };
                        };
                        exports.upsertAt = upsertAt;
                        /**
                         * Test whether or not a key exists in a `ReadonlyRecord`.
                         *
                         * Note. This function is not pipeable because is a `Refinement`.
                         *
                         * @example
                         * import { has } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(has("a", { a: 1, b: 2 }), true);
                         * assert.deepStrictEqual(has("c", { a: 1, b: 2 }), false);
                         *
                         * @since 2.10.0
                         */
                        var has = function (k, r) { return _.has.call(r, k); };
                        exports.has = has;
                        function deleteAt(k) {
                            return function (r) {
                                if (!_.has.call(r, k)) {
                                    return r;
                                }
                                var out = Object.assign({}, r);
                                delete out[k];
                                return out;
                            };
                        }
                        exports.deleteAt = deleteAt;
                        /**
                         * Replace a key/value pair in a `ReadonlyRecord`.
                         *
                         * @returns If the specified key exists it returns an `Option` containing a new `Record`
                         * with the entry updated, otherwise it returns `None`
                         *
                         * @example
                         * import { updateAt } from 'fp-ts/ReadonlyRecord'
                         * import { option } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(updateAt("a", 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));
                         * assert.deepStrictEqual(updateAt("c", 3)({ a: 1, b: 2 }), option.none);
                         *
                         * @since 2.5.0
                         */
                        var updateAt = function (k, a) {
                            return function (r) {
                                if (!(0, exports.has)(k, r)) {
                                    return _.none;
                                }
                                if (r[k] === a) {
                                    return _.some(r);
                                }
                                var out = Object.assign({}, r);
                                out[k] = a;
                                return _.some(out);
                            };
                        };
                        exports.updateAt = updateAt;
                        /**
                         * Applies a mapping function to one specific key/value pair in a `ReadonlyRecord`.
                         *
                         * @returns If the specified key exists it returns an `Option` containing a new `Record`
                         * with the entry updated, otherwise it returns `None`
                         *
                         * @example
                         * import { modifyAt } from 'fp-ts/ReadonlyRecord'
                         * import { option } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(modifyAt("a", (x: number) => x * 3)({ a: 1, b: 2 }), option.some({ a: 3, b: 2 }));
                         * assert.deepStrictEqual(modifyAt("c", (x: number) => x * 3)({ a: 1, b: 2 }), option.none);
                         *
                         * @since 2.5.0
                         */
                        var modifyAt = function (k, f) {
                            return function (r) {
                                if (!(0, exports.has)(k, r)) {
                                    return _.none;
                                }
                                var next = f(r[k]);
                                if (next === r[k]) {
                                    return _.some(r);
                                }
                                var out = Object.assign({}, r);
                                out[k] = next;
                                return _.some(out);
                            };
                        };
                        exports.modifyAt = modifyAt;
                        function pop(k) {
                            var deleteAtk = deleteAt(k);
                            return function (r) {
                                var oa = lookup(k, r);
                                return _.isNone(oa) ? _.none : _.some([oa.value, deleteAtk(r)]);
                            };
                        }
                        exports.pop = pop;
                        function isSubrecord(E) {
                            return function (me, that) {
                                if (that === undefined) {
                                    var isSubrecordE_1 = isSubrecord(E);
                                    return function (that) { return isSubrecordE_1(that, me); };
                                }
                                for (var k in me) {
                                    if (!_.has.call(that, k) || !E.equals(me[k], that[k])) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                        }
                        exports.isSubrecord = isSubrecord;
                        function lookup(k, r) {
                            if (r === undefined) {
                                return function (r) { return lookup(k, r); };
                            }
                            return _.has.call(r, k) ? _.some(r[k]) : _.none;
                        }
                        exports.lookup = lookup;
                        /**
                         * @since 2.5.0
                         */
                        exports.empty = {};
                        function mapWithIndex(f) {
                            return function (r) {
                                var out = {};
                                for (var k in r) {
                                    if (_.has.call(r, k)) {
                                        out[k] = f(k, r[k]);
                                    }
                                }
                                return out;
                            };
                        }
                        exports.mapWithIndex = mapWithIndex;
                        function map(f) {
                            return mapWithIndex(function (_, a) { return f(a); });
                        }
                        exports.map = map;
                        function reduceWithIndex() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 2) {
                                return reduceWithIndex(S.Ord).apply(void 0, args);
                            }
                            var keysO = keys_(args[0]);
                            return function (b, f) {
                                return function (fa) {
                                    var out = b;
                                    var ks = keysO(fa);
                                    var len = ks.length;
                                    for (var i = 0; i < len; i++) {
                                        var k = ks[i];
                                        out = f(k, out, fa[k]);
                                    }
                                    return out;
                                };
                            };
                        }
                        exports.reduceWithIndex = reduceWithIndex;
                        function foldMapWithIndex(O) {
                            if ('compare' in O) {
                                var keysO_1 = keys_(O);
                                return function (M) {
                                    return function (f) {
                                        return function (fa) {
                                            var out = M.empty;
                                            var ks = keysO_1(fa);
                                            var len = ks.length;
                                            for (var i = 0; i < len; i++) {
                                                var k = ks[i];
                                                out = M.concat(out, f(k, fa[k]));
                                            }
                                            return out;
                                        };
                                    };
                                };
                            }
                            return foldMapWithIndex(S.Ord)(O);
                        }
                        exports.foldMapWithIndex = foldMapWithIndex;
                        function reduceRightWithIndex() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 2) {
                                return reduceRightWithIndex(S.Ord).apply(void 0, args);
                            }
                            var keysO = keys_(args[0]);
                            return function (b, f) {
                                return function (fa) {
                                    var out = b;
                                    var ks = keysO(fa);
                                    var len = ks.length;
                                    for (var i = len - 1; i >= 0; i--) {
                                        var k = ks[i];
                                        out = f(k, fa[k], out);
                                    }
                                    return out;
                                };
                            };
                        }
                        exports.reduceRightWithIndex = reduceRightWithIndex;
                        /**
                         * Create a `ReadonlyRecord` with one key/value pair.
                         *
                         * @example
                         * import { singleton } from "fp-ts/ReadonlyRecord";
                         *
                         * assert.deepStrictEqual(singleton("a", 1), { a: 1 });
                         *
                         * @category constructors
                         * @since 2.5.0
                         */
                        var singleton = function (k, a) {
                            var _a;
                            return (_a = {}, _a[k] = a, _a);
                        };
                        exports.singleton = singleton;
                        function traverseWithIndex(F) {
                            var traverseWithIndexOF = _traverseWithIndex(S.Ord)(F);
                            return function (f) { return function (ta) { return traverseWithIndexOF(ta, f); }; };
                        }
                        exports.traverseWithIndex = traverseWithIndex;
                        function traverse(F) {
                            var traverseOF = (0, exports._traverse)(S.Ord)(F);
                            return function (f) { return function (ta) { return traverseOF(ta, f); }; };
                        }
                        exports.traverse = traverse;
                        function sequence(F) {
                            return (0, exports._sequence)(S.Ord)(F);
                        }
                        exports.sequence = sequence;
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wither = function (F) {
                            var traverseF = traverse(F);
                            return function (f) { return function (fa) { return F.map((0, function_1.pipe)(fa, traverseF(f)), exports.compact); }; };
                        };
                        exports.wither = wither;
                        /**
                         * @category filtering
                         * @since 2.6.5
                         */
                        var wilt = function (F) {
                            var traverseF = traverse(F);
                            return function (f) { return function (fa) { return F.map((0, function_1.pipe)(fa, traverseF(f)), exports.separate); }; };
                        };
                        exports.wilt = wilt;
                        function partitionMapWithIndex(f) {
                            return function (r) {
                                var left = {};
                                var right = {};
                                for (var k in r) {
                                    if (_.has.call(r, k)) {
                                        var e = f(k, r[k]);
                                        switch (e._tag) {
                                            case 'Left':
                                                left[k] = e.left;
                                                break;
                                            case 'Right':
                                                right[k] = e.right;
                                                break;
                                        }
                                    }
                                }
                                return (0, Separated_1.separated)(left, right);
                            };
                        }
                        exports.partitionMapWithIndex = partitionMapWithIndex;
                        function partitionWithIndex(predicateWithIndex) {
                            return function (r) {
                                var left = {};
                                var right = {};
                                for (var k in r) {
                                    if (_.has.call(r, k)) {
                                        var a = r[k];
                                        if (predicateWithIndex(k, a)) {
                                            right[k] = a;
                                        }
                                        else {
                                            left[k] = a;
                                        }
                                    }
                                }
                                return (0, Separated_1.separated)(left, right);
                            };
                        }
                        exports.partitionWithIndex = partitionWithIndex;
                        function filterMapWithIndex(f) {
                            return function (r) {
                                var out = {};
                                for (var k in r) {
                                    if (_.has.call(r, k)) {
                                        var ob = f(k, r[k]);
                                        if (_.isSome(ob)) {
                                            out[k] = ob.value;
                                        }
                                    }
                                }
                                return out;
                            };
                        }
                        exports.filterMapWithIndex = filterMapWithIndex;
                        function filterWithIndex(predicateWithIndex) {
                            return function (fa) {
                                var out = {};
                                var changed = false;
                                for (var key in fa) {
                                    if (_.has.call(fa, key)) {
                                        var a = fa[key];
                                        if (predicateWithIndex(key, a)) {
                                            out[key] = a;
                                        }
                                        else {
                                            changed = true;
                                        }
                                    }
                                }
                                return changed ? out : fa;
                            };
                        }
                        exports.filterWithIndex = filterWithIndex;
                        function fromFoldable(M, F) {
                            var fromFoldableMapM = fromFoldableMap(M, F);
                            return function (fka) { return fromFoldableMapM(fka, function_1.identity); };
                        }
                        exports.fromFoldable = fromFoldable;
                        function fromFoldableMap(M, F) {
                            return function (ta, f) {
                                return F.reduce(ta, {}, function (r, a) {
                                    var _a = f(a), k = _a[0], b = _a[1];
                                    r[k] = _.has.call(r, k) ? M.concat(r[k], b) : b;
                                    return r;
                                });
                            };
                        }
                        exports.fromFoldableMap = fromFoldableMap;
                        /**
                         * Alias of [`toReadonlyArray`](#toreadonlyarray).
                         *
                         * @example
                         * import { toEntries } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(toEntries({ b: 2, a: 1 }), [['a', 1], ['b', 2]])
                         *
                         * @category conversions
                         * @since 2.12.0
                         */
                        exports.toEntries = exports.toReadonlyArray;
                        /**
                         * Converts a `ReadonlyArray` of `[key, value]` tuples into a `ReadonlyRecord`.
                         *
                         * @example
                         * import { fromEntries } from 'fp-ts/ReadonlyRecord'
                         *
                         * assert.deepStrictEqual(fromEntries([['a', 1], ['b', 2], ['a', 3]]), { b: 2, a: 3 })
                         *
                         * @since 2.12.0
                         * @category conversions
                         */
                        var fromEntries = function (fa) {
                            var out = {};
                            for (var _i = 0, fa_1 = fa; _i < fa_1.length; _i++) {
                                var a = fa_1[_i];
                                out[a[0]] = a[1];
                            }
                            return out;
                        };
                        exports.fromEntries = fromEntries;
                        function every(predicate) {
                            return function (r) {
                                for (var k in r) {
                                    if (!predicate(r[k])) {
                                        return false;
                                    }
                                }
                                return true;
                            };
                        }
                        exports.every = every;
                        /**
                         * Test if at least one value in a `ReadonlyRecord` satisfies the predicate.
                         *
                         * @example
                         * import { some } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: 1, b: -2 }), true);
                         * assert.deepStrictEqual(some((n: number) => n >= 0)({ a: -1, b: -2 }), false);
                         *
                         * @since 2.5.0
                         */
                        function some(predicate) {
                            return function (r) {
                                for (var k in r) {
                                    if (predicate(r[k])) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                        }
                        exports.some = some;
                        function elem(E) {
                            return function (a, fa) {
                                if (fa === undefined) {
                                    var elemE_1 = elem(E);
                                    return function (fa) { return elemE_1(a, fa); };
                                }
                                for (var k in fa) {
                                    if (E.equals(fa[k], a)) {
                                        return true;
                                    }
                                }
                                return false;
                            };
                        }
                        exports.elem = elem;
                        /**
                         * Union of two `ReadonlyRecord`s.
                         * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining all the
                         * entries of the two inputs.
                         * It uses the `concat` function of the provided `Magma` to
                         * combine the elements with the same key.
                         *
                         * @example
                         * import { union } from "fp-ts/ReadonlyRecord";
                         * import { Magma } from "fp-ts/Magma";
                         *
                         * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };
                         * assert.deepStrictEqual(union(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4, b: 2, c: 3 });
                         * const m2: Magma<number> = { concat: (x: number) => x };
                         * assert.deepStrictEqual(union(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1, b: 2, c: 3 });
                         *
                         * @since 2.11.0
                         */
                        var union = function (M) {
                            return function (second) {
                                return function (first) {
                                    if ((0, exports.isEmpty)(first)) {
                                        return second;
                                    }
                                    if ((0, exports.isEmpty)(second)) {
                                        return first;
                                    }
                                    var out = {};
                                    for (var k in first) {
                                        if ((0, exports.has)(k, second)) {
                                            out[k] = M.concat(first[k], second[k]);
                                        }
                                        else {
                                            out[k] = first[k];
                                        }
                                    }
                                    for (var k in second) {
                                        if (!(0, exports.has)(k, out)) {
                                            out[k] = second[k];
                                        }
                                    }
                                    return out;
                                };
                            };
                        };
                        exports.union = union;
                        /**
                         * Intersection of two `ReadonlyRecord`s.
                         * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` combining only the
                         * entries of the two inputswith the same key.
                         * It uses the `concat` function of the provided `Magma` to
                         * combine the elements.
                         *
                         * @example
                         * import { intersection } from "fp-ts/ReadonlyRecord";
                         * import { Magma } from "fp-ts/Magma";
                         *
                         * const m1: Magma<number> = { concat: (x: number, y: number) => x + y };
                         * assert.deepStrictEqual(intersection(m1)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 4});
                         * const m2: Magma<number> = { concat: (x: number) => x };
                         * assert.deepStrictEqual(intersection(m2)({ a: 3, c: 3 })({ a: 1, b: 2 }), { a: 1});
                         *
                         * @since 2.11.0
                         */
                        var intersection = function (M) {
                            return function (second) {
                                return function (first) {
                                    if ((0, exports.isEmpty)(first) || (0, exports.isEmpty)(second)) {
                                        return exports.empty;
                                    }
                                    var out = {};
                                    for (var k in first) {
                                        if ((0, exports.has)(k, second)) {
                                            out[k] = M.concat(first[k], second[k]);
                                        }
                                    }
                                    return out;
                                };
                            };
                        };
                        exports.intersection = intersection;
                        /**
                         * Difference between two `ReadonlyRecord`s.
                         * Takes two `ReadonlyRecord`s and produces a `ReadonlyRecord` composed by the
                         * entries of the two inputs, removing the entries with the same
                         * key in both inputs.
                         *
                         * @example
                         * import { difference } from "fp-ts/ReadonlyRecord";
                         *
                         * assert.deepStrictEqual(difference({ a: 1 })({ a: 1, b: 2 }), { b: 2 });
                         * assert.deepStrictEqual(difference({ a: 3 })({ a: 1, b: 2 }), { b: 2 });
                         * assert.deepStrictEqual(difference({ a: 3, c: 3 })({ a: 1, b: 2 }), { b: 2, c: 3 });
                         *
                         * @since 2.11.0
                         */
                        var difference = function (second) {
                            return function (first) {
                                if ((0, exports.isEmpty)(first)) {
                                    return second;
                                }
                                if ((0, exports.isEmpty)(second)) {
                                    return first;
                                }
                                var out = {};
                                for (var k in first) {
                                    if (!(0, exports.has)(k, second)) {
                                        out[k] = first[k];
                                    }
                                }
                                for (var k in second) {
                                    if (!(0, exports.has)(k, first)) {
                                        out[k] = second[k];
                                    }
                                }
                                return out;
                            };
                        };
                        exports.difference = difference;
                        /** @internal */
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, map(f)); };
                        exports._map = _map;
                        /** @internal */
                        /* istanbul ignore next */
                        var _mapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, mapWithIndex(f)); };
                        exports._mapWithIndex = _mapWithIndex;
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduce = function (O) {
                            var reduceO = reduce(O);
                            return function (fa, b, f) { return (0, function_1.pipe)(fa, reduceO(b, f)); };
                        };
                        exports._reduce = _reduce;
                        /** @internal */
                        var _foldMap = function (O) {
                            return function (M) {
                                var foldMapM = foldMap(O)(M);
                                return function (fa, f) { return (0, function_1.pipe)(fa, foldMapM(f)); };
                            };
                        };
                        exports._foldMap = _foldMap;
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduceRight = function (O) {
                            var reduceRightO = reduceRight(O);
                            return function (fa, b, f) { return (0, function_1.pipe)(fa, reduceRightO(b, f)); };
                        };
                        exports._reduceRight = _reduceRight;
                        /** @internal */
                        /* istanbul ignore next */
                        var _filter = function (fa, predicate) {
                            return (0, function_1.pipe)(fa, (0, exports.filter)(predicate));
                        };
                        exports._filter = _filter;
                        /** @internal */
                        /* istanbul ignore next */
                        var _filterMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.filterMap)(f)); };
                        exports._filterMap = _filterMap;
                        /** @internal */
                        /* istanbul ignore next */
                        var _partition = function (fa, predicate) { return (0, function_1.pipe)(fa, (0, exports.partition)(predicate)); };
                        exports._partition = _partition;
                        /** @internal */
                        /* istanbul ignore next */
                        var _partitionMap = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.partitionMap)(f)); };
                        exports._partitionMap = _partitionMap;
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduceWithIndex = function (O) {
                            var reduceWithIndexO = reduceWithIndex(O);
                            return function (fa, b, f) { return (0, function_1.pipe)(fa, reduceWithIndexO(b, f)); };
                        };
                        exports._reduceWithIndex = _reduceWithIndex;
                        /** @internal */
                        var _foldMapWithIndex = function (O) {
                            var foldMapWithIndexO = foldMapWithIndex(O);
                            return function (M) {
                                var foldMapWithIndexM = foldMapWithIndexO(M);
                                return function (fa, f) { return (0, function_1.pipe)(fa, foldMapWithIndexM(f)); };
                            };
                        };
                        exports._foldMapWithIndex = _foldMapWithIndex;
                        /** @internal */
                        /* istanbul ignore next */
                        var _reduceRightWithIndex = function (O) {
                            var reduceRightWithIndexO = reduceRightWithIndex(O);
                            return function (fa, b, f) { return (0, function_1.pipe)(fa, reduceRightWithIndexO(b, f)); };
                        };
                        exports._reduceRightWithIndex = _reduceRightWithIndex;
                        /** @internal */
                        /* istanbul ignore next */
                        var _partitionMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, partitionMapWithIndex(f)); };
                        exports._partitionMapWithIndex = _partitionMapWithIndex;
                        /** @internal */
                        /* istanbul ignore next */
                        var _partitionWithIndex = function (fa, predicateWithIndex) {
                            return (0, function_1.pipe)(fa, partitionWithIndex(predicateWithIndex));
                        };
                        exports._partitionWithIndex = _partitionWithIndex;
                        /** @internal */
                        /* istanbul ignore next */
                        var _filterMapWithIndex = function (fa, f) { return (0, function_1.pipe)(fa, filterMapWithIndex(f)); };
                        exports._filterMapWithIndex = _filterMapWithIndex;
                        /** @internal */
                        /* istanbul ignore next */
                        var _filterWithIndex = function (fa, predicateWithIndex) { return (0, function_1.pipe)(fa, filterWithIndex(predicateWithIndex)); };
                        exports._filterWithIndex = _filterWithIndex;
                        /** @internal */
                        var _traverse = function (O) {
                            var traverseWithIndexO = _traverseWithIndex(O);
                            return function (F) {
                                var traverseWithIndexOF = traverseWithIndexO(F);
                                return function (ta, f) { return traverseWithIndexOF(ta, (0, function_1.flow)(function_1.SK, f)); };
                            };
                        };
                        exports._traverse = _traverse;
                        /** @internal */
                        var _sequence = function (O) {
                            var traverseO = (0, exports._traverse)(O);
                            return function (F) {
                                var traverseOF = traverseO(F);
                                return function (ta) { return traverseOF(ta, function_1.identity); };
                            };
                        };
                        exports._sequence = _sequence;
                        var _traverseWithIndex = function (O) {
                            return function (F) {
                                var keysO = keys_(O);
                                return function (ta, f) {
                                    var ks = keysO(ta);
                                    if (ks.length === 0) {
                                        return F.of(exports.empty);
                                    }
                                    var fr = F.of({});
                                    var _loop_1 = function (key) {
                                        fr = F.ap(F.map(fr, function (r) {
                                            return function (b) {
                                                var _a;
                                                return Object.assign({}, r, (_a = {}, _a[key] = b, _a));
                                            };
                                        }), f(key, ta[key]));
                                    };
                                    for (var _i = 0, ks_1 = ks; _i < ks_1.length; _i++) {
                                        var key = ks_1[_i];
                                        _loop_1(key);
                                    }
                                    return fr;
                                };
                            };
                        };
                        /**
                         * Given a `Predicate`, it produces a new `ReadonlyRecord` keeping only the entries with a
                         * value that satisfies the provided predicate.
                         *
                         * @example
                         * import { filter } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(filter((s: string) => s.length < 4)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   a: "foo",
                         *   b: "bar",
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filter = function (predicate) {
                            return filterWithIndex(function (_, a) { return predicate(a); });
                        };
                        exports.filter = filter;
                        /**
                         * Maps a `ReadonlyRecord` with an iterating function that returns an `Option`
                         * and it keeps only the `Some` values discarding the `None`s.
                         *
                         * @example
                         * import { filterMap } from "fp-ts/ReadonlyRecord"
                         * import { option } from "fp-ts"
                         *
                         * const f = (s: string) => s.length < 4 ? option.some(`${s} is short`): option.none
                         * assert.deepStrictEqual(filterMap(f)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   a: "foo is short",
                         *   b: "bar is short",
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var filterMap = function (f) { return filterMapWithIndex(function (_, a) { return f(a); }); };
                        exports.filterMap = filterMap;
                        /**
                         * Partition a `ReadonlyRecord` into two parts according to a `Predicate`.
                         *
                         * @example
                         * import { partition } from "fp-ts/ReadonlyRecord"
                         *
                         * assert.deepStrictEqual(partition((s: string) => s.length < 4)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   left:{
                         *     c: "verylong"
                         *   },
                         *   right: {
                         *     a: "foo",
                         *     b: "bar",
                         *   },
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partition = function (predicate) {
                            return partitionWithIndex(function (_, a) { return predicate(a); });
                        };
                        exports.partition = partition;
                        /**
                         * Maps a `ReadonlyRecord` with a function returning an `Either` and
                         * partitions the resulting `ReadonlyRecord` into `Left`s and `Right`s.
                         *
                         * @example
                         * import { partitionMap } from "fp-ts/ReadonlyRecord"
                         * import { either } from "fp-ts"
                         *
                         * const f = (s: string) => (s.length < 4 ? either.right(`${s} is short`) : either.left(`${s} is not short`));
                         * assert.deepStrictEqual(partitionMap(f)({ a: "foo", b: "bar", c: "verylong" }), {
                         *   left: {
                         *     c: "verylong is not short",
                         *   },
                         *   right: {
                         *     a: "foo is short",
                         *     b: "bar is short",
                         *   },
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var partitionMap = function (f) {
                            return partitionMapWithIndex(function (_, a) { return f(a); });
                        };
                        exports.partitionMap = partitionMap;
                        function reduce() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 1) {
                                var reduceWithIndexO_1 = reduceWithIndex(args[0]);
                                return function (b, f) { return reduceWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };
                            }
                            return reduce(S.Ord).apply(void 0, args);
                        }
                        exports.reduce = reduce;
                        function foldMap(O) {
                            if ('compare' in O) {
                                var foldMapWithIndexO_1 = foldMapWithIndex(O);
                                return function (M) {
                                    var foldMapWithIndexM = foldMapWithIndexO_1(M);
                                    return function (f) { return foldMapWithIndexM(function (_, a) { return f(a); }); };
                                };
                            }
                            return foldMap(S.Ord)(O);
                        }
                        exports.foldMap = foldMap;
                        function reduceRight() {
                            var args = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                args[_i] = arguments[_i];
                            }
                            if (args.length === 1) {
                                var reduceRightWithIndexO_1 = reduceRightWithIndex(args[0]);
                                return function (b, f) { return reduceRightWithIndexO_1(b, function (_, b, a) { return f(b, a); }); };
                            }
                            return reduceRight(S.Ord).apply(void 0, args);
                        }
                        exports.reduceRight = reduceRight;
                        /**
                         * Compact a `ReadonlyRecord` of `Option`s discarding the `None` values and
                         * keeping the `Some` values.
                         *
                         * @example
                         * import { compact } from 'fp-ts/ReadonlyRecord'
                         * import { option } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(compact({ a: option.some("foo"), b: option.none, c: option.some("bar") }), {
                         *   a: "foo",
                         *   c: "bar",
                         * });
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var compact = function (r) {
                            var out = {};
                            for (var k in r) {
                                if (_.has.call(r, k)) {
                                    var oa = r[k];
                                    if (_.isSome(oa)) {
                                        out[k] = oa.value;
                                    }
                                }
                            }
                            return out;
                        };
                        exports.compact = compact;
                        /**
                         * Separate a `ReadonlyRecord` of `Either`s into `Left`s and `Right`s.
                         *
                         * @example
                         * import { separate } from 'fp-ts/ReadonlyRecord'
                         * import { either } from 'fp-ts'
                         *
                         * assert.deepStrictEqual(
                         *   separate({ a: either.right("foo"), b: either.left("bar"), c: either.right("baz") }),
                         *   {
                         *     right: {
                         *       a: "foo",
                         *       c: "baz",
                         *     },
                         *     left: {
                         *       b: "bar",
                         *     },
                         *   }
                         * );
                         *
                         * @category filtering
                         * @since 2.5.0
                         */
                        var separate = function (r) {
                            var left = {};
                            var right = {};
                            for (var k in r) {
                                if (_.has.call(r, k)) {
                                    var e = r[k];
                                    if (_.isLeft(e)) {
                                        left[k] = e.left;
                                    }
                                    else {
                                        right[k] = e.right;
                                    }
                                }
                            }
                            return (0, Separated_1.separated)(left, right);
                        };
                        exports.separate = separate;
                        /**
                         * @category type lambdas
                         * @since 2.5.0
                         */
                        exports.URI = 'ReadonlyRecord';
                        function getShow(O) {
                            if ('compare' in O) {
                                return function (S) {
                                    return ({
                                        show: function (r) {
                                            var elements = collect(O)(function (k, a) { return "".concat(JSON.stringify(k), ": ").concat(S.show(a)); })(r).join(', ');
                                            return elements === '' ? '{}' : "{ ".concat(elements, " }");
                                        }
                                    });
                                };
                            }
                            return getShow(S.Ord)(O);
                        }
                        exports.getShow = getShow;
                        function getEq(E) {
                            var isSubrecordE = isSubrecord(E);
                            return (0, Eq_1.fromEquals)(function (x, y) { return isSubrecordE(x)(y) && isSubrecordE(y)(x); });
                        }
                        exports.getEq = getEq;
                        function getMonoid(S) {
                            return {
                                concat: function (first, second) {
                                    if ((0, exports.isEmpty)(first)) {
                                        return second;
                                    }
                                    if ((0, exports.isEmpty)(second)) {
                                        return first;
                                    }
                                    var r = Object.assign({}, first);
                                    for (var k in second) {
                                        if (_.has.call(second, k)) {
                                            r[k] = _.has.call(first, k) ? S.concat(first[k], second[k]) : second[k];
                                        }
                                    }
                                    return r;
                                },
                                empty: exports.empty
                            };
                        }
                        exports.getMonoid = getMonoid;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: exports._map
                        };
                        /**
                         * Takes a value and a `ReadonlyRecord` of functions and returns a
                         * `ReadonlyRecord` by applying each function to the input value.
                         *
                         * @example
                         * import { flap } from "fp-ts/ReadonlyRecord"
                         *
                         * const fab = { x: (n: number) => `${n} times 2`, y: (n: number) => `${n * 2}` };
                         * assert.deepStrictEqual(flap(3)(fab), {
                         *   x: "3 times 2",
                         *   y: "6",
                         * });
                         *
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.FunctorWithIndex = {
                            URI: exports.URI,
                            map: exports._map,
                            mapWithIndex: exports._mapWithIndex
                        };
                        /**
                         * Produces a `Foldable` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category folding
                         * @since 2.11.0
                         */
                        var getFoldable = function (O) {
                            return ({
                                URI: exports.URI,
                                reduce: (0, exports._reduce)(O),
                                foldMap: (0, exports._foldMap)(O),
                                reduceRight: (0, exports._reduceRight)(O)
                            });
                        };
                        exports.getFoldable = getFoldable;
                        /**
                         * Produces a `FoldableWithIndex1` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category folding
                         * @since 2.11.0
                         */
                        var getFoldableWithIndex = function (O) {
                            return ({
                                URI: exports.URI,
                                reduce: (0, exports._reduce)(O),
                                foldMap: (0, exports._foldMap)(O),
                                reduceRight: (0, exports._reduceRight)(O),
                                reduceWithIndex: (0, exports._reduceWithIndex)(O),
                                foldMapWithIndex: (0, exports._foldMapWithIndex)(O),
                                reduceRightWithIndex: (0, exports._reduceRightWithIndex)(O)
                            });
                        };
                        exports.getFoldableWithIndex = getFoldableWithIndex;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Compactable = {
                            URI: exports.URI,
                            compact: exports.compact,
                            separate: exports.separate
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Filterable = {
                            URI: exports.URI,
                            map: exports._map,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: exports._filter,
                            filterMap: exports._filterMap,
                            partition: exports._partition,
                            partitionMap: exports._partitionMap
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.FilterableWithIndex = {
                            URI: exports.URI,
                            map: exports._map,
                            mapWithIndex: exports._mapWithIndex,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: exports._filter,
                            filterMap: exports._filterMap,
                            partition: exports._partition,
                            partitionMap: exports._partitionMap,
                            filterMapWithIndex: exports._filterMapWithIndex,
                            filterWithIndex: exports._filterWithIndex,
                            partitionMapWithIndex: exports._partitionMapWithIndex,
                            partitionWithIndex: exports._partitionWithIndex
                        };
                        /**
                         * Produces a `Traversable` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var getTraversable = function (O) {
                            return ({
                                URI: exports.URI,
                                map: exports._map,
                                reduce: (0, exports._reduce)(O),
                                foldMap: (0, exports._foldMap)(O),
                                reduceRight: (0, exports._reduceRight)(O),
                                traverse: (0, exports._traverse)(O),
                                sequence: (0, exports._sequence)(O)
                            });
                        };
                        exports.getTraversable = getTraversable;
                        /**
                         * Produces a `TraversableWithIndex` instance for a `ReadonlyRecord`, using the
                         * provided `Ord` to sort the `ReadonlyRecord`'s entries by key.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var getTraversableWithIndex = function (O) {
                            return ({
                                URI: exports.URI,
                                map: exports._map,
                                mapWithIndex: exports._mapWithIndex,
                                reduce: (0, exports._reduce)(O),
                                foldMap: (0, exports._foldMap)(O),
                                reduceRight: (0, exports._reduceRight)(O),
                                reduceWithIndex: (0, exports._reduceWithIndex)(O),
                                foldMapWithIndex: (0, exports._foldMapWithIndex)(O),
                                reduceRightWithIndex: (0, exports._reduceRightWithIndex)(O),
                                traverse: (0, exports._traverse)(O),
                                sequence: (0, exports._sequence)(O),
                                traverseWithIndex: _traverseWithIndex(O)
                            });
                        };
                        exports.getTraversableWithIndex = getTraversableWithIndex;
                        /**
                         * @category filtering
                         * @since 2.11.0
                         */
                        var getWitherable = function (O) {
                            var T = (0, exports.getTraversable)(O);
                            return {
                                URI: exports.URI,
                                map: exports._map,
                                reduce: (0, exports._reduce)(O),
                                foldMap: (0, exports._foldMap)(O),
                                reduceRight: (0, exports._reduceRight)(O),
                                traverse: T.traverse,
                                sequence: T.sequence,
                                compact: exports.compact,
                                separate: exports.separate,
                                filter: exports._filter,
                                filterMap: exports._filterMap,
                                partition: exports._partition,
                                partitionMap: exports._partitionMap,
                                wither: (0, Witherable_1.witherDefault)(T, exports.Compactable),
                                wilt: (0, Witherable_1.wiltDefault)(T, exports.Compactable)
                            };
                        };
                        exports.getWitherable = getWitherable;
                        /**
                         * Given a `Semigroup` in the base type, it produces a `Semigroup`
                         * in the `ReadonlyRecord` of the base type.
                         * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by
                         * `union`.
                         *
                         * @example
                         * import { getUnionSemigroup, ReadonlyRecord } from "fp-ts/ReadonlyRecord"
                         * import { Semigroup } from "fp-ts/Semigroup"
                         *
                         * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };
                         * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getUnionSemigroup(sNumber);
                         * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { a: 1, b: -1, c: 4 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionSemigroup = function (S) {
                            var unionS = (0, exports.union)(S);
                            return {
                                concat: function (first, second) { return unionS(second)(first); }
                            };
                        };
                        exports.getUnionSemigroup = getUnionSemigroup;
                        /**
                         * Same as `getMonoid`.
                         * Returns a `Monoid` instance for `ReadonlyRecord`s given a `Semigroup`
                         * instance for the base type.
                         * The `Monoid` makes the union of two `ReadonlyRecord`s combining the
                         * entries that have the same key with the provided `Semigroup`.
                         *
                         * @example
                         * import { SemigroupSum } from 'fp-ts/number'
                         * import { getUnionMonoid } from 'fp-ts/ReadonlyRecord'
                         *
                         * const M = getUnionMonoid(SemigroupSum);
                         * assert.deepStrictEqual(M.concat({ foo: 123, bar: 234 }, { foo: 456, baz: 567 }), { foo: 579 , bar: 234, baz: 567 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getUnionMonoid = function (S) {
                            return ({
                                concat: (0, exports.getUnionSemigroup)(S).concat,
                                empty: exports.empty
                            });
                        };
                        exports.getUnionMonoid = getUnionMonoid;
                        /**
                         * Given a `Semigroup` in the base type, it produces a `Semigroup`
                         * in the `ReadonlyRecord` of the base type.
                         * The resulting `Semigroup` concatenates two `ReadonlyRecord`s by
                         * `intersection`.
                         *
                         * @example
                         * import { getIntersectionSemigroup, ReadonlyRecord } from "fp-ts/ReadonlyRecord"
                         * import { Semigroup } from "fp-ts/Semigroup"
                         *
                         * const sNumber: Semigroup<number> = { concat: (x, y) => x - y };
                         * const sReadonlyRecord: Semigroup<ReadonlyRecord<string, number>> = getIntersectionSemigroup(sNumber);
                         * assert.deepStrictEqual(sReadonlyRecord.concat({ a: 1, b: 2 }, { b: 3, c: 4 }), { b: -1 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getIntersectionSemigroup = function (S) {
                            var intersectionS = (0, exports.intersection)(S);
                            return {
                                concat: function (first, second) { return intersectionS(second)(first); }
                            };
                        };
                        exports.getIntersectionSemigroup = getIntersectionSemigroup;
                        /**
                         * Produces a `Magma` with a `concat` function that combines
                         * two `ReadonlyRecord`s by making the `difference`.
                         *
                         * @example
                         * import { getDifferenceMagma, difference, ReadonlyRecord } from "fp-ts/ReadonlyRecord"
                         * import { Magma } from "fp-ts/Magma"
                         *
                         * const r1 = { a: 3, c: 3 };
                         * const r2 = { a: 1, b: 2 };
                         * const m: Magma<ReadonlyRecord<string, number>> = getDifferenceMagma<number>();
                         * assert.deepStrictEqual(m.concat(r1, r2), difference(r2)(r1));
                         * assert.deepStrictEqual(m.concat(r1, r2), { c: 3, b: 2 });
                         *
                         * @category instances
                         * @since 2.11.0
                         */
                        var getDifferenceMagma = function () {
                            return ({
                                concat: function (first, second) { return (0, exports.difference)(second)(first); }
                            });
                        };
                        exports.getDifferenceMagma = getDifferenceMagma;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `getFoldable` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        exports.Foldable = {
                            URI: exports.URI,
                            reduce: /*#__PURE__*/ (0, exports._reduce)(S.Ord),
                            foldMap: /*#__PURE__*/ (0, exports._foldMap)(S.Ord),
                            reduceRight: /*#__PURE__*/ (0, exports._reduceRight)(S.Ord)
                        };
                        /**
                         * Use `getFoldableWithIndex` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        exports.FoldableWithIndex = {
                            URI: exports.URI,
                            reduce: /*#__PURE__*/ (0, exports._reduce)(S.Ord),
                            foldMap: /*#__PURE__*/ (0, exports._foldMap)(S.Ord),
                            reduceRight: /*#__PURE__*/ (0, exports._reduceRight)(S.Ord),
                            reduceWithIndex: /*#__PURE__*/ (0, exports._reduceWithIndex)(S.Ord),
                            foldMapWithIndex: /*#__PURE__*/ (0, exports._foldMapWithIndex)(S.Ord),
                            reduceRightWithIndex: /*#__PURE__*/ (0, exports._reduceRightWithIndex)(S.Ord)
                        };
                        /**
                         * Use `getTraversable` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        exports.Traversable = {
                            URI: exports.URI,
                            map: exports._map,
                            reduce: /*#__PURE__*/ (0, exports._reduce)(S.Ord),
                            foldMap: /*#__PURE__*/ (0, exports._foldMap)(S.Ord),
                            reduceRight: /*#__PURE__*/ (0, exports._reduceRight)(S.Ord),
                            traverse: /*#__PURE__*/ (0, exports._traverse)(S.Ord),
                            sequence: sequence
                        };
                        /**
                         * Use `getTraversableWithIndex` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        exports.TraversableWithIndex = {
                            URI: exports.URI,
                            map: exports._map,
                            mapWithIndex: exports._mapWithIndex,
                            reduce: /*#__PURE__*/ (0, exports._reduce)(S.Ord),
                            foldMap: /*#__PURE__*/ (0, exports._foldMap)(S.Ord),
                            reduceRight: /*#__PURE__*/ (0, exports._reduceRight)(S.Ord),
                            reduceWithIndex: /*#__PURE__*/ (0, exports._reduceWithIndex)(S.Ord),
                            foldMapWithIndex: /*#__PURE__*/ (0, exports._foldMapWithIndex)(S.Ord),
                            reduceRightWithIndex: /*#__PURE__*/ (0, exports._reduceRightWithIndex)(S.Ord),
                            traverse: /*#__PURE__*/ (0, exports._traverse)(S.Ord),
                            sequence: sequence,
                            traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord)
                        };
                        var _wither = /*#__PURE__*/ (0, Witherable_1.witherDefault)(exports.Traversable, exports.Compactable);
                        var _wilt = /*#__PURE__*/ (0, Witherable_1.wiltDefault)(exports.Traversable, exports.Compactable);
                        /**
                         * Use `getWitherable` instead.
                         *
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        exports.Witherable = {
                            URI: exports.URI,
                            map: exports._map,
                            reduce: /*#__PURE__*/ (0, exports._reduce)(S.Ord),
                            foldMap: /*#__PURE__*/ (0, exports._foldMap)(S.Ord),
                            reduceRight: /*#__PURE__*/ (0, exports._reduceRight)(S.Ord),
                            traverse: /*#__PURE__*/ (0, exports._traverse)(S.Ord),
                            sequence: sequence,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: exports._filter,
                            filterMap: exports._filterMap,
                            partition: exports._partition,
                            partitionMap: exports._partitionMap,
                            wither: _wither,
                            wilt: _wilt
                        };
                        /**
                         * Use [`upsertAt`](#upsertat) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.insertAt = exports.upsertAt;
                        function hasOwnProperty(k, r) {
                            return _.has.call(r === undefined ? this : r, k);
                        }
                        exports.hasOwnProperty = hasOwnProperty;
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `RR.Functor` instead of `RR.readonlyRecord`
                         * (where `RR` is from `import RR from 'fp-ts/ReadonlyRecord'`)
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.readonlyRecord = {
                            URI: exports.URI,
                            map: exports._map,
                            reduce: /*#__PURE__*/ (0, exports._reduce)(S.Ord),
                            foldMap: /*#__PURE__*/ (0, exports._foldMap)(S.Ord),
                            reduceRight: /*#__PURE__*/ (0, exports._reduceRight)(S.Ord),
                            traverse: /*#__PURE__*/ (0, exports._traverse)(S.Ord),
                            sequence: sequence,
                            compact: exports.compact,
                            separate: exports.separate,
                            filter: exports._filter,
                            filterMap: exports._filterMap,
                            partition: exports._partition,
                            partitionMap: exports._partitionMap,
                            mapWithIndex: exports._mapWithIndex,
                            reduceWithIndex: /*#__PURE__*/ (0, exports._reduceWithIndex)(S.Ord),
                            foldMapWithIndex: /*#__PURE__*/ (0, exports._foldMapWithIndex)(S.Ord),
                            reduceRightWithIndex: /*#__PURE__*/ (0, exports._reduceRightWithIndex)(S.Ord),
                            filterMapWithIndex: exports._filterMapWithIndex,
                            filterWithIndex: exports._filterWithIndex,
                            partitionMapWithIndex: exports._partitionMapWithIndex,
                            partitionWithIndex: exports._partitionWithIndex,
                            traverseWithIndex: /*#__PURE__*/ _traverseWithIndex(S.Ord),
                            wither: _wither,
                            wilt: _wilt
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Semigroup.js":
/*!*********************************************!*\
  !*** ./node_modules/fp-ts/lib/Semigroup.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.semigroupProduct = exports.semigroupSum = exports.semigroupString = exports.getFunctionSemigroup = exports.semigroupAny = exports.semigroupAll = exports.fold = exports.getIntercalateSemigroup = exports.getMeetSemigroup = exports.getJoinSemigroup = exports.getDualSemigroup = exports.getStructSemigroup = exports.getTupleSemigroup = exports.getFirstSemigroup = exports.getLastSemigroup = exports.getObjectSemigroup = exports.semigroupVoid = exports.concatAll = exports.last = exports.first = exports.intercalate = exports.tuple = exports.struct = exports.reverse = exports.constant = exports.max = exports.min = void 0;
                        /**
                         * If a type `A` can form a `Semigroup` it has an **associative** binary operation.
                         *
                         * ```ts
                         * interface Semigroup<A> {
                         *   readonly concat: (x: A, y: A) => A
                         * }
                         * ```
                         *
                         * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.
                         *
                         * ```ts
                         * concat(x, concat(y, z)) = concat(concat(x, y), z)
                         * ```
                         *
                         * A common example of a semigroup is the type `string` with the operation `+`.
                         *
                         * ```ts
                         * import { Semigroup } from 'fp-ts/Semigroup'
                         *
                         * const semigroupString: Semigroup<string> = {
                         *   concat: (x, y) => x + y
                         * }
                         *
                         * const x = 'x'
                         * const y = 'y'
                         * const z = 'z'
                         *
                         * semigroupString.concat(x, y) // 'xy'
                         *
                         * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'
                         *
                         * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'
                         * ```
                         *
                         * *Adapted from https://typelevel.org/cats*
                         *
                         * @since 2.0.0
                         */
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        var M = __importStar(__webpack_require__(/*! ./Magma */ "./node_modules/fp-ts/lib/Magma.js"));
                        var Or = __importStar(__webpack_require__(/*! ./Ord */ "./node_modules/fp-ts/lib/Ord.js"));
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * Get a semigroup where `concat` will return the minimum, based on the provided order.
                         *
                         * @example
                         * import * as N from 'fp-ts/number'
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * const S1 = S.min(N.Ord)
                         *
                         * assert.deepStrictEqual(S1.concat(1, 2), 1)
                         *
                         * @category constructors
                         * @since 2.10.0
                         */
                        var min = function (O) {
                            return ({
                                concat: Or.min(O)
                            });
                        };
                        exports.min = min;
                        /**
                         * Get a semigroup where `concat` will return the maximum, based on the provided order.
                         *
                         * @example
                         * import * as N from 'fp-ts/number'
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * const S1 = S.max(N.Ord)
                         *
                         * assert.deepStrictEqual(S1.concat(1, 2), 2)
                         *
                         * @category constructors
                         * @since 2.10.0
                         */
                        var max = function (O) {
                            return ({
                                concat: Or.max(O)
                            });
                        };
                        exports.max = max;
                        /**
                         * @category constructors
                         * @since 2.10.0
                         */
                        var constant = function (a) {
                            return ({
                                concat: function () { return a; }
                            });
                        };
                        exports.constant = constant;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.
                         *
                         * @example
                         * import { reverse } from 'fp-ts/Semigroup'
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')
                         *
                         * @since 2.10.0
                         */
                        exports.reverse = M.reverse;
                        /**
                         * Given a struct of semigroups returns a semigroup for the struct.
                         *
                         * @example
                         * import { struct } from 'fp-ts/Semigroup'
                         * import * as N from 'fp-ts/number'
                         *
                         * interface Point {
                         *   readonly x: number
                         *   readonly y: number
                         * }
                         *
                         * const S = struct<Point>({
                         *   x: N.SemigroupSum,
                         *   y: N.SemigroupSum
                         * })
                         *
                         * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })
                         *
                         * @since 2.10.0
                         */
                        var struct = function (semigroups) {
                            return ({
                                concat: function (first, second) {
                                    var r = {};
                                    for (var k in semigroups) {
                                        if (_.has.call(semigroups, k)) {
                                            r[k] = semigroups[k].concat(first[k], second[k]);
                                        }
                                    }
                                    return r;
                                }
                            });
                        };
                        exports.struct = struct;
                        /**
                         * Given a tuple of semigroups returns a semigroup for the tuple.
                         *
                         * @example
                         * import { tuple } from 'fp-ts/Semigroup'
                         * import * as B from 'fp-ts/boolean'
                         * import * as N from 'fp-ts/number'
                         * import * as S from 'fp-ts/string'
                         *
                         * const S1 = tuple(S.Semigroup, N.SemigroupSum)
                         * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])
                         *
                         * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)
                         * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])
                         *
                         * @since 2.10.0
                         */
                        var tuple = function () {
                            var semigroups = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                semigroups[_i] = arguments[_i];
                            }
                            return ({
                                concat: function (first, second) { return semigroups.map(function (s, i) { return s.concat(first[i], second[i]); }); }
                            });
                        };
                        exports.tuple = tuple;
                        /**
                         * Between each pair of elements insert `middle`.
                         *
                         * @example
                         * import { intercalate } from 'fp-ts/Semigroup'
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * const S1 = pipe(S.Semigroup, intercalate(' + '))
                         *
                         * assert.strictEqual(S1.concat('a', 'b'), 'a + b')
                         *
                         * @since 2.10.0
                         */
                        var intercalate = function (middle) {
                            return function (S) {
                                return ({
                                    concat: function (x, y) { return S.concat(x, S.concat(middle, y)); }
                                });
                            };
                        };
                        exports.intercalate = intercalate;
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * Always return the first argument.
                         *
                         * @example
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var first = function () { return ({ concat: function_1.identity }); };
                        exports.first = first;
                        /**
                         * Always return the last argument.
                         *
                         * @example
                         * import * as S from 'fp-ts/Semigroup'
                         *
                         * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var last = function () { return ({ concat: function (_, y) { return y; } }); };
                        exports.last = last;
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Given a sequence of `as`, concat them and return the total.
                         *
                         * If `as` is empty, return the provided `startWith` value.
                         *
                         * @example
                         * import { concatAll } from 'fp-ts/Semigroup'
                         * import * as N from 'fp-ts/number'
                         *
                         * const sum = concatAll(N.SemigroupSum)(0)
                         *
                         * assert.deepStrictEqual(sum([1, 2, 3]), 6)
                         * assert.deepStrictEqual(sum([]), 0)
                         *
                         * @since 2.10.0
                         */
                        exports.concatAll = M.concatAll;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * Use `void` module instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.semigroupVoid = (0, exports.constant)(undefined);
                        /**
                         * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getObjectSemigroup = function () {
                            return ({
                                concat: function (first, second) { return Object.assign({}, first, second); }
                            });
                        };
                        exports.getObjectSemigroup = getObjectSemigroup;
                        /**
                         * Use [`last`](#last) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getLastSemigroup = exports.last;
                        /**
                         * Use [`first`](#first) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getFirstSemigroup = exports.first;
                        /**
                         * Use [`tuple`](#tuple) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getTupleSemigroup = exports.tuple;
                        /**
                         * Use [`struct`](#struct) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getStructSemigroup = exports.struct;
                        /**
                         * Use [`reverse`](#reverse) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getDualSemigroup = exports.reverse;
                        /**
                         * Use [`max`](#max) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getJoinSemigroup = exports.max;
                        /**
                         * Use [`min`](#min) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getMeetSemigroup = exports.min;
                        /**
                         * Use [`intercalate`](#intercalate) instead.
                         *
                         * @category zone of death
                         * @since 2.5.0
                         * @deprecated
                         */
                        exports.getIntercalateSemigroup = exports.intercalate;
                        function fold(S) {
                            var concatAllS = (0, exports.concatAll)(S);
                            return function (startWith, as) { return (as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as)); };
                        }
                        exports.fold = fold;
                        /**
                         * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.semigroupAll = {
                            concat: function (x, y) { return x && y; }
                        };
                        /**
                         * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.semigroupAny = {
                            concat: function (x, y) { return x || y; }
                        };
                        /**
                         * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getFunctionSemigroup = function_1.getSemigroup;
                        /**
                         * Use [`Semigroup`](./string.ts.html#Semigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.semigroupString = {
                            concat: function (x, y) { return x + y; }
                        };
                        /**
                         * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.semigroupSum = {
                            concat: function (x, y) { return x + y; }
                        };
                        /**
                         * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.semigroupProduct = {
                            concat: function (x, y) { return x * y; }
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Separated.js":
/*!*********************************************!*\
  !*** ./node_modules/fp-ts/lib/Separated.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        /**
                         * ```ts
                         * interface Separated<E, A> {
                         *    readonly left: E
                         *    readonly right: A
                         * }
                         * ```
                         *
                         * Represents a result of separating a whole into two parts.
                         *
                         * @since 2.10.0
                         */
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.right = exports.left = exports.flap = exports.Functor = exports.Bifunctor = exports.URI = exports.bimap = exports.mapLeft = exports.map = exports.separated = void 0;
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.10.0
                         */
                        var separated = function (left, right) { return ({ left: left, right: right }); };
                        exports.separated = separated;
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        var _mapLeft = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.mapLeft)(f)); };
                        var _bimap = function (fa, g, f) { return (0, function_1.pipe)(fa, (0, exports.bimap)(g, f)); };
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.10.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return (0, exports.separated)((0, exports.left)(fa), f((0, exports.right)(fa)));
                            };
                        };
                        exports.map = map;
                        /**
                         * Map a function over the first type argument of a bifunctor.
                         *
                         * @category error handling
                         * @since 2.10.0
                         */
                        var mapLeft = function (f) {
                            return function (fa) {
                                return (0, exports.separated)(f((0, exports.left)(fa)), (0, exports.right)(fa));
                            };
                        };
                        exports.mapLeft = mapLeft;
                        /**
                         * Map a pair of functions over the two type arguments of the bifunctor.
                         *
                         * @category mapping
                         * @since 2.10.0
                         */
                        var bimap = function (f, g) {
                            return function (fa) {
                                return (0, exports.separated)(f((0, exports.left)(fa)), g((0, exports.right)(fa)));
                            };
                        };
                        exports.bimap = bimap;
                        /**
                         * @category type lambdas
                         * @since 2.10.0
                         */
                        exports.URI = 'Separated';
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Bifunctor = {
                            URI: exports.URI,
                            mapLeft: _mapLeft,
                            bimap: _bimap
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.10.0
                         */
                        var left = function (s) { return s.left; };
                        exports.left = left;
                        /**
                         * @since 2.10.0
                         */
                        var right = function (s) { return s.right; };
                        exports.right = right;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Task.js":
/*!****************************************!*\
  !*** ./node_modules/fp-ts/lib/Task.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.sequenceSeqArray = exports.traverseSeqArray = exports.traverseSeqArrayWithIndex = exports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndexSeq = exports.traverseReadonlyNonEmptyArrayWithIndexSeq = exports.traverseReadonlyArrayWithIndex = exports.traverseReadonlyNonEmptyArrayWithIndex = exports.ApT = exports.apS = exports.bind = exports.let = exports.bindTo = exports.Do = exports.never = exports.FromTask = exports.chainFirstIOK = exports.chainIOK = exports.fromIOK = exports.tapIO = exports.tap = exports.flatMapIO = exports.FromIO = exports.MonadTask = exports.fromTask = exports.MonadIO = exports.Monad = exports.Chain = exports.ApplicativeSeq = exports.ApplySeq = exports.ApplicativePar = exports.apSecond = exports.apFirst = exports.ApplyPar = exports.Pointed = exports.flap = exports.asUnit = exports.as = exports.Functor = exports.getRaceMonoid = exports.URI = exports.flatten = exports.flatMap = exports.of = exports.ap = exports.map = exports.delay = exports.fromIO = void 0;
                        exports.getMonoid = exports.getSemigroup = exports.taskSeq = exports.task = exports.chainFirst = exports.chain = void 0;
                        /**
                         * ```ts
                         * interface Task<A> {
                         *   (): Promise<A>
                         * }
                         * ```
                         *
                         * `Task<A>` represents an asynchronous computation that yields a value of type `A` and **never fails**.
                         * If you want to represent an asynchronous computation that may fail, please see `TaskEither`.
                         *
                         * @since 2.0.0
                         */
                        var Applicative_1 = __webpack_require__(/*! ./Applicative */ "./node_modules/fp-ts/lib/Applicative.js");
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var chainable = __importStar(__webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js"));
                        var FromIO_1 = __webpack_require__(/*! ./FromIO */ "./node_modules/fp-ts/lib/FromIO.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category conversions
                         * @since 2.0.0
                         */
                        var fromIO = function (ma) { return function () { return Promise.resolve().then(ma); }; };
                        exports.fromIO = fromIO;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * Creates a task that will complete after a time delay
                         *
                         * @example
                         * import { sequenceT } from 'fp-ts/Apply'
                         * import * as T from 'fp-ts/Task'
                         * import { takeRight } from 'fp-ts/Array'
                         *
                         * async function test() {
                         *   const log: Array<string> = []
                         *   const append = (message: string): T.Task<void> =>
                         *     T.fromIO(() => {
                         *       log.push(message)
                         *     })
                         *   const fa = append('a')
                         *   const fb = T.delay(20)(append('b'))
                         *   const fc = T.delay(10)(append('c'))
                         *   const fd = append('d')
                         *   await sequenceT(T.ApplyPar)(fa, fb, fc, fd)()
                         *   assert.deepStrictEqual(takeRight(2)(log), ['c', 'b'])
                         * }
                         *
                         * test()
                         *
                         * @since 2.0.0
                         */
                        function delay(millis) {
                            return function (ma) {
                                return function () {
                                    return new Promise(function (resolve) {
                                        setTimeout(function () {
                                            Promise.resolve().then(ma).then(resolve);
                                        }, millis);
                                    });
                                };
                            };
                        }
                        exports.delay = delay;
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        var _apPar = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };
                        var _apSeq = function (fab, fa) { return (0, exports.flatMap)(fab, function (f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); }); };
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        var map = function (f) {
                            return function (fa) {
                                return function () {
                                    return Promise.resolve().then(fa).then(f);
                                };
                            };
                        };
                        exports.map = map;
                        /**
                         * @since 2.0.0
                         */
                        var ap = function (fa) {
                            return function (fab) {
                                return function () {
                                    return Promise.all([Promise.resolve().then(fab), Promise.resolve().then(fa)]).then(function (_a) {
                                        var f = _a[0], a = _a[1];
                                        return f(a);
                                    });
                                };
                            };
                        };
                        exports.ap = ap;
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        var of = function (a) { return function () { return Promise.resolve(a); }; };
                        exports.of = of;
                        /**
                         * @category sequencing
                         * @since 2.14.0
                         */
                        exports.flatMap = (0, function_1.dual)(2, function (ma, f) {
                            return function () {
                                return Promise.resolve()
                                    .then(ma)
                                    .then(function (a) { return f(a)(); });
                            };
                        });
                        /**
                         * @category sequencing
                         * @since 2.0.0
                         */
                        exports.flatten = (0, exports.flatMap)(function_1.identity);
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        exports.URI = 'Task';
                        /**
                         * Monoid returning the first completed task.
                         *
                         * Note: uses `Promise.race` internally.
                         *
                         * @example
                         * import * as T from 'fp-ts/Task'
                         *
                         * async function test() {
                         *   const S = T.getRaceMonoid<string>()
                         *   const fa = T.delay(20)(T.of('a'))
                         *   const fb = T.delay(10)(T.of('b'))
                         *   assert.deepStrictEqual(await S.concat(fa, fb)(), 'b')
                         * }
                         *
                         * test()
                         *
                         * @category instances
                         * @since 2.0.0
                         */
                        function getRaceMonoid() {
                            return {
                                concat: function (x, y) { return function () { return Promise.race([Promise.resolve().then(x), Promise.resolve().then(y)]); }; },
                                empty: exports.never
                            };
                        }
                        exports.getRaceMonoid = getRaceMonoid;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * Maps the value to the specified constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.as = (0, function_1.dual)(2, (0, Functor_1.as)(exports.Functor));
                        /**
                         * Maps the value to the void constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.asUnit = (0, Functor_1.asUnit)(exports.Functor);
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Pointed = {
                            URI: exports.URI,
                            of: exports.of
                        };
                        /**
                         * Runs computations in parallel.
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.ApplyPar = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.0.0
                         */
                        exports.apFirst = (0, Apply_1.apFirst)(exports.ApplyPar);
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.0.0
                         */
                        exports.apSecond = (0, Apply_1.apSecond)(exports.ApplyPar);
                        /**
                         * Runs computations in parallel.
                         *
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.ApplicativePar = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            of: exports.of
                        };
                        /**
                         * Runs computations sequentially.
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.ApplySeq = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apSeq
                        };
                        /**
                         * Runs computations sequentially.
                         *
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.ApplicativeSeq = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apSeq,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Chain = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            chain: exports.flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Monad = {
                            URI: exports.URI,
                            map: _map,
                            of: exports.of,
                            ap: _apPar,
                            chain: exports.flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.MonadIO = {
                            URI: exports.URI,
                            map: _map,
                            of: exports.of,
                            ap: _apPar,
                            chain: exports.flatMap,
                            fromIO: exports.fromIO
                        };
                        /**
                         * @category zone of death
                         * @since 2.7.0
                         * @deprecated
                         */
                        exports.fromTask = function_1.identity;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.MonadTask = {
                            URI: exports.URI,
                            map: _map,
                            of: exports.of,
                            ap: _apPar,
                            chain: exports.flatMap,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.FromIO = {
                            URI: exports.URI,
                            fromIO: exports.fromIO
                        };
                        /** @internal */
                        var _FlatMap = {
                            flatMap: exports.flatMap
                        };
                        /** @internal */
                        var _FromIO = {
                            fromIO: exports.FromIO.fromIO
                        };
                        /**
                         * @category sequencing
                         * @since 2.16.0
                         */
                        exports.flatMapIO = _.flatMapIO(_FromIO, _FlatMap);
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category combinators
                         * @since 2.15.0
                         */
                        exports.tap = (0, function_1.dual)(2, chainable.tap(exports.Chain));
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as T from 'fp-ts/Task'
                         * import * as Console from 'fp-ts/Console'
                         *
                         * // Will produce `Hello, fp-ts` to the stdout
                         * const effect = pipe(
                         *   T.of('fp-ts'),
                         *   T.tapIO((value) => Console.log(`Hello, ${value}`)),
                         * )
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(await effect(), 'fp-ts')
                         * }
                         *
                         * test()
                         *
                         * @category combinators
                         * @since 2.16.0
                         */
                        exports.tapIO = (0, function_1.dual)(2, (0, FromIO_1.tapIO)(exports.FromIO, exports.Chain));
                        /**
                         * @category lifting
                         * @since 2.4.0
                         */
                        exports.fromIOK =
/*#__PURE__*/ (0, FromIO_1.fromIOK)(exports.FromIO);
                        /**
                         * Alias of `flatMapIO`.
                         *
                         * @category legacy
                         * @since 2.4.0
                         */
                        exports.chainIOK = exports.flatMapIO;
                        /**
                         * Alias of `tapIO`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.chainFirstIOK = exports.tapIO;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.FromTask = {
                            URI: exports.URI,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask
                        };
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * A `Task` that never completes.
                         *
                         * @since 2.0.0
                         */
                        var never = function () { return new Promise(function (_) { return undefined; }); };
                        exports.never = never;
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        exports.Do = (0, exports.of)(_.emptyRecord);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindTo = (0, Functor_1.bindTo)(exports.Functor);
                        var let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);
                        exports.let = let_;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bind = chainable.bind(exports.Chain);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apS = (0, Apply_1.apS)(exports.ApplyPar);
                        /**
                         * @since 2.11.0
                         */
                        exports.ApT = (0, exports.of)(_.emptyReadonlyArray);
                        // -------------------------------------------------------------------------------------
                        // array utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndex = function (f) {
                            return function (as) {
                                return function () {
                                    return Promise.all(as.map(function (a, i) { return Promise.resolve().then(function () { return f(i, a)(); }); }));
                                };
                            };
                        };
                        exports.traverseReadonlyNonEmptyArrayWithIndex = traverseReadonlyNonEmptyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndex = function (f) {
                            var g = (0, exports.traverseReadonlyNonEmptyArrayWithIndex)(f);
                            return function (as) { return (_.isNonEmpty(as) ? g(as) : exports.ApT); };
                        };
                        exports.traverseReadonlyArrayWithIndex = traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {
                            return function (as) {
                                return function () {
                                    return _.tail(as).reduce(function (acc, a, i) {
                                        return acc.then(function (bs) {
                                            return Promise.resolve()
                                                .then(f(i + 1, a))
                                                .then(function (b) {
                                                    bs.push(b);
                                                    return bs;
                                                });
                                        });
                                    }, Promise.resolve()
                                        .then(f(0, _.head(as)))
                                        .then(_.singleton));
                                };
                            };
                        };
                        exports.traverseReadonlyNonEmptyArrayWithIndexSeq = traverseReadonlyNonEmptyArrayWithIndexSeq;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndexSeq = function (f) {
                            var g = (0, exports.traverseReadonlyNonEmptyArrayWithIndexSeq)(f);
                            return function (as) { return (_.isNonEmpty(as) ? g(as) : exports.ApT); };
                        };
                        exports.traverseReadonlyArrayWithIndexSeq = traverseReadonlyArrayWithIndexSeq;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArray = function (f) {
                            return (0, exports.traverseReadonlyArrayWithIndex)(function (_, a) { return f(a); });
                        };
                        exports.traverseArray = traverseArray;
                        /**
                         * Equivalent to `ReadonlyArray#sequence(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.sequenceArray =
/*#__PURE__*/ (0, exports.traverseArray)(function_1.identity);
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.traverseSeqArrayWithIndex = exports.traverseReadonlyArrayWithIndexSeq;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseSeqArray = function (f) {
                            return (0, exports.traverseReadonlyArrayWithIndexSeq)(function (_, a) { return f(a); });
                        };
                        exports.traverseSeqArray = traverseSeqArray;
                        /**
                         * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.sequenceSeqArray =
/*#__PURE__*/ (0, exports.traverseSeqArray)(function_1.identity);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chain = exports.flatMap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chainFirst = exports.tap;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.task`
                         * (where `T` is from `import T from 'fp-ts/Task'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.task = {
                            URI: exports.URI,
                            map: _map,
                            of: exports.of,
                            ap: _apPar,
                            chain: exports.flatMap,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask
                        };
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `T.Functor` instead of `T.taskSeq`
                         * (where `T` is from `import T from 'fp-ts/Task'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.taskSeq = {
                            URI: exports.URI,
                            map: _map,
                            of: exports.of,
                            ap: _apSeq,
                            chain: exports.flatMap,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask
                        };
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getSemigroup = (0, Apply_1.getApplySemigroup)(exports.ApplySeq);
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * Lift a monoid into 'Task', the inner values are concatenated using the provided `Monoid`.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getMonoid = (0, Applicative_1.getApplicativeMonoid)(exports.ApplicativeSeq);


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/TaskEither.js":
/*!**********************************************!*\
  !*** ./node_modules/fp-ts/lib/TaskEither.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
                            function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                            return new (P || (P = Promise))(function (resolve, reject) {
                                function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
                                function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
                                function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                                step((generator = generator.apply(thisArg, _arguments || [])).next());
                            });
                        };
                        var __generator = (this && this.__generator) || function (thisArg, body) {
                            var _ = { label: 0, sent: function () { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                            return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                            function verb(n) { return function (v) { return step([n, v]); }; }
                            function step(op) {
                                if (f) throw new TypeError("Generator is already executing.");
                                while (g && (g = 0, op[0] && (_ = 0)), _) try {
                                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                                    if (y = 0, t) op = [op[0] & 2, t.value];
                                    switch (op[0]) {
                                        case 0: case 1: t = op; break;
                                        case 4: _.label++; return { value: op[1], done: false };
                                        case 5: _.label++; y = op[1]; op = [0]; continue;
                                        case 7: op = _.ops.pop(); _.trys.pop(); continue;
                                        default:
                                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                                            if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                                            if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                                            if (t[2]) _.ops.pop();
                                            _.trys.pop(); continue;
                                    }
                                    op = body.call(thisArg, _);
                                } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
                                if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
                            }
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.throwError = exports.of = exports.altW = exports.alt = exports.flatten = exports.flattenW = exports.flatMap = exports.apW = exports.ap = exports.mapLeft = exports.mapError = exports.bimap = exports.mapBoth = exports.map = exports.fromIOEitherK = exports.chainTaskOptionK = exports.chainTaskOptionKW = exports.fromTaskOptionK = exports.swap = exports.orLeft = exports.orElseFirstTaskK = exports.orElseFirstIOK = exports.tapError = exports.orElseW = exports.orElse = exports.chainNullableK = exports.fromNullableK = exports.fromNullable = exports.toUnion = exports.tryCatchK = exports.tryCatch = exports.getOrElseW = exports.getOrElse = exports.foldW = exports.matchEW = exports.fold = exports.matchE = exports.matchW = exports.match = exports.fromTaskOption = exports.fromIOEither = exports.fromEither = exports.fromTask = exports.fromIO = exports.leftIO = exports.rightIO = exports.leftTask = exports.rightTask = exports.right = exports.left = void 0;
                        exports.fromPredicate = exports.chainFirstEitherKW = exports.chainFirstEitherK = exports.chainEitherKW = exports.chainEitherK = exports.flatMapTaskOption = exports.flatMapIOEither = exports.flatMapTask = exports.flatMapIO = exports.flatMapEither = exports.flatMapOption = exports.flatMapNullable = exports.liftOption = exports.liftNullable = exports.chainOptionKW = exports.chainOptionK = exports.fromOptionK = exports.fromOption = exports.Alt = exports.Bifunctor = exports.tapTask = exports.tapIO = exports.tapEither = exports.tap = exports.FromTask = exports.FromIO = exports.FromEither = exports.MonadThrow = exports.MonadTask = exports.MonadIO = exports.Monad = exports.Chain = exports.ApplicativeSeq = exports.ApplySeq = exports.ApplicativePar = exports.apSecondW = exports.apSecond = exports.apFirstW = exports.apFirst = exports.ApplyPar = exports.Pointed = exports.flap = exports.asUnit = exports.as = exports.Functor = exports.getFilterable = exports.getCompactable = exports.getAltTaskValidation = exports.getApplicativeTaskValidation = exports.URI = void 0;
                        exports.getTaskValidation = exports.getSemigroup = exports.getApplyMonoid = exports.getApplySemigroup = exports.taskEitherSeq = exports.taskEither = exports.orElseFirstW = exports.orElseFirst = exports.chainFirstW = exports.chainFirst = exports.chainW = exports.chain = exports.sequenceSeqArray = exports.traverseSeqArray = exports.traverseSeqArrayWithIndex = exports.sequenceArray = exports.traverseArray = exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndexSeq = exports.traverseReadonlyNonEmptyArrayWithIndexSeq = exports.traverseReadonlyArrayWithIndex = exports.traverseReadonlyNonEmptyArrayWithIndex = exports.ApT = exports.apSW = exports.apS = exports.bindW = exports.bind = exports.let = exports.bindTo = exports.Do = exports.bracketW = exports.bracket = exports.taskify = exports.chainIOEitherK = exports.chainIOEitherKW = exports.chainFirstTaskK = exports.chainTaskK = exports.fromTaskK = exports.chainFirstIOK = exports.chainIOK = exports.fromIOK = exports.fromEitherK = exports.filterOrElseW = exports.filterOrElse = void 0;
                        var Applicative_1 = __webpack_require__(/*! ./Applicative */ "./node_modules/fp-ts/lib/Applicative.js");
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var chainable = __importStar(__webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js"));
                        var Compactable_1 = __webpack_require__(/*! ./Compactable */ "./node_modules/fp-ts/lib/Compactable.js");
                        var E = __importStar(__webpack_require__(/*! ./Either */ "./node_modules/fp-ts/lib/Either.js"));
                        var ET = __importStar(__webpack_require__(/*! ./EitherT */ "./node_modules/fp-ts/lib/EitherT.js"));
                        var Filterable_1 = __webpack_require__(/*! ./Filterable */ "./node_modules/fp-ts/lib/Filterable.js");
                        var FromEither_1 = __webpack_require__(/*! ./FromEither */ "./node_modules/fp-ts/lib/FromEither.js");
                        var FromIO_1 = __webpack_require__(/*! ./FromIO */ "./node_modules/fp-ts/lib/FromIO.js");
                        var FromTask_1 = __webpack_require__(/*! ./FromTask */ "./node_modules/fp-ts/lib/FromTask.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        var Functor_1 = __webpack_require__(/*! ./Functor */ "./node_modules/fp-ts/lib/Functor.js");
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        var T = __importStar(__webpack_require__(/*! ./Task */ "./node_modules/fp-ts/lib/Task.js"));
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.left = ET.left(T.Pointed);
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.right = ET.right(T.Pointed);
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.rightTask = ET.rightF(T.Functor);
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.leftTask = ET.leftF(T.Functor);
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.rightIO = (0, function_1.flow)(T.fromIO, exports.rightTask);
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.leftIO = (0, function_1.flow)(T.fromIO, exports.leftTask);
                        // -------------------------------------------------------------------------------------
                        // conversions
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category conversions
                         * @since 2.7.0
                         */
                        exports.fromIO = exports.rightIO;
                        /**
                         * @category conversions
                         * @since 2.7.0
                         */
                        exports.fromTask = exports.rightTask;
                        /**
                         * @category conversions
                         * @since 2.0.0
                         */
                        exports.fromEither = T.of;
                        /**
                         * @category conversions
                         * @since 2.0.0
                         */
                        exports.fromIOEither = T.fromIO;
                        /**
                         * @category conversions
                         * @since 2.11.0
                         */
                        var fromTaskOption = function (onNone) {
                            return T.map(E.fromOption(onNone));
                        };
                        exports.fromTaskOption = fromTaskOption;
                        /**
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.match =
/*#__PURE__*/ ET.match(T.Functor);
                        /**
                         * Less strict version of [`match`](#match).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.matchW = exports.match;
                        /**
                         * The `E` suffix (short for **E**ffect) means that the handlers return an effect (`Task`).
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.matchE = ET.matchE(T.Monad);
                        /**
                         * Alias of [`matchE`](#matche).
                         *
                         * @category pattern matching
                         * @since 2.0.0
                         */
                        exports.fold = exports.matchE;
                        /**
                         * Less strict version of [`matchE`](#matche).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return types will be merged.
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.matchEW = exports.matchE;
                        /**
                         * Alias of [`matchEW`](#matchew).
                         *
                         * @category pattern matching
                         * @since 2.10.0
                         */
                        exports.foldW = exports.matchEW;
                        /**
                         * @category error handling
                         * @since 2.0.0
                         */
                        exports.getOrElse =
/*#__PURE__*/ ET.getOrElse(T.Monad);
                        /**
                         * Less strict version of [`getOrElse`](#getorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the handler return type will be merged.
                         *
                         * @category error handling
                         * @since 2.6.0
                         */
                        exports.getOrElseW = exports.getOrElse;
                        /**
                         * Transforms a `Promise` that may reject to a `Promise` that never rejects and returns an `Either` instead.
                         *
                         * See also [`tryCatchK`](#trycatchk).
                         *
                         * @example
                         * import { left, right } from 'fp-ts/Either'
                         * import { tryCatch } from 'fp-ts/TaskEither'
                         *
                         * tryCatch(() => Promise.resolve(1), String)().then(result => {
                         *   assert.deepStrictEqual(result, right(1))
                         * })
                         * tryCatch(() => Promise.reject('error'), String)().then(result => {
                         *   assert.deepStrictEqual(result, left('error'))
                         * })
                         *
                         * @category interop
                         * @since 2.0.0
                         */
                        var tryCatch = function (f, onRejected) {
                            return function () {
                                return __awaiter(void 0, void 0, void 0, function () {
                                    var reason_1;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                _a.trys.push([0, 2, , 3]);
                                                return [4 /*yield*/, f().then(_.right)];
                                            case 1: return [2 /*return*/, _a.sent()];
                                            case 2:
                                                reason_1 = _a.sent();
                                                return [2 /*return*/, _.left(onRejected(reason_1))];
                                            case 3: return [2 /*return*/];
                                        }
                                    });
                                });
                            };
                        };
                        exports.tryCatch = tryCatch;
                        /**
                         * Converts a function returning a `Promise` to one returning a `TaskEither`.
                         *
                         * @category interop
                         * @since 2.5.0
                         */
                        var tryCatchK = function (f, onRejected) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return (0, exports.tryCatch)(function () { return f.apply(void 0, a); }, onRejected);
                            };
                        };
                        exports.tryCatchK = tryCatchK;
                        /**
                         * @category conversions
                         * @since 2.10.0
                         */
                        exports.toUnion = ET.toUnion(T.Functor);
                        /**
                         * @category conversions
                         * @since 2.12.0
                         */
                        exports.fromNullable = ET.fromNullable(T.Pointed);
                        /**
                         * Use `liftNullable`.
                         *
                         * @category legacy
                         * @since 2.12.0
                         */
                        exports.fromNullableK = ET.fromNullableK(T.Pointed);
                        /**
                         * Use `flatMapNullable`.
                         *
                         * @category legacy
                         * @since 2.12.0
                         */
                        exports.chainNullableK =
/*#__PURE__*/ ET.chainNullableK(T.Monad);
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * Returns `ma` if is a `Right` or the value returned by `onLeft` otherwise.
                         *
                         * See also [alt](#alt).
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as TE from 'fp-ts/TaskEither'
                         *
                         * async function test() {
                         *   const errorHandler = TE.orElse((error: string) => TE.right(`recovering from ${error}...`))
                         *   assert.deepStrictEqual(await pipe(TE.right('ok'), errorHandler)(), E.right('ok'))
                         *   assert.deepStrictEqual(await pipe(TE.left('ko'), errorHandler)(), E.right('recovering from ko...'))
                         * }
                         *
                         * test()
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        exports.orElse =
/*#__PURE__*/ ET.orElse(T.Monad);
                        /**
                         * Less strict version of [`orElse`](#orelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the return types will be merged.
                         *
                         * @category error handling
                         * @since 2.10.0
                         */
                        exports.orElseW = exports.orElse;
                        /**
                         * Returns an effect that effectfully "peeks" at the failure of this effect.
                         *
                         * @category error handling
                         * @since 2.15.0
                         */
                        exports.tapError = (0, function_1.dual)(2, ET.tapError(T.Monad));
                        /**
                         * @category error handling
                         * @since 2.12.0
                         */
                        var orElseFirstIOK = function (onLeft) { return (0, exports.tapError)((0, exports.fromIOK)(onLeft)); };
                        exports.orElseFirstIOK = orElseFirstIOK;
                        /**
                         * @category error handling
                         * @since 2.12.0
                         */
                        var orElseFirstTaskK = function (onLeft) { return (0, exports.tapError)((0, exports.fromTaskK)(onLeft)); };
                        exports.orElseFirstTaskK = orElseFirstTaskK;
                        /**
                         * @category error handling
                         * @since 2.11.0
                         */
                        exports.orLeft =
/*#__PURE__*/ ET.orLeft(T.Monad);
                        /**
                         * @since 2.0.0
                         */
                        exports.swap = ET.swap(T.Functor);
                        /**
                         * @category lifting
                         * @since 2.11.0
                         */
                        var fromTaskOptionK = function (onNone) {
                            var from = (0, exports.fromTaskOption)(onNone);
                            return function (f) { return (0, function_1.flow)(f, from); };
                        };
                        exports.fromTaskOptionK = fromTaskOptionK;
                        /**
                         * Use `flatMapTaskOption`.
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category legacy
                         * @since 2.12.3
                         */
                        var chainTaskOptionKW = function (onNone) {
                            return function (f) {
                                return function (ma) {
                                    return (0, exports.flatMap)(ma, (0, exports.fromTaskOptionK)(onNone)(f));
                                };
                            };
                        };
                        exports.chainTaskOptionKW = chainTaskOptionKW;
                        /**
                         * Use `flatMapTaskOption`.
                         *
                         * @category legacy
                         * @since 2.11.0
                         */
                        exports.chainTaskOptionK = exports.chainTaskOptionKW;
                        /**
                         * @category lifting
                         * @since 2.4.0
                         */
                        var fromIOEitherK = function (f) { return (0, function_1.flow)(f, exports.fromIOEither); };
                        exports.fromIOEitherK = fromIOEitherK;
                        var _map = function (fa, f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); };
                        var _apPar = function (fab, fa) { return (0, function_1.pipe)(fab, (0, exports.ap)(fa)); };
                        var _apSeq = function (fab, fa) { return (0, exports.flatMap)(fab, function (f) { return (0, function_1.pipe)(fa, (0, exports.map)(f)); }); };
                        /* istanbul ignore next */
                        var _alt = function (fa, that) { return (0, function_1.pipe)(fa, (0, exports.alt)(that)); };
                        /**
                         * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
                         * use the type constructor `F` to represent some computational context.
                         *
                         * @category mapping
                         * @since 2.0.0
                         */
                        exports.map = ET.map(T.Functor);
                        /**
                         * Returns a `TaskEither` whose failure and success channels have been mapped by the specified pair of functions, `f` and `g`.
                         *
                         * @example
                         * import * as TaskEither from 'fp-ts/TaskEither'
                         * import * as Either from 'fp-ts/Either'
                         *
                         * const f = (s: string) => new Error(s)
                         * const g = (n: number) => n * 2
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(await TaskEither.mapBoth(TaskEither.right(1), f, g)(), Either.right(2))
                         *   assert.deepStrictEqual(await TaskEither.mapBoth(TaskEither.left('err'), f, g)(), Either.left(new Error('err')))
                         * }
                         *
                         * test()
                         *
                         * @category error handling
                         * @since 2.16.0
                         */
                        exports.mapBoth = (0, function_1.dual)(3, ET.mapBoth(T.Functor));
                        /**
                         * Alias of `mapBoth`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.bimap = exports.mapBoth;
                        /**
                         * Returns a `TaskEither` with its error channel mapped using the specified function.
                         *
                         * @example
                         * import * as TaskEither from 'fp-ts/TaskEither'
                         * import * as Either from 'fp-ts/Either'
                         *
                         * const f = (s: string) => new Error(s)
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(await TaskEither.mapError(TaskEither.right(1), f)(), Either.right(1))
                         *   assert.deepStrictEqual(await TaskEither.mapError(TaskEither.left('err'), f)(), Either.left(new Error('err')))
                         * }
                         *
                         * test()
                         *
                         * @category error handling
                         * @since 2.16.0
                         */
                        exports.mapError = (0, function_1.dual)(2, ET.mapError(T.Functor));
                        /**
                         * Alias of `mapError`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.mapLeft = exports.mapError;
                        /**
                         * @since 2.0.0
                         */
                        exports.ap =
/*#__PURE__*/ ET.ap(T.ApplyPar);
                        /**
                         * Less strict version of [`ap`](#ap).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.8.0
                         */
                        exports.apW = exports.ap;
                        /**
                         * @category sequencing
                         * @since 2.14.0
                         */
                        exports.flatMap = (0, function_1.dual)(2, ET.flatMap(T.Monad));
                        /**
                         * Less strict version of [`flatten`](#flatten).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category sequencing
                         * @since 2.11.0
                         */
                        exports.flattenW =
/*#__PURE__*/ (0, exports.flatMap)(function_1.identity);
                        /**
                         * @category sequencing
                         * @since 2.0.0
                         */
                        exports.flatten = exports.flattenW;
                        /**
                         * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to
                         * types of kind `* -> *`.
                         *
                         * In case of `TaskEither` returns `fa` if is a `Right` or the value returned by `that` otherwise.
                         *
                         * See also [orElse](#orelse).
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as TE from 'fp-ts/TaskEither'
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(
                         *     await pipe(
                         *       TE.right(1),
                         *       TE.alt(() => TE.right(2))
                         *     )(),
                         *     E.right(1)
                         *   )
                         *   assert.deepStrictEqual(
                         *     await pipe(
                         *       TE.left('a'),
                         *       TE.alt(() => TE.right(2))
                         *     )(),
                         *     E.right(2)
                         *   )
                         *   assert.deepStrictEqual(
                         *     await pipe(
                         *       TE.left('a'),
                         *       TE.alt(() => TE.left('b'))
                         *     )(),
                         *     E.left('b')
                         *   )
                         * }
                         *
                         * test()
                         *
                         * @category error handling
                         * @since 2.0.0
                         */
                        exports.alt =
/*#__PURE__*/ ET.alt(T.Monad);
                        /**
                         * Less strict version of [`alt`](#alt).
                         *
                         * The `W` suffix (short for **W**idening) means that the error and the return types will be merged.
                         *
                         * @category error handling
                         * @since 2.9.0
                         */
                        exports.altW = exports.alt;
                        /**
                         * @category constructors
                         * @since 2.0.0
                         */
                        exports.of = exports.right;
                        /**
                         * @since 2.7.0
                         */
                        exports.throwError = exports.left;
                        /**
                         * @category type lambdas
                         * @since 2.0.0
                         */
                        exports.URI = 'TaskEither';
                        /**
                         * The default [`ApplicativePar`](#applicativepar) instance returns the first error, if you want to
                         * get all errors you need to provide a way to concatenate them via a `Semigroup`.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as RA from 'fp-ts/ReadonlyArray'
                         * import * as S from 'fp-ts/Semigroup'
                         * import * as string from 'fp-ts/string'
                         * import * as T from 'fp-ts/Task'
                         * import * as TE from 'fp-ts/TaskEither'
                         *
                         * interface User {
                         *   readonly id: string
                         *   readonly name: string
                         * }
                         *
                         * const remoteDatabase: ReadonlyArray<User> = [
                         *   { id: 'id1', name: 'John' },
                         *   { id: 'id2', name: 'Mary' },
                         *   { id: 'id3', name: 'Joey' }
                         * ]
                         *
                         * const fetchUser = (id: string): TE.TaskEither<string, User> =>
                         *   pipe(
                         *     remoteDatabase,
                         *     RA.findFirst((user) => user.id === id),
                         *     TE.fromOption(() => `${id} not found`)
                         *   )
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(
                         *     await pipe(['id4', 'id5'], RA.traverse(TE.ApplicativePar)(fetchUser))(),
                         *     E.left('id4 not found') // <= first error
                         *   )
                         *
                         *   const Applicative = TE.getApplicativeTaskValidation(
                         *     T.ApplyPar,
                         *     pipe(string.Semigroup, S.intercalate(', '))
                         *   )
                         *
                         *   assert.deepStrictEqual(
                         *     await pipe(['id4', 'id5'], RA.traverse(Applicative)(fetchUser))(),
                         *     E.left('id4 not found, id5 not found') // <= all errors
                         *   )
                         * }
                         *
                         * test()
                         *
                         * @category error handling
                         * @since 2.7.0
                         */
                        function getApplicativeTaskValidation(A, S) {
                            var ap = (0, Apply_1.ap)(A, E.getApplicativeValidation(S));
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                ap: function (fab, fa) { return (0, function_1.pipe)(fab, ap(fa)); },
                                of: exports.of
                            };
                        }
                        exports.getApplicativeTaskValidation = getApplicativeTaskValidation;
                        /**
                         * The default [`Alt`](#alt) instance returns the last error, if you want to
                         * get all errors you need to provide a way to concatenate them via a `Semigroup`.
                         *
                         * See [`getAltValidation`](./Either.ts.html#getaltvalidation).
                         *
                         * @category error handling
                         * @since 2.7.0
                         */
                        function getAltTaskValidation(S) {
                            var alt = ET.altValidation(T.Monad, S);
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                alt: function (fa, that) { return (0, function_1.pipe)(fa, alt(that)); }
                            };
                        }
                        exports.getAltTaskValidation = getAltTaskValidation;
                        /**
                         * @category filtering
                         * @since 2.10.0
                         */
                        var getCompactable = function (M) {
                            var C = E.getCompactable(M);
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                compact: (0, Compactable_1.compact)(T.Functor, C),
                                separate: (0, Compactable_1.separate)(T.Functor, C, E.Functor)
                            };
                        };
                        exports.getCompactable = getCompactable;
                        /**
                         * @category filtering
                         * @since 2.1.0
                         */
                        function getFilterable(M) {
                            var F = E.getFilterable(M);
                            var C = (0, exports.getCompactable)(M);
                            var filter = (0, Filterable_1.filter)(T.Functor, F);
                            var filterMap = (0, Filterable_1.filterMap)(T.Functor, F);
                            var partition = (0, Filterable_1.partition)(T.Functor, F);
                            var partitionMap = (0, Filterable_1.partitionMap)(T.Functor, F);
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                compact: C.compact,
                                separate: C.separate,
                                filter: function (fa, predicate) { return (0, function_1.pipe)(fa, filter(predicate)); },
                                filterMap: function (fa, f) { return (0, function_1.pipe)(fa, filterMap(f)); },
                                partition: function (fa, predicate) { return (0, function_1.pipe)(fa, partition(predicate)); },
                                partitionMap: function (fa, f) { return (0, function_1.pipe)(fa, partitionMap(f)); }
                            };
                        }
                        exports.getFilterable = getFilterable;
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Functor = {
                            URI: exports.URI,
                            map: _map
                        };
                        /**
                         * Maps the `Right` value of this `TaskEither` to the specified constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.as = (0, function_1.dual)(2, (0, Functor_1.as)(exports.Functor));
                        /**
                         * Maps the `Right` value of this `TaskEither` to the void constant value.
                         *
                         * @category mapping
                         * @since 2.16.0
                         */
                        exports.asUnit = (0, Functor_1.asUnit)(exports.Functor);
                        /**
                         * @category mapping
                         * @since 2.10.0
                         */
                        exports.flap = (0, Functor_1.flap)(exports.Functor);
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Pointed = {
                            URI: exports.URI,
                            of: exports.of
                        };
                        /**
                         * Runs computations in parallel.
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.ApplyPar = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar
                        };
                        /**
                         * Combine two effectful actions, keeping only the result of the first.
                         *
                         * @since 2.0.0
                         */
                        exports.apFirst = (0, Apply_1.apFirst)(exports.ApplyPar);
                        /**
                         * Less strict version of [`apFirst`](#apfirst).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.12.0
                         */
                        exports.apFirstW = exports.apFirst;
                        /**
                         * Combine two effectful actions, keeping only the result of the second.
                         *
                         * @since 2.0.0
                         */
                        exports.apSecond = (0, Apply_1.apSecond)(exports.ApplyPar);
                        /**
                         * Less strict version of [`apSecond`](#apsecond).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.12.0
                         */
                        exports.apSecondW = exports.apSecond;
                        /**
                         * Runs computations in parallel.
                         *
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.ApplicativePar = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            of: exports.of
                        };
                        /**
                         * Runs computations sequentially.
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.ApplySeq = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apSeq
                        };
                        /**
                         * Runs computations sequentially.
                         *
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.ApplicativeSeq = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apSeq,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Chain = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            chain: exports.flatMap
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Monad = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            chain: exports.flatMap,
                            of: exports.of
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.MonadIO = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            chain: exports.flatMap,
                            of: exports.of,
                            fromIO: exports.fromIO
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.MonadTask = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            chain: exports.flatMap,
                            of: exports.of,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.MonadThrow = {
                            URI: exports.URI,
                            map: _map,
                            ap: _apPar,
                            chain: exports.flatMap,
                            of: exports.of,
                            throwError: exports.throwError
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.FromEither = {
                            URI: exports.URI,
                            fromEither: exports.fromEither
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.FromIO = {
                            URI: exports.URI,
                            fromIO: exports.fromIO
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.FromTask = {
                            URI: exports.URI,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask
                        };
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @category combinators
                         * @since 2.15.0
                         */
                        exports.tap = (0, function_1.dual)(2, chainable.tap(exports.Chain));
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import * as E from 'fp-ts/Either'
                         * import { pipe } from 'fp-ts/function'
                         * import * as TE from 'fp-ts/TaskEither'
                         *
                         * const checkString = (value: string) => pipe(
                         *   TE.of(value),
                         *   TE.tapEither(() => value.length > 0 ? E.right('ok') : E.left('error'))
                         * )
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(await checkString('')(), E.left('error'))
                         *   assert.deepStrictEqual(await checkString('fp-ts')(), E.right('fp-ts'))
                         * }
                         *
                         * test()
                         *
                         * @category combinators
                         * @since 2.16.0
                         */
                        exports.tapEither = (0, function_1.dual)(2, (0, FromEither_1.tapEither)(exports.FromEither, exports.Chain));
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import { pipe } from 'fp-ts/function'
                         * import * as TE from 'fp-ts/TaskEither'
                         * import * as E from 'fp-ts/Either'
                         * import * as Console from 'fp-ts/Console'
                         *
                         *
                         * // Will produce `Hello, fp-ts` to the stdout
                         * const effectA = TE.tapIO(
                         *   TE.of(1),
                         *   (value) => Console.log(`Hello, ${value}`)
                         * )
                         *
                         * // No output to the stdout
                         * const effectB = pipe(
                         *   TE.left('error'),
                         *   TE.tapIO((value) => Console.log(`Hello, ${value}`))
                         * )
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(await effectA(), E.of(1))
                         *   assert.deepStrictEqual(await effectB(), E.left('error'))
                         * }
                         *
                         * test()
                         *
                         * @category combinators
                         * @since 2.16.0
                         */
                        exports.tapIO = (0, function_1.dual)(2, (0, FromIO_1.tapIO)(exports.FromIO, exports.Chain));
                        /**
                         * Composes computations in sequence, using the return value of one computation to determine the next computation and
                         * keeping only the result of the first.
                         *
                         * @example
                         * import * as TE from 'fp-ts/TaskEither'
                         * import * as T from 'fp-ts/Task'
                         * import * as E from 'fp-ts/Either'
                         *
                         *
                         * const effect = TE.tapIO(
                         *   TE.of(1),
                         *   (value) => T.of(value + 1)
                         * )
                         *
                         * async function test() {
                         *   assert.deepStrictEqual(await effect(), E.of(1))
                         * }
                         *
                         * test()
                         *
                         * @category combinators
                         * @since 2.16.0
                         */
                        exports.tapTask = (0, function_1.dual)(2, (0, FromTask_1.tapTask)(exports.FromTask, exports.Chain));
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Bifunctor = {
                            URI: exports.URI,
                            bimap: exports.mapBoth,
                            mapLeft: exports.mapError
                        };
                        /**
                         * @category instances
                         * @since 2.7.0
                         */
                        exports.Alt = {
                            URI: exports.URI,
                            map: _map,
                            alt: _alt
                        };
                        /**
                         * @category conversions
                         * @since 2.0.0
                         */
                        exports.fromOption =
/*#__PURE__*/ (0, FromEither_1.fromOption)(exports.FromEither);
                        /**
                         * Use `liftOption`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.fromOptionK =
/*#__PURE__*/ (0, FromEither_1.fromOptionK)(exports.FromEither);
                        /**
                         * Use `flatMapOption`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.chainOptionK = (0, FromEither_1.chainOptionK)(exports.FromEither, exports.Chain);
                        /**
                         * Use `flatMapOption`.
                         *
                         * @category legacy
                         * @since 2.13.2
                         */
                        exports.chainOptionKW =
/*#__PURE__*/ exports.chainOptionK;
                        /** @internal */
                        var _FromEither = {
                            fromEither: exports.FromEither.fromEither
                        };
                        /**
                         * @category lifting
                         * @since 2.15.0
                         */
                        exports.liftNullable = _.liftNullable(_FromEither);
                        /**
                         * @category lifting
                         * @since 2.15.0
                         */
                        exports.liftOption = _.liftOption(_FromEither);
                        /** @internal */
                        var _FlatMap = {
                            flatMap: exports.flatMap
                        };
                        /** @internal */
                        var _FromIO = {
                            fromIO: exports.FromIO.fromIO
                        };
                        /** @internal */
                        var _FromTask = {
                            fromTask: exports.fromTask
                        };
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        exports.flatMapNullable = _.flatMapNullable(_FromEither, _FlatMap);
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        exports.flatMapOption = _.flatMapOption(_FromEither, _FlatMap);
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        exports.flatMapEither = _.flatMapEither(_FromEither, _FlatMap);
                        /**
                         * @category sequencing
                         * @since 2.15.0
                         */
                        exports.flatMapIO = _.flatMapIO(_FromIO, _FlatMap);
                        /**
                         * @category sequencing
                         * @since 2.16.0
                         */
                        exports.flatMapTask = _.flatMapTask(_FromTask, _FlatMap);
                        /**
                         * @category sequencing
                         * @since 2.16.0
                         */
                        exports.flatMapIOEither = (0, function_1.dual)(2, function (self, f) {
                            return (0, exports.flatMap)(self, (0, exports.fromIOEitherK)(f));
                        });
                        /**
                         * @category sequencing
                         * @since 2.16.0
                         */
                        exports.flatMapTaskOption = (0, function_1.dual)(3, function (self, f, onNone) {
                            return (0, exports.flatMap)(self, function (a) { return (0, exports.fromTaskOption)(function () { return onNone(a); })(f(a)); });
                        });
                        /**
                         * Alias of `flatMapEither`.
                         *
                         * @category legacy
                         * @since 2.4.0
                         */
                        exports.chainEitherK = exports.flatMapEither;
                        /**
                         * Alias of `flatMapEither`.
                         *
                         * @category legacy
                         * @since 2.6.1
                         */
                        exports.chainEitherKW = exports.flatMapEither;
                        /**
                         * Alias of `tapEither`.
                         *
                         * @category legacy
                         * @since 2.12.0
                         */
                        exports.chainFirstEitherK = exports.tapEither;
                        /**
                         * Alias of `tapEither`.
                         *
                         * Less strict version of [`chainFirstEitherK`](#chainfirsteitherk).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category legacy
                         * @since 2.12.0
                         */
                        exports.chainFirstEitherKW = exports.tapEither;
                        /**
                         * @category lifting
                         * @since 2.0.0
                         */
                        exports.fromPredicate = (0, FromEither_1.fromPredicate)(exports.FromEither);
                        /**
                         * @category filtering
                         * @since 2.0.0
                         */
                        exports.filterOrElse = (0, FromEither_1.filterOrElse)(exports.FromEither, exports.Chain);
                        /**
                         * Less strict version of [`filterOrElse`](#filterorelse).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category filtering
                         * @since 2.9.0
                         */
                        exports.filterOrElseW = exports.filterOrElse;
                        /**
                         * @category lifting
                         * @since 2.4.0
                         */
                        exports.fromEitherK = (0, FromEither_1.fromEitherK)(exports.FromEither);
                        /**
                         * @category lifting
                         * @since 2.10.0
                         */
                        exports.fromIOK = (0, FromIO_1.fromIOK)(exports.FromIO);
                        /**
                         * Alias of `flatMapIO`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.chainIOK = exports.flatMapIO;
                        /**
                         * Alias of `tapIO`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.chainFirstIOK = exports.tapIO;
                        /**
                         * @category lifting
                         * @since 2.10.0
                         */
                        exports.fromTaskK = (0, FromTask_1.fromTaskK)(exports.FromTask);
                        /**
                         * Alias of `flatMapTask`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.chainTaskK = exports.flatMapTask;
                        /**
                         * Alias of `tapTask`.
                         *
                         * @category legacy
                         * @since 2.10.0
                         */
                        exports.chainFirstTaskK = exports.tapTask;
                        /**
                         * Alias of `flatMapIOEither`.
                         *
                         * Less strict version of [`chainIOEitherK`](#chainioeitherk).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category legacy
                         * @since 2.6.1
                         */
                        exports.chainIOEitherKW = exports.flatMapIOEither;
                        /**
                         * Alias of `flatMapIOEither`.
                         *
                         * @category legacy
                         * @since 2.4.0
                         */
                        exports.chainIOEitherK = exports.flatMapIOEither;
                        function taskify(f) {
                            return function () {
                                var args = Array.prototype.slice.call(arguments);
                                return function () {
                                    return new Promise(function (resolve) {
                                        var cbResolver = function (e, r) { return (e != null ? resolve(_.left(e)) : resolve(_.right(r))); };
                                        f.apply(null, args.concat(cbResolver));
                                    });
                                };
                            };
                        }
                        exports.taskify = taskify;
                        /**
                         * Make sure that a resource is cleaned up in the event of an exception (\*). The release action is called regardless of
                         * whether the body action throws (\*) or returns.
                         *
                         * (\*) i.e. returns a `Left`
                         *
                         * @since 2.0.0
                         */
                        var bracket = function (acquire, use, release) { return (0, exports.bracketW)(acquire, use, release); };
                        exports.bracket = bracket;
                        /**
                         * Less strict version of [`bracket`](#bracket).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @since 2.12.0
                         */
                        var bracketW = function (acquire, use, release) {
                            return (0, exports.flatMap)(acquire, function (a) { return T.flatMap(use(a), function (e) { return (0, exports.flatMap)(release(a, e), function () { return T.of(e); }); }); });
                        };
                        exports.bracketW = bracketW;
                        // -------------------------------------------------------------------------------------
                        // do notation
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category do notation
                         * @since 2.9.0
                         */
                        exports.Do = (0, exports.of)(_.emptyRecord);
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindTo = (0, Functor_1.bindTo)(exports.Functor);
                        var let_ = /*#__PURE__*/ (0, Functor_1.let)(exports.Functor);
                        exports.let = let_;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bind = chainable.bind(exports.Chain);
                        /**
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.bindW = exports.bind;
                        /**
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apS = (0, Apply_1.apS)(exports.ApplyPar);
                        /**
                         * Less strict version of [`apS`](#aps).
                         *
                         * The `W` suffix (short for **W**idening) means that the error types will be merged.
                         *
                         * @category do notation
                         * @since 2.8.0
                         */
                        exports.apSW = exports.apS;
                        /**
                         * @since 2.11.0
                         */
                        exports.ApT = (0, exports.of)(_.emptyReadonlyArray);
                        // -------------------------------------------------------------------------------------
                        // array utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Equivalent to `ReadonlyNonEmptyArray#traverseWithIndex(ApplicativePar)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndex = function (f) {
                            return (0, function_1.flow)(T.traverseReadonlyNonEmptyArrayWithIndex(f), T.map(E.traverseReadonlyNonEmptyArrayWithIndex(function_1.SK)));
                        };
                        exports.traverseReadonlyNonEmptyArrayWithIndex = traverseReadonlyNonEmptyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativePar)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndex = function (f) {
                            var g = (0, exports.traverseReadonlyNonEmptyArrayWithIndex)(f);
                            return function (as) { return (_.isNonEmpty(as) ? g(as) : exports.ApT); };
                        };
                        exports.traverseReadonlyArrayWithIndex = traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyNonEmptyArrayWithIndexSeq = function (f) {
                            return function (as) {
                                return function () {
                                    return _.tail(as).reduce(function (acc, a, i) {
                                        return acc.then(function (ebs) {
                                            return _.isLeft(ebs)
                                                ? acc
                                                : f(i + 1, a)().then(function (eb) {
                                                    if (_.isLeft(eb)) {
                                                        return eb;
                                                    }
                                                    ebs.right.push(eb.right);
                                                    return ebs;
                                                });
                                        });
                                    }, f(0, _.head(as))().then(E.map(_.singleton)));
                                };
                            };
                        };
                        exports.traverseReadonlyNonEmptyArrayWithIndexSeq = traverseReadonlyNonEmptyArrayWithIndexSeq;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.11.0
                         */
                        var traverseReadonlyArrayWithIndexSeq = function (f) {
                            var g = (0, exports.traverseReadonlyNonEmptyArrayWithIndexSeq)(f);
                            return function (as) { return (_.isNonEmpty(as) ? g(as) : exports.ApT); };
                        };
                        exports.traverseReadonlyArrayWithIndexSeq = traverseReadonlyArrayWithIndexSeq;
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.traverseArrayWithIndex = exports.traverseReadonlyArrayWithIndex;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseArray = function (f) { return (0, exports.traverseReadonlyArrayWithIndex)(function (_, a) { return f(a); }); };
                        exports.traverseArray = traverseArray;
                        /**
                         * Equivalent to `ReadonlyArray#sequence(Applicative)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.sequenceArray =
/*#__PURE__*/ (0, exports.traverseArray)(function_1.identity);
                        /**
                         * Equivalent to `ReadonlyArray#traverseWithIndex(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.traverseSeqArrayWithIndex = exports.traverseReadonlyArrayWithIndexSeq;
                        /**
                         * Equivalent to `ReadonlyArray#traverse(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        var traverseSeqArray = function (f) { return (0, exports.traverseReadonlyArrayWithIndexSeq)(function (_, a) { return f(a); }); };
                        exports.traverseSeqArray = traverseSeqArray;
                        /**
                         * Equivalent to `ReadonlyArray#sequence(ApplicativeSeq)`.
                         *
                         * @category traversing
                         * @since 2.9.0
                         */
                        exports.sequenceSeqArray =
/*#__PURE__*/ (0, exports.traverseSeqArray)(function_1.identity);
                        // -------------------------------------------------------------------------------------
                        // legacy
                        // -------------------------------------------------------------------------------------
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chain = exports.flatMap;
                        /**
                         * Alias of `flatMap`.
                         *
                         * @category legacy
                         * @since 2.6.0
                         */
                        exports.chainW = exports.flatMap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.0.0
                         */
                        exports.chainFirst = exports.tap;
                        /**
                         * Alias of `tap`.
                         *
                         * @category legacy
                         * @since 2.8.0
                         */
                        exports.chainFirstW = exports.tap;
                        /**
                         * Alias of `tapError`.
                         *
                         * @category legacy
                         * @since 2.11.0
                         */
                        exports.orElseFirst = exports.tapError;
                        /**
                         * Alias of `tapError`.
                         *
                         * @category legacy
                         * @since 2.11.0
                         */
                        exports.orElseFirstW = exports.tapError;
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `TE.Functor` instead of `TE.taskEither`
                         * (where `TE` is from `import TE from 'fp-ts/TaskEither'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.taskEither = {
                            URI: exports.URI,
                            bimap: exports.mapBoth,
                            mapLeft: exports.mapError,
                            map: _map,
                            of: exports.of,
                            ap: _apPar,
                            chain: exports.flatMap,
                            alt: _alt,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask,
                            throwError: exports.throwError
                        };
                        /**
                         * This instance is deprecated, use small, specific instances instead.
                         * For example if a function needs a `Functor` instance, pass `TE.Functor` instead of `TE.taskEitherSeq`
                         * (where `TE` is from `import TE from 'fp-ts/TaskEither'`)
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.taskEitherSeq = {
                            URI: exports.URI,
                            bimap: exports.mapBoth,
                            mapLeft: exports.mapError,
                            map: _map,
                            of: exports.of,
                            ap: _apSeq,
                            chain: exports.flatMap,
                            alt: _alt,
                            fromIO: exports.fromIO,
                            fromTask: exports.fromTask,
                            throwError: exports.throwError
                        };
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getApplySemigroup =
/*#__PURE__*/ (0, Apply_1.getApplySemigroup)(exports.ApplySeq);
                        /**
                         * Use [`getApplicativeMonoid`](./Applicative.ts.html#getapplicativemonoid) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.getApplyMonoid =
/*#__PURE__*/ (0, Applicative_1.getApplicativeMonoid)(exports.ApplicativeSeq);
                        /**
                         * Use [`getApplySemigroup`](./Apply.ts.html#getapplysemigroup) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        var getSemigroup = function (S) {
                            return (0, Apply_1.getApplySemigroup)(T.ApplySeq)(E.getSemigroup(S));
                        };
                        exports.getSemigroup = getSemigroup;
                        /**
                         * Use [`getApplicativeTaskValidation`](#getapplicativetaskvalidation) and [`getAltTaskValidation`](#getalttaskvalidation) instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function getTaskValidation(SE) {
                            var applicativeTaskValidation = getApplicativeTaskValidation(T.ApplicativePar, SE);
                            var altTaskValidation = getAltTaskValidation(SE);
                            return {
                                URI: exports.URI,
                                _E: undefined,
                                map: _map,
                                ap: applicativeTaskValidation.ap,
                                of: exports.of,
                                chain: exports.flatMap,
                                bimap: exports.mapBoth,
                                mapLeft: exports.mapError,
                                alt: altTaskValidation.alt,
                                fromIO: exports.fromIO,
                                fromTask: exports.fromTask,
                                throwError: exports.throwError
                            };
                        }
                        exports.getTaskValidation = getTaskValidation;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Witherable.js":
/*!**********************************************!*\
  !*** ./node_modules/fp-ts/lib/Witherable.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.filterE = exports.witherDefault = exports.wiltDefault = void 0;
                        var _ = __importStar(__webpack_require__(/*! ./internal */ "./node_modules/fp-ts/lib/internal.js"));
                        function wiltDefault(T, C) {
                            return function (F) {
                                var traverseF = T.traverse(F);
                                return function (wa, f) { return F.map(traverseF(wa, f), C.separate); };
                            };
                        }
                        exports.wiltDefault = wiltDefault;
                        function witherDefault(T, C) {
                            return function (F) {
                                var traverseF = T.traverse(F);
                                return function (wa, f) { return F.map(traverseF(wa, f), C.compact); };
                            };
                        }
                        exports.witherDefault = witherDefault;
                        function filterE(W) {
                            return function (F) {
                                var witherF = W.wither(F);
                                return function (predicate) { return function (ga) { return witherF(ga, function (a) { return F.map(predicate(a), function (b) { return (b ? _.some(a) : _.none); }); }); }; };
                            };
                        }
                        exports.filterE = filterE;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/Zero.js":
/*!****************************************!*\
  !*** ./node_modules/fp-ts/lib/Zero.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.guard = void 0;
                        function guard(F, P) {
                            return function (b) { return (b ? P.of(undefined) : F.zero()); };
                        }
                        exports.guard = guard;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/function.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/lib/function.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.dual = exports.getEndomorphismMonoid = exports.not = exports.SK = exports.hole = exports.pipe = exports.untupled = exports.tupled = exports.absurd = exports.decrement = exports.increment = exports.tuple = exports.flow = exports.flip = exports.constVoid = exports.constUndefined = exports.constNull = exports.constFalse = exports.constTrue = exports.constant = exports.unsafeCoerce = exports.identity = exports.apply = exports.getRing = exports.getSemiring = exports.getMonoid = exports.getSemigroup = exports.getBooleanAlgebra = void 0;
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getBooleanAlgebra = function (B) {
                            return function () {
                                return ({
                                    meet: function (x, y) { return function (a) { return B.meet(x(a), y(a)); }; },
                                    join: function (x, y) { return function (a) { return B.join(x(a), y(a)); }; },
                                    zero: function () { return B.zero; },
                                    one: function () { return B.one; },
                                    implies: function (x, y) { return function (a) { return B.implies(x(a), y(a)); }; },
                                    not: function (x) { return function (a) { return B.not(x(a)); }; }
                                });
                            };
                        };
                        exports.getBooleanAlgebra = getBooleanAlgebra;
                        /**
                         * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.
                         *
                         * @example
                         * import { Predicate, getSemigroup } from 'fp-ts/function'
                         * import * as B from 'fp-ts/boolean'
                         *
                         * const f: Predicate<number> = (n) => n <= 2
                         * const g: Predicate<number> = (n) => n >= 0
                         *
                         * const S1 = getSemigroup(B.SemigroupAll)<number>()
                         *
                         * assert.deepStrictEqual(S1.concat(f, g)(1), true)
                         * assert.deepStrictEqual(S1.concat(f, g)(3), false)
                         *
                         * const S2 = getSemigroup(B.SemigroupAny)<number>()
                         *
                         * assert.deepStrictEqual(S2.concat(f, g)(1), true)
                         * assert.deepStrictEqual(S2.concat(f, g)(3), true)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var getSemigroup = function (S) {
                            return function () {
                                return ({
                                    concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }
                                });
                            };
                        };
                        exports.getSemigroup = getSemigroup;
                        /**
                         * Unary functions form a monoid as long as you can provide a monoid for the codomain.
                         *
                         * @example
                         * import { Predicate } from 'fp-ts/Predicate'
                         * import { getMonoid } from 'fp-ts/function'
                         * import * as B from 'fp-ts/boolean'
                         *
                         * const f: Predicate<number> = (n) => n <= 2
                         * const g: Predicate<number> = (n) => n >= 0
                         *
                         * const M1 = getMonoid(B.MonoidAll)<number>()
                         *
                         * assert.deepStrictEqual(M1.concat(f, g)(1), true)
                         * assert.deepStrictEqual(M1.concat(f, g)(3), false)
                         *
                         * const M2 = getMonoid(B.MonoidAny)<number>()
                         *
                         * assert.deepStrictEqual(M2.concat(f, g)(1), true)
                         * assert.deepStrictEqual(M2.concat(f, g)(3), true)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        var getMonoid = function (M) {
                            var getSemigroupM = (0, exports.getSemigroup)(M);
                            return function () {
                                return ({
                                    concat: getSemigroupM().concat,
                                    empty: function () { return M.empty; }
                                });
                            };
                        };
                        exports.getMonoid = getMonoid;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getSemiring = function (S) {
                            return ({
                                add: function (f, g) { return function (x) { return S.add(f(x), g(x)); }; },
                                zero: function () { return S.zero; },
                                mul: function (f, g) { return function (x) { return S.mul(f(x), g(x)); }; },
                                one: function () { return S.one; }
                            });
                        };
                        exports.getSemiring = getSemiring;
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        var getRing = function (R) {
                            var S = (0, exports.getSemiring)(R);
                            return {
                                add: S.add,
                                mul: S.mul,
                                one: S.one,
                                zero: S.zero,
                                sub: function (f, g) { return function (x) { return R.sub(f(x), g(x)); }; }
                            };
                        };
                        exports.getRing = getRing;
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 2.11.0
                         */
                        var apply = function (a) {
                            return function (f) {
                                return f(a);
                            };
                        };
                        exports.apply = apply;
                        /**
                         * @since 2.0.0
                         */
                        function identity(a) {
                            return a;
                        }
                        exports.identity = identity;
                        /**
                         * @since 2.0.0
                         */
                        exports.unsafeCoerce = identity;
                        /**
                         * @since 2.0.0
                         */
                        function constant(a) {
                            return function () { return a; };
                        }
                        exports.constant = constant;
                        /**
                         * A thunk that returns always `true`.
                         *
                         * @since 2.0.0
                         */
                        exports.constTrue = constant(true);
                        /**
                         * A thunk that returns always `false`.
                         *
                         * @since 2.0.0
                         */
                        exports.constFalse = constant(false);
                        /**
                         * A thunk that returns always `null`.
                         *
                         * @since 2.0.0
                         */
                        exports.constNull = constant(null);
                        /**
                         * A thunk that returns always `undefined`.
                         *
                         * @since 2.0.0
                         */
                        exports.constUndefined = constant(undefined);
                        /**
                         * A thunk that returns always `void`.
                         *
                         * @since 2.0.0
                         */
                        exports.constVoid = exports.constUndefined;
                        function flip(f) {
                            return function () {
                                var args = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    args[_i] = arguments[_i];
                                }
                                if (args.length > 1) {
                                    return f(args[1], args[0]);
                                }
                                return function (a) { return f(a)(args[0]); };
                            };
                        }
                        exports.flip = flip;
                        function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
                            switch (arguments.length) {
                                case 1:
                                    return ab;
                                case 2:
                                    return function () {
                                        return bc(ab.apply(this, arguments));
                                    };
                                case 3:
                                    return function () {
                                        return cd(bc(ab.apply(this, arguments)));
                                    };
                                case 4:
                                    return function () {
                                        return de(cd(bc(ab.apply(this, arguments))));
                                    };
                                case 5:
                                    return function () {
                                        return ef(de(cd(bc(ab.apply(this, arguments)))));
                                    };
                                case 6:
                                    return function () {
                                        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
                                    };
                                case 7:
                                    return function () {
                                        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
                                    };
                                case 8:
                                    return function () {
                                        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
                                    };
                                case 9:
                                    return function () {
                                        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
                                    };
                            }
                            return;
                        }
                        exports.flow = flow;
                        /**
                         * @since 2.0.0
                         */
                        function tuple() {
                            var t = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                t[_i] = arguments[_i];
                            }
                            return t;
                        }
                        exports.tuple = tuple;
                        /**
                         * @since 2.0.0
                         */
                        function increment(n) {
                            return n + 1;
                        }
                        exports.increment = increment;
                        /**
                         * @since 2.0.0
                         */
                        function decrement(n) {
                            return n - 1;
                        }
                        exports.decrement = decrement;
                        /**
                         * @since 2.0.0
                         */
                        function absurd(_) {
                            throw new Error('Called `absurd` function which should be uncallable');
                        }
                        exports.absurd = absurd;
                        /**
                         * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.
                         *
                         * @example
                         * import { tupled } from 'fp-ts/function'
                         *
                         * const add = tupled((x: number, y: number): number => x + y)
                         *
                         * assert.strictEqual(add([1, 2]), 3)
                         *
                         * @since 2.4.0
                         */
                        function tupled(f) {
                            return function (a) { return f.apply(void 0, a); };
                        }
                        exports.tupled = tupled;
                        /**
                         * Inverse function of `tupled`
                         *
                         * @since 2.4.0
                         */
                        function untupled(f) {
                            return function () {
                                var a = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    a[_i] = arguments[_i];
                                }
                                return f(a);
                            };
                        }
                        exports.untupled = untupled;
                        function pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
                            switch (arguments.length) {
                                case 1:
                                    return a;
                                case 2:
                                    return ab(a);
                                case 3:
                                    return bc(ab(a));
                                case 4:
                                    return cd(bc(ab(a)));
                                case 5:
                                    return de(cd(bc(ab(a))));
                                case 6:
                                    return ef(de(cd(bc(ab(a)))));
                                case 7:
                                    return fg(ef(de(cd(bc(ab(a))))));
                                case 8:
                                    return gh(fg(ef(de(cd(bc(ab(a)))))));
                                case 9:
                                    return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
                                default: {
                                    var ret = arguments[0];
                                    for (var i = 1; i < arguments.length; i++) {
                                        ret = arguments[i](ret);
                                    }
                                    return ret;
                                }
                            }
                        }
                        exports.pipe = pipe;
                        /**
                         * Type hole simulation
                         *
                         * @since 2.7.0
                         */
                        exports.hole = absurd;
                        /**
                         * @since 2.11.0
                         */
                        var SK = function (_, b) { return b; };
                        exports.SK = SK;
                        /**
                         * Use `Predicate` module instead.
                         *
                         * @category zone of death
                         * @since 2.0.0
                         * @deprecated
                         */
                        function not(predicate) {
                            return function (a) { return !predicate(a); };
                        }
                        exports.not = not;
                        /**
                         * Use `Endomorphism` module instead.
                         *
                         * @category zone of death
                         * @since 2.10.0
                         * @deprecated
                         */
                        var getEndomorphismMonoid = function () {
                            return ({
                                concat: function (first, second) { return flow(first, second); },
                                empty: identity
                            });
                        };
                        exports.getEndomorphismMonoid = getEndomorphismMonoid;
                        /** @internal */
                        var dual = function (arity, body) {
                            var isDataFirst = typeof arity === 'number' ? function (args) { return args.length >= arity; } : arity;
                            return function () {
                                var args = Array.from(arguments);
                                if (isDataFirst(arguments)) {
                                    return body.apply(this, args);
                                }
                                return function (self) { return body.apply(void 0, __spreadArray([self], args, false)); };
                            };
                        };
                        exports.dual = dual;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/internal.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/lib/internal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.flatMapReader = exports.flatMapTask = exports.flatMapIO = exports.flatMapEither = exports.flatMapOption = exports.flatMapNullable = exports.liftOption = exports.liftNullable = exports.fromReadonlyNonEmptyArray = exports.has = exports.emptyRecord = exports.emptyReadonlyArray = exports.tail = exports.head = exports.isNonEmpty = exports.singleton = exports.right = exports.left = exports.isRight = exports.isLeft = exports.some = exports.none = exports.isSome = exports.isNone = void 0;
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        // -------------------------------------------------------------------------------------
                        // Option
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var isNone = function (fa) { return fa._tag === 'None'; };
                        exports.isNone = isNone;
                        /** @internal */
                        var isSome = function (fa) { return fa._tag === 'Some'; };
                        exports.isSome = isSome;
                        /** @internal */
                        exports.none = { _tag: 'None' };
                        /** @internal */
                        var some = function (a) { return ({ _tag: 'Some', value: a }); };
                        exports.some = some;
                        // -------------------------------------------------------------------------------------
                        // Either
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var isLeft = function (ma) { return ma._tag === 'Left'; };
                        exports.isLeft = isLeft;
                        /** @internal */
                        var isRight = function (ma) { return ma._tag === 'Right'; };
                        exports.isRight = isRight;
                        /** @internal */
                        var left = function (e) { return ({ _tag: 'Left', left: e }); };
                        exports.left = left;
                        /** @internal */
                        var right = function (a) { return ({ _tag: 'Right', right: a }); };
                        exports.right = right;
                        // -------------------------------------------------------------------------------------
                        // ReadonlyNonEmptyArray
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var singleton = function (a) { return [a]; };
                        exports.singleton = singleton;
                        /** @internal */
                        var isNonEmpty = function (as) { return as.length > 0; };
                        exports.isNonEmpty = isNonEmpty;
                        /** @internal */
                        var head = function (as) { return as[0]; };
                        exports.head = head;
                        /** @internal */
                        var tail = function (as) { return as.slice(1); };
                        exports.tail = tail;
                        // -------------------------------------------------------------------------------------
                        // empty
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        exports.emptyReadonlyArray = [];
                        /** @internal */
                        exports.emptyRecord = {};
                        // -------------------------------------------------------------------------------------
                        // Record
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        exports.has = Object.prototype.hasOwnProperty;
                        // -------------------------------------------------------------------------------------
                        // NonEmptyArray
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var fromReadonlyNonEmptyArray = function (as) { return __spreadArray([as[0]], as.slice(1), true); };
                        exports.fromReadonlyNonEmptyArray = fromReadonlyNonEmptyArray;
                        /** @internal */
                        var liftNullable = function (F) {
                            return function (f, onNullable) {
                                return function () {
                                    var a = [];
                                    for (var _i = 0; _i < arguments.length; _i++) {
                                        a[_i] = arguments[_i];
                                    }
                                    var o = f.apply(void 0, a);
                                    return F.fromEither(o == null ? (0, exports.left)(onNullable.apply(void 0, a)) : (0, exports.right)(o));
                                };
                            };
                        };
                        exports.liftNullable = liftNullable;
                        /** @internal */
                        var liftOption = function (F) {
                            return function (f, onNone) {
                                return function () {
                                    var a = [];
                                    for (var _i = 0; _i < arguments.length; _i++) {
                                        a[_i] = arguments[_i];
                                    }
                                    var o = f.apply(void 0, a);
                                    return F.fromEither((0, exports.isNone)(o) ? (0, exports.left)(onNone.apply(void 0, a)) : (0, exports.right)(o.value));
                                };
                            };
                        };
                        exports.liftOption = liftOption;
                        /** @internal */
                        var flatMapNullable = function (F, M) {
    /*#__PURE__*/ return (0, function_1.dual)(3, function (self, f, onNullable) {
                            return M.flatMap(self, (0, exports.liftNullable)(F)(f, onNullable));
                        });
                        };
                        exports.flatMapNullable = flatMapNullable;
                        /** @internal */
                        var flatMapOption = function (F, M) {
    /*#__PURE__*/ return (0, function_1.dual)(3, function (self, f, onNone) { return M.flatMap(self, (0, exports.liftOption)(F)(f, onNone)); });
                        };
                        exports.flatMapOption = flatMapOption;
                        /** @internal */
                        var flatMapEither = function (F, M) {
    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromEither(f(a)); });
                        });
                        };
                        exports.flatMapEither = flatMapEither;
                        /** @internal */
                        var flatMapIO = function (F, M) {
    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromIO(f(a)); });
                        });
                        };
                        exports.flatMapIO = flatMapIO;
                        /** @internal */
                        var flatMapTask = function (F, M) {
    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromTask(f(a)); });
                        });
                        };
                        exports.flatMapTask = flatMapTask;
                        /** @internal */
                        var flatMapReader = function (F, M) {
    /*#__PURE__*/ return (0, function_1.dual)(2, function (self, f) {
                            return M.flatMap(self, function (a) { return F.fromReader(f(a)); });
                        });
                        };
                        exports.flatMapReader = flatMapReader;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/number.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/lib/number.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.Field = exports.MonoidProduct = exports.MonoidSum = exports.SemigroupProduct = exports.SemigroupSum = exports.MagmaSub = exports.Show = exports.Bounded = exports.Ord = exports.Eq = exports.isNumber = void 0;
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category refinements
                         * @since 2.11.0
                         */
                        var isNumber = function (u) { return typeof u === 'number'; };
                        exports.isNumber = isNumber;
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Eq = {
                            equals: function (first, second) { return first === second; }
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Ord = {
                            equals: exports.Eq.equals,
                            compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Bounded = {
                            equals: exports.Eq.equals,
                            compare: exports.Ord.compare,
                            top: Infinity,
                            bottom: -Infinity
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Show = {
                            show: function (n) { return JSON.stringify(n); }
                        };
                        /**
                         * @category instances
                         * @since 2.11.0
                         */
                        exports.MagmaSub = {
                            concat: function (first, second) { return first - second; }
                        };
                        /**
                         * `number` semigroup under addition.
                         *
                         * @example
                         * import { SemigroupSum } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(SemigroupSum.concat(2, 3), 5)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.SemigroupSum = {
                            concat: function (first, second) { return first + second; }
                        };
                        /**
                         * `number` semigroup under multiplication.
                         *
                         * @example
                         * import { SemigroupProduct } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(SemigroupProduct.concat(2, 3), 6)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.SemigroupProduct = {
                            concat: function (first, second) { return first * second; }
                        };
                        /**
                         * `number` monoid under addition.
                         *
                         * The `empty` value is `0`.
                         *
                         * @example
                         * import { MonoidSum } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(MonoidSum.concat(2, MonoidSum.empty), 2)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.MonoidSum = {
                            concat: exports.SemigroupSum.concat,
                            empty: 0
                        };
                        /**
                         * `number` monoid under multiplication.
                         *
                         * The `empty` value is `1`.
                         *
                         * @example
                         * import { MonoidProduct } from 'fp-ts/number'
                         *
                         * assert.deepStrictEqual(MonoidProduct.concat(2, MonoidProduct.empty), 2)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.MonoidProduct = {
                            concat: exports.SemigroupProduct.concat,
                            empty: 1
                        };
                        /**
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Field = {
                            add: exports.SemigroupSum.concat,
                            zero: 0,
                            mul: exports.SemigroupProduct.concat,
                            one: 1,
                            sub: exports.MagmaSub.concat,
                            degree: function (_) { return 1; },
                            div: function (first, second) { return first / second; },
                            mod: function (first, second) { return first % second; }
                        };


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/pipeable.js":
/*!********************************************!*\
  !*** ./node_modules/fp-ts/lib/pipeable.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.pipe = exports.pipeable = exports.compose = exports.promap = exports.partitionMapWithIndex = exports.partitionWithIndex = exports.filterMapWithIndex = exports.filterWithIndex = exports.partitionMap = exports.partition = exports.filterMap = exports.filter = exports.alt = exports.reduceRightWithIndex = exports.foldMapWithIndex = exports.reduceWithIndex = exports.reduceRight = exports.foldMap = exports.reduce = exports.extend = exports.mapLeft = exports.bimap = exports.chain = exports.ap = exports.mapWithIndex = exports.contramap = exports.map = void 0;
                        var Apply_1 = __webpack_require__(/*! ./Apply */ "./node_modules/fp-ts/lib/Apply.js");
                        var Chain_1 = __webpack_require__(/*! ./Chain */ "./node_modules/fp-ts/lib/Chain.js");
                        var function_1 = __webpack_require__(/*! ./function */ "./node_modules/fp-ts/lib/function.js");
                        function map(F) {
                            return function (f) { return function (fa) { return F.map(fa, f); }; };
                        }
                        exports.map = map;
                        function contramap(F) {
                            return function (f) { return function (fa) { return F.contramap(fa, f); }; };
                        }
                        exports.contramap = contramap;
                        function mapWithIndex(F) {
                            return function (f) { return function (fa) { return F.mapWithIndex(fa, f); }; };
                        }
                        exports.mapWithIndex = mapWithIndex;
                        function ap(F) {
                            return function (fa) { return function (fab) { return F.ap(fab, fa); }; };
                        }
                        exports.ap = ap;
                        function chain(F) {
                            return function (f) { return function (fa) { return F.chain(fa, f); }; };
                        }
                        exports.chain = chain;
                        function bimap(F) {
                            return function (f, g) { return function (fea) { return F.bimap(fea, f, g); }; };
                        }
                        exports.bimap = bimap;
                        function mapLeft(F) {
                            return function (f) { return function (fea) { return F.mapLeft(fea, f); }; };
                        }
                        exports.mapLeft = mapLeft;
                        function extend(F) {
                            return function (f) { return function (wa) { return F.extend(wa, f); }; };
                        }
                        exports.extend = extend;
                        function reduce(F) {
                            return function (b, f) { return function (fa) { return F.reduce(fa, b, f); }; };
                        }
                        exports.reduce = reduce;
                        function foldMap(F) {
                            return function (M) {
                                var foldMapM = F.foldMap(M);
                                return function (f) { return function (fa) { return foldMapM(fa, f); }; };
                            };
                        }
                        exports.foldMap = foldMap;
                        function reduceRight(F) {
                            return function (b, f) { return function (fa) { return F.reduceRight(fa, b, f); }; };
                        }
                        exports.reduceRight = reduceRight;
                        function reduceWithIndex(F) {
                            return function (b, f) { return function (fa) { return F.reduceWithIndex(fa, b, f); }; };
                        }
                        exports.reduceWithIndex = reduceWithIndex;
                        function foldMapWithIndex(F) {
                            return function (M) {
                                var foldMapWithIndexM = F.foldMapWithIndex(M);
                                return function (f) { return function (fa) { return foldMapWithIndexM(fa, f); }; };
                            };
                        }
                        exports.foldMapWithIndex = foldMapWithIndex;
                        function reduceRightWithIndex(F) {
                            return function (b, f) { return function (fa) { return F.reduceRightWithIndex(fa, b, f); }; };
                        }
                        exports.reduceRightWithIndex = reduceRightWithIndex;
                        function alt(F) {
                            return function (that) { return function (fa) { return F.alt(fa, that); }; };
                        }
                        exports.alt = alt;
                        function filter(F) {
                            return function (predicate) { return function (fa) { return F.filter(fa, predicate); }; };
                        }
                        exports.filter = filter;
                        function filterMap(F) {
                            return function (f) { return function (fa) { return F.filterMap(fa, f); }; };
                        }
                        exports.filterMap = filterMap;
                        function partition(F) {
                            return function (f) { return function (fa) { return F.partition(fa, f); }; };
                        }
                        exports.partition = partition;
                        function partitionMap(F) {
                            return function (f) { return function (fa) { return F.partitionMap(fa, f); }; };
                        }
                        exports.partitionMap = partitionMap;
                        function filterWithIndex(F) {
                            return function (predicate) { return function (fa) { return F.filterWithIndex(fa, predicate); }; };
                        }
                        exports.filterWithIndex = filterWithIndex;
                        function filterMapWithIndex(F) {
                            return function (f) { return function (fa) { return F.filterMapWithIndex(fa, f); }; };
                        }
                        exports.filterMapWithIndex = filterMapWithIndex;
                        function partitionWithIndex(F) {
                            return function (f) { return function (fa) { return F.partitionWithIndex(fa, f); }; };
                        }
                        exports.partitionWithIndex = partitionWithIndex;
                        function partitionMapWithIndex(F) {
                            return function (f) { return function (fa) { return F.partitionMapWithIndex(fa, f); }; };
                        }
                        exports.partitionMapWithIndex = partitionMapWithIndex;
                        function promap(F) {
                            return function (f, g) { return function (fbc) { return F.promap(fbc, f, g); }; };
                        }
                        exports.promap = promap;
                        function compose(F) {
                            return function (ea) { return function (ab) { return F.compose(ab, ea); }; };
                        }
                        exports.compose = compose;
                        var isFunctor = function (I) { return typeof I.map === 'function'; };
                        var isContravariant = function (I) { return typeof I.contramap === 'function'; };
                        var isFunctorWithIndex = function (I) { return typeof I.mapWithIndex === 'function'; };
                        var isApply = function (I) { return typeof I.ap === 'function'; };
                        var isChain = function (I) { return typeof I.chain === 'function'; };
                        var isBifunctor = function (I) { return typeof I.bimap === 'function'; };
                        var isExtend = function (I) { return typeof I.extend === 'function'; };
                        var isFoldable = function (I) { return typeof I.reduce === 'function'; };
                        var isFoldableWithIndex = function (I) { return typeof I.reduceWithIndex === 'function'; };
                        var isAlt = function (I) { return typeof I.alt === 'function'; };
                        var isCompactable = function (I) { return typeof I.compact === 'function'; };
                        var isFilterable = function (I) { return typeof I.filter === 'function'; };
                        var isFilterableWithIndex = function (I) {
                            return typeof I.filterWithIndex === 'function';
                        };
                        var isProfunctor = function (I) { return typeof I.promap === 'function'; };
                        var isSemigroupoid = function (I) { return typeof I.compose === 'function'; };
                        var isMonadThrow = function (I) { return typeof I.throwError === 'function'; };
                        /** @deprecated */
                        function pipeable(I) {
                            var r = {};
                            if (isFunctor(I)) {
                                r.map = map(I);
                            }
                            if (isContravariant(I)) {
                                r.contramap = contramap(I);
                            }
                            if (isFunctorWithIndex(I)) {
                                r.mapWithIndex = mapWithIndex(I);
                            }
                            if (isApply(I)) {
                                r.ap = ap(I);
                                r.apFirst = (0, Apply_1.apFirst)(I);
                                r.apSecond = (0, Apply_1.apSecond)(I);
                            }
                            if (isChain(I)) {
                                r.chain = chain(I);
                                r.chainFirst = (0, Chain_1.chainFirst)(I);
                                r.flatten = r.chain(function_1.identity);
                            }
                            if (isBifunctor(I)) {
                                r.bimap = bimap(I);
                                r.mapLeft = mapLeft(I);
                            }
                            if (isExtend(I)) {
                                r.extend = extend(I);
                                r.duplicate = r.extend(function_1.identity);
                            }
                            if (isFoldable(I)) {
                                r.reduce = reduce(I);
                                r.foldMap = foldMap(I);
                                r.reduceRight = reduceRight(I);
                            }
                            if (isFoldableWithIndex(I)) {
                                r.reduceWithIndex = reduceWithIndex(I);
                                r.foldMapWithIndex = foldMapWithIndex(I);
                                r.reduceRightWithIndex = reduceRightWithIndex(I);
                            }
                            if (isAlt(I)) {
                                r.alt = alt(I);
                            }
                            if (isCompactable(I)) {
                                r.compact = I.compact;
                                r.separate = I.separate;
                            }
                            if (isFilterable(I)) {
                                r.filter = filter(I);
                                r.filterMap = filterMap(I);
                                r.partition = partition(I);
                                r.partitionMap = partitionMap(I);
                            }
                            if (isFilterableWithIndex(I)) {
                                r.filterWithIndex = filterWithIndex(I);
                                r.filterMapWithIndex = filterMapWithIndex(I);
                                r.partitionWithIndex = partitionWithIndex(I);
                                r.partitionMapWithIndex = partitionMapWithIndex(I);
                            }
                            if (isProfunctor(I)) {
                                r.promap = promap(I);
                            }
                            if (isSemigroupoid(I)) {
                                r.compose = compose(I);
                            }
                            if (isMonadThrow(I)) {
                                var fromOption = function (onNone) {
                                    return function (ma) {
                                        return ma._tag === 'None' ? I.throwError(onNone()) : I.of(ma.value);
                                    };
                                };
                                var fromEither = function (ma) {
                                    return ma._tag === 'Left' ? I.throwError(ma.left) : I.of(ma.right);
                                };
                                var fromPredicate = function (predicate, onFalse) {
                                    return function (a) {
                                        return predicate(a) ? I.of(a) : I.throwError(onFalse(a));
                                    };
                                };
                                var filterOrElse = function (predicate, onFalse) {
                                    return function (ma) {
                                        return I.chain(ma, function (a) { return (predicate(a) ? I.of(a) : I.throwError(onFalse(a))); });
                                    };
                                };
                                r.fromOption = fromOption;
                                r.fromEither = fromEither;
                                r.fromPredicate = fromPredicate;
                                r.filterOrElse = filterOrElse;
                            }
                            return r;
                        }
                        exports.pipeable = pipeable;
                        /**
                         * Use [`pipe`](https://gcanti.github.io/fp-ts/modules/function.ts.html#pipe) from `function` module instead.
                         *
                         * @since 2.0.0
                         * @deprecated
                         */
                        exports.pipe = function_1.pipe;


                        /***/
                    }),

/***/ "./node_modules/fp-ts/lib/string.js":
/*!******************************************!*\
  !*** ./node_modules/fp-ts/lib/string.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.endsWith = exports.startsWith = exports.includes = exports.split = exports.size = exports.isEmpty = exports.slice = exports.trimRight = exports.trimLeft = exports.trim = exports.replace = exports.toLowerCase = exports.toUpperCase = exports.isString = exports.Show = exports.Ord = exports.Monoid = exports.empty = exports.Semigroup = exports.Eq = void 0;
                        var ReadonlyNonEmptyArray_1 = __webpack_require__(/*! ./ReadonlyNonEmptyArray */ "./node_modules/fp-ts/lib/ReadonlyNonEmptyArray.js");
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Eq.equals('a', 'a'), true)
                         * assert.deepStrictEqual(S.Eq.equals('a', 'b'), false)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Eq = {
                            equals: function (first, second) { return first === second; }
                        };
                        /**
                         * `string` semigroup under concatenation.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Semigroup.concat('a', 'b'), 'ab')
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Semigroup = {
                            concat: function (first, second) { return first + second; }
                        };
                        /**
                         * An empty `string`.
                         *
                         * @since 2.10.0
                         */
                        exports.empty = '';
                        /**
                         * `string` monoid under concatenation.
                         *
                         * The `empty` value is `''`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Monoid.concat('a', 'b'), 'ab')
                         * assert.deepStrictEqual(S.Monoid.concat('a', S.Monoid.empty), 'a')
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Monoid = {
                            concat: exports.Semigroup.concat,
                            empty: exports.empty
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Ord.compare('a', 'a'), 0)
                         * assert.deepStrictEqual(S.Ord.compare('a', 'b'), -1)
                         * assert.deepStrictEqual(S.Ord.compare('b', 'a'), 1)
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Ord = {
                            equals: exports.Eq.equals,
                            compare: function (first, second) { return (first < second ? -1 : first > second ? 1 : 0); }
                        };
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.Show.show('a'), '"a"')
                         *
                         * @category instances
                         * @since 2.10.0
                         */
                        exports.Show = {
                            show: function (s) { return JSON.stringify(s); }
                        };
                        // -------------------------------------------------------------------------------------
                        // refinements
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         *
                         * assert.deepStrictEqual(S.isString('a'), true)
                         * assert.deepStrictEqual(S.isString(1), false)
                         *
                         * @category refinements
                         * @since 2.11.0
                         */
                        var isString = function (u) { return typeof u === 'string'; };
                        exports.isString = isString;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('a', S.toUpperCase), 'A')
                         *
                         * @since 2.11.0
                         */
                        var toUpperCase = function (s) { return s.toUpperCase(); };
                        exports.toUpperCase = toUpperCase;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('A', S.toLowerCase), 'a')
                         *
                         * @since 2.11.0
                         */
                        var toLowerCase = function (s) { return s.toLowerCase(); };
                        exports.toLowerCase = toLowerCase;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.replace('b', 'd')), 'adc')
                         *
                         * @since 2.11.0
                         */
                        var replace = function (searchValue, replaceValue) {
                            return function (s) {
                                return s.replace(searchValue, replaceValue);
                            };
                        };
                        exports.replace = replace;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(' a ', S.trim), 'a')
                         *
                         * @since 2.11.0
                         */
                        var trim = function (s) { return s.trim(); };
                        exports.trim = trim;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(' a ', S.trimLeft), 'a ')
                         *
                         * @since 2.11.0
                         */
                        var trimLeft = function (s) { return s.trimLeft(); };
                        exports.trimLeft = trimLeft;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe(' a ', S.trimRight), ' a')
                         *
                         * @since 2.11.0
                         */
                        var trimRight = function (s) { return s.trimRight(); };
                        exports.trimRight = trimRight;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abcd', S.slice(1, 3)), 'bc')
                         *
                         * @since 2.11.0
                         */
                        var slice = function (start, end) {
                            return function (s) {
                                return s.slice(start, end);
                            };
                        };
                        exports.slice = slice;
                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * Test whether a `string` is empty.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('', S.isEmpty), true)
                         * assert.deepStrictEqual(pipe('a', S.isEmpty), false)
                         *
                         * @since 2.10.0
                         */
                        var isEmpty = function (s) { return s.length === 0; };
                        exports.isEmpty = isEmpty;
                        /**
                         * Calculate the number of characters in a `string`.
                         *
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.size), 3)
                         *
                         * @since 2.10.0
                         */
                        var size = function (s) { return s.length; };
                        exports.size = size;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.split('')), ['a', 'b', 'c'])
                         * assert.deepStrictEqual(pipe('', S.split('')), [''])
                         *
                         * @since 2.11.0
                         */
                        var split = function (separator) {
                            return function (s) {
                                var out = s.split(separator);
                                return (0, ReadonlyNonEmptyArray_1.isNonEmpty)(out) ? out : [s];
                            };
                        };
                        exports.split = split;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.includes('b')), true)
                         * assert.deepStrictEqual(pipe('abc', S.includes('d')), false)
                         *
                         * @since 2.11.0
                         */
                        var includes = function (searchString, position) {
                            return function (s) {
                                return s.includes(searchString, position);
                            };
                        };
                        exports.includes = includes;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.startsWith('a')), true)
                         * assert.deepStrictEqual(pipe('bc', S.startsWith('a')), false)
                         *
                         * @since 2.11.0
                         */
                        var startsWith = function (searchString, position) {
                            return function (s) {
                                return s.startsWith(searchString, position);
                            };
                        };
                        exports.startsWith = startsWith;
                        /**
                         * @example
                         * import * as S from 'fp-ts/string'
                         * import { pipe } from 'fp-ts/function'
                         *
                         * assert.deepStrictEqual(pipe('abc', S.endsWith('c')), true)
                         * assert.deepStrictEqual(pipe('ab', S.endsWith('c')), false)
                         *
                         * @since 2.11.0
                         */
                        var endsWith = function (searchString, position) {
                            return function (s) {
                                return s.endsWith(searchString, position);
                            };
                        };
                        exports.endsWith = endsWith;


                        /***/
                    }),

/***/ "./node_modules/io-ts/es6/index.js":
/*!*****************************************!*\
  !*** ./node_modules/io-ts/es6/index.js ***!
  \*****************************************/
/*! exports provided: failures, failure, success, Type, identity, getFunctionName, getContextEntry, appendContext, getDomainKeys, mergeAll, emptyTags, getTags, getIndex, NullType, nullType, UndefinedType, VoidType, voidType, UnknownType, unknown, StringType, string, NumberType, number, BigIntType, bigint, BooleanType, boolean, AnyArrayType, UnknownArray, AnyDictionaryType, UnknownRecord, null, undefined, void, LiteralType, literal, KeyofType, keyof, RefinementType, brand, Int, RecursiveType, recursion, ArrayType, array, InterfaceType, type, PartialType, partial, DictionaryType, record, UnionType, union, IntersectionType, intersection, TupleType, tuple, ReadonlyType, readonly, ReadonlyArrayType, readonlyArray, strict, ExactType, exact, FunctionType, Function, NeverType, never, AnyType, any, refinement, Integer, TaggedUnionType, taggedUnion, Array, interface, getValidationError, getDefaultContext, Dictionary, ObjectType, object, dictionary, StrictType, clean, alias */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "failures", function () { return failures; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "failure", function () { return failure; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "success", function () { return success; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function () { return Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function () { return identity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFunctionName", function () { return getFunctionName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getContextEntry", function () { return getContextEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "appendContext", function () { return appendContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDomainKeys", function () { return getDomainKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeAll", function () { return mergeAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "emptyTags", function () { return emptyTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTags", function () { return getTags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIndex", function () { return getIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NullType", function () { return NullType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nullType", function () { return nullType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UndefinedType", function () { return UndefinedType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VoidType", function () { return VoidType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "voidType", function () { return voidType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownType", function () { return UnknownType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unknown", function () { return unknown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringType", function () { return StringType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "string", function () { return string; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberType", function () { return NumberType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "number", function () { return number; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BigIntType", function () { return BigIntType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bigint", function () { return bigint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BooleanType", function () { return BooleanType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "boolean", function () { return boolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnyArrayType", function () { return AnyArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownArray", function () { return UnknownArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnyDictionaryType", function () { return AnyDictionaryType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnknownRecord", function () { return UnknownRecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "null", function () { return nullType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "undefined", function () { return undefinedType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "void", function () { return voidType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LiteralType", function () { return LiteralType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "literal", function () { return literal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyofType", function () { return KeyofType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyof", function () { return keyof; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefinementType", function () { return RefinementType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "brand", function () { return brand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Int", function () { return Int; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecursiveType", function () { return RecursiveType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recursion", function () { return recursion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayType", function () { return ArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "array", function () { return array; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InterfaceType", function () { return InterfaceType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "type", function () { return type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PartialType", function () { return PartialType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partial", function () { return partial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DictionaryType", function () { return DictionaryType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "record", function () { return record; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnionType", function () { return UnionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "union", function () { return union; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IntersectionType", function () { return IntersectionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "intersection", function () { return intersection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TupleType", function () { return TupleType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tuple", function () { return tuple; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReadonlyType", function () { return ReadonlyType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readonly", function () { return readonly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReadonlyArrayType", function () { return ReadonlyArrayType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readonlyArray", function () { return readonlyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strict", function () { return strict; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExactType", function () { return ExactType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exact", function () { return exact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionType", function () { return FunctionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Function", function () { return Function; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NeverType", function () { return NeverType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "never", function () { return never; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnyType", function () { return AnyType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "any", function () { return any; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refinement", function () { return refinement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Integer", function () { return Integer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TaggedUnionType", function () { return TaggedUnionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "taggedUnion", function () { return taggedUnion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Array", function () { return UnknownArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interface", function () { return type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getValidationError", function () { return getValidationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDefaultContext", function () { return getDefaultContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dictionary", function () { return Dictionary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectType", function () { return ObjectType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "object", function () { return object; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dictionary", function () { return dictionary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StrictType", function () { return StrictType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clean", function () { return clean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alias", function () { return alias; });
/* harmony import */ var fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fp-ts/es6/Either */ "./node_modules/fp-ts/es6/Either.js");
                        var __extends = (undefined && undefined.__extends) || (function () {
                            var extendStatics = function (d, b) {
                                extendStatics = Object.setPrototypeOf ||
                                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
                                return extendStatics(d, b);
                            };
                            return function (d, b) {
                                if (typeof b !== "function" && b !== null)
                                    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
                                extendStatics(d, b);
                                function __() { this.constructor = d; }
                                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                            };
                        })();
                        var __assign = (undefined && undefined.__assign) || function () {
                            __assign = Object.assign || function (t) {
                                for (var s, i = 1, n = arguments.length; i < n; i++) {
                                    s = arguments[i];
                                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                                        t[p] = s[p];
                                }
                                return t;
                            };
                            return __assign.apply(this, arguments);
                        };
                        var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };
                        /**
                         * @since 1.0.0
                         */

                        /**
                         * @category Decode error
                         * @since 1.0.0
                         */
                        var failures = fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["left"];
                        /**
                         * @category Decode error
                         * @since 1.0.0
                         */
                        var failure = function (value, context, message) {
                            return failures([{ value: value, context: context, message: message }]);
                        };
                        /**
                         * @category Decode error
                         * @since 1.0.0
                         */
                        var success = fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"];
                        /**
                         * @category Codec
                         * @since 1.0.0
                         */
                        var Type = /** @class */ (function () {
                            function Type(
                                /** a unique name for this codec */
                                name,
                                /** a custom type guard */
                                is,
                                /** succeeds if a value of type I can be decoded to a value of type A */
                                validate,
                                /** converts a value of type A to a value of type O */
                                encode) {
                                this.name = name;
                                this.is = is;
                                this.validate = validate;
                                this.encode = encode;
                                this.decode = this.decode.bind(this);
                            }
                            /**
                             * @since 1.0.0
                             */
                            Type.prototype.pipe = function (ab, name) {
                                var _this = this;
                                if (name === void 0) { name = "pipe(".concat(this.name, ", ").concat(ab.name, ")"); }
                                return new Type(name, ab.is, function (i, c) {
                                    var e = _this.validate(i, c);
                                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                        return e;
                                    }
                                    return ab.validate(e.right, c);
                                }, this.encode === identity && ab.encode === identity ? identity : function (b) { return _this.encode(ab.encode(b)); });
                            };
                            /**
                             * @since 1.0.0
                             */
                            Type.prototype.asDecoder = function () {
                                return this;
                            };
                            /**
                             * @since 1.0.0
                             */
                            Type.prototype.asEncoder = function () {
                                return this;
                            };
                            /**
                             * a version of `validate` with a default context
                             * @since 1.0.0
                             */
                            Type.prototype.decode = function (i) {
                                return this.validate(i, [{ key: '', type: this, actual: i }]);
                            };
                            return Type;
                        }());

                        // -------------------------------------------------------------------------------------
                        // utils
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 1.0.0
                         */
                        var identity = function (a) { return a; };
                        /**
                         * @since 1.0.0
                         */
                        function getFunctionName(f) {
                            return f.displayName || f.name || "<function".concat(f.length, ">");
                        }
                        /**
                         * @since 1.0.0
                         */
                        function getContextEntry(key, decoder) {
                            return { key: key, type: decoder };
                        }
                        /**
                         * @since 1.0.0
                         */
                        function appendContext(c, key, decoder, actual) {
                            var len = c.length;
                            var r = Array(len + 1);
                            for (var i = 0; i < len; i++) {
                                r[i] = c[i];
                            }
                            r[len] = { key: key, type: decoder, actual: actual };
                            return r;
                        }
                        function pushAll(xs, ys) {
                            var l = ys.length;
                            for (var i = 0; i < l; i++) {
                                xs.push(ys[i]);
                            }
                        }
                        var hasOwnProperty = Object.prototype.hasOwnProperty;
                        function getNameFromProps(props) {
                            return Object.keys(props)
                                .map(function (k) { return "".concat(k, ": ").concat(props[k].name); })
                                .join(', ');
                        }
                        function useIdentity(codecs) {
                            for (var i = 0; i < codecs.length; i++) {
                                if (codecs[i].encode !== identity) {
                                    return false;
                                }
                            }
                            return true;
                        }
                        function getInterfaceTypeName(props) {
                            return "{ ".concat(getNameFromProps(props), " }");
                        }
                        function getPartialTypeName(inner) {
                            return "Partial<".concat(inner, ">");
                        }
                        function enumerableRecord(keys, domain, codomain, name) {
                            if (name === void 0) { name = "{ [K in ".concat(domain.name, "]: ").concat(codomain.name, " }"); }
                            var len = keys.length;
                            return new DictionaryType(name, function (u) { return UnknownRecord.is(u) && keys.every(function (k) { return codomain.is(u[k]); }); }, function (u, c) {
                                var e = UnknownRecord.validate(u, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                    return e;
                                }
                                var o = e.right;
                                var a = {};
                                var errors = [];
                                var changed = false;
                                for (var i = 0; i < len; i++) {
                                    var k = keys[i];
                                    var ok = o[k];
                                    var codomainResult = codomain.validate(ok, appendContext(c, k, codomain, ok));
                                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(codomainResult)) {
                                        pushAll(errors, codomainResult.left);
                                    }
                                    else {
                                        var vok = codomainResult.right;
                                        changed = changed || vok !== ok;
                                        a[k] = vok;
                                    }
                                }
                                return errors.length > 0 ? failures(errors) : success((changed || Object.keys(o).length !== len ? a : o));
                            }, codomain.encode === identity
                                ? identity
                                : function (a) {
                                    var s = {};
                                    for (var i = 0; i < len; i++) {
                                        var k = keys[i];
                                        s[k] = codomain.encode(a[k]);
                                    }
                                    return s;
                                }, domain, codomain);
                        }
                        /**
                         * @internal
                         */
                        function getDomainKeys(domain) {
                            var _a;
                            if (isLiteralC(domain)) {
                                var literal_1 = domain.value;
                                if (string.is(literal_1)) {
                                    return _a = {}, _a[literal_1] = null, _a;
                                }
                            }
                            else if (isKeyofC(domain)) {
                                return domain.keys;
                            }
                            else if (isUnionC(domain)) {
                                var keys = domain.types.map(function (type) { return getDomainKeys(type); });
                                return keys.some(undefinedType.is) ? undefined : Object.assign.apply(Object, __spreadArray([{}], keys, false));
                            }
                            return undefined;
                        }
                        function nonEnumerableRecord(domain, codomain, name) {
                            if (name === void 0) { name = "{ [K in ".concat(domain.name, "]: ").concat(codomain.name, " }"); }
                            return new DictionaryType(name, function (u) {
                                if (UnknownRecord.is(u)) {
                                    return Object.keys(u).every(function (k) { return domain.is(k) && codomain.is(u[k]); });
                                }
                                return isAnyC(codomain) && Array.isArray(u);
                            }, function (u, c) {
                                if (UnknownRecord.is(u)) {
                                    var a = {};
                                    var errors = [];
                                    var keys = Object.keys(u);
                                    var len = keys.length;
                                    var changed = false;
                                    for (var i = 0; i < len; i++) {
                                        var k = keys[i];
                                        var ok = u[k];
                                        var domainResult = domain.validate(k, appendContext(c, k, domain, k));
                                        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(domainResult)) {
                                            pushAll(errors, domainResult.left);
                                        }
                                        else {
                                            var vk = domainResult.right;
                                            changed = changed || vk !== k;
                                            k = vk;
                                            var codomainResult = codomain.validate(ok, appendContext(c, k, codomain, ok));
                                            if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(codomainResult)) {
                                                pushAll(errors, codomainResult.left);
                                            }
                                            else {
                                                var vok = codomainResult.right;
                                                changed = changed || vok !== ok;
                                                a[k] = vok;
                                            }
                                        }
                                    }
                                    return errors.length > 0 ? failures(errors) : success((changed ? a : u));
                                }
                                if (isAnyC(codomain) && Array.isArray(u)) {
                                    return success(u);
                                }
                                return failure(u, c);
                            }, domain.encode === identity && codomain.encode === identity
                                ? identity
                                : function (a) {
                                    var s = {};
                                    var keys = Object.keys(a);
                                    var len = keys.length;
                                    for (var i = 0; i < len; i++) {
                                        var k = keys[i];
                                        s[String(domain.encode(k))] = codomain.encode(a[k]);
                                    }
                                    return s;
                                }, domain, codomain);
                        }
                        function getUnionName(codecs) {
                            return '(' + codecs.map(function (type) { return type.name; }).join(' | ') + ')';
                        }
                        /**
                         * @internal
                         */
                        // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
                        function mergeAll(base, us) {
                            var equal = true;
                            var primitive = true;
                            var baseIsNotADictionary = !UnknownRecord.is(base);
                            for (var _i = 0, us_1 = us; _i < us_1.length; _i++) {
                                var u = us_1[_i];
                                if (u !== base) {
                                    equal = false;
                                }
                                if (UnknownRecord.is(u)) {
                                    primitive = false;
                                }
                            }
                            if (equal) {
                                return base;
                            }
                            else if (primitive) {
                                return us[us.length - 1];
                            }
                            var r = {};
                            for (var _a = 0, us_2 = us; _a < us_2.length; _a++) {
                                var u = us_2[_a];
                                for (var k in u) {
                                    if (!hasOwnProperty.call(r, k) || baseIsNotADictionary || u[k] !== base[k]) {
                                        r[k] = u[k];
                                    }
                                }
                            }
                            return r;
                        }
                        function getProps(codec) {
                            switch (codec._tag) {
                                case 'RefinementType':
                                case 'ReadonlyType':
                                    return getProps(codec.type);
                                case 'InterfaceType':
                                case 'StrictType':
                                case 'PartialType':
                                    return codec.props;
                                case 'IntersectionType':
                                    return codec.types.reduce(function (props, type) { return Object.assign(props, getProps(type)); }, {});
                            }
                        }
                        function stripKeys(o, props) {
                            var keys = Object.getOwnPropertyNames(o);
                            var shouldStrip = false;
                            var r = {};
                            for (var i = 0; i < keys.length; i++) {
                                var key = keys[i];
                                if (!hasOwnProperty.call(props, key)) {
                                    shouldStrip = true;
                                }
                                else {
                                    r[key] = o[key];
                                }
                            }
                            return shouldStrip ? r : o;
                        }
                        function getExactTypeName(codec) {
                            if (isTypeC(codec)) {
                                return "{| ".concat(getNameFromProps(codec.props), " |}");
                            }
                            else if (isPartialC(codec)) {
                                return getPartialTypeName("{| ".concat(getNameFromProps(codec.props), " |}"));
                            }
                            return "Exact<".concat(codec.name, ">");
                        }
                        function isNonEmpty(as) {
                            return as.length > 0;
                        }
                        /**
                         * @internal
                         */
                        var emptyTags = {};
                        function intersect(a, b) {
                            var r = [];
                            for (var _i = 0, a_1 = a; _i < a_1.length; _i++) {
                                var v = a_1[_i];
                                if (b.indexOf(v) !== -1) {
                                    r.push(v);
                                }
                            }
                            return r;
                        }
                        function mergeTags(a, b) {
                            if (a === emptyTags) {
                                return b;
                            }
                            if (b === emptyTags) {
                                return a;
                            }
                            var r = Object.assign({}, a);
                            for (var k in b) {
                                if (hasOwnProperty.call(a, k)) {
                                    var intersection_1 = intersect(a[k], b[k]);
                                    if (isNonEmpty(intersection_1)) {
                                        r[k] = intersection_1;
                                    }
                                    else {
                                        r = emptyTags;
                                        break;
                                    }
                                }
                                else {
                                    r[k] = b[k];
                                }
                            }
                            return r;
                        }
                        function intersectTags(a, b) {
                            if (a === emptyTags || b === emptyTags) {
                                return emptyTags;
                            }
                            var r = emptyTags;
                            for (var k in a) {
                                if (hasOwnProperty.call(b, k)) {
                                    var intersection_2 = intersect(a[k], b[k]);
                                    if (intersection_2.length === 0) {
                                        if (r === emptyTags) {
                                            r = {};
                                        }
                                        r[k] = a[k].concat(b[k]);
                                    }
                                }
                            }
                            return r;
                        }
                        // tslint:disable-next-line: deprecation
                        function isAnyC(codec) {
                            return codec._tag === 'AnyType';
                        }
                        function isLiteralC(codec) {
                            return codec._tag === 'LiteralType';
                        }
                        function isKeyofC(codec) {
                            return codec._tag === 'KeyofType';
                        }
                        function isTypeC(codec) {
                            return codec._tag === 'InterfaceType';
                        }
                        function isPartialC(codec) {
                            return codec._tag === 'PartialType';
                        }
                        // tslint:disable-next-line: deprecation
                        function isStrictC(codec) {
                            return codec._tag === 'StrictType';
                        }
                        function isExactC(codec) {
                            return codec._tag === 'ExactType';
                        }
                        // tslint:disable-next-line: deprecation
                        function isRefinementC(codec) {
                            return codec._tag === 'RefinementType';
                        }
                        function isIntersectionC(codec) {
                            return codec._tag === 'IntersectionType';
                        }
                        function isUnionC(codec) {
                            return codec._tag === 'UnionType';
                        }
                        function isRecursiveC(codec) {
                            return codec._tag === 'RecursiveType';
                        }
                        var lazyCodecs = [];
                        /**
                         * @internal
                         */
                        function getTags(codec) {
                            if (lazyCodecs.indexOf(codec) !== -1) {
                                return emptyTags;
                            }
                            if (isTypeC(codec) || isStrictC(codec)) {
                                var index = emptyTags;
                                // tslint:disable-next-line: forin
                                for (var k in codec.props) {
                                    var prop = codec.props[k];
                                    if (isLiteralC(prop)) {
                                        if (index === emptyTags) {
                                            index = {};
                                        }
                                        index[k] = [prop.value];
                                    }
                                }
                                return index;
                            }
                            else if (isExactC(codec) || isRefinementC(codec)) {
                                return getTags(codec.type);
                            }
                            else if (isIntersectionC(codec)) {
                                return codec.types.reduce(function (tags, codec) { return mergeTags(tags, getTags(codec)); }, emptyTags);
                            }
                            else if (isUnionC(codec)) {
                                return codec.types.slice(1).reduce(function (tags, codec) { return intersectTags(tags, getTags(codec)); }, getTags(codec.types[0]));
                            }
                            else if (isRecursiveC(codec)) {
                                lazyCodecs.push(codec);
                                var tags = getTags(codec.type);
                                lazyCodecs.pop();
                                return tags;
                            }
                            return emptyTags;
                        }
                        /**
                         * @internal
                         */
                        function getIndex(codecs) {
                            var tags = getTags(codecs[0]);
                            var keys = Object.keys(tags);
                            var len = codecs.length;
                            var _loop_1 = function (k) {
                                var all = tags[k].slice();
                                var index = [tags[k]];
                                for (var i = 1; i < len; i++) {
                                    var codec = codecs[i];
                                    var ctags = getTags(codec);
                                    var values = ctags[k];
                                    // tslint:disable-next-line: strict-type-predicates
                                    if (values === undefined) {
                                        return "continue-keys";
                                    }
                                    else {
                                        if (values.some(function (v) { return all.indexOf(v) !== -1; })) {
                                            return "continue-keys";
                                        }
                                        else {
                                            all.push.apply(all, values);
                                            index.push(values);
                                        }
                                    }
                                }
                                return { value: [k, index] };
                            };
                            keys: for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                                var k = keys_1[_i];
                                var state_1 = _loop_1(k);
                                if (typeof state_1 === "object")
                                    return state_1.value;
                                switch (state_1) {
                                    case "continue-keys": continue keys;
                                }
                            }
                            return undefined;
                        }
                        // -------------------------------------------------------------------------------------
                        // primitives
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 1.0.0
                         */
                        var NullType = /** @class */ (function (_super) {
                            __extends(NullType, _super);
                            function NullType() {
                                var _this = _super.call(this, 'null', function (u) { return u === null; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'NullType';
                                return _this;
                            }
                            return NullType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var nullType = new NullType();
                        /**
                         * @since 1.0.0
                         */
                        var UndefinedType = /** @class */ (function (_super) {
                            __extends(UndefinedType, _super);
                            function UndefinedType() {
                                var _this = _super.call(this, 'undefined', function (u) { return u === void 0; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'UndefinedType';
                                return _this;
                            }
                            return UndefinedType;
                        }(Type));

                        var undefinedType = new UndefinedType();
                        /**
                         * @since 1.2.0
                         */
                        var VoidType = /** @class */ (function (_super) {
                            __extends(VoidType, _super);
                            function VoidType() {
                                var _this = _super.call(this, 'void', undefinedType.is, undefinedType.validate, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'VoidType';
                                return _this;
                            }
                            return VoidType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.2.0
                         */
                        var voidType = new VoidType();
                        /**
                         * @since 1.5.0
                         */
                        var UnknownType = /** @class */ (function (_super) {
                            __extends(UnknownType, _super);
                            function UnknownType() {
                                var _this = _super.call(this, 'unknown', function (_) { return true; }, success, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'UnknownType';
                                return _this;
                            }
                            return UnknownType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.5.0
                         */
                        var unknown = new UnknownType();
                        /**
                         * @since 1.0.0
                         */
                        var StringType = /** @class */ (function (_super) {
                            __extends(StringType, _super);
                            function StringType() {
                                var _this = _super.call(this, 'string', function (u) { return typeof u === 'string'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'StringType';
                                return _this;
                            }
                            return StringType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var string = new StringType();
                        /**
                         * @since 1.0.0
                         */
                        var NumberType = /** @class */ (function (_super) {
                            __extends(NumberType, _super);
                            function NumberType() {
                                var _this = _super.call(this, 'number', function (u) { return typeof u === 'number'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'NumberType';
                                return _this;
                            }
                            return NumberType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var number = new NumberType();
                        /**
                         * @since 2.1.0
                         */
                        var BigIntType = /** @class */ (function (_super) {
                            __extends(BigIntType, _super);
                            function BigIntType() {
                                var _this = _super.call(this, 'bigint',
                                    // tslint:disable-next-line: valid-typeof
                                    function (u) { return typeof u === 'bigint'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'BigIntType';
                                return _this;
                            }
                            return BigIntType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 2.1.0
                         */
                        var bigint = new BigIntType();
                        /**
                         * @since 1.0.0
                         */
                        var BooleanType = /** @class */ (function (_super) {
                            __extends(BooleanType, _super);
                            function BooleanType() {
                                var _this = _super.call(this, 'boolean', function (u) { return typeof u === 'boolean'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'BooleanType';
                                return _this;
                            }
                            return BooleanType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var boolean = new BooleanType();
                        /**
                         * @since 1.0.0
                         */
                        var AnyArrayType = /** @class */ (function (_super) {
                            __extends(AnyArrayType, _super);
                            function AnyArrayType() {
                                var _this = _super.call(this, 'UnknownArray', Array.isArray, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'AnyArrayType';
                                return _this;
                            }
                            return AnyArrayType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.7.1
                         */
                        var UnknownArray = new AnyArrayType();
                        /**
                         * @since 1.0.0
                         */
                        var AnyDictionaryType = /** @class */ (function (_super) {
                            __extends(AnyDictionaryType, _super);
                            function AnyDictionaryType() {
                                var _this = _super.call(this, 'UnknownRecord', function (u) { return u !== null && typeof u === 'object' && !Array.isArray(u); }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'AnyDictionaryType';
                                return _this;
                            }
                            return AnyDictionaryType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.7.1
                         */
                        var UnknownRecord = new AnyDictionaryType();

                        /**
                         * @since 1.0.0
                         */
                        var LiteralType = /** @class */ (function (_super) {
                            __extends(LiteralType, _super);
                            function LiteralType(name, is, validate, encode, value) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.value = value;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'LiteralType';
                                return _this;
                            }
                            return LiteralType;
                        }(Type));

                        /**
                         * @category constructors
                         * @since 1.0.0
                         */
                        function literal(value, name) {
                            if (name === void 0) { name = JSON.stringify(value); }
                            var is = function (u) { return u === value; };
                            return new LiteralType(name, is, function (u, c) { return (is(u) ? success(value) : failure(u, c)); }, identity, value);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var KeyofType = /** @class */ (function (_super) {
                            __extends(KeyofType, _super);
                            function KeyofType(name, is, validate, encode, keys) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.keys = keys;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'KeyofType';
                                return _this;
                            }
                            return KeyofType;
                        }(Type));

                        /**
                         * @category constructors
                         * @since 1.0.0
                         */
                        function keyof(keys, name) {
                            if (name === void 0) {
                                name = Object.keys(keys)
                                    .map(function (k) { return JSON.stringify(k); })
                                    .join(' | ');
                            }
                            var is = function (u) { return string.is(u) && hasOwnProperty.call(keys, u); };
                            return new KeyofType(name, is, function (u, c) { return (is(u) ? success(u) : failure(u, c)); }, identity, keys);
                        }
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 1.0.0
                         */
                        var RefinementType = /** @class */ (function (_super) {
                            __extends(RefinementType, _super);
                            function RefinementType(name, is, validate, encode, type, predicate) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.type = type;
                                _this.predicate = predicate;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'RefinementType';
                                return _this;
                            }
                            return RefinementType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.8.1
                         */
                        function brand(codec, predicate, name) {
                            return refinement(codec, predicate, name);
                        }
                        /**
                         * A branded codec representing an integer
                         *
                         * @category primitives
                         * @since 1.8.1
                         */
                        var Int = brand(number, function (n) { return Number.isInteger(n); }, 'Int');
                        /**
                         * @since 1.0.0
                         */
                        var RecursiveType = /** @class */ (function (_super) {
                            __extends(RecursiveType, _super);
                            function RecursiveType(name, is, validate, encode, runDefinition) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.runDefinition = runDefinition;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'RecursiveType';
                                return _this;
                            }
                            return RecursiveType;
                        }(Type));

                        Object.defineProperty(RecursiveType.prototype, 'type', {
                            get: function () {
                                return this.runDefinition();
                            },
                            enumerable: true,
                            configurable: true
                        });
                        /**
                         * @category combinators
                         * @since 1.0.0
                         */
                        function recursion(name, definition) {
                            var cache;
                            var runDefinition = function () {
                                if (!cache) {
                                    cache = definition(Self);
                                    cache.name = name;
                                }
                                return cache;
                            };
                            var Self = new RecursiveType(name, function (u) { return runDefinition().is(u); }, function (u, c) { return runDefinition().validate(u, c); }, function (a) { return runDefinition().encode(a); }, runDefinition);
                            return Self;
                        }
                        /**
                         * @since 1.0.0
                         */
                        var ArrayType = /** @class */ (function (_super) {
                            __extends(ArrayType, _super);
                            function ArrayType(name, is, validate, encode, type) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.type = type;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'ArrayType';
                                return _this;
                            }
                            return ArrayType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.0.0
                         */
                        function array(item, name) {
                            if (name === void 0) { name = "Array<".concat(item.name, ">"); }
                            return new ArrayType(name, function (u) { return UnknownArray.is(u) && u.every(item.is); }, function (u, c) {
                                var e = UnknownArray.validate(u, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                    return e;
                                }
                                var us = e.right;
                                var len = us.length;
                                var as = us;
                                var errors = [];
                                for (var i = 0; i < len; i++) {
                                    var ui = us[i];
                                    var result = item.validate(ui, appendContext(c, String(i), item, ui));
                                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                                        pushAll(errors, result.left);
                                    }
                                    else {
                                        var ai = result.right;
                                        if (ai !== ui) {
                                            if (as === us) {
                                                as = us.slice();
                                            }
                                            as[i] = ai;
                                        }
                                    }
                                }
                                return errors.length > 0 ? failures(errors) : success(as);
                            }, item.encode === identity ? identity : function (a) { return a.map(item.encode); }, item);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var InterfaceType = /** @class */ (function (_super) {
                            __extends(InterfaceType, _super);
                            function InterfaceType(name, is, validate, encode, props) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.props = props;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'InterfaceType';
                                return _this;
                            }
                            return InterfaceType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.0.0
                         */
                        function type(props, name) {
                            if (name === void 0) { name = getInterfaceTypeName(props); }
                            var keys = Object.keys(props);
                            var types = keys.map(function (key) { return props[key]; });
                            var len = keys.length;
                            return new InterfaceType(name, function (u) {
                                if (UnknownRecord.is(u)) {
                                    for (var i = 0; i < len; i++) {
                                        var k = keys[i];
                                        var uk = u[k];
                                        if ((uk === undefined && !hasOwnProperty.call(u, k)) || !types[i].is(uk)) {
                                            return false;
                                        }
                                    }
                                    return true;
                                }
                                return false;
                            }, function (u, c) {
                                var e = UnknownRecord.validate(u, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                    return e;
                                }
                                var o = e.right;
                                var a = o;
                                var errors = [];
                                for (var i = 0; i < len; i++) {
                                    var k = keys[i];
                                    var ak = a[k];
                                    var type_1 = types[i];
                                    var result = type_1.validate(ak, appendContext(c, k, type_1, ak));
                                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                                        pushAll(errors, result.left);
                                    }
                                    else {
                                        var vak = result.right;
                                        if (vak !== ak || (vak === undefined && !hasOwnProperty.call(a, k))) {
                                            /* istanbul ignore next */
                                            if (a === o) {
                                                a = __assign({}, o);
                                            }
                                            a[k] = vak;
                                        }
                                    }
                                }
                                return errors.length > 0 ? failures(errors) : success(a);
                            }, useIdentity(types)
                                ? identity
                                : function (a) {
                                    var s = __assign({}, a);
                                    for (var i = 0; i < len; i++) {
                                        var k = keys[i];
                                        var encode = types[i].encode;
                                        if (encode !== identity) {
                                            s[k] = encode(a[k]);
                                        }
                                    }
                                    return s;
                                }, props);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var PartialType = /** @class */ (function (_super) {
                            __extends(PartialType, _super);
                            function PartialType(name, is, validate, encode, props) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.props = props;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'PartialType';
                                return _this;
                            }
                            return PartialType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.0.0
                         */
                        function partial(props, name) {
                            if (name === void 0) { name = getPartialTypeName(getInterfaceTypeName(props)); }
                            var keys = Object.keys(props);
                            var types = keys.map(function (key) { return props[key]; });
                            var len = keys.length;
                            return new PartialType(name, function (u) {
                                if (UnknownRecord.is(u)) {
                                    for (var i = 0; i < len; i++) {
                                        var k = keys[i];
                                        var uk = u[k];
                                        if (uk !== undefined && !props[k].is(uk)) {
                                            return false;
                                        }
                                    }
                                    return true;
                                }
                                return false;
                            }, function (u, c) {
                                var e = UnknownRecord.validate(u, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                    return e;
                                }
                                var o = e.right;
                                var a = o;
                                var errors = [];
                                for (var i = 0; i < len; i++) {
                                    var k = keys[i];
                                    var ak = a[k];
                                    var type_2 = props[k];
                                    var result = type_2.validate(ak, appendContext(c, k, type_2, ak));
                                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                                        if (ak !== undefined) {
                                            pushAll(errors, result.left);
                                        }
                                    }
                                    else {
                                        var vak = result.right;
                                        if (vak !== ak) {
                                            /* istanbul ignore next */
                                            if (a === o) {
                                                a = __assign({}, o);
                                            }
                                            a[k] = vak;
                                        }
                                    }
                                }
                                return errors.length > 0 ? failures(errors) : success(a);
                            }, useIdentity(types)
                                ? identity
                                : function (a) {
                                    var s = __assign({}, a);
                                    for (var i = 0; i < len; i++) {
                                        var k = keys[i];
                                        var ak = a[k];
                                        if (ak !== undefined) {
                                            s[k] = types[i].encode(ak);
                                        }
                                    }
                                    return s;
                                }, props);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var DictionaryType = /** @class */ (function (_super) {
                            __extends(DictionaryType, _super);
                            function DictionaryType(name, is, validate, encode, domain, codomain) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.domain = domain;
                                _this.codomain = codomain;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'DictionaryType';
                                return _this;
                            }
                            return DictionaryType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.7.1
                         */
                        function record(domain, codomain, name) {
                            var keys = getDomainKeys(domain);
                            return keys
                                ? enumerableRecord(Object.keys(keys), domain, codomain, name)
                                : nonEnumerableRecord(domain, codomain, name);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var UnionType = /** @class */ (function (_super) {
                            __extends(UnionType, _super);
                            function UnionType(name, is, validate, encode, types) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.types = types;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'UnionType';
                                return _this;
                            }
                            return UnionType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.0.0
                         */
                        function union(codecs, name) {
                            if (name === void 0) { name = getUnionName(codecs); }
                            var index = getIndex(codecs);
                            if (index !== undefined && codecs.length > 0) {
                                var tag_1 = index[0], groups_1 = index[1];
                                var len_1 = groups_1.length;
                                var find_1 = function (value) {
                                    for (var i = 0; i < len_1; i++) {
                                        if (groups_1[i].indexOf(value) !== -1) {
                                            return i;
                                        }
                                    }
                                    return undefined;
                                };
                                // tslint:disable-next-line: deprecation
                                return new TaggedUnionType(name, function (u) {
                                    if (UnknownRecord.is(u)) {
                                        var i = find_1(u[tag_1]);
                                        return i !== undefined ? codecs[i].is(u) : false;
                                    }
                                    return false;
                                }, function (u, c) {
                                    var e = UnknownRecord.validate(u, c);
                                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                        return e;
                                    }
                                    var r = e.right;
                                    var i = find_1(r[tag_1]);
                                    if (i === undefined) {
                                        return failure(u, c);
                                    }
                                    var codec = codecs[i];
                                    return codec.validate(r, appendContext(c, String(i), codec, r));
                                }, useIdentity(codecs)
                                    ? identity
                                    : function (a) {
                                        var i = find_1(a[tag_1]);
                                        if (i === undefined) {
                                            // https://github.com/gcanti/io-ts/pull/305
                                            throw new Error("no codec found to encode value in union codec ".concat(name));
                                        }
                                        else {
                                            return codecs[i].encode(a);
                                        }
                                    }, codecs, tag_1);
                            }
                            else {
                                return new UnionType(name, function (u) { return codecs.some(function (type) { return type.is(u); }); }, function (u, c) {
                                    var errors = [];
                                    for (var i = 0; i < codecs.length; i++) {
                                        var codec = codecs[i];
                                        var result = codec.validate(u, appendContext(c, String(i), codec, u));
                                        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                                            pushAll(errors, result.left);
                                        }
                                        else {
                                            return success(result.right);
                                        }
                                    }
                                    return failures(errors);
                                }, useIdentity(codecs)
                                    ? identity
                                    : function (a) {
                                        for (var _i = 0, codecs_1 = codecs; _i < codecs_1.length; _i++) {
                                            var codec = codecs_1[_i];
                                            if (codec.is(a)) {
                                                return codec.encode(a);
                                            }
                                        }
                                        // https://github.com/gcanti/io-ts/pull/305
                                        throw new Error("no codec found to encode value in union type ".concat(name));
                                    }, codecs);
                            }
                        }
                        /**
                         * @since 1.0.0
                         */
                        var IntersectionType = /** @class */ (function (_super) {
                            __extends(IntersectionType, _super);
                            function IntersectionType(name, is, validate, encode, types) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.types = types;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'IntersectionType';
                                return _this;
                            }
                            return IntersectionType;
                        }(Type));

                        function intersection(codecs, name) {
                            if (name === void 0) { name = "(".concat(codecs.map(function (type) { return type.name; }).join(' & '), ")"); }
                            var len = codecs.length;
                            return new IntersectionType(name, function (u) { return codecs.every(function (type) { return type.is(u); }); }, codecs.length === 0
                                ? success
                                : function (u, c) {
                                    var us = [];
                                    var errors = [];
                                    for (var i = 0; i < len; i++) {
                                        var codec = codecs[i];
                                        var result = codec.validate(u, appendContext(c, String(i), codec, u));
                                        if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                                            pushAll(errors, result.left);
                                        }
                                        else {
                                            us.push(result.right);
                                        }
                                    }
                                    return errors.length > 0 ? failures(errors) : success(mergeAll(u, us));
                                }, codecs.length === 0
                                ? identity
                                : function (a) {
                                    return mergeAll(a, codecs.map(function (codec) { return codec.encode(a); }));
                                }, codecs);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var TupleType = /** @class */ (function (_super) {
                            __extends(TupleType, _super);
                            function TupleType(name, is, validate, encode, types) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.types = types;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'TupleType';
                                return _this;
                            }
                            return TupleType;
                        }(Type));

                        function tuple(codecs, name) {
                            if (name === void 0) { name = "[".concat(codecs.map(function (type) { return type.name; }).join(', '), "]"); }
                            var len = codecs.length;
                            return new TupleType(name, function (u) { return UnknownArray.is(u) && u.length === len && codecs.every(function (type, i) { return type.is(u[i]); }); }, function (u, c) {
                                var e = UnknownArray.validate(u, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                    return e;
                                }
                                var us = e.right;
                                var as = us.length > len ? us.slice(0, len) : us; // strip additional components
                                var errors = [];
                                for (var i = 0; i < len; i++) {
                                    var a = us[i];
                                    var type_3 = codecs[i];
                                    var result = type_3.validate(a, appendContext(c, String(i), type_3, a));
                                    if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(result)) {
                                        pushAll(errors, result.left);
                                    }
                                    else {
                                        var va = result.right;
                                        if (va !== a) {
                                            /* istanbul ignore next */
                                            if (as === us) {
                                                as = us.slice();
                                            }
                                            as[i] = va;
                                        }
                                    }
                                }
                                return errors.length > 0 ? failures(errors) : success(as);
                            }, useIdentity(codecs) ? identity : function (a) { return codecs.map(function (type, i) { return type.encode(a[i]); }); }, codecs);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var ReadonlyType = /** @class */ (function (_super) {
                            __extends(ReadonlyType, _super);
                            function ReadonlyType(name, is, validate, encode, type) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.type = type;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'ReadonlyType';
                                return _this;
                            }
                            return ReadonlyType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.0.0
                         */
                        function readonly(codec, name) {
                            if (name === void 0) { name = "Readonly<".concat(codec.name, ">"); }
                            return new ReadonlyType(name, codec.is, codec.validate, codec.encode, codec);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var ReadonlyArrayType = /** @class */ (function (_super) {
                            __extends(ReadonlyArrayType, _super);
                            function ReadonlyArrayType(name, is, validate, encode, type) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.type = type;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'ReadonlyArrayType';
                                return _this;
                            }
                            return ReadonlyArrayType;
                        }(Type));

                        /**
                         * @category combinators
                         * @since 1.0.0
                         */
                        function readonlyArray(item, name) {
                            if (name === void 0) { name = "ReadonlyArray<".concat(item.name, ">"); }
                            var codec = array(item);
                            return new ReadonlyArrayType(name, codec.is, codec.validate, codec.encode, item);
                        }
                        /**
                         * Strips additional properties, equivalent to `exact(type(props))`.
                         *
                         * @category combinators
                         * @since 1.0.0
                         */
                        var strict = function (props, name) { return exact(type(props), name); };
                        /**
                         * @since 1.1.0
                         */
                        var ExactType = /** @class */ (function (_super) {
                            __extends(ExactType, _super);
                            function ExactType(name, is, validate, encode, type) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.type = type;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'ExactType';
                                return _this;
                            }
                            return ExactType;
                        }(Type));

                        /**
                         * Strips additional properties.
                         *
                         * @category combinators
                         * @since 1.1.0
                         */
                        function exact(codec, name) {
                            if (name === void 0) { name = getExactTypeName(codec); }
                            var props = getProps(codec);
                            return new ExactType(name, codec.is, function (u, c) {
                                var e = UnknownRecord.validate(u, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                    return e;
                                }
                                var ce = codec.validate(u, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(ce)) {
                                    return ce;
                                }
                                return Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["right"])(stripKeys(ce.right, props));
                            }, function (a) { return codec.encode(stripKeys(a, props)); }, codec);
                        }
                        /**
                         * @since 1.0.0
                         */
                        var FunctionType = /** @class */ (function (_super) {
                            __extends(FunctionType, _super);
                            function FunctionType() {
                                var _this = _super.call(this, 'Function',
                                    // tslint:disable-next-line:strict-type-predicates
                                    function (u) { return typeof u === 'function'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'FunctionType';
                                return _this;
                            }
                            return FunctionType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var Function = new FunctionType();
                        /**
                         * @since 1.0.0
                         */
                        var NeverType = /** @class */ (function (_super) {
                            __extends(NeverType, _super);
                            function NeverType() {
                                var _this = _super.call(this, 'never', function (_) { return false; }, function (u, c) { return failure(u, c); },
                                    /* istanbul ignore next */
                                    function () {
                                        throw new Error('cannot encode never');
                                    }) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'NeverType';
                                return _this;
                            }
                            return NeverType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var never = new NeverType();
                        /**
                         * @since 1.0.0
                         */
                        var AnyType = /** @class */ (function (_super) {
                            __extends(AnyType, _super);
                            function AnyType() {
                                var _this = _super.call(this, 'any', function (_) { return true; }, success, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'AnyType';
                                return _this;
                            }
                            return AnyType;
                        }(Type));

                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var any = new AnyType();
                        function refinement(codec, predicate, name) {
                            if (name === void 0) { name = "(".concat(codec.name, " | ").concat(getFunctionName(predicate), ")"); }
                            return new RefinementType(name, function (u) { return codec.is(u) && predicate(u); }, function (i, c) {
                                var e = codec.validate(i, c);
                                if (Object(fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_0__["isLeft"])(e)) {
                                    return e;
                                }
                                var a = e.right;
                                return predicate(a) ? success(a) : failure(a, c);
                            }, codec.encode, codec, predicate);
                        }
                        /**
                         * @category primitives
                         * @since 1.0.0
                         */
                        var Integer = refinement(number, Number.isInteger, 'Integer');
                        // -------------------------------------------------------------------------------------
                        // deprecated
                        // -------------------------------------------------------------------------------------
                        /**
                         * @since 1.3.0
                         * @deprecated
                         */
                        var TaggedUnionType = /** @class */ (function (_super) {
                            __extends(TaggedUnionType, _super);
                            function TaggedUnionType(name,
                                // tslint:disable-next-line: deprecation
                                is,
                                // tslint:disable-next-line: deprecation
                                validate,
                                // tslint:disable-next-line: deprecation
                                encode, codecs, tag) {
                                var _this = _super.call(this, name, is, validate, encode, codecs) /* istanbul ignore next */ // <= workaround for https://github.com/Microsoft/TypeScript/issues/13455
                                    || this;
                                _this.tag = tag;
                                return _this;
                            }
                            return TaggedUnionType;
                        }(UnionType));

                        /**
                         * Use `union` instead.
                         *
                         * @category combinators
                         * @since 1.3.0
                         * @deprecated
                         */
                        var taggedUnion = function (tag, codecs, name
                            // tslint:disable-next-line: deprecation
                        ) {
                            if (name === void 0) { name = getUnionName(codecs); }
                            var U = union(codecs, name);
                            // tslint:disable-next-line: deprecation
                            if (U instanceof TaggedUnionType) {
                                return U;
                            }
                            else {
                                console.warn("[io-ts] Cannot build a tagged union for ".concat(name, ", returning a de-optimized union"));
                                // tslint:disable-next-line: deprecation
                                return new TaggedUnionType(name, U.is, U.validate, U.encode, codecs, tag);
                            }
                        };


                        /**
                         * @since 1.0.0
                         * @deprecated
                         */
                        var getValidationError /* istanbul ignore next */ = function (value, context) {
                            return ({
                                value: value,
                                context: context
                            });
                        };
                        /**
                         * @since 1.0.0
                         * @deprecated
                         */
                        var getDefaultContext /* istanbul ignore next */ = function (decoder) {
                            return [
                                { key: '', type: decoder }
                            ];
                        };
                        /**
                         * Use `UnknownRecord` instead.
                         *
                         * @category primitives
                         * @since 1.0.0
                         * @deprecated
                         */
                        var Dictionary = UnknownRecord;
                        /**
                         * @since 1.0.0
                         * @deprecated
                         */
                        var ObjectType = /** @class */ (function (_super) {
                            __extends(ObjectType, _super);
                            function ObjectType() {
                                var _this = _super.call(this, 'object', function (u) { return u !== null && typeof u === 'object'; }, function (u, c) { return (_this.is(u) ? success(u) : failure(u, c)); }, identity) || this;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'ObjectType';
                                return _this;
                            }
                            return ObjectType;
                        }(Type));

                        /**
                         * Use `UnknownRecord` instead.
                         *
                         * @category primitives
                         * @since 1.0.0
                         * @deprecated
                         */
                        // tslint:disable-next-line: deprecation
                        var object = new ObjectType();
                        /**
                         * Use `record` instead.
                         *
                         * @category combinators
                         * @since 1.0.0
                         * @deprecated
                         */
                        var dictionary = record;
                        /**
                         * @since 1.0.0
                         * @deprecated
                         */
                        var StrictType = /** @class */ (function (_super) {
                            __extends(StrictType, _super);
                            function StrictType(name,
                                // tslint:disable-next-line: deprecation
                                is,
                                // tslint:disable-next-line: deprecation
                                validate,
                                // tslint:disable-next-line: deprecation
                                encode, props) {
                                var _this = _super.call(this, name, is, validate, encode) || this;
                                _this.props = props;
                                /**
                                 * @since 1.0.0
                                 */
                                _this._tag = 'StrictType';
                                return _this;
                            }
                            return StrictType;
                        }(Type));

                        /**
                         * Drops the codec "kind".
                         *
                         * @category combinators
                         * @since 1.1.0
                         * @deprecated
                         */
                        function clean(codec) {
                            return codec;
                        }
                        function alias(codec) {
                            return function () { return codec; };
                        }


                        /***/
                    }),

/***/ "./node_modules/key-tree/dist/key-tree.umd.js":
/*!****************************************************!*\
  !*** ./node_modules/key-tree/dist/key-tree.umd.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        (function (global, factory) {
                            true ? module.exports = factory() :
                                undefined;
                        }(this, (function () {
                            'use strict';

                            class TreeNode {
                                constructor(parent, key, values) {
                                    this.key = key || '';
                                    this.values = [];
                                    this.children = [];
                                    this.parent = parent;
                                    this.appendValues(values);
                                }
                                get fullPath() {
                                    let ret = [];
                                    let current = this;
                                    while (current) {
                                        ret.splice(0, 0, current.key);
                                        current = current.parent;
                                    }
                                    return ret;
                                }
                                getChild(key) {
                                    for (const c of this.children) {
                                        if (key === c.key) {
                                            return c;
                                        }
                                    }
                                    return null;
                                }
                                ensureChild(key) {
                                    let child = this.getChild(key);
                                    if (!child) {
                                        child = new TreeNode(this, key);
                                        this.children.push(child);
                                    }
                                    return child;
                                }
                                addChild(key, values) {
                                    let child = this.getChild(key);
                                    if (!child) {
                                        child = new TreeNode(this, key, values);
                                        this.children.push(child);
                                    } else {
                                        child.appendValues(values);
                                    }
                                    return child;
                                }
                                appendValues(values) {
                                    if (typeof values === 'undefined') return;
                                    const vlist = Array.isArray(values) ? values : [values];
                                    this.values = this.values.concat(vlist);
                                }
                            }

                            class KeyTree {
                                constructor(options, values) {
                                    this.sep = (options && options.separator) || '.';
                                    this.$ = new TreeNode();
                                    if (values) {
                                        for (const key in values) {
                                            this.add(key, values[key]);
                                        }
                                    }
                                }

                                add(key, values) {
                                    let current = this.$;
                                    if (key === '') {
                                        current.appendValues(values);
                                        return;
                                    }
                                    let subKeys = (key || '').trim().split(this.sep);
                                    for (let i = 0; i < subKeys.length; i++) {
                                        if (i === (subKeys.length - 1)) {
                                            current = current.addChild(subKeys[i], values);
                                        } else {
                                            current = current.ensureChild(subKeys[i]);
                                        }
                                    }
                                }

                                _getNode(key) {
                                    let current = this.$;
                                    if (key !== '') {
                                        let subKeys = (key || '').trim().split(this.sep);
                                        for (let i = 0; i < subKeys.length; i++) {
                                            if (!current) {
                                                break;
                                            }
                                            current = current.getChild(subKeys[i]);
                                        }
                                    }
                                    return current;
                                }

                                get(key) {
                                    const node = this._getNode(key);
                                    return node ? node.values : [];
                                }

                                getSub(key, grouped) {
                                    let result = { grouped: {}, ungrouped: [] };
                                    this._reduce(key, this._getNode(key), result, true);
                                    return grouped ? result.grouped : result.ungrouped;
                                }

                                getSup(key, grouped) {
                                    let result = { grouped: {}, ungrouped: [] };
                                    this._reduce(key, this._getNode(key), result, false);
                                    return grouped ? result.grouped : result.ungrouped;
                                }

                                _reduce(keyPath, node, result, isSub) {
                                    if (!node) return;
                                    result.grouped[keyPath] = node.values;
                                    result.ungrouped = result.ungrouped.concat(node.values);
                                    if (isSub) {
                                        for (const c of node.children) {
                                            const ckey = `${keyPath}${this.sep}${c.key}`;
                                            this._reduce(ckey, c, result, isSub);
                                        }
                                    } else {
                                        const parent = node.parent;
                                        if (parent) {
                                            const pkey = parent.fullPath.join(this.sep);
                                            this._reduce(pkey, parent, result, isSub);
                                        }
                                    }
                                }

                                remove(key, value) {
                                    const node = this._getNode(key);
                                    let ret = false;
                                    if (node) {
                                        while (true) {
                                            let ix = -1;
                                            for (let i = 0; i < node.values.length; i++) {
                                                if (node.values[i] == value) {
                                                    ix = i;
                                                    break;
                                                }
                                            }
                                            if (ix >= 0) {
                                                node.values.splice(ix, 1);
                                                ret = true;
                                            } else {
                                                break;
                                            }
                                        }
                                    }
                                    return ret;
                                }

                                removeKey(key) {
                                    if (key) {
                                        const node = this._getNode(key);
                                        let ret = false;
                                        if (node) {
                                            ret = true;
                                            const parent = node.parent;
                                            let ix = -1;
                                            for (let i = 0; i < parent.children.length; i++) {
                                                let c = parent.children[i];
                                                if (c == node) {
                                                    ix = i;
                                                    break;
                                                }
                                            }
                                            if (ix >= 0) {
                                                parent.children.splice(ix, 1);
                                            }
                                        }
                                        return ret;
                                    } else {
                                        throw 'Cannot remove the root key';
                                    }
                                }

                                removeChildren(key) {
                                    const node = this._getNode(key);
                                    if (node) {
                                        node.children = [];
                                        return true;
                                    }
                                    return false;
                                }

                                clearKey(key, clearChildren) {
                                    const node = this._getNode(key);
                                    if (node) {
                                        this._clearNodeValues(node, clearChildren);
                                    }
                                }

                                _clearNodeValues(node, clearChildren) {
                                    node.values = [];
                                    if (clearChildren) {
                                        for (const c of node.children) {
                                            this._clearNodeValues(c, clearChildren);
                                        }
                                    }
                                }
                            }

                            return KeyTree;

                        })));


                        /***/
                    }),

/***/ "./node_modules/monocle-ts/es6/Optional.js":
/*!*************************************************!*\
  !*** ./node_modules/monocle-ts/es6/Optional.js ***!
  \*************************************************/
/*! exports provided: optional, id, asTraversal, compose, composeOptional, composeIso, composeLens, composePrism, composeTraversal, modifyOption, setOption, modify, modifyF, fromNullable, filter, prop, props, component, index, indexNonEmpty, key, atKey, some, right, left, traverse, findFirst, findFirstNonEmpty, imap, URI, Invariant, Semigroupoid, Category */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optional", function () { return optional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "id", function () { return id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asTraversal", function () { return asTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function () { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeOptional", function () { return composeOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeIso", function () { return composeIso; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeLens", function () { return composeLens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composePrism", function () { return composePrism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeTraversal", function () { return composeTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyOption", function () { return modifyOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setOption", function () { return setOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modify", function () { return modify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modifyF", function () { return modifyF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullable", function () { return fromNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prop", function () { return prop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "props", function () { return props; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "component", function () { return component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "index", function () { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexNonEmpty", function () { return indexNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "key", function () { return key; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atKey", function () { return atKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function () { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function () { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function () { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirst", function () { return findFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirstNonEmpty", function () { return findFirstNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "imap", function () { return imap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Invariant", function () { return Invariant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Semigroupoid", function () { return Semigroupoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Category", function () { return Category; });
/* harmony import */ var fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fp-ts/es6/function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fp-ts/es6/Option */ "./node_modules/fp-ts/es6/Option.js");
/* harmony import */ var fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fp-ts/es6/pipeable */ "./node_modules/fp-ts/es6/pipeable.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal */ "./node_modules/monocle-ts/es6/internal.js");




                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.3.8
                         */
                        var optional = _internal__WEBPACK_IMPORTED_MODULE_3__["optional"];
                        /**
                         * @category constructors
                         * @since 2.3.0
                         */
                        var id = function () { return optional(fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_1__["some"], fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["constant"]); };
                        // -------------------------------------------------------------------------------------
                        // converters
                        // -------------------------------------------------------------------------------------
                        /**
                         * View a `Optional` as a `Traversal`.
                         *
                         * @category converters
                         * @since 2.3.0
                         */
                        var asTraversal = _internal__WEBPACK_IMPORTED_MODULE_3__["optionalAsTraversal"];
                        // -------------------------------------------------------------------------------------
                        // compositions
                        // -------------------------------------------------------------------------------------
                        /**
                         * Compose a `Optional` with a `Optional`.
                         *
                         * @category compositions
                         * @since 2.3.0
                         */
                        var compose = _internal__WEBPACK_IMPORTED_MODULE_3__["optionalComposeOptional"];
                        /**
                         * Alias of `compose`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeOptional = compose;
                        /**
                         * Compose a `Optional` with a `Iso`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeIso =
                            /*#__PURE__*/
                            Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(_internal__WEBPACK_IMPORTED_MODULE_3__["isoAsOptional"], compose);
                        /**
                         * Compose a `Optional` with a `Lens`.
                         *
                         * @category compositions
                         * @since 2.3.7
                         */
                        var composeLens =
                            /*#__PURE__*/
                            Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(_internal__WEBPACK_IMPORTED_MODULE_3__["lensAsOptional"], _internal__WEBPACK_IMPORTED_MODULE_3__["optionalComposeOptional"]);
                        /**
                         * Compose a `Optional` with a `Prism`.
                         *
                         * @category compositions
                         * @since 2.3.7
                         */
                        var composePrism =
                            /*#__PURE__*/
                            Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(_internal__WEBPACK_IMPORTED_MODULE_3__["prismAsOptional"], _internal__WEBPACK_IMPORTED_MODULE_3__["optionalComposeOptional"]);
                        /**
                         * Compose a `Optional` with an `Traversal`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeTraversal = function (ab) {
                            return Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(asTraversal, _internal__WEBPACK_IMPORTED_MODULE_3__["traversalComposeTraversal"](ab));
                        };
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        var modifyOption = _internal__WEBPACK_IMPORTED_MODULE_3__["optionalModifyOption"];
                        /**
                         * @category combinators
                         * @since 2.3.7
                         */
                        var setOption = function (a) { return modifyOption(function () { return a; }); };
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        var modify = _internal__WEBPACK_IMPORTED_MODULE_3__["optionalModify"];
                        function modifyF(F) {
                            return function (f) {
                                return function (sa) {
                                    return function (s) {
                                        return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(sa.getOption(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_1__["fold"](function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return sa.set(a)(s); }); }));
                                    };
                                };
                            };
                        }
                        /**
                         * Return an `Optional` from a `Optional` focused on a nullable value.
                         *
                         * @category combinators
                         * @since 2.3.3
                         */
                        var fromNullable =
                            /*#__PURE__*/
                            compose(/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismAsOptional"](/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismFromNullable"]()));
                        function filter(predicate) {
                            return compose(_internal__WEBPACK_IMPORTED_MODULE_3__["prismAsOptional"](_internal__WEBPACK_IMPORTED_MODULE_3__["prismFromPredicate"](predicate)));
                        }
                        /**
                         * Return a `Optional` from a `Optional` and a prop.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var prop = function (prop) {
                            return compose(Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(_internal__WEBPACK_IMPORTED_MODULE_3__["lensId"](), _internal__WEBPACK_IMPORTED_MODULE_3__["lensProp"](prop), _internal__WEBPACK_IMPORTED_MODULE_3__["lensAsOptional"]));
                        };
                        /**
                         * Return a `Optional` from a `Optional` and a list of props.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var props = function () {
                            var props = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                props[_i] = arguments[_i];
                            }
                            return compose(Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(_internal__WEBPACK_IMPORTED_MODULE_3__["lensId"](), _internal__WEBPACK_IMPORTED_MODULE_3__["lensProps"].apply(_internal__WEBPACK_IMPORTED_MODULE_3__, props), _internal__WEBPACK_IMPORTED_MODULE_3__["lensAsOptional"]));
                        };
                        /**
                         * Return a `Optional` from a `Optional` focused on a component of a tuple.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var component = function (prop) {
                            return compose(Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(_internal__WEBPACK_IMPORTED_MODULE_3__["lensId"](), _internal__WEBPACK_IMPORTED_MODULE_3__["lensComponent"](prop), _internal__WEBPACK_IMPORTED_MODULE_3__["lensAsOptional"]));
                        };
                        /**
                         * Return a `Optional` from a `Optional` focused on an index of a `ReadonlyArray`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var index = _internal__WEBPACK_IMPORTED_MODULE_3__["optionalIndex"];
                        /**
                         * Return a `Optional` from a `Optional` focused on an index of a `ReadonlyNonEmptyArray`.
                         *
                         * @category combinators
                         * @since 2.3.8
                         */
                        var indexNonEmpty = _internal__WEBPACK_IMPORTED_MODULE_3__["optionalIndexNonEmpty"];
                        /**
                         * Return a `Optional` from a `Optional` focused on a key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var key = _internal__WEBPACK_IMPORTED_MODULE_3__["optionalKey"];
                        /**
                         * Return a `Optional` from a `Optional` focused on a required key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var atKey = function (key) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(sa, compose(_internal__WEBPACK_IMPORTED_MODULE_3__["lensAsOptional"](_internal__WEBPACK_IMPORTED_MODULE_3__["atReadonlyRecord"]().at(key))));
                            };
                        };
                        /**
                         * Return a `Optional` from a `Optional` focused on the `Some` of a `Option` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var some =
                            /*#__PURE__*/
                            compose(/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismAsOptional"](/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismSome"]()));
                        /**
                         * Return a `Optional` from a `Optional` focused on the `Right` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var right =
                            /*#__PURE__*/
                            compose(/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismAsOptional"](/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismRight"]()));
                        /**
                         * Return a `Optional` from a `Optional` focused on the `Left` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var left =
                            /*#__PURE__*/
                            compose(/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismAsOptional"](/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_3__["prismLeft"]()));
                        /**
                         * Return a `Traversal` from a `Optional` focused on a `Traversable`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        function traverse(T) {
                            return Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(asTraversal, _internal__WEBPACK_IMPORTED_MODULE_3__["traversalTraverse"](T));
                        }
                        function findFirst(predicate) {
                            return compose(_internal__WEBPACK_IMPORTED_MODULE_3__["optionalFindFirst"](predicate));
                        }
                        function findFirstNonEmpty(predicate) {
                            return compose(_internal__WEBPACK_IMPORTED_MODULE_3__["optionalFindFirstNonEmpty"](predicate));
                        }
                        // -------------------------------------------------------------------------------------
                        // pipeables
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category Invariant
                         * @since 2.3.0
                         */
                        var imap = function (f, g) { return function (ea) { return imap_(ea, f, g); }; };
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        var imap_ = function (ea, ab, ba) { return optional(Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(ea.getOption, fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_1__["map"](ab)), Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_0__["flow"])(ba, ea.set)); };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        var URI = 'monocle-ts/Optional';
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        var Invariant = {
                            URI: URI,
                            imap: imap_
                        };
                        /**
                         * @category instances
                         * @since 2.3.8
                         */
                        var Semigroupoid = {
                            URI: URI,
                            compose: function (ab, ea) { return compose(ab)(ea); }
                        };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        var Category = {
                            URI: URI,
                            compose: Semigroupoid.compose,
                            id: id
                        };


                        /***/
                    }),

/***/ "./node_modules/monocle-ts/es6/Traversal.js":
/*!**************************************************!*\
  !*** ./node_modules/monocle-ts/es6/Traversal.js ***!
  \**************************************************/
/*! exports provided: traversal, id, fromTraversable, compose, composeTraversal, composeIso, composeLens, composePrism, composeOptional, modify, set, fromNullable, filter, prop, props, component, index, indexNonEmpty, key, atKey, some, right, left, traverse, findFirst, findFirstNonEmpty, foldMap, fold, getAll, URI, Semigroupoid, Category */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traversal", function () { return traversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "id", function () { return id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTraversable", function () { return fromTraversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function () { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeTraversal", function () { return composeTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeIso", function () { return composeIso; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeLens", function () { return composeLens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composePrism", function () { return composePrism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "composeOptional", function () { return composeOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modify", function () { return modify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "set", function () { return set; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromNullable", function () { return fromNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function () { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prop", function () { return prop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "props", function () { return props; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "component", function () { return component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "index", function () { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexNonEmpty", function () { return indexNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "key", function () { return key; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atKey", function () { return atKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function () { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "right", function () { return right; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "left", function () { return left; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function () { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirst", function () { return findFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findFirstNonEmpty", function () { return findFirstNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "foldMap", function () { return foldMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fold", function () { return fold; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getAll", function () { return getAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "URI", function () { return URI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Semigroupoid", function () { return Semigroupoid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Category", function () { return Category; });
/* harmony import */ var fp_ts_es6_Const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fp-ts/es6/Const */ "./node_modules/fp-ts/es6/Const.js");
/* harmony import */ var fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fp-ts/es6/function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fp-ts/es6/pipeable */ "./node_modules/fp-ts/es6/pipeable.js");
/* harmony import */ var fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fp-ts/es6/ReadonlyArray */ "./node_modules/fp-ts/es6/ReadonlyArray.js");
/* harmony import */ var _internal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal */ "./node_modules/monocle-ts/es6/internal.js");





                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.3.8
                         */
                        var traversal = _internal__WEBPACK_IMPORTED_MODULE_4__["traversal"];
                        /**
                         * @category constructors
                         * @since 2.3.0
                         */
                        var id = function () { return traversal(function (_) { return function (f) { return f; }; }); };
                        /**
                         * Create a `Traversal` from a `Traversable`.
                         *
                         * @category constructor
                         * @since 2.3.0
                         */
                        var fromTraversable = _internal__WEBPACK_IMPORTED_MODULE_4__["fromTraversable"];
                        // -------------------------------------------------------------------------------------
                        // compositions
                        // -------------------------------------------------------------------------------------
                        /**
                         * Compose a `Traversal` with a `Traversal`.
                         *
                         * @category compositions
                         * @since 2.3.0
                         */
                        var compose = _internal__WEBPACK_IMPORTED_MODULE_4__["traversalComposeTraversal"];
                        /**
                         * Alias of `compose`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeTraversal = compose;
                        /**
                         * Compose a `Traversal` with a `Iso`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeIso =
                            /*#__PURE__*/
                            Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(_internal__WEBPACK_IMPORTED_MODULE_4__["isoAsTraversal"], compose);
                        /**
                         * Compose a `Traversal` with a `Lens`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeLens =
                            /*#__PURE__*/
                            Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(_internal__WEBPACK_IMPORTED_MODULE_4__["lensAsTraversal"], _internal__WEBPACK_IMPORTED_MODULE_4__["traversalComposeTraversal"]);
                        /**
                         * Compose a `Traversal` with a `Prism`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composePrism =
                            /*#__PURE__*/
                            Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(_internal__WEBPACK_IMPORTED_MODULE_4__["prismAsTraversal"], _internal__WEBPACK_IMPORTED_MODULE_4__["traversalComposeTraversal"]);
                        /**
                         * Compose a `Traversal` with a `Optional`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeOptional =
                            /*#__PURE__*/
                            Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_1__["flow"])(_internal__WEBPACK_IMPORTED_MODULE_4__["optionalAsTraversal"], _internal__WEBPACK_IMPORTED_MODULE_4__["traversalComposeTraversal"]);
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        var modify = function (f) {
                            return function (sa) {
                                return sa.modifyF(_internal__WEBPACK_IMPORTED_MODULE_4__["ApplicativeIdentity"])(f);
                            };
                        };
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        var set = function (a) { return modify(function () { return a; }); };
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a nullable value.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var fromNullable = function (sa) {
                            return composePrism(_internal__WEBPACK_IMPORTED_MODULE_4__["prismFromNullable"]())(sa);
                        };
                        function filter(predicate) {
                            return compose(_internal__WEBPACK_IMPORTED_MODULE_4__["prismAsTraversal"](_internal__WEBPACK_IMPORTED_MODULE_4__["prismFromPredicate"](predicate)));
                        }
                        /**
                         * Return a `Traversal` from a `Traversal` and a prop.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var prop = function (prop) {
                            return compose(Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(_internal__WEBPACK_IMPORTED_MODULE_4__["lensId"](), _internal__WEBPACK_IMPORTED_MODULE_4__["lensProp"](prop), _internal__WEBPACK_IMPORTED_MODULE_4__["lensAsTraversal"]));
                        };
                        /**
                         * Return a `Traversal` from a `Traversal` and a list of props.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var props = function () {
                            var props = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                props[_i] = arguments[_i];
                            }
                            return compose(Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(_internal__WEBPACK_IMPORTED_MODULE_4__["lensId"](), _internal__WEBPACK_IMPORTED_MODULE_4__["lensProps"].apply(_internal__WEBPACK_IMPORTED_MODULE_4__, props), _internal__WEBPACK_IMPORTED_MODULE_4__["lensAsTraversal"]));
                        };
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a component of a tuple.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var component = function (prop) {
                            return compose(Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(_internal__WEBPACK_IMPORTED_MODULE_4__["lensId"](), _internal__WEBPACK_IMPORTED_MODULE_4__["lensComponent"](prop), _internal__WEBPACK_IMPORTED_MODULE_4__["lensAsTraversal"]));
                        };
                        /**
                         * Return a `Traversal` from a `Traversal` focused on an index of a `ReadonlyArray`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var index = function (i) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(sa, compose(_internal__WEBPACK_IMPORTED_MODULE_4__["optionalAsTraversal"](_internal__WEBPACK_IMPORTED_MODULE_4__["indexReadonlyArray"]().index(i))));
                            };
                        };
                        /**
                         * @category combinators
                         * @since 2.3.8
                         */
                        var indexNonEmpty = function (i) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(sa, compose(_internal__WEBPACK_IMPORTED_MODULE_4__["optionalAsTraversal"](_internal__WEBPACK_IMPORTED_MODULE_4__["indexReadonlyNonEmptyArray"]().index(i))));
                            };
                        };
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var key = function (key) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(sa, compose(_internal__WEBPACK_IMPORTED_MODULE_4__["optionalAsTraversal"](_internal__WEBPACK_IMPORTED_MODULE_4__["indexReadonlyRecord"]().index(key))));
                            };
                        };
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a required key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var atKey = function (key) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_2__["pipe"])(sa, compose(_internal__WEBPACK_IMPORTED_MODULE_4__["lensAsTraversal"](_internal__WEBPACK_IMPORTED_MODULE_4__["atReadonlyRecord"]().at(key))));
                            };
                        };
                        /**
                         * Return a `Traversal` from a `Traversal` focused on the `Some` of a `Option` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var some =
                            /*#__PURE__*/
                            compose(/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_4__["prismAsTraversal"](/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_4__["prismSome"]()));
                        /**
                         * Return a `Traversal` from a `Traversal` focused on the `Right` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var right =
                            /*#__PURE__*/
                            compose(/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_4__["prismAsTraversal"](/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_4__["prismRight"]()));
                        /**
                         * Return a `Traversal` from a `Traversal` focused on the `Left` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var left =
                            /*#__PURE__*/
                            compose(/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_4__["prismAsTraversal"](/*#__PURE__*/ _internal__WEBPACK_IMPORTED_MODULE_4__["prismLeft"]()));
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a `Traversable`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var traverse = _internal__WEBPACK_IMPORTED_MODULE_4__["traversalTraverse"];
                        function findFirst(predicate) {
                            return composeOptional(_internal__WEBPACK_IMPORTED_MODULE_4__["optionalFindFirst"](predicate));
                        }
                        function findFirstNonEmpty(predicate) {
                            return composeOptional(_internal__WEBPACK_IMPORTED_MODULE_4__["optionalFindFirstNonEmpty"](predicate));
                        }
                        /**
                         * Map each target to a `Monoid` and combine the results.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var foldMap = function (M) {
                            return function (f) {
                                return function (sa) {
                                    return sa.modifyF(fp_ts_es6_Const__WEBPACK_IMPORTED_MODULE_0__["getApplicative"](M))(function (a) { return fp_ts_es6_Const__WEBPACK_IMPORTED_MODULE_0__["make"](f(a)); });
                                };
                            };
                        };
                        /**
                         * Map each target to a `Monoid` and combine the results.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var fold = function (M) { return foldMap(M)(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_1__["identity"]); };
                        /**
                         * Get all the targets of a `Traversal`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var getAll = function (s) {
                            return function (sa) {
                                return foldMap(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_3__["getMonoid"]())(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_3__["of"])(sa)(s);
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        var URI = 'monocle-ts/Traversal';
                        /**
                         * @category instances
                         * @since 2.3.8
                         */
                        var Semigroupoid = {
                            URI: URI,
                            compose: function (ab, ea) { return compose(ab)(ea); }
                        };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        var Category = {
                            URI: URI,
                            compose: Semigroupoid.compose,
                            id: id
                        };


                        /***/
                    }),

/***/ "./node_modules/monocle-ts/es6/internal.js":
/*!*************************************************!*\
  !*** ./node_modules/monocle-ts/es6/internal.js ***!
  \*************************************************/
/*! exports provided: iso, isoAsLens, isoAsPrism, isoAsOptional, isoAsTraversal, lens, lensAsOptional, lensAsTraversal, lensComposeLens, prismComposePrism, lensComposePrism, lensId, lensProp, lensProps, lensComponent, lensAtKey, prism, prismAsOptional, prismAsTraversal, prismModifyOption, prismModify, prismSet, prismComposeLens, prismFromNullable, prismFromPredicate, prismSome, prismRight, prismLeft, optional, optionalAsTraversal, optionalModifyOption, optionalModify, optionalComposeOptional, optionalIndex, optionalIndexNonEmpty, optionalKey, optionalFindFirst, optionalFindFirstNonEmpty, traversal, traversalComposeTraversal, ApplicativeIdentity, fromTraversable, traversalTraverse, index, indexReadonlyArray, indexReadonlyNonEmptyArray, indexReadonlyRecord, at, atReadonlyRecord */
/***/ (function (module, __webpack_exports__, __webpack_require__) {

                        "use strict";
                        __webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iso", function () { return iso; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isoAsLens", function () { return isoAsLens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isoAsPrism", function () { return isoAsPrism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isoAsOptional", function () { return isoAsOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isoAsTraversal", function () { return isoAsTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lens", function () { return lens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensAsOptional", function () { return lensAsOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensAsTraversal", function () { return lensAsTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensComposeLens", function () { return lensComposeLens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismComposePrism", function () { return prismComposePrism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensComposePrism", function () { return lensComposePrism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensId", function () { return lensId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensProp", function () { return lensProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensProps", function () { return lensProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensComponent", function () { return lensComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lensAtKey", function () { return lensAtKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prism", function () { return prism; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismAsOptional", function () { return prismAsOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismAsTraversal", function () { return prismAsTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismModifyOption", function () { return prismModifyOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismModify", function () { return prismModify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismSet", function () { return prismSet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismComposeLens", function () { return prismComposeLens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismFromNullable", function () { return prismFromNullable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismFromPredicate", function () { return prismFromPredicate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismSome", function () { return prismSome; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismRight", function () { return prismRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "prismLeft", function () { return prismLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optional", function () { return optional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalAsTraversal", function () { return optionalAsTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalModifyOption", function () { return optionalModifyOption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalModify", function () { return optionalModify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalComposeOptional", function () { return optionalComposeOptional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalIndex", function () { return optionalIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalIndexNonEmpty", function () { return optionalIndexNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalKey", function () { return optionalKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalFindFirst", function () { return optionalFindFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "optionalFindFirstNonEmpty", function () { return optionalFindFirstNonEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traversal", function () { return traversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traversalComposeTraversal", function () { return traversalComposeTraversal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicativeIdentity", function () { return ApplicativeIdentity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromTraversable", function () { return fromTraversable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traversalTraverse", function () { return traversalTraverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "index", function () { return index; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexReadonlyArray", function () { return indexReadonlyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexReadonlyNonEmptyArray", function () { return indexReadonlyNonEmptyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexReadonlyRecord", function () { return indexReadonlyRecord; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "at", function () { return at; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "atReadonlyRecord", function () { return atReadonlyRecord; });
/* harmony import */ var fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fp-ts/es6/ReadonlyArray */ "./node_modules/fp-ts/es6/ReadonlyArray.js");
/* harmony import */ var fp_ts_es6_ReadonlyRecord__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fp-ts/es6/ReadonlyRecord */ "./node_modules/fp-ts/es6/ReadonlyRecord.js");
/* harmony import */ var fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fp-ts/es6/function */ "./node_modules/fp-ts/es6/function.js");
/* harmony import */ var fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fp-ts/es6/Option */ "./node_modules/fp-ts/es6/Option.js");
/* harmony import */ var fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fp-ts/es6/Either */ "./node_modules/fp-ts/es6/Either.js");
/* harmony import */ var fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! fp-ts/es6/pipeable */ "./node_modules/fp-ts/es6/pipeable.js");
                        var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };






                        // -------------------------------------------------------------------------------------
                        // Iso
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var iso = function (get, reverseGet) {
                            return ({
                                get: get,
                                reverseGet: reverseGet
                            });
                        };
                        /** @internal */
                        var isoAsLens = function (sa) { return lens(sa.get, Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(sa.reverseGet, fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["constant"])); };
                        /** @internal */
                        var isoAsPrism = function (sa) { return prism(Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(sa.get, fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["some"]), sa.reverseGet); };
                        /** @internal */
                        var isoAsOptional = function (sa) {
                            return optional(Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(sa.get, fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["some"]), Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(sa.reverseGet, fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["constant"]));
                        };
                        /** @internal */
                        var isoAsTraversal = function (sa) {
                            return traversal(function (F) {
                                return function (f) {
                                    return function (s) {
                                        return F.map(f(sa.get(s)), function (a) { return sa.reverseGet(a); });
                                    };
                                };
                            });
                        };
                        // -------------------------------------------------------------------------------------
                        // Lens
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var lens = function (get, set) { return ({ get: get, set: set }); };
                        /** @internal */
                        var lensAsOptional = function (sa) { return optional(Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(sa.get, fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["some"]), sa.set); };
                        /** @internal */
                        var lensAsTraversal = function (sa) {
                            return traversal(function (F) { return function (f) { return function (s) { return F.map(f(sa.get(s)), function (a) { return sa.set(a)(s); }); }; }; });
                        };
                        /** @internal */
                        var lensComposeLens = function (ab) {
                            return function (sa) {
                                return lens(function (s) { return ab.get(sa.get(s)); }, function (b) { return function (s) { return sa.set(ab.set(b)(sa.get(s)))(s); }; });
                            };
                        };
                        /** @internal */
                        var prismComposePrism = function (ab) {
                            return function (sa) {
                                return prism(Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(sa.getOption, fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["chain"](ab.getOption)), Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(ab.reverseGet, sa.reverseGet));
                            };
                        };
                        /** @internal */
                        var lensComposePrism = function (ab) {
                            return function (sa) {
                                return optionalComposeOptional(prismAsOptional(ab))(lensAsOptional(sa));
                            };
                        };
                        /** @internal */
                        var lensId = function () { return lens(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["identity"], fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["constant"]); };
                        /** @internal */
                        var lensProp = function (prop) {
                            return function (sa) {
                                return lens(function (s) { return sa.get(s)[prop]; }, function (ap) {
                                    return function (s) {
                                        var _a;
                                        var oa = sa.get(s);
                                        if (ap === oa[prop]) {
                                            return s;
                                        }
                                        return sa.set(Object.assign({}, oa, (_a = {}, _a[prop] = ap, _a)))(s);
                                    };
                                });
                            };
                        };
                        /** @internal */
                        var lensProps = function () {
                            var props = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                props[_i] = arguments[_i];
                            }
                            return function (sa) {
                                return lens(function (s) {
                                    var a = sa.get(s);
                                    var r = {};
                                    for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
                                        var k = props_1[_i];
                                        r[k] = a[k];
                                    }
                                    return r;
                                }, function (a) {
                                    return function (s) {
                                        var oa = sa.get(s);
                                        for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {
                                            var k = props_2[_i];
                                            if (a[k] !== oa[k]) {
                                                return sa.set(Object.assign({}, oa, a))(s);
                                            }
                                        }
                                        return s;
                                    };
                                });
                            };
                        };
                        /** @internal */
                        var lensComponent = function (prop) {
                            return function (sa) {
                                return lens(function (s) { return sa.get(s)[prop]; }, function (ap) {
                                    return function (s) {
                                        var oa = sa.get(s);
                                        if (ap === oa[prop]) {
                                            return s;
                                        }
                                        var copy = oa.slice();
                                        copy[prop] = ap;
                                        return sa.set(copy)(s);
                                    };
                                });
                            };
                        };
                        /** @internal */
                        var lensAtKey = function (key) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(sa, lensComposeLens(atReadonlyRecord().at(key)));
                            };
                        };
                        // -------------------------------------------------------------------------------------
                        // Prism
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var prism = function (getOption, reverseGet) { return ({ getOption: getOption, reverseGet: reverseGet }); };
                        /** @internal */
                        var prismAsOptional = function (sa) { return optional(sa.getOption, function (a) { return prismSet(a)(sa); }); };
                        /** @internal */
                        var prismAsTraversal = function (sa) {
                            return traversal(function (F) {
                                return function (f) {
                                    return function (s) {
                                        return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(sa.getOption(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fold"](function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return prismSet(a)(sa)(s); }); }));
                                    };
                                };
                            });
                        };
                        /** @internal */
                        var prismModifyOption = function (f) {
                            return function (sa) {
                                return function (s) {
                                    return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(sa.getOption(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["map"](function (o) {
                                        var n = f(o);
                                        return n === o ? s : sa.reverseGet(n);
                                    }));
                                };
                            };
                        };
                        /** @internal */
                        var prismModify = function (f) {
                            return function (sa) {
                                var g = prismModifyOption(f)(sa);
                                return function (s) {
                                    return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(g(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["getOrElse"](function () { return s; }));
                                };
                            };
                        };
                        /** @internal */
                        var prismSet = function (a) { return prismModify(function () { return a; }); };
                        /** @internal */
                        var prismComposeLens = function (ab) {
                            return function (sa) {
                                return optionalComposeOptional(lensAsOptional(ab))(prismAsOptional(sa));
                            };
                        };
                        /** @internal */
                        var prismFromNullable = function () { return prism(fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fromNullable"], fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["identity"]); };
                        /** @internal */
                        var prismFromPredicate = function (predicate) {
                            return prism(fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fromPredicate"](predicate), fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["identity"]);
                        };
                        /** @internal */
                        var prismSome = function () { return prism(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["identity"], fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["some"]); };
                        /** @internal */
                        var prismRight = function () { return prism(fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fromEither"], fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_4__["right"]); };
                        /** @internal */
                        var prismLeft = function () {
                            return prism(function (s) { return (fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_4__["isLeft"](s) ? fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["some"](s.left) : fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["none"]); }, // TODO: replace with E.getLeft in v3
                                fp_ts_es6_Either__WEBPACK_IMPORTED_MODULE_4__["left"]);
                        };
                        // -------------------------------------------------------------------------------------
                        // Optional
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var optional = function (getOption, set) {
                            return ({
                                getOption: getOption,
                                set: set
                            });
                        };
                        /** @internal */
                        var optionalAsTraversal = function (sa) {
                            return traversal(function (F) {
                                return function (f) {
                                    return function (s) {
                                        return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(sa.getOption(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fold"](function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return sa.set(a)(s); }); }));
                                    };
                                };
                            });
                        };
                        /** @internal */
                        var optionalModifyOption = function (f) {
                            return function (optional) {
                                return function (s) {
                                    return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(optional.getOption(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["map"](function (a) {
                                        var n = f(a);
                                        return n === a ? s : optional.set(n)(s);
                                    }));
                                };
                            };
                        };
                        /** @internal */
                        var optionalModify = function (f) {
                            return function (optional) {
                                var g = optionalModifyOption(f)(optional);
                                return function (s) {
                                    return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(g(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["getOrElse"](function () { return s; }));
                                };
                            };
                        };
                        /** @internal */
                        var optionalComposeOptional = function (ab) {
                            return function (sa) {
                                return optional(Object(fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["flow"])(sa.getOption, fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["chain"](ab.getOption)), function (b) { return optionalModify(ab.set(b))(sa); });
                            };
                        };
                        /** @internal */
                        var optionalIndex = function (i) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(sa, optionalComposeOptional(indexReadonlyArray().index(i)));
                            };
                        };
                        /** @internal */
                        var optionalIndexNonEmpty = function (i) { return function (sa) { return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(sa, optionalComposeOptional(indexReadonlyNonEmptyArray().index(i))); }; };
                        /** @internal */
                        var optionalKey = function (key) {
                            return function (sa) {
                                return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(sa, optionalComposeOptional(indexReadonlyRecord().index(key)));
                            };
                        };
                        /** @internal */
                        var optionalFindFirst = function (predicate) {
                            return optional(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["findFirst"](predicate), function (a) {
                                return function (s) {
                                    return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["findIndex"](predicate)(s), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fold"](function () { return s; }, function (i) { return fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["unsafeUpdateAt"](i, a, s); }));
                                };
                            });
                        };
                        var unsafeUpdateAt = function (i, a, as) {
                            if (as[i] === a) {
                                return as;
                            }
                            else {
                                var xs = __spreadArray([as[0]], as.slice(1), true);
                                xs[i] = a;
                                return xs;
                            }
                        };
                        /** @internal */
                        var optionalFindFirstNonEmpty = function (predicate) {
                            return optional(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["findFirst"](predicate), function (a) {
                                return function (as) {
                                    return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["findIndex"](predicate)(as), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fold"](function () { return as; }, function (i) { return unsafeUpdateAt(i, a, as); }));
                                };
                            });
                        };
                        // -------------------------------------------------------------------------------------
                        // Traversal
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var traversal = function (modifyF) {
                            return ({
                                modifyF: modifyF
                            });
                        };
                        /** @internal */
                        function traversalComposeTraversal(ab) {
                            return function (sa) { return traversal(function (F) { return function (f) { return sa.modifyF(F)(ab.modifyF(F)(f)); }; }); };
                        }
                        /** @internal */
                        var ApplicativeIdentity = {
                            URI: 'Identity',
                            map: function (fa, f) { return f(fa); },
                            of: fp_ts_es6_function__WEBPACK_IMPORTED_MODULE_2__["identity"],
                            ap:
                                /* istanbul ignore next */
                                function (fab, fa) { return fab(fa); }
                        };
                        var isIdentity = function (F) { return F.URI === 'Identity'; };
                        function fromTraversable(T) {
                            return function () {
                                return traversal(function (F) {
                                    // if `F` is `Identity` then `traverseF = map`
                                    var traverseF = isIdentity(F)
                                        ? T.map
                                        : T.traverse(F);
                                    return function (f) { return function (s) { return traverseF(s, f); }; };
                                });
                            };
                        }
                        /** @internal */
                        function traversalTraverse(T) {
                            return traversalComposeTraversal(fromTraversable(T)());
                        }
                        // -------------------------------------------------------------------------------------
                        // Ix
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var index = function (index) { return ({ index: index }); };
                        /** @internal */
                        var indexReadonlyArray = function () {
                            return index(function (i) {
                                return optional(function (as) { return fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["lookup"](i, as); }, function (a) {
                                    return function (as) {
                                        return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["lookup"](i, as), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fold"](function () { return as; }, function () { return fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["unsafeUpdateAt"](i, a, as); }));
                                    };
                                });
                            });
                        };
                        /** @internal */
                        var indexReadonlyNonEmptyArray = function () {
                            return index(function (i) {
                                return optional(function (as) { return fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["lookup"](i, as); }, function (a) {
                                    return function (as) {
                                        return Object(fp_ts_es6_pipeable__WEBPACK_IMPORTED_MODULE_5__["pipe"])(fp_ts_es6_ReadonlyArray__WEBPACK_IMPORTED_MODULE_0__["lookup"](i, as), fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fold"](function () { return as; }, function () { return unsafeUpdateAt(i, a, as); }));
                                    };
                                });
                            });
                        };
                        /** @internal */
                        var indexReadonlyRecord = function () {
                            return index(function (k) {
                                return optional(function (r) { return fp_ts_es6_ReadonlyRecord__WEBPACK_IMPORTED_MODULE_1__["lookup"](k, r); }, function (a) {
                                    return function (r) {
                                        if (r[k] === a || fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["isNone"](fp_ts_es6_ReadonlyRecord__WEBPACK_IMPORTED_MODULE_1__["lookup"](k, r))) {
                                            return r;
                                        }
                                        return fp_ts_es6_ReadonlyRecord__WEBPACK_IMPORTED_MODULE_1__["insertAt"](k, a)(r);
                                    };
                                });
                            });
                        };
                        // -------------------------------------------------------------------------------------
                        // At
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var at = function (at) { return ({ at: at }); };
                        /** @internal */
                        function atReadonlyRecord() {
                            return at(function (key) {
                                return lens(function (r) { return fp_ts_es6_ReadonlyRecord__WEBPACK_IMPORTED_MODULE_1__["lookup"](key, r); }, fp_ts_es6_Option__WEBPACK_IMPORTED_MODULE_3__["fold"](function () { return fp_ts_es6_ReadonlyRecord__WEBPACK_IMPORTED_MODULE_1__["deleteAt"](key); }, function (a) { return fp_ts_es6_ReadonlyRecord__WEBPACK_IMPORTED_MODULE_1__["insertAt"](key, a); }));
                            });
                        }


                        /***/
                    }),

/***/ "./node_modules/monocle-ts/lib/Lens.js":
/*!*********************************************!*\
  !*** ./node_modules/monocle-ts/lib/Lens.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.Category = exports.Semigroupoid = exports.Invariant = exports.URI = exports.imap = exports.findFirstNonEmpty = exports.findFirst = exports.traverse = exports.left = exports.right = exports.some = exports.atKey = exports.key = exports.indexNonEmpty = exports.index = exports.component = exports.props = exports.prop = exports.filter = exports.fromNullable = exports.modifyF = exports.modify = exports.composeTraversal = exports.composeOptional = exports.composePrism = exports.composeIso = exports.composeLens = exports.compose = exports.asTraversal = exports.asOptional = exports.id = exports.lens = void 0;
                        var function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        var pipeable_1 = __webpack_require__(/*! fp-ts/lib/pipeable */ "./node_modules/fp-ts/lib/pipeable.js");
                        var _ = __webpack_require__(/*! ./internal */ "./node_modules/monocle-ts/lib/internal.js");
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.3.8
                         */
                        exports.lens = _.lens;
                        /**
                         * @category constructors
                         * @since 2.3.0
                         */
                        exports.id = _.lensId;
                        // -------------------------------------------------------------------------------------
                        // converters
                        // -------------------------------------------------------------------------------------
                        /**
                         * View a `Lens` as a `Optional`.
                         *
                         * @category converters
                         * @since 2.3.0
                         */
                        exports.asOptional = _.lensAsOptional;
                        /**
                         * View a `Lens` as a `Traversal`.
                         *
                         * @category converters
                         * @since 2.3.0
                         */
                        exports.asTraversal = _.lensAsTraversal;
                        // -------------------------------------------------------------------------------------
                        // compositions
                        // -------------------------------------------------------------------------------------
                        /**
                         * Compose a `Lens` with a `Lens`.
                         *
                         * @category compositions
                         * @since 2.3.0
                         */
                        exports.compose = _.lensComposeLens;
                        /**
                         * Alias of `compose`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeLens = exports.compose;
                        /**
                         * Compose a `Lens` with a `Iso`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeIso =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.isoAsLens, exports.compose);
                        /**
                         * Compose a `Lens` with a `Prism`.
                         *
                         * @category compositions
                         * @since 2.3.0
                         */
                        exports.composePrism = _.lensComposePrism;
                        /**
                         * Compose a `Lens` with an `Optional`.
                         *
                         * @category compositions
                         * @since 2.3.0
                         */
                        var composeOptional = function (ab) {
                            return (0, function_1.flow)(exports.asOptional, _.optionalComposeOptional(ab));
                        };
                        exports.composeOptional = composeOptional;
                        /**
                         * Compose a `Lens` with an `Traversal`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeTraversal = function (ab) {
                            return (0, function_1.flow)(exports.asTraversal, _.traversalComposeTraversal(ab));
                        };
                        exports.composeTraversal = composeTraversal;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        var modify = function (f) {
                            return function (sa) {
                                return function (s) {
                                    var o = sa.get(s);
                                    var n = f(o);
                                    return o === n ? s : sa.set(n)(s);
                                };
                            };
                        };
                        exports.modify = modify;
                        function modifyF(F) {
                            return function (f) { return function (sa) { return function (s) { return (0, pipeable_1.pipe)(sa.get(s), f, function (fa) { return F.map(fa, function (a) { return sa.set(a)(s); }); }); }; }; };
                        }
                        exports.modifyF = modifyF;
                        /**
                         * Return a `Optional` from a `Lens` focused on a nullable value.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var fromNullable = function (sa) {
                            return (0, exports.composePrism)(_.prismFromNullable())(sa);
                        };
                        exports.fromNullable = fromNullable;
                        function filter(predicate) {
                            return (0, exports.composePrism)(_.prismFromPredicate(predicate));
                        }
                        exports.filter = filter;
                        /**
                         * Return a `Lens` from a `Lens` and a prop.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.prop = _.lensProp;
                        /**
                         * Return a `Lens` from a `Lens` and a list of props.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.props = _.lensProps;
                        /**
                         * Return a `Lens` from a `Lens` focused on a component of a tuple.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.component = _.lensComponent;
                        /**
                         * Return a `Optional` from a `Lens` focused on an index of a `ReadonlyArray`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var index = function (i) {
                            return (0, function_1.flow)(exports.asOptional, _.optionalIndex(i));
                        };
                        exports.index = index;
                        /**
                         * Return a `Optional` from a `Lens` focused on an index of a `ReadonlyNonEmptyArray`.
                         *
                         * @category combinators
                         * @since 2.3.8
                         */
                        var indexNonEmpty = function (i) {
                            return (0, function_1.flow)(exports.asOptional, _.optionalIndexNonEmpty(i));
                        };
                        exports.indexNonEmpty = indexNonEmpty;
                        /**
                         * Return a `Optional` from a `Lens` focused on a key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var key = function (key) {
                            return (0, function_1.flow)(exports.asOptional, _.optionalKey(key));
                        };
                        exports.key = key;
                        /**
                         * Return a `Lens` from a `Lens` focused on a required key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.atKey = _.lensAtKey;
                        /**
                         * Return a `Optional` from a `Lens` focused on the `Some` of a `Option` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.some =
                            /*#__PURE__*/
                            (0, exports.composePrism)(/*#__PURE__*/ _.prismSome());
                        /**
                         * Return a `Optional` from a `Lens` focused on the `Right` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.right =
                            /*#__PURE__*/
                            (0, exports.composePrism)(/*#__PURE__*/ _.prismRight());
                        /**
                         * Return a `Optional` from a `Lens` focused on the `Left` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.left =
                            /*#__PURE__*/
                            (0, exports.composePrism)(/*#__PURE__*/ _.prismLeft());
                        /**
                         * Return a `Traversal` from a `Lens` focused on a `Traversable`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        function traverse(T) {
                            return (0, function_1.flow)(exports.asTraversal, _.traversalTraverse(T));
                        }
                        exports.traverse = traverse;
                        function findFirst(predicate) {
                            return (0, exports.composeOptional)(_.optionalFindFirst(predicate));
                        }
                        exports.findFirst = findFirst;
                        function findFirstNonEmpty(predicate) {
                            return (0, exports.composeOptional)(_.optionalFindFirstNonEmpty(predicate));
                        }
                        exports.findFirstNonEmpty = findFirstNonEmpty;
                        // -------------------------------------------------------------------------------------
                        // pipeables
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category Invariant
                         * @since 2.3.0
                         */
                        var imap = function (f, g) {
                            return function (ea) {
                                return imap_(ea, f, g);
                            };
                        };
                        exports.imap = imap;
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        var imap_ = function (ea, ab, ba) { return (0, exports.lens)((0, function_1.flow)(ea.get, ab), (0, function_1.flow)(ba, ea.set)); };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.URI = 'monocle-ts/Lens';
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.Invariant = {
                            URI: exports.URI,
                            imap: imap_
                        };
                        /**
                         * @category instances
                         * @since 2.3.8
                         */
                        exports.Semigroupoid = {
                            URI: exports.URI,
                            compose: function (ab, ea) { return (0, exports.compose)(ab)(ea); }
                        };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.Category = {
                            URI: exports.URI,
                            compose: exports.Semigroupoid.compose,
                            id: exports.id
                        };


                        /***/
                    }),

/***/ "./node_modules/monocle-ts/lib/Optional.js":
/*!*************************************************!*\
  !*** ./node_modules/monocle-ts/lib/Optional.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.Category = exports.Semigroupoid = exports.Invariant = exports.URI = exports.imap = exports.findFirstNonEmpty = exports.findFirst = exports.traverse = exports.left = exports.right = exports.some = exports.atKey = exports.key = exports.indexNonEmpty = exports.index = exports.component = exports.props = exports.prop = exports.filter = exports.fromNullable = exports.modifyF = exports.modify = exports.setOption = exports.modifyOption = exports.composeTraversal = exports.composePrism = exports.composeLens = exports.composeIso = exports.composeOptional = exports.compose = exports.asTraversal = exports.id = exports.optional = void 0;
                        var function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        var O = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        var pipeable_1 = __webpack_require__(/*! fp-ts/lib/pipeable */ "./node_modules/fp-ts/lib/pipeable.js");
                        var _ = __webpack_require__(/*! ./internal */ "./node_modules/monocle-ts/lib/internal.js");
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.3.8
                         */
                        exports.optional = _.optional;
                        /**
                         * @category constructors
                         * @since 2.3.0
                         */
                        var id = function () { return (0, exports.optional)(O.some, function_1.constant); };
                        exports.id = id;
                        // -------------------------------------------------------------------------------------
                        // converters
                        // -------------------------------------------------------------------------------------
                        /**
                         * View a `Optional` as a `Traversal`.
                         *
                         * @category converters
                         * @since 2.3.0
                         */
                        exports.asTraversal = _.optionalAsTraversal;
                        // -------------------------------------------------------------------------------------
                        // compositions
                        // -------------------------------------------------------------------------------------
                        /**
                         * Compose a `Optional` with a `Optional`.
                         *
                         * @category compositions
                         * @since 2.3.0
                         */
                        exports.compose = _.optionalComposeOptional;
                        /**
                         * Alias of `compose`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeOptional = exports.compose;
                        /**
                         * Compose a `Optional` with a `Iso`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeIso =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.isoAsOptional, exports.compose);
                        /**
                         * Compose a `Optional` with a `Lens`.
                         *
                         * @category compositions
                         * @since 2.3.7
                         */
                        exports.composeLens =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.lensAsOptional, _.optionalComposeOptional);
                        /**
                         * Compose a `Optional` with a `Prism`.
                         *
                         * @category compositions
                         * @since 2.3.7
                         */
                        exports.composePrism =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.prismAsOptional, _.optionalComposeOptional);
                        /**
                         * Compose a `Optional` with an `Traversal`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        var composeTraversal = function (ab) {
                            return (0, function_1.flow)(exports.asTraversal, _.traversalComposeTraversal(ab));
                        };
                        exports.composeTraversal = composeTraversal;
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.modifyOption = _.optionalModifyOption;
                        /**
                         * @category combinators
                         * @since 2.3.7
                         */
                        var setOption = function (a) { return (0, exports.modifyOption)(function () { return a; }); };
                        exports.setOption = setOption;
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.modify = _.optionalModify;
                        function modifyF(F) {
                            return function (f) {
                                return function (sa) {
                                    return function (s) {
                                        return (0, pipeable_1.pipe)(sa.getOption(s), O.fold(function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return sa.set(a)(s); }); }));
                                    };
                                };
                            };
                        }
                        exports.modifyF = modifyF;
                        /**
                         * Return an `Optional` from a `Optional` focused on a nullable value.
                         *
                         * @category combinators
                         * @since 2.3.3
                         */
                        exports.fromNullable =
                            /*#__PURE__*/
                            (0, exports.compose)(/*#__PURE__*/ _.prismAsOptional(/*#__PURE__*/ _.prismFromNullable()));
                        function filter(predicate) {
                            return (0, exports.compose)(_.prismAsOptional(_.prismFromPredicate(predicate)));
                        }
                        exports.filter = filter;
                        /**
                         * Return a `Optional` from a `Optional` and a prop.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var prop = function (prop) {
                            return (0, exports.compose)((0, pipeable_1.pipe)(_.lensId(), _.lensProp(prop), _.lensAsOptional));
                        };
                        exports.prop = prop;
                        /**
                         * Return a `Optional` from a `Optional` and a list of props.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var props = function () {
                            var props = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                props[_i] = arguments[_i];
                            }
                            return (0, exports.compose)((0, pipeable_1.pipe)(_.lensId(), _.lensProps.apply(_, props), _.lensAsOptional));
                        };
                        exports.props = props;
                        /**
                         * Return a `Optional` from a `Optional` focused on a component of a tuple.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var component = function (prop) {
                            return (0, exports.compose)((0, pipeable_1.pipe)(_.lensId(), _.lensComponent(prop), _.lensAsOptional));
                        };
                        exports.component = component;
                        /**
                         * Return a `Optional` from a `Optional` focused on an index of a `ReadonlyArray`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.index = _.optionalIndex;
                        /**
                         * Return a `Optional` from a `Optional` focused on an index of a `ReadonlyNonEmptyArray`.
                         *
                         * @category combinators
                         * @since 2.3.8
                         */
                        exports.indexNonEmpty = _.optionalIndexNonEmpty;
                        /**
                         * Return a `Optional` from a `Optional` focused on a key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.key = _.optionalKey;
                        /**
                         * Return a `Optional` from a `Optional` focused on a required key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var atKey = function (key) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.compose)(_.lensAsOptional(_.atReadonlyRecord().at(key))));
                            };
                        };
                        exports.atKey = atKey;
                        /**
                         * Return a `Optional` from a `Optional` focused on the `Some` of a `Option` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.some =
                            /*#__PURE__*/
                            (0, exports.compose)(/*#__PURE__*/ _.prismAsOptional(/*#__PURE__*/ _.prismSome()));
                        /**
                         * Return a `Optional` from a `Optional` focused on the `Right` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.right =
                            /*#__PURE__*/
                            (0, exports.compose)(/*#__PURE__*/ _.prismAsOptional(/*#__PURE__*/ _.prismRight()));
                        /**
                         * Return a `Optional` from a `Optional` focused on the `Left` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.left =
                            /*#__PURE__*/
                            (0, exports.compose)(/*#__PURE__*/ _.prismAsOptional(/*#__PURE__*/ _.prismLeft()));
                        /**
                         * Return a `Traversal` from a `Optional` focused on a `Traversable`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        function traverse(T) {
                            return (0, function_1.flow)(exports.asTraversal, _.traversalTraverse(T));
                        }
                        exports.traverse = traverse;
                        function findFirst(predicate) {
                            return (0, exports.compose)(_.optionalFindFirst(predicate));
                        }
                        exports.findFirst = findFirst;
                        function findFirstNonEmpty(predicate) {
                            return (0, exports.compose)(_.optionalFindFirstNonEmpty(predicate));
                        }
                        exports.findFirstNonEmpty = findFirstNonEmpty;
                        // -------------------------------------------------------------------------------------
                        // pipeables
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category Invariant
                         * @since 2.3.0
                         */
                        var imap = function (f, g) { return function (ea) { return imap_(ea, f, g); }; };
                        exports.imap = imap;
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        var imap_ = function (ea, ab, ba) { return (0, exports.optional)((0, function_1.flow)(ea.getOption, O.map(ab)), (0, function_1.flow)(ba, ea.set)); };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.URI = 'monocle-ts/Optional';
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.Invariant = {
                            URI: exports.URI,
                            imap: imap_
                        };
                        /**
                         * @category instances
                         * @since 2.3.8
                         */
                        exports.Semigroupoid = {
                            URI: exports.URI,
                            compose: function (ab, ea) { return (0, exports.compose)(ab)(ea); }
                        };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.Category = {
                            URI: exports.URI,
                            compose: exports.Semigroupoid.compose,
                            id: exports.id
                        };


                        /***/
                    }),

/***/ "./node_modules/monocle-ts/lib/Traversal.js":
/*!**************************************************!*\
  !*** ./node_modules/monocle-ts/lib/Traversal.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.Category = exports.Semigroupoid = exports.URI = exports.getAll = exports.fold = exports.foldMap = exports.findFirstNonEmpty = exports.findFirst = exports.traverse = exports.left = exports.right = exports.some = exports.atKey = exports.key = exports.indexNonEmpty = exports.index = exports.component = exports.props = exports.prop = exports.filter = exports.fromNullable = exports.set = exports.modify = exports.composeOptional = exports.composePrism = exports.composeLens = exports.composeIso = exports.composeTraversal = exports.compose = exports.fromTraversable = exports.id = exports.traversal = void 0;
                        var C = __webpack_require__(/*! fp-ts/lib/Const */ "./node_modules/fp-ts/lib/Const.js");
                        var function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        var pipeable_1 = __webpack_require__(/*! fp-ts/lib/pipeable */ "./node_modules/fp-ts/lib/pipeable.js");
                        var RA = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        var _ = __webpack_require__(/*! ./internal */ "./node_modules/monocle-ts/lib/internal.js");
                        // -------------------------------------------------------------------------------------
                        // constructors
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category constructors
                         * @since 2.3.8
                         */
                        exports.traversal = _.traversal;
                        /**
                         * @category constructors
                         * @since 2.3.0
                         */
                        var id = function () { return (0, exports.traversal)(function (_) { return function (f) { return f; }; }); };
                        exports.id = id;
                        /**
                         * Create a `Traversal` from a `Traversable`.
                         *
                         * @category constructor
                         * @since 2.3.0
                         */
                        exports.fromTraversable = _.fromTraversable;
                        // -------------------------------------------------------------------------------------
                        // compositions
                        // -------------------------------------------------------------------------------------
                        /**
                         * Compose a `Traversal` with a `Traversal`.
                         *
                         * @category compositions
                         * @since 2.3.0
                         */
                        exports.compose = _.traversalComposeTraversal;
                        /**
                         * Alias of `compose`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeTraversal = exports.compose;
                        /**
                         * Compose a `Traversal` with a `Iso`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeIso =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.isoAsTraversal, exports.compose);
                        /**
                         * Compose a `Traversal` with a `Lens`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeLens =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.lensAsTraversal, _.traversalComposeTraversal);
                        /**
                         * Compose a `Traversal` with a `Prism`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composePrism =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.prismAsTraversal, _.traversalComposeTraversal);
                        /**
                         * Compose a `Traversal` with a `Optional`.
                         *
                         * @category compositions
                         * @since 2.3.8
                         */
                        exports.composeOptional =
                            /*#__PURE__*/
                            (0, function_1.flow)(_.optionalAsTraversal, _.traversalComposeTraversal);
                        // -------------------------------------------------------------------------------------
                        // combinators
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        var modify = function (f) {
                            return function (sa) {
                                return sa.modifyF(_.ApplicativeIdentity)(f);
                            };
                        };
                        exports.modify = modify;
                        /**
                         * @category combinators
                         * @since 2.3.0
                         */
                        var set = function (a) { return (0, exports.modify)(function () { return a; }); };
                        exports.set = set;
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a nullable value.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var fromNullable = function (sa) {
                            return (0, exports.composePrism)(_.prismFromNullable())(sa);
                        };
                        exports.fromNullable = fromNullable;
                        function filter(predicate) {
                            return (0, exports.compose)(_.prismAsTraversal(_.prismFromPredicate(predicate)));
                        }
                        exports.filter = filter;
                        /**
                         * Return a `Traversal` from a `Traversal` and a prop.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var prop = function (prop) {
                            return (0, exports.compose)((0, pipeable_1.pipe)(_.lensId(), _.lensProp(prop), _.lensAsTraversal));
                        };
                        exports.prop = prop;
                        /**
                         * Return a `Traversal` from a `Traversal` and a list of props.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var props = function () {
                            var props = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                props[_i] = arguments[_i];
                            }
                            return (0, exports.compose)((0, pipeable_1.pipe)(_.lensId(), _.lensProps.apply(_, props), _.lensAsTraversal));
                        };
                        exports.props = props;
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a component of a tuple.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var component = function (prop) {
                            return (0, exports.compose)((0, pipeable_1.pipe)(_.lensId(), _.lensComponent(prop), _.lensAsTraversal));
                        };
                        exports.component = component;
                        /**
                         * Return a `Traversal` from a `Traversal` focused on an index of a `ReadonlyArray`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var index = function (i) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.compose)(_.optionalAsTraversal(_.indexReadonlyArray().index(i))));
                            };
                        };
                        exports.index = index;
                        /**
                         * @category combinators
                         * @since 2.3.8
                         */
                        var indexNonEmpty = function (i) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.compose)(_.optionalAsTraversal(_.indexReadonlyNonEmptyArray().index(i))));
                            };
                        };
                        exports.indexNonEmpty = indexNonEmpty;
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var key = function (key) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.compose)(_.optionalAsTraversal(_.indexReadonlyRecord().index(key))));
                            };
                        };
                        exports.key = key;
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a required key of a `ReadonlyRecord`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var atKey = function (key) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.compose)(_.lensAsTraversal(_.atReadonlyRecord().at(key))));
                            };
                        };
                        exports.atKey = atKey;
                        /**
                         * Return a `Traversal` from a `Traversal` focused on the `Some` of a `Option` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.some =
                            /*#__PURE__*/
                            (0, exports.compose)(/*#__PURE__*/ _.prismAsTraversal(/*#__PURE__*/ _.prismSome()));
                        /**
                         * Return a `Traversal` from a `Traversal` focused on the `Right` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.right =
                            /*#__PURE__*/
                            (0, exports.compose)(/*#__PURE__*/ _.prismAsTraversal(/*#__PURE__*/ _.prismRight()));
                        /**
                         * Return a `Traversal` from a `Traversal` focused on the `Left` of a `Either` type.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.left =
                            /*#__PURE__*/
                            (0, exports.compose)(/*#__PURE__*/ _.prismAsTraversal(/*#__PURE__*/ _.prismLeft()));
                        /**
                         * Return a `Traversal` from a `Traversal` focused on a `Traversable`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        exports.traverse = _.traversalTraverse;
                        function findFirst(predicate) {
                            return (0, exports.composeOptional)(_.optionalFindFirst(predicate));
                        }
                        exports.findFirst = findFirst;
                        function findFirstNonEmpty(predicate) {
                            return (0, exports.composeOptional)(_.optionalFindFirstNonEmpty(predicate));
                        }
                        exports.findFirstNonEmpty = findFirstNonEmpty;
                        /**
                         * Map each target to a `Monoid` and combine the results.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var foldMap = function (M) {
                            return function (f) {
                                return function (sa) {
                                    return sa.modifyF(C.getApplicative(M))(function (a) { return C.make(f(a)); });
                                };
                            };
                        };
                        exports.foldMap = foldMap;
                        /**
                         * Map each target to a `Monoid` and combine the results.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var fold = function (M) { return (0, exports.foldMap)(M)(function_1.identity); };
                        exports.fold = fold;
                        /**
                         * Get all the targets of a `Traversal`.
                         *
                         * @category combinators
                         * @since 2.3.0
                         */
                        var getAll = function (s) {
                            return function (sa) {
                                return (0, exports.foldMap)(RA.getMonoid())(RA.of)(sa)(s);
                            };
                        };
                        exports.getAll = getAll;
                        // -------------------------------------------------------------------------------------
                        // instances
                        // -------------------------------------------------------------------------------------
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.URI = 'monocle-ts/Traversal';
                        /**
                         * @category instances
                         * @since 2.3.8
                         */
                        exports.Semigroupoid = {
                            URI: exports.URI,
                            compose: function (ab, ea) { return (0, exports.compose)(ab)(ea); }
                        };
                        /**
                         * @category instances
                         * @since 2.3.0
                         */
                        exports.Category = {
                            URI: exports.URI,
                            compose: exports.Semigroupoid.compose,
                            id: exports.id
                        };


                        /***/
                    }),

/***/ "./node_modules/monocle-ts/lib/internal.js":
/*!*************************************************!*\
  !*** ./node_modules/monocle-ts/lib/internal.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
                            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
                                if (ar || !(i in from)) {
                                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                                    ar[i] = from[i];
                                }
                            }
                            return to.concat(ar || Array.prototype.slice.call(from));
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.atReadonlyRecord = exports.at = exports.indexReadonlyRecord = exports.indexReadonlyNonEmptyArray = exports.indexReadonlyArray = exports.index = exports.traversalTraverse = exports.fromTraversable = exports.ApplicativeIdentity = exports.traversalComposeTraversal = exports.traversal = exports.optionalFindFirstNonEmpty = exports.optionalFindFirst = exports.optionalKey = exports.optionalIndexNonEmpty = exports.optionalIndex = exports.optionalComposeOptional = exports.optionalModify = exports.optionalModifyOption = exports.optionalAsTraversal = exports.optional = exports.prismLeft = exports.prismRight = exports.prismSome = exports.prismFromPredicate = exports.prismFromNullable = exports.prismComposeLens = exports.prismSet = exports.prismModify = exports.prismModifyOption = exports.prismAsTraversal = exports.prismAsOptional = exports.prism = exports.lensAtKey = exports.lensComponent = exports.lensProps = exports.lensProp = exports.lensId = exports.lensComposePrism = exports.prismComposePrism = exports.lensComposeLens = exports.lensAsTraversal = exports.lensAsOptional = exports.lens = exports.isoAsTraversal = exports.isoAsOptional = exports.isoAsPrism = exports.isoAsLens = exports.iso = void 0;
                        var RA = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        var RR = __webpack_require__(/*! fp-ts/lib/ReadonlyRecord */ "./node_modules/fp-ts/lib/ReadonlyRecord.js");
                        var function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        var O = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        var E = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        var pipeable_1 = __webpack_require__(/*! fp-ts/lib/pipeable */ "./node_modules/fp-ts/lib/pipeable.js");
                        // -------------------------------------------------------------------------------------
                        // Iso
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var iso = function (get, reverseGet) {
                            return ({
                                get: get,
                                reverseGet: reverseGet
                            });
                        };
                        exports.iso = iso;
                        /** @internal */
                        var isoAsLens = function (sa) { return (0, exports.lens)(sa.get, (0, function_1.flow)(sa.reverseGet, function_1.constant)); };
                        exports.isoAsLens = isoAsLens;
                        /** @internal */
                        var isoAsPrism = function (sa) { return (0, exports.prism)((0, function_1.flow)(sa.get, O.some), sa.reverseGet); };
                        exports.isoAsPrism = isoAsPrism;
                        /** @internal */
                        var isoAsOptional = function (sa) {
                            return (0, exports.optional)((0, function_1.flow)(sa.get, O.some), (0, function_1.flow)(sa.reverseGet, function_1.constant));
                        };
                        exports.isoAsOptional = isoAsOptional;
                        /** @internal */
                        var isoAsTraversal = function (sa) {
                            return (0, exports.traversal)(function (F) {
                                return function (f) {
                                    return function (s) {
                                        return F.map(f(sa.get(s)), function (a) { return sa.reverseGet(a); });
                                    };
                                };
                            });
                        };
                        exports.isoAsTraversal = isoAsTraversal;
                        // -------------------------------------------------------------------------------------
                        // Lens
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var lens = function (get, set) { return ({ get: get, set: set }); };
                        exports.lens = lens;
                        /** @internal */
                        var lensAsOptional = function (sa) { return (0, exports.optional)((0, function_1.flow)(sa.get, O.some), sa.set); };
                        exports.lensAsOptional = lensAsOptional;
                        /** @internal */
                        var lensAsTraversal = function (sa) {
                            return (0, exports.traversal)(function (F) { return function (f) { return function (s) { return F.map(f(sa.get(s)), function (a) { return sa.set(a)(s); }); }; }; });
                        };
                        exports.lensAsTraversal = lensAsTraversal;
                        /** @internal */
                        var lensComposeLens = function (ab) {
                            return function (sa) {
                                return (0, exports.lens)(function (s) { return ab.get(sa.get(s)); }, function (b) { return function (s) { return sa.set(ab.set(b)(sa.get(s)))(s); }; });
                            };
                        };
                        exports.lensComposeLens = lensComposeLens;
                        /** @internal */
                        var prismComposePrism = function (ab) {
                            return function (sa) {
                                return (0, exports.prism)((0, function_1.flow)(sa.getOption, O.chain(ab.getOption)), (0, function_1.flow)(ab.reverseGet, sa.reverseGet));
                            };
                        };
                        exports.prismComposePrism = prismComposePrism;
                        /** @internal */
                        var lensComposePrism = function (ab) {
                            return function (sa) {
                                return (0, exports.optionalComposeOptional)((0, exports.prismAsOptional)(ab))((0, exports.lensAsOptional)(sa));
                            };
                        };
                        exports.lensComposePrism = lensComposePrism;
                        /** @internal */
                        var lensId = function () { return (0, exports.lens)(function_1.identity, function_1.constant); };
                        exports.lensId = lensId;
                        /** @internal */
                        var lensProp = function (prop) {
                            return function (sa) {
                                return (0, exports.lens)(function (s) { return sa.get(s)[prop]; }, function (ap) {
                                    return function (s) {
                                        var _a;
                                        var oa = sa.get(s);
                                        if (ap === oa[prop]) {
                                            return s;
                                        }
                                        return sa.set(Object.assign({}, oa, (_a = {}, _a[prop] = ap, _a)))(s);
                                    };
                                });
                            };
                        };
                        exports.lensProp = lensProp;
                        /** @internal */
                        var lensProps = function () {
                            var props = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                props[_i] = arguments[_i];
                            }
                            return function (sa) {
                                return (0, exports.lens)(function (s) {
                                    var a = sa.get(s);
                                    var r = {};
                                    for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
                                        var k = props_1[_i];
                                        r[k] = a[k];
                                    }
                                    return r;
                                }, function (a) {
                                    return function (s) {
                                        var oa = sa.get(s);
                                        for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {
                                            var k = props_2[_i];
                                            if (a[k] !== oa[k]) {
                                                return sa.set(Object.assign({}, oa, a))(s);
                                            }
                                        }
                                        return s;
                                    };
                                });
                            };
                        };
                        exports.lensProps = lensProps;
                        /** @internal */
                        var lensComponent = function (prop) {
                            return function (sa) {
                                return (0, exports.lens)(function (s) { return sa.get(s)[prop]; }, function (ap) {
                                    return function (s) {
                                        var oa = sa.get(s);
                                        if (ap === oa[prop]) {
                                            return s;
                                        }
                                        var copy = oa.slice();
                                        copy[prop] = ap;
                                        return sa.set(copy)(s);
                                    };
                                });
                            };
                        };
                        exports.lensComponent = lensComponent;
                        /** @internal */
                        var lensAtKey = function (key) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.lensComposeLens)(atReadonlyRecord().at(key)));
                            };
                        };
                        exports.lensAtKey = lensAtKey;
                        // -------------------------------------------------------------------------------------
                        // Prism
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var prism = function (getOption, reverseGet) { return ({ getOption: getOption, reverseGet: reverseGet }); };
                        exports.prism = prism;
                        /** @internal */
                        var prismAsOptional = function (sa) { return (0, exports.optional)(sa.getOption, function (a) { return (0, exports.prismSet)(a)(sa); }); };
                        exports.prismAsOptional = prismAsOptional;
                        /** @internal */
                        var prismAsTraversal = function (sa) {
                            return (0, exports.traversal)(function (F) {
                                return function (f) {
                                    return function (s) {
                                        return (0, pipeable_1.pipe)(sa.getOption(s), O.fold(function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return (0, exports.prismSet)(a)(sa)(s); }); }));
                                    };
                                };
                            });
                        };
                        exports.prismAsTraversal = prismAsTraversal;
                        /** @internal */
                        var prismModifyOption = function (f) {
                            return function (sa) {
                                return function (s) {
                                    return (0, pipeable_1.pipe)(sa.getOption(s), O.map(function (o) {
                                        var n = f(o);
                                        return n === o ? s : sa.reverseGet(n);
                                    }));
                                };
                            };
                        };
                        exports.prismModifyOption = prismModifyOption;
                        /** @internal */
                        var prismModify = function (f) {
                            return function (sa) {
                                var g = (0, exports.prismModifyOption)(f)(sa);
                                return function (s) {
                                    return (0, pipeable_1.pipe)(g(s), O.getOrElse(function () { return s; }));
                                };
                            };
                        };
                        exports.prismModify = prismModify;
                        /** @internal */
                        var prismSet = function (a) { return (0, exports.prismModify)(function () { return a; }); };
                        exports.prismSet = prismSet;
                        /** @internal */
                        var prismComposeLens = function (ab) {
                            return function (sa) {
                                return (0, exports.optionalComposeOptional)((0, exports.lensAsOptional)(ab))((0, exports.prismAsOptional)(sa));
                            };
                        };
                        exports.prismComposeLens = prismComposeLens;
                        /** @internal */
                        var prismFromNullable = function () { return (0, exports.prism)(O.fromNullable, function_1.identity); };
                        exports.prismFromNullable = prismFromNullable;
                        /** @internal */
                        var prismFromPredicate = function (predicate) {
                            return (0, exports.prism)(O.fromPredicate(predicate), function_1.identity);
                        };
                        exports.prismFromPredicate = prismFromPredicate;
                        /** @internal */
                        var prismSome = function () { return (0, exports.prism)(function_1.identity, O.some); };
                        exports.prismSome = prismSome;
                        /** @internal */
                        var prismRight = function () { return (0, exports.prism)(O.fromEither, E.right); };
                        exports.prismRight = prismRight;
                        /** @internal */
                        var prismLeft = function () {
                            return (0, exports.prism)(function (s) { return (E.isLeft(s) ? O.some(s.left) : O.none); }, // TODO: replace with E.getLeft in v3
                                E.left);
                        };
                        exports.prismLeft = prismLeft;
                        // -------------------------------------------------------------------------------------
                        // Optional
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var optional = function (getOption, set) {
                            return ({
                                getOption: getOption,
                                set: set
                            });
                        };
                        exports.optional = optional;
                        /** @internal */
                        var optionalAsTraversal = function (sa) {
                            return (0, exports.traversal)(function (F) {
                                return function (f) {
                                    return function (s) {
                                        return (0, pipeable_1.pipe)(sa.getOption(s), O.fold(function () { return F.of(s); }, function (a) { return F.map(f(a), function (a) { return sa.set(a)(s); }); }));
                                    };
                                };
                            });
                        };
                        exports.optionalAsTraversal = optionalAsTraversal;
                        /** @internal */
                        var optionalModifyOption = function (f) {
                            return function (optional) {
                                return function (s) {
                                    return (0, pipeable_1.pipe)(optional.getOption(s), O.map(function (a) {
                                        var n = f(a);
                                        return n === a ? s : optional.set(n)(s);
                                    }));
                                };
                            };
                        };
                        exports.optionalModifyOption = optionalModifyOption;
                        /** @internal */
                        var optionalModify = function (f) {
                            return function (optional) {
                                var g = (0, exports.optionalModifyOption)(f)(optional);
                                return function (s) {
                                    return (0, pipeable_1.pipe)(g(s), O.getOrElse(function () { return s; }));
                                };
                            };
                        };
                        exports.optionalModify = optionalModify;
                        /** @internal */
                        var optionalComposeOptional = function (ab) {
                            return function (sa) {
                                return (0, exports.optional)((0, function_1.flow)(sa.getOption, O.chain(ab.getOption)), function (b) { return (0, exports.optionalModify)(ab.set(b))(sa); });
                            };
                        };
                        exports.optionalComposeOptional = optionalComposeOptional;
                        /** @internal */
                        var optionalIndex = function (i) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.optionalComposeOptional)((0, exports.indexReadonlyArray)().index(i)));
                            };
                        };
                        exports.optionalIndex = optionalIndex;
                        /** @internal */
                        var optionalIndexNonEmpty = function (i) { return function (sa) { return (0, pipeable_1.pipe)(sa, (0, exports.optionalComposeOptional)((0, exports.indexReadonlyNonEmptyArray)().index(i))); }; };
                        exports.optionalIndexNonEmpty = optionalIndexNonEmpty;
                        /** @internal */
                        var optionalKey = function (key) {
                            return function (sa) {
                                return (0, pipeable_1.pipe)(sa, (0, exports.optionalComposeOptional)((0, exports.indexReadonlyRecord)().index(key)));
                            };
                        };
                        exports.optionalKey = optionalKey;
                        /** @internal */
                        var optionalFindFirst = function (predicate) {
                            return (0, exports.optional)(RA.findFirst(predicate), function (a) {
                                return function (s) {
                                    return (0, pipeable_1.pipe)(RA.findIndex(predicate)(s), O.fold(function () { return s; }, function (i) { return RA.unsafeUpdateAt(i, a, s); }));
                                };
                            });
                        };
                        exports.optionalFindFirst = optionalFindFirst;
                        var unsafeUpdateAt = function (i, a, as) {
                            if (as[i] === a) {
                                return as;
                            }
                            else {
                                var xs = __spreadArray([as[0]], as.slice(1), true);
                                xs[i] = a;
                                return xs;
                            }
                        };
                        /** @internal */
                        var optionalFindFirstNonEmpty = function (predicate) {
                            return (0, exports.optional)(RA.findFirst(predicate), function (a) {
                                return function (as) {
                                    return (0, pipeable_1.pipe)(RA.findIndex(predicate)(as), O.fold(function () { return as; }, function (i) { return unsafeUpdateAt(i, a, as); }));
                                };
                            });
                        };
                        exports.optionalFindFirstNonEmpty = optionalFindFirstNonEmpty;
                        // -------------------------------------------------------------------------------------
                        // Traversal
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var traversal = function (modifyF) {
                            return ({
                                modifyF: modifyF
                            });
                        };
                        exports.traversal = traversal;
                        /** @internal */
                        function traversalComposeTraversal(ab) {
                            return function (sa) { return (0, exports.traversal)(function (F) { return function (f) { return sa.modifyF(F)(ab.modifyF(F)(f)); }; }); };
                        }
                        exports.traversalComposeTraversal = traversalComposeTraversal;
                        /** @internal */
                        exports.ApplicativeIdentity = {
                            URI: 'Identity',
                            map: function (fa, f) { return f(fa); },
                            of: function_1.identity,
                            ap:
                                /* istanbul ignore next */
                                function (fab, fa) { return fab(fa); }
                        };
                        var isIdentity = function (F) { return F.URI === 'Identity'; };
                        function fromTraversable(T) {
                            return function () {
                                return (0, exports.traversal)(function (F) {
                                    // if `F` is `Identity` then `traverseF = map`
                                    var traverseF = isIdentity(F)
                                        ? T.map
                                        : T.traverse(F);
                                    return function (f) { return function (s) { return traverseF(s, f); }; };
                                });
                            };
                        }
                        exports.fromTraversable = fromTraversable;
                        /** @internal */
                        function traversalTraverse(T) {
                            return traversalComposeTraversal(fromTraversable(T)());
                        }
                        exports.traversalTraverse = traversalTraverse;
                        // -------------------------------------------------------------------------------------
                        // Ix
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var index = function (index) { return ({ index: index }); };
                        exports.index = index;
                        /** @internal */
                        var indexReadonlyArray = function () {
                            return (0, exports.index)(function (i) {
                                return (0, exports.optional)(function (as) { return RA.lookup(i, as); }, function (a) {
                                    return function (as) {
                                        return (0, pipeable_1.pipe)(RA.lookup(i, as), O.fold(function () { return as; }, function () { return RA.unsafeUpdateAt(i, a, as); }));
                                    };
                                });
                            });
                        };
                        exports.indexReadonlyArray = indexReadonlyArray;
                        /** @internal */
                        var indexReadonlyNonEmptyArray = function () {
                            return (0, exports.index)(function (i) {
                                return (0, exports.optional)(function (as) { return RA.lookup(i, as); }, function (a) {
                                    return function (as) {
                                        return (0, pipeable_1.pipe)(RA.lookup(i, as), O.fold(function () { return as; }, function () { return unsafeUpdateAt(i, a, as); }));
                                    };
                                });
                            });
                        };
                        exports.indexReadonlyNonEmptyArray = indexReadonlyNonEmptyArray;
                        /** @internal */
                        var indexReadonlyRecord = function () {
                            return (0, exports.index)(function (k) {
                                return (0, exports.optional)(function (r) { return RR.lookup(k, r); }, function (a) {
                                    return function (r) {
                                        if (r[k] === a || O.isNone(RR.lookup(k, r))) {
                                            return r;
                                        }
                                        return RR.insertAt(k, a)(r);
                                    };
                                });
                            });
                        };
                        exports.indexReadonlyRecord = indexReadonlyRecord;
                        // -------------------------------------------------------------------------------------
                        // At
                        // -------------------------------------------------------------------------------------
                        /** @internal */
                        var at = function (at) { return ({ at: at }); };
                        exports.at = at;
                        /** @internal */
                        function atReadonlyRecord() {
                            return (0, exports.at)(function (key) {
                                return (0, exports.lens)(function (r) { return RR.lookup(key, r); }, O.fold(function () { return RR.deleteAt(key); }, function (a) { return RR.insertAt(key, a); }));
                            });
                        }
                        exports.atReadonlyRecord = atReadonlyRecord;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.rename = exports.remove = exports.upsert = exports.modifyF = exports.modifyOptionW = exports.modifyW = exports.modifyOption = exports.modify = exports.setOption = exports.set = exports.get = void 0;
                        const get_1 = __webpack_require__(/*! ./values/get */ "./node_modules/spectacles-ts/dist/values/get.js");
                        Object.defineProperty(exports, "get", { enumerable: true, get: function () { return get_1.get; } });
                        const set_1 = __webpack_require__(/*! ./values/set */ "./node_modules/spectacles-ts/dist/values/set.js");
                        Object.defineProperty(exports, "set", { enumerable: true, get: function () { return set_1.set; } });
                        const setOption_1 = __webpack_require__(/*! ./values/setOption */ "./node_modules/spectacles-ts/dist/values/setOption.js");
                        Object.defineProperty(exports, "setOption", { enumerable: true, get: function () { return setOption_1.setOption; } });
                        const modify_1 = __webpack_require__(/*! ./values/modify */ "./node_modules/spectacles-ts/dist/values/modify.js");
                        Object.defineProperty(exports, "modify", { enumerable: true, get: function () { return modify_1.modify; } });
                        const modifyOption_1 = __webpack_require__(/*! ./values/modifyOption */ "./node_modules/spectacles-ts/dist/values/modifyOption.js");
                        Object.defineProperty(exports, "modifyOption", { enumerable: true, get: function () { return modifyOption_1.modifyOption; } });
                        const modifyW_1 = __webpack_require__(/*! ./values/modifyW */ "./node_modules/spectacles-ts/dist/values/modifyW.js");
                        Object.defineProperty(exports, "modifyW", { enumerable: true, get: function () { return modifyW_1.modifyW; } });
                        const modifyOptionW_1 = __webpack_require__(/*! ./values/modifyOptionW */ "./node_modules/spectacles-ts/dist/values/modifyOptionW.js");
                        Object.defineProperty(exports, "modifyOptionW", { enumerable: true, get: function () { return modifyOptionW_1.modifyOptionW; } });
                        const modifyF_1 = __webpack_require__(/*! ./values/modifyF */ "./node_modules/spectacles-ts/dist/values/modifyF.js");
                        Object.defineProperty(exports, "modifyF", { enumerable: true, get: function () { return modifyF_1.modifyF; } });
                        const upsert_1 = __webpack_require__(/*! ./values/upsert */ "./node_modules/spectacles-ts/dist/values/upsert.js");
                        Object.defineProperty(exports, "upsert", { enumerable: true, get: function () { return upsert_1.upsert; } });
                        const remove_1 = __webpack_require__(/*! ./values/remove */ "./node_modules/spectacles-ts/dist/values/remove.js");
                        Object.defineProperty(exports, "remove", { enumerable: true, get: function () { return remove_1.remove; } });
                        const rename_1 = __webpack_require__(/*! ./values/rename */ "./node_modules/spectacles-ts/dist/values/rename.js");
                        Object.defineProperty(exports, "rename", { enumerable: true, get: function () { return rename_1.rename; } });


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/util/monocle.js":
/*!*********************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/util/monocle.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.lensFromPath = exports.traversalFromPath = exports.optionalFromPath = exports.isPathTraversal = exports.isPathLens = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const A = __importStar(__webpack_require__(/*! fp-ts/ReadonlyArray */ "./node_modules/fp-ts/es6/ReadonlyArray.js"));
                        const R = __importStar(__webpack_require__(/*! fp-ts/ReadonlyRecord */ "./node_modules/fp-ts/es6/ReadonlyRecord.js"));
                        const string_1 = __webpack_require__(/*! fp-ts/string */ "./node_modules/fp-ts/es6/string.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Op = __importStar(__webpack_require__(/*! monocle-ts/lib/Optional */ "./node_modules/monocle-ts/lib/Optional.js"));
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const isPathLens = (path) => !split(path).some((s) => ["?", "?some", "?left", "right", "[]>", "{}>", "[number]", "[string]"].includes(s) ||
                            (!s.startsWith("(") && s.includes(":")));
                        exports.isPathLens = isPathLens;
                        const isPathTraversal = (path) => split(path).some((s) => ["[]>", "{}>"].includes(s));
                        exports.isPathTraversal = isPathTraversal;
                        const lastSegment = (path) => {
                            if (path === "") {
                                return path;
                            }
                            const escapeable = path.match(/\((.*)\*(.*)\)$/);
                            if (escapeable) {
                                return escapeable[2];
                            }
                            const escapeable2 = path.match(/\((.*)\)$/);
                            if (escapeable2) {
                                return escapeable2[0];
                            }
                            const finalSegment = path.match(/(.*)\.(.*)/);
                            if (finalSegment) {
                                return finalSegment[2];
                            }
                            return path;
                        };
                        const initSegment = (path) => {
                            if (path === "") {
                                return path;
                            }
                            const escapeable = path.match(/(.*)\.\((.*)\*(.*)\)$/);
                            if (escapeable) {
                                return escapeable[1];
                            }
                            return path.substring(0, path.lastIndexOf(lastSegment(path)) - 1);
                        };
                        const splitIntoSegments = (path, acc = []) => {
                            const init = initSegment(path);
                            const last = lastSegment(path);
                            if (init === "") {
                                return [last, ...acc];
                            }
                            return splitIntoSegments(init, [last, ...acc]);
                        };
                        const split = (path) => {
                            const segments = splitIntoSegments(path, []);
                            return segments.flatMap((segment) => {
                                if (segment.includes("?some") ||
                                    segment.includes("?left") ||
                                    segment.includes("?right") ||
                                    !segment.includes("?")) {
                                    return [segment];
                                }
                                else {
                                    const before = segment.substring(0, segment.length - 1);
                                    if (before.length > 0) {
                                        return [before, "?"];
                                    }
                                    return ["?"];
                                }
                            });
                        };
                        const optionalFromPath = (path, _indicies) => {
                            const indicies = [..._indicies];
                            const opt = split(path).reduce((acc, cur) => {
                                if (cur === "?") {
                                    return (0, function_1.pipe)(acc, Op.fromNullable);
                                }
                                else if (cur === "?some") {
                                    return (0, function_1.pipe)(acc, Op.some);
                                }
                                else if (cur === "?left") {
                                    return (0, function_1.pipe)(acc, Op.left);
                                }
                                else if (cur === "?right") {
                                    return (0, function_1.pipe)(acc, Op.left);
                                }
                                else if (cur === "[number]") {
                                    return (0, function_1.pipe)(acc, Op.index(indicies.shift()));
                                }
                                else if (cur === "[string]") {
                                    return (0, function_1.pipe)(acc, Op.key(indicies.shift()));
                                }
                                else if (cur.includes("[") && cur.includes("]") && cur.indexOf("[") < cur.indexOf("]")) {
                                    const component = Number.parseInt(cur.substring(cur.indexOf("[") + 1, cur.indexOf("]")), 10);
                                    return (0, function_1.pipe)(acc, Op.component(component));
                                }
                                else if (cur.includes(":")) {
                                    const i = cur.indexOf(":");
                                    const discriminant = cur.substring(0, i);
                                    const member = cur.substring(i + 1, cur.length);
                                    return (0, function_1.pipe)(acc, Op.filter((a) => a[discriminant] === member));
                                }
                                return (0, function_1.pipe)(acc, Op.prop(cur));
                            }, Op.id());
                            return opt;
                        };
                        exports.optionalFromPath = optionalFromPath;
                        const traversalFromPath = (path, _indicies) => {
                            const indicies = [..._indicies];
                            const opt = split(path).reduce((acc, cur) => {
                                if (cur === "?") {
                                    return (0, function_1.pipe)(acc, Tr.fromNullable);
                                }
                                else if (cur === "?some") {
                                    return (0, function_1.pipe)(acc, Tr.some);
                                }
                                else if (cur === "?left") {
                                    return (0, function_1.pipe)(acc, Tr.left);
                                }
                                else if (cur === "?right") {
                                    return (0, function_1.pipe)(acc, Tr.left);
                                }
                                else if (cur === "[number]") {
                                    return (0, function_1.pipe)(acc, Tr.index(indicies.shift()));
                                }
                                else if (cur === "[string]") {
                                    return (0, function_1.pipe)(acc, Tr.key(indicies.shift()));
                                }
                                else if (cur === "[]>") {
                                    const a = (0, function_1.pipe)(acc, Tr.traverse(A.Traversable));
                                    return a;
                                }
                                else if (cur === "{}>") {
                                    const a = (0, function_1.pipe)(acc, Tr.traverse(R.getTraversable(string_1.Ord)));
                                    return a;
                                }
                                else if (cur.includes("[") && cur.includes("]") && cur.indexOf("[") < cur.indexOf("]")) {
                                    const component = Number.parseInt(cur.substring(cur.indexOf("[") + 1, cur.indexOf("]")), 10);
                                    return (0, function_1.pipe)(acc, Tr.component(component));
                                }
                                else if (cur.includes(":")) {
                                    const i = cur.indexOf(":");
                                    const discriminant = cur.substring(0, i);
                                    const member = cur.substring(i + 1, cur.length);
                                    return (0, function_1.pipe)(acc, Tr.filter((a) => a[discriminant] === member));
                                }
                                return (0, function_1.pipe)(acc, Tr.prop(cur));
                            }, Tr.id());
                            return opt;
                        };
                        exports.traversalFromPath = traversalFromPath;
                        const lensFromPath = (path) => {
                            const lens = split(path).reduce((acc, cur) => {
                                if (cur.includes("[") && cur.includes("]") && cur.indexOf("[") < cur.indexOf("]")) {
                                    const component = cur.substring(cur.indexOf("[") + 1, cur.indexOf("]"));
                                    return (0, function_1.pipe)(acc, L.component(Number.parseInt(component, 10)));
                                }
                                return (0, function_1.pipe)(acc, L.prop(cur));
                            }, L.id());
                            return lens;
                        };
                        exports.lensFromPath = lensFromPath;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/get.js":
/*!*******************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/get.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.get = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const get = (path, ...indicies) => {
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, monocle_1.lensFromPath)(path).get;
                            }
                            if ((0, monocle_1.isPathTraversal)(path)) {
                                return (v) => {
                                    return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), Tr.getAll(v));
                                };
                            }
                            return (0, monocle_1.optionalFromPath)(path, indicies).getOption;
                        };
                        exports.get = get;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/modify.js":
/*!**********************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/modify.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.modify = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Traversal_1 = __webpack_require__(/*! monocle-ts/Traversal */ "./node_modules/monocle-ts/es6/Traversal.js");
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const modify = (path, ...args) => (a) => {
                            const indicies = args.slice(0, args.length - 1);
                            const modFunc = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modify(modFunc))(a);
                            }
                            return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), (0, Traversal_1.modify)(modFunc))(a);
                        };
                        exports.modify = modify;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/modifyF.js":
/*!***********************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/modifyF.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.modifyF = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const modifyF = (F) => (path, ...args) => (a) => {
                            const indicies = args.slice(0, args.length - 1);
                            const modFunc = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modifyF(F)(modFunc))(a);
                            }
                            return (0, monocle_1.traversalFromPath)(path, indicies).modifyF(F)(modFunc)(a);
                        };
                        exports.modifyF = modifyF;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/modifyOption.js":
/*!****************************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/modifyOption.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.modifyOption = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Op = __importStar(__webpack_require__(/*! monocle-ts/lib/Optional */ "./node_modules/monocle-ts/lib/Optional.js"));
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const modifyOption = (path, ...args) => (a) => {
                            const indicies = args.slice(0, args.length - 1);
                            const modFunc = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modify(modFunc))(a);
                            }
                            if ((0, monocle_1.isPathTraversal)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), Tr.modify(modFunc))(a);
                            }
                            return (0, function_1.pipe)((0, monocle_1.optionalFromPath)(path, indicies), Op.modifyOption(modFunc))(a);
                        };
                        exports.modifyOption = modifyOption;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/modifyOptionW.js":
/*!*****************************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/modifyOptionW.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.modifyOptionW = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Op = __importStar(__webpack_require__(/*! monocle-ts/lib/Optional */ "./node_modules/monocle-ts/lib/Optional.js"));
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const modifyOptionW = (path, ...args) => (a) => {
                            const indicies = args.slice(0, args.length - 1);
                            const modFunc = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modify(modFunc))(a);
                            }
                            if ((0, monocle_1.isPathTraversal)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), Tr.modify(modFunc))(a);
                            }
                            return (0, function_1.pipe)((0, monocle_1.optionalFromPath)(path, indicies), Op.modifyOption(modFunc))(a);
                        };
                        exports.modifyOptionW = modifyOptionW;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/modifyW.js":
/*!***********************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/modifyW.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.modifyW = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Traversal_1 = __webpack_require__(/*! monocle-ts/Traversal */ "./node_modules/monocle-ts/es6/Traversal.js");
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const modifyW = (path, ...args) => (a) => {
                            const indicies = args.slice(0, args.length - 1);
                            const modFunc = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modify(modFunc))(a);
                            }
                            return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), (0, Traversal_1.modify)(modFunc))(a);
                        };
                        exports.modifyW = modifyW;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/remove.js":
/*!**********************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/remove.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.remove = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const remove = (fullPath) => (a) => {
                            const segments = fullPath.split(".");
                            const path = segments.slice(0, segments.length - 1).join(".");
                            const final = segments[segments.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modify((obj) => {
                                    const omitted = { ...obj };
                                    delete omitted[final];
                                    return omitted;
                                }))(a);
                            }
                            return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, []), Tr.modify((obj) => {
                                const omitted = { ...obj };
                                delete omitted[final];
                                return omitted;
                            }))(a);
                        };
                        exports.remove = remove;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/rename.js":
/*!**********************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/rename.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.rename = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const rename = (fullPath, newKey) => (a) => {
                            const segments = fullPath.split(".");
                            const path = segments.slice(0, segments.length - 1).join(".");
                            const final = segments[segments.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modify(({ [final]: val, ...rest }) => ({ ...rest, [newKey]: val })))(a);
                            }
                            return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, []), Tr.modify(({ [final]: val, ...rest }) => ({ ...rest, [newKey]: val })))(a);
                        };
                        exports.rename = rename;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/set.js":
/*!*******************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/set.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.set = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const set = (path, ...args) => (obj) => {
                            const indicies = args.slice(0, args.length - 1);
                            const val = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, monocle_1.lensFromPath)(path).set(val)(obj);
                            }
                            return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), Tr.set(val))(obj);
                        };
                        exports.set = set;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/setOption.js":
/*!*************************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/setOption.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.setOption = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const Optional_1 = __webpack_require__(/*! monocle-ts/Optional */ "./node_modules/monocle-ts/es6/Optional.js");
                        const Traversal_1 = __webpack_require__(/*! monocle-ts/Traversal */ "./node_modules/monocle-ts/es6/Traversal.js");
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const setOption = (path, ...args) => (obj) => {
                            const indicies = args.slice(0, args.length - 1);
                            const val = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, monocle_1.lensFromPath)(path).set(val)(obj);
                            }
                            if ((0, monocle_1.isPathTraversal)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), (0, Traversal_1.set)(val))(obj);
                            }
                            return (0, function_1.pipe)((0, monocle_1.optionalFromPath)(path, indicies), (0, Optional_1.setOption)(val))(obj);
                        };
                        exports.setOption = setOption;


                        /***/
                    }),

/***/ "./node_modules/spectacles-ts/dist/values/upsert.js":
/*!**********************************************************!*\
  !*** ./node_modules/spectacles-ts/dist/values/upsert.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.upsert = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const L = __importStar(__webpack_require__(/*! monocle-ts/lib/Lens */ "./node_modules/monocle-ts/lib/Lens.js"));
                        const Tr = __importStar(__webpack_require__(/*! monocle-ts/lib/Traversal */ "./node_modules/monocle-ts/lib/Traversal.js"));
                        const monocle_1 = __webpack_require__(/*! ../util/monocle */ "./node_modules/spectacles-ts/dist/util/monocle.js");
                        const upsert = (path, final, ...args) => (a) => {
                            const indicies = args.slice(0, args.length - 1);
                            const val = args[args.length - 1];
                            if ((0, monocle_1.isPathLens)(path)) {
                                return (0, function_1.pipe)((0, monocle_1.lensFromPath)(path), L.modify((obj) => ({ ...obj, [final]: val })))(a);
                            }
                            return (0, function_1.pipe)((0, monocle_1.traversalFromPath)(path, indicies), Tr.modify((obj) => ({ ...obj, [final]: val })))(a);
                        };
                        exports.upsert = upsert;


                        /***/
                    }),

/***/ "./src/actions.ts":
/*!************************!*\
  !*** ./src/actions.ts ***!
  \************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.setREDmodAutoconvertArchivesAction = void 0;
                        const redux_act_1 = __webpack_require__(/*! redux-act */ "redux-act");
                        exports.setREDmodAutoconvertArchivesAction = (0, redux_act_1.createAction)(`SET_REDMOD_AUTOCONVERT_ARCHIVES`, (enabled) => enabled);


                        /***/
                    }),

/***/ "./src/features.ts":
/*!*************************!*\
  !*** ./src/features.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.FullFeatureSetFromStaticAndDynamic = exports.storeSetDynamicFeature = exports.storeGetDynamicFeature = exports.DefaultEnabledStateForDynamicFeatures = exports.StaticFeaturesForStartup = exports.BaselineFeatureSetForTests = exports.DynamicFeature = exports.StaticFeature = exports.IfFeatureEnabled = exports.IsDynamicFeatureEnabled = exports.IsFeatureEnabled = exports.FeatureState = void 0;
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        var FeatureState;
                        (function (FeatureState) {
                            FeatureState["Enabled"] = "This feature is enabled";
                            FeatureState["Disabled"] = "This feature is disabled";
                            FeatureState["Deprecated"] = "This feature should be removed";
                        })(FeatureState = exports.FeatureState || (exports.FeatureState = {}));
                        const boolAsFeature = (currentState) => (currentState ? FeatureState.Enabled : FeatureState.Disabled);
                        const IsFeatureEnabled = (featureState) => featureState === FeatureState.Enabled;
                        exports.IsFeatureEnabled = IsFeatureEnabled;
                        const IsDynamicFeatureEnabled = (featureState) => featureState() === FeatureState.Enabled;
                        exports.IsDynamicFeatureEnabled = IsDynamicFeatureEnabled;
                        const IfFeatureEnabled = (featureState, then) => ((0, exports.IsFeatureEnabled)(featureState)
                            ? (0, Option_1.some)(then())
                            : Option_1.none);
                        exports.IfFeatureEnabled = IfFeatureEnabled;
                        var StaticFeature;
                        (function (StaticFeature) {
                            StaticFeature["REDmodding"] = "v2077_feature_redmodding";
                            StaticFeature["REDmodLoadOrder"] = "v2077_feature_redmod_load_order";
                            StaticFeature["REDmodAutoconversionTag"] = "v2077_feature_redmod_autoconversion_tag";
                        })(StaticFeature = exports.StaticFeature || (exports.StaticFeature = {}));
                        var DynamicFeature;
                        (function (DynamicFeature) {
                            DynamicFeature["REDmodAutoconvertArchives"] = "v2077_feature_redmod_autoconvert_archives";
                        })(DynamicFeature = exports.DynamicFeature || (exports.DynamicFeature = {}));
                        exports.BaselineFeatureSetForTests = {
                            fromVersion: `0.9.3`,
                            REDmodding: FeatureState.Disabled,
                            REDmodLoadOrder: FeatureState.Disabled,
                            REDmodAutoconversionTag: FeatureState.Enabled,
                            REDmodAutoconvertArchives: () => FeatureState.Disabled,
                        };
                        exports.StaticFeaturesForStartup = {
                            fromVersion: `0.9.3`,
                            REDmodding: FeatureState.Enabled,
                            REDmodLoadOrder: FeatureState.Enabled,
                            REDmodAutoconversionTag: FeatureState.Disabled,
                        };
                        exports.DefaultEnabledStateForDynamicFeatures = {
                            [DynamicFeature.REDmodAutoconvertArchives]: false,
                        };
                        const storeGetDynamicFeature = (storeUtil, feature, stateSlice) => storeUtil.getSafe(stateSlice, [...index_metadata_1.VORTEX_STORE_PATHS.settings, feature], exports.DefaultEnabledStateForDynamicFeatures[feature]);
                        exports.storeGetDynamicFeature = storeGetDynamicFeature;
                        const storeSetDynamicFeature = (storeUtil, feature, stateSlice, value) => storeUtil.setSafe(stateSlice, [feature], value);
                        exports.storeSetDynamicFeature = storeSetDynamicFeature;
                        const FullFeatureSetFromStaticAndDynamic = (staticFeatures, vortexExtApi, storeUtil) => ({
                            ...staticFeatures,
                            REDmodAutoconvertArchives: () => boolAsFeature((0, exports.storeGetDynamicFeature)(storeUtil, DynamicFeature.REDmodAutoconvertArchives, vortexExtApi.store.getState())),
                        });
                        exports.FullFeatureSetFromStaticAndDynamic = FullFeatureSetFromStaticAndDynamic;


                        /***/
                    }),

/***/ "./src/filetree.ts":
/*!*************************!*\
  !*** ./src/filetree.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.prunedTreeFrom = exports.subtreeFrom = exports.findDirectSubdirsWithSome = exports.findTopmostSubdirsWithSome = exports.findAllSubdirsWithSome = exports.findAllFiles = exports.dirWithSomeUnder = exports.dirWithSomeIn = exports.filesUnder = exports.filesIn = exports.pathInTree = exports.dirInTree = exports.subdirsIn = exports.subdirNamesIn = exports.fileCount = exports.sourcePaths = exports.fileTreeFromPaths = exports.pathStartsWith = exports.pathContains = exports.pathIn = exports.pathEq = exports.safeNormalizePath = exports.normalizeDir = exports.FILETREE_TOPLEVEL = exports.FILETREE_ROOT = exports.Glob = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const key_tree_1 = __importDefault(__webpack_require__(/*! key-tree */ "./node_modules/key-tree/dist/key-tree.umd.js"));
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        var Glob;
                        (function (Glob) {
                            Glob["Any"] = "*";
                            Glob["AnySubdir"] = "**";
                        })(Glob = exports.Glob || (exports.Glob = {}));
                        exports.FILETREE_ROOT = ``;
                        exports.FILETREE_TOPLEVEL = path_1.default.dirname(`This has no directory so it normalizes to . or current dir basically`);
                        const dirName = (node) => path_1.default.join(...node.fullPath);
                        const actualChildren = (node) => {
                            if (!node) {
                                return [];
                            }
                            switch (node.key) {
                                case exports.FILETREE_TOPLEVEL:
                                    return node.parent.children.filter((c) => c.key !== exports.FILETREE_TOPLEVEL);
                                case exports.FILETREE_ROOT:
                                    return node.children;
                                default:
                                    return node.children;
                            }
                        };
                        const findFilesRecursive = (predicate, node) => {
                            const subMatches = node.children.flatMap((c) => findFilesRecursive(predicate, c));
                            const matches = node.values.filter(predicate);
                            return subMatches.concat(matches);
                        };
                        const findInDirsRecursive = (breakEarly, predicate, node) => {
                            const selfMaybe = node.values.some(predicate) ? [dirName(node)] : [];
                            if (selfMaybe.length > 0 && breakEarly) {
                                return selfMaybe;
                            }
                            const subMatches = node.children.flatMap((c) => findInDirsRecursive(breakEarly, predicate, c));
                            return subMatches.concat(selfMaybe);
                        };
                        const regexpEscape = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, `\\$&`);
                        const looksLikeADirectory = new RegExp(`${regexpEscape(path_1.default.sep)}$`);
                        const stripTrailingSeparator = (path) => path.replace(looksLikeADirectory, ``);
                        const normalizeDir = (dir) => (dir === exports.FILETREE_ROOT ? exports.FILETREE_TOPLEVEL : stripTrailingSeparator(dir));
                        exports.normalizeDir = normalizeDir;
                        const safeNormalizePath = (path) => path_1.default.normalize(path).toLocaleLowerCase();
                        exports.safeNormalizePath = safeNormalizePath;
                        const pathEqual = (a, b) => (0, exports.safeNormalizePath)(a) === (0, exports.safeNormalizePath)(b);
                        const pathEq = (a) => (b) => pathEqual(a, b);
                        exports.pathEq = pathEq;
                        const pathInclude = (paths, path) => (0, function_1.pipe)(paths, (0, ReadonlyArray_1.some)((0, exports.pathEq)(path)));
                        const pathIn = (paths) => (path) => pathInclude(paths, path);
                        exports.pathIn = pathIn;
                        const pathContains = (path) => (pathThatShouldContain) => (0, exports.safeNormalizePath)(pathThatShouldContain).includes((0, exports.safeNormalizePath)(path));
                        exports.pathContains = pathContains;
                        const pathStartsWith = (pathPrefix) => (pathThatShouldStartWith) => (0, exports.safeNormalizePath)(pathThatShouldStartWith).startsWith((0, exports.safeNormalizePath)(pathPrefix));
                        exports.pathStartsWith = pathStartsWith;
                        const fileTreeFromPaths = (paths) => {
                            const internalKeyTree = new key_tree_1.default({ separator: path_1.default.sep });
                            const filePathsOnly = paths.filter((path) => !path.endsWith(path_1.default.sep));
                            filePathsOnly.forEach((path) => internalKeyTree.add(path_1.default.dirname(path), path));
                            return {
                                _kt: internalKeyTree,
                                _insertedPaths: filePathsOnly,
                                _originalPaths: [...paths],
                            };
                        };
                        exports.fileTreeFromPaths = fileTreeFromPaths;
                        const sourcePaths = (tree) => [...tree._originalPaths];
                        exports.sourcePaths = sourcePaths;
                        const fileCount = (tree) => tree._insertedPaths.length;
                        exports.fileCount = fileCount;
                        const subdirNamesIn = (dir, tree) => {
                            const node = tree._kt._getNode(stripTrailingSeparator(dir));
                            if (!node || node.children.length < 1) {
                                return [];
                            }
                            return node.children.map((c) => c.key).filter((c) => c !== exports.FILETREE_TOPLEVEL);
                        };
                        exports.subdirNamesIn = subdirNamesIn;
                        const subdirsIn = (dir, tree, predicate = util_functions_1.alwaysTrue) => (0, function_1.pipe)((0, exports.subdirNamesIn)(dir, tree), (0, ReadonlyArray_1.map)((subdir) => path_1.default.join(dir, subdir)), (0, ReadonlyArray_1.filter)(predicate));
                        exports.subdirsIn = subdirsIn;
                        const dirInTree = (dir, tree) => tree._kt._getNode(stripTrailingSeparator(dir)) !== null;
                        exports.dirInTree = dirInTree;
                        const pathInTree = (path, tree) => (path.endsWith(path_1.default.sep)
                            ? (0, exports.dirInTree)(path, tree)
                            : tree._kt.get(stripTrailingSeparator(path_1.default.dirname(path))).includes(path));
                        exports.pathInTree = pathInTree;
                        const filesIn = (dir, predicate, tree) => (predicate !== Glob.Any
                            ? tree._kt.get((0, exports.normalizeDir)(dir)).filter(predicate)
                            : tree._kt.get((0, exports.normalizeDir)(dir)));
                        exports.filesIn = filesIn;
                        const filesUnder = (dir, predicate, tree) => (predicate !== Glob.Any
                            ? tree._kt.getSub(stripTrailingSeparator(dir)).filter(predicate)
                            : tree._kt.getSub(stripTrailingSeparator(dir)));
                        exports.filesUnder = filesUnder;
                        const dirWithSomeIn = (dir, predicate, tree) => (predicate !== Glob.Any
                            ? tree._kt.get((0, exports.normalizeDir)(dir)).some(predicate)
                            : tree._kt.get((0, exports.normalizeDir)(dir)));
                        exports.dirWithSomeIn = dirWithSomeIn;
                        const dirWithSomeUnder = (dir, predicate, tree) => (predicate !== Glob.Any
                            ? tree._kt.getSub(stripTrailingSeparator(dir)).some(predicate)
                            : tree._kt.getSub(stripTrailingSeparator(dir)));
                        exports.dirWithSomeUnder = dirWithSomeUnder;
                        const findAllFiles = (predicate, tree) => findFilesRecursive(predicate, tree._kt.$);
                        exports.findAllFiles = findAllFiles;
                        const findAllSubdirsWithSome = (dir, predicate, tree) => actualChildren(tree._kt._getNode(stripTrailingSeparator(dir))).flatMap((sub) => findInDirsRecursive(false, predicate, sub));
                        exports.findAllSubdirsWithSome = findAllSubdirsWithSome;
                        const findTopmostSubdirsWithSome = (dir, predicate, tree) => actualChildren(tree._kt._getNode(stripTrailingSeparator(dir))).flatMap((sub) => findInDirsRecursive(true, predicate, sub));
                        exports.findTopmostSubdirsWithSome = findTopmostSubdirsWithSome;
                        const findDirectSubdirsWithSome = (dir, predicate, tree) => (0, exports.subdirsIn)(dir, tree).filter((subdir) => (0, exports.dirWithSomeIn)(subdir, predicate, tree));
                        exports.findDirectSubdirsWithSome = findDirectSubdirsWithSome;
                        const subtreeFrom = (dir, fileTree) => {
                            const subtreeFiles = (0, exports.filesUnder)(dir, Glob.Any, fileTree).map((path) => path_1.default.join(...path.split(path_1.default.sep).slice(1)));
                            return (0, exports.fileTreeFromPaths)(subtreeFiles);
                        };
                        exports.subtreeFrom = subtreeFrom;
                        const prunedTreeFrom = (matchToPrune, fileTree) => {
                            const excludeMatched = (filePath) => (0, util_functions_1.negate)(matchToPrune(filePath));
                            const remainingPaths = (0, exports.filesUnder)(exports.FILETREE_ROOT, excludeMatched, fileTree);
                            return (0, exports.fileTreeFromPaths)(remainingPaths);
                        };
                        exports.prunedTreeFrom = prunedTreeFrom;


                        /***/
                    }),

/***/ "./src/index.metadata.ts":
/*!*******************************!*\
  !*** ./src/index.metadata.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.VORTEX_STORE_PATHS = exports.V2077_GENERATED_MOD_VERSION_PRERELEASE = exports.V2077_GENERATED_MOD_NAME_TAG = exports.V2077_DIR = exports.GAME_EXE_RELATIVE_PATH = exports.EXTENSION_URL_GITHUB = exports.EXTENSION_URL_NEXUS = exports.EXTENSION_NAME_INTERNAL = exports.EXTENSION_NAME_GITHUB = exports.EXTENSION_NAME_VORTEX = exports.EXTENSION_NAME_NEXUS = exports.EPICAPP_ID = exports.GOGAPP_ID = exports.STEAMAPP_ID = exports.GAME_ID = void 0;
                        exports.GAME_ID = `cyberpunk2077`;
                        exports.STEAMAPP_ID = `1091500`;
                        exports.GOGAPP_ID = `1423049311`;
                        exports.EPICAPP_ID = `Ginger`;
                        exports.EXTENSION_NAME_NEXUS = `Cyberpunk 2077 Vortex Support`;
                        exports.EXTENSION_NAME_VORTEX = `Cyberpunk 2077`;
                        exports.EXTENSION_NAME_GITHUB = `E1337Kat/cyberpunk2077_ext_redux`;
                        exports.EXTENSION_NAME_INTERNAL = `V2077`;
                        exports.EXTENSION_URL_NEXUS = `https://www.nexusmods.com/site/mods/196`;
                        exports.EXTENSION_URL_GITHUB = `https://github.com/E1337Kat/cyberpunk2077_ext_redux`;
                        exports.GAME_EXE_RELATIVE_PATH = `bin/x64/Cyberpunk2077.exe`;
                        exports.V2077_DIR = `V2077`;
                        exports.V2077_GENERATED_MOD_NAME_TAG = ` (${exports.EXTENSION_NAME_INTERNAL})`;
                        exports.V2077_GENERATED_MOD_VERSION_PRERELEASE = exports.EXTENSION_NAME_INTERNAL;
                        exports.VORTEX_STORE_PATHS = {
                            settings: [`settings`, `v2077`],
                        };


                        /***/
                    }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.findGame = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const vortexApiLib = __importStar(__webpack_require__(/*! vortex-api */ "vortex-api"));
                        const exe_version_1 = __webpack_require__(/*! exe-version */ "exe-version");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const features_1 = __webpack_require__(/*! ./features */ "./src/features.ts");
                        const installers_1 = __webpack_require__(/*! ./installers */ "./src/installers.ts");
                        const vortex_wrapper_1 = __webpack_require__(/*! ./vortex-wrapper */ "./src/vortex-wrapper.ts");
                        const redmodding_1 = __webpack_require__(/*! ./redmodding */ "./src/redmodding.ts");
                        const load_order_1 = __webpack_require__(/*! ./load_order */ "./src/load_order.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        const actions_1 = __webpack_require__(/*! ./actions */ "./src/actions.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const settings_1 = __importDefault(__webpack_require__(/*! ./views/settings */ "./src/views/settings.tsx"));
                        const reducers_1 = __webpack_require__(/*! ./reducers */ "./src/reducers.ts");
                        const REDmoddingTools = __importStar(__webpack_require__(/*! ./tools.redmodding */ "./src/tools.redmodding.ts"));
                        const ExternalTools = __importStar(__webpack_require__(/*! ./tools.external */ "./src/tools.external.ts"));
                        const state_functions_1 = __webpack_require__(/*! ./state.functions */ "./src/state.functions.ts");
                        const lowercaseWhitespaceIgnoring = (str) => str.toLocaleLowerCase().replace(/\s+/g, ``);
                        const extensionDetes = (vortexState, featureSet) => (0, function_1.pipe)(vortexApiLib.util.getSafe(vortexState, [`session`, `extensions`, `installed`], {}), Object.entries, (0, ReadonlyArray_1.findFirst)(([_extensionId, extensionData]) => lowercaseWhitespaceIgnoring(extensionData.name) === lowercaseWhitespaceIgnoring(index_metadata_1.EXTENSION_NAME_VORTEX)), (0, Option_1.map)(([extensionId, extensionData]) => (0, util_functions_1.S)({
                            extensionId,
                            extensionName: extensionData.name,
                            extensionVersion: extensionData.version,
                            featureSet,
                        })), (0, Option_1.getOrElse)((0, util_functions_1.constant)(`<No extension info found, might just be a glitch>`)));
                        const findGame = () => vortexApiLib.util.GameStoreHelper.findByAppId([index_metadata_1.STEAMAPP_ID, index_metadata_1.GOGAPP_ID, index_metadata_1.EPICAPP_ID]).then((game) => game.gamePath);
                        exports.findGame = findGame;
                        const requiresGoGLauncher = () => vortexApiLib.util.GameStoreHelper.isGameInstalled(index_metadata_1.GOGAPP_ID, `gog`).then((gog) => (gog ? { launcher: `gog`, addInfo: index_metadata_1.GOGAPP_ID } : undefined));
                        const archiveAutoConvert = (state) => (0, features_1.storeGetDynamicFeature)(vortex_wrapper_1.vortexUtil, features_1.DynamicFeature.REDmodAutoconvertArchives, state);
                        const toggleAutoConvert = (api, _gameMode) => {
                            const state = api.store.getState();
                            api.store.dispatch((0, actions_1.setREDmodAutoconvertArchivesAction)(!archiveAutoConvert(state)));
                        };
                        const prepStartHooks = (vortexExt, featureSet) => {
                            const maybeREDmodHooks = (0, features_1.IsFeatureEnabled)(features_1.StaticFeaturesForStartup.REDmodding)
                                ? REDmoddingTools.available.startHooks
                                : [];
                            const allHooks = [
                                ...maybeREDmodHooks,
                                ...ExternalTools.available.startHooks,
                            ];
                            const hooksWithState = (0, function_1.pipe)(allHooks, (0, ReadonlyArray_1.map)((makeHook) => makeHook(vortexExt, vortexApiLib, featureSet)), ReadonlyArray_1.toArray);
                            return hooksWithState;
                        };
                        const getGameVersion = async (gamePath) => {
                            try {
                                const prodVer = await (0, exe_version_1.getProductVersion)(path_1.default.join(gamePath, index_metadata_1.GAME_EXE_RELATIVE_PATH));
                                return prodVer;
                            }
                            catch (err) {
                                vortexApiLib.log(`error`, `Failed to get product version for Cyberpunk EXE`, err);
                                try {
                                    const fileVer = await (0, exe_version_1.getFileVersion)(path_1.default.join(gamePath, index_metadata_1.GAME_EXE_RELATIVE_PATH));
                                    return fileVer;
                                }
                                catch (fileErr) {
                                    vortexApiLib.log(`error`, `Failed to get file version for Cyberpunk EXE`, fileErr);
                                    return `0.0.0`;
                                }
                            }
                        };
                        const main = (vortexExt) => {
                            const MaybeREDmodTools = (0, features_1.IsFeatureEnabled)(features_1.StaticFeaturesForStartup.REDmodding)
                                ? REDmoddingTools.available.tools
                                : [];
                            const moddingTools = [
                                ...MaybeREDmodTools,
                                ...ExternalTools.available.tools,
                            ];
                            const setupFunctionToRunAtExtensionInit = async (discovery) => {
                                try {
                                    await vortexApiLib.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, index_metadata_1.V2077_DIR));
                                    vortexApiLib.log(`info`, `Metadata directory ${index_metadata_1.V2077_DIR} exists and is writable, good!`);
                                }
                                catch (err) {
                                    vortexApiLib.log(`error`, `Unable to create or access metadata dir ${index_metadata_1.V2077_DIR} under ${discovery.path}`, err);
                                }
                                if ((0, features_1.IsFeatureEnabled)(features_1.StaticFeaturesForStartup.REDmodding)) {
                                    return (0, redmodding_1.wrappedPrepareForModdingWithREDmodding)(vortexExt, vortexApiLib, discovery);
                                }
                                return vortexApiLib.fs.readdirAsync(path_1.default.join(discovery.path));
                            };
                            const defaultGameLaunchParameters = (0, features_1.IsFeatureEnabled)(features_1.StaticFeaturesForStartup.REDmodding)
                                ? REDmoddingTools.GameExeModded.parameters
                                : [];
                            const fullFeatureSetAvailablePostStartup = (0, features_1.FullFeatureSetFromStaticAndDynamic)(features_1.StaticFeaturesForStartup, vortexExt.api, vortexApiLib.util);
                            const vortexGameParams = {
                                id: index_metadata_1.GAME_ID,
                                name: index_metadata_1.EXTENSION_NAME_VORTEX,
                                setup: setupFunctionToRunAtExtensionInit,
                                mergeMods: true,
                                queryPath: exports.findGame,
                                queryModPath: () => ``,
                                logo: `gameart.png`,
                                executable: () => index_metadata_1.GAME_EXE_RELATIVE_PATH,
                                parameters: defaultGameLaunchParameters,
                                requiredFiles: [index_metadata_1.GAME_EXE_RELATIVE_PATH],
                                supportedTools: moddingTools,
                                compatible: {
                                    symlinks: false,
                                },
                                getGameVersion,
                                requiresLauncher: requiresGoGLauncher,
                                environment: {
                                    SteamAPPId: index_metadata_1.STEAMAPP_ID,
                                },
                                details: {
                                    steamAppId: index_metadata_1.STEAMAPP_ID,
                                    gogAppId: index_metadata_1.GOGAPP_ID,
                                    epicAppId: index_metadata_1.EPICAPP_ID,
                                },
                            };
                            vortexApiLib.log(`debug`, `Registering game with Vortex`, vortexGameParams);
                            vortexExt.registerGame(vortexGameParams);
                            vortexExt.registerInstaller(installers_1.internalPipelineInstaller.id, installers_1.internalPipelineInstaller.priority, (0, installers_1.wrapTestSupported)(vortexExt, vortexApiLib, installers_1.internalPipelineInstaller), (0, installers_1.wrapInstall)(vortexExt, vortexApiLib, installers_1.internalPipelineInstaller, fullFeatureSetAvailablePostStartup));
                            const availableStartHooks = prepStartHooks(vortexExt, fullFeatureSetAvailablePostStartup);
                            (0, function_1.pipe)(availableStartHooks, (0, ReadonlyArray_1.mapWithIndex)((i, { hookId, doActualWorkInTheHookAndReturnDummyParams }) => (0, util_functions_1.forEffect)(() => { vortexExt.registerStartHook(40 + i, hookId, doActualWorkInTheHookAndReturnDummyParams); })), util_functions_1.forEachEffect, (0, Either_1.mapLeft)((err) => {
                                vortexApiLib.log(`error`, `${index_metadata_1.EXTENSION_NAME_INTERNAL} init: Failed to register start hook`, err);
                            }));
                            if ((0, features_1.IsFeatureEnabled)(features_1.StaticFeaturesForStartup.REDmodding)) {
                                if ((0, features_1.IsFeatureEnabled)(features_1.StaticFeaturesForStartup.REDmodLoadOrder)) {
                                    vortexExt.registerLoadOrder({
                                        gameId: index_metadata_1.GAME_ID,
                                        usageInstructions: load_order_1.loadOrderUsageInstructionsForVortexGui,
                                        validate: (0, load_order_1.wrapValidate)(vortexExt, vortexApiLib, load_order_1.internalLoadOrderer),
                                        deserializeLoadOrder: (0, load_order_1.wrapDeserialize)(vortexExt, vortexApiLib, load_order_1.internalLoadOrderer),
                                        serializeLoadOrder: (0, load_order_1.wrapSerialize)(vortexExt, vortexApiLib, load_order_1.internalLoadOrderer),
                                    });
                                }
                                vortexExt.registerReducer(index_metadata_1.VORTEX_STORE_PATHS.settings, (0, reducers_1.makeSettingsReducer)(features_1.DefaultEnabledStateForDynamicFeatures));
                                vortexExt.registerSettings(`V2077 Settings`, settings_1.default, undefined, () => {
                                    const state = vortexExt.api.store.getState();
                                    const gameMode = vortexApiLib.selectors.activeGameId(state);
                                    return gameMode === index_metadata_1.GAME_ID;
                                }, 51);
                                vortexExt.registerToDo(`${index_metadata_1.EXTENSION_NAME_INTERNAL}-todo-v090-information`, `more`, undefined, `health`, `Important v0.9.0 Update Detes for CP2077!`, (_) => (0, ui_dialogs_1.informUserZeroNineZeroChanges)({ ...vortexExt.api, log: vortexApiLib.log }), util_functions_1.alwaysTrue, undefined, undefined);
                                vortexExt.registerToDo(`${index_metadata_1.EXTENSION_NAME_INTERNAL}-todo-redmod-autoconvert`, `settings`, (state) => {
                                    const gameMode = vortexApiLib.selectors.activeGameId(state);
                                    return {
                                        gameMode,
                                        archiveAutoConvertEnabled: archiveAutoConvert(state),
                                    };
                                }, `clone`, `REDmod Autoconvert`, (props) => {
                                    toggleAutoConvert(vortexExt.api, props.gameMode);
                                }, (props) => (0, state_functions_1.isSupported)(props.gameMode), (t, props) => (props.archiveAutoConvertEnabled ? t(`Yes`) : t(`No`)), undefined);
                            }
                            vortexExt.once(() => {
                                vortexExt.api.events.once(`startup`, () => {
                                    const extensionDetesForDebugging = extensionDetes(vortexExt.api.store.getState(), fullFeatureSetAvailablePostStartup);
                                    vortexApiLib.log(`info`, `${index_metadata_1.EXTENSION_NAME_INTERNAL} Vortex Extension Detes: ${extensionDetesForDebugging}`);
                                });
                                vortexExt.api.onAsync(`did-deploy`, (profileId) => {
                                    const state = vortexExt.api.store.getState();
                                    const profile = vortexApiLib.selectors.profileById(state, profileId);
                                    if (index_metadata_1.GAME_ID !== (profile === null || profile === void 0 ? void 0 : profile.gameId)) {
                                        return Promise.resolve();
                                    }
                                    vortexExt.api.emitAndAwait(`discover-tools`, index_metadata_1.GAME_ID);
                                    return Promise.resolve();
                                });
                            });
                            return true;
                        };
                        exports.default = main;


                        /***/
                    }),

/***/ "./src/installer.amm.ts":
/*!******************************!*\
  !*** ./src/installer.amm.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installAmmMod = exports.testForAmmMod = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const A = __importStar(__webpack_require__(/*! fp-ts/Array */ "./node_modules/fp-ts/es6/Array.js"));
                        const Option_1 = __webpack_require__(/*! fp-ts/Option */ "./node_modules/fp-ts/es6/Option.js");
                        const T = __importStar(__webpack_require__(/*! fp-ts/Task */ "./node_modules/fp-ts/es6/Task.js"));
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const installer_archive_1 = __webpack_require__(/*! ./installer.archive */ "./src/installer.archive.ts");
                        const matchAmmLua = (filePath) => path_1.default.extname(filePath) === `.lua`;
                        const matchAmmJson = (filePath) => path_1.default.extname(filePath) === `.json`;
                        const matchAmmExt = (filePath) => [`.json`, `.lua`].includes(path_1.default.extname(filePath));
                        const findAmmFiles = (ammDir, kindMatcher, fileTree) => (0, filetree_1.findDirectSubdirsWithSome)(ammDir, kindMatcher, fileTree).flatMap((dir) => (0, filetree_1.filesUnder)(dir, filetree_1.Glob.Any, fileTree));
                        const findAmmCanonFiles = (fileTree) => [
                            ...findAmmFiles(installers_layouts_1.AMM_MOD_CUSTOMS_CANON_DIR, matchAmmLua, fileTree),
                            ...findAmmFiles(installers_layouts_1.AMM_MOD_USERMOD_CANON_DIR, matchAmmJson, fileTree),
                        ];
                        const findAmmToplevelCanonSubdirFiles = (fileTree) => [
                            ...findAmmFiles(installers_layouts_1.AMM_MOD_CUSTOMS_DIRNAME, matchAmmLua, fileTree),
                            ...findAmmFiles(installers_layouts_1.AMM_MOD_USERMOD_DIRNAME, matchAmmJson, fileTree),
                        ];
                        const detectAmmLayout = (ammDir, kindMatcher, fileTree) => (0, filetree_1.findDirectSubdirsWithSome)(ammDir, kindMatcher, fileTree).length > 0;
                        const detectAmmToplevelCanonSubdirLayout = (fileTree) => detectAmmLayout(installers_layouts_1.AMM_MOD_CUSTOMS_DIRNAME, matchAmmLua, fileTree) ||
                            detectAmmLayout(installers_layouts_1.AMM_MOD_USERMOD_DIRNAME, matchAmmJson, fileTree);
                        const ammLuaContentToPath = [
                            [installers_layouts_1.AMM_MOD_APPEARANCES_REQUIRED_MATCHES, installers_layouts_1.AMM_MOD_CUSTOM_APPEARANCES_CANON_DIR],
                            [installers_layouts_1.AMM_MOD_ENTITIES_REQUIRED_MATCHES, installers_layouts_1.AMM_MOD_CUSTOM_ENTITIES_CANON_DIR],
                            [installers_layouts_1.AMM_MOD_PROPS_REQUIRED_MATCHES, installers_layouts_1.AMM_MOD_CUSTOM_PROPS_CANON_DIR],
                        ];
                        const ammJsonContentToPath = [
                            [installers_layouts_1.AMM_MOD_DECOR_REQUIRED_KEYS, installers_layouts_1.AMM_MOD_DECOR_CANON_DIR],
                            [installers_layouts_1.AMM_MOD_LOCATION_REQUIRED_KEYS, installers_layouts_1.AMM_MOD_LOCATIONS_CANON_DIR],
                            [installers_layouts_1.AMM_MOD_SCRIPT_REQUIRED_KEYS, installers_layouts_1.AMM_MOD_SCRIPTS_CANON_DIR],
                            [installers_layouts_1.AMM_MOD_THEME_REQUIRED_KEYS, installers_layouts_1.AMM_MOD_THEMES_CANON_DIR],
                        ];
                        const canonPrefixedPathByTypeIfActualAmmMod = (file) => {
                            const kind = path_1.default.extname(file.pathOnDisk);
                            if (kind === `.json`) {
                                const keysInData = Object.keys(JSON.parse(file.content));
                                const jsonKeyMatcher = A.findFirstMap(([requiredKeys, canonDirForType]) => (keysInData.length >= requiredKeys.length &&
                                    requiredKeys.every((key) => keysInData.includes(key))
                                    ? (0, Option_1.some)((0, installers_shared_1.fileMove)(canonDirForType, file))
                                    : Option_1.none));
                                return jsonKeyMatcher(ammJsonContentToPath);
                            }
                            if (kind === `.lua`) {
                                const luaContentMatcher = A.findFirstMap(([requiredMatches, canonDirForType]) => (requiredMatches.every((required) => file.content.match(required))
                                    ? (0, Option_1.some)((0, installers_shared_1.fileMove)(canonDirForType, file))
                                    : Option_1.none));
                                return luaContentMatcher(ammLuaContentToPath);
                            }
                            return Option_1.none;
                        };
                        const ammCanonLayout = (api, _modName, fileTree) => {
                            const allCanonAmmFiles = findAmmCanonFiles(fileTree);
                            if (allCanonAmmFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const totalFilesInAmmBasedir = (0, filetree_1.fileCount)((0, filetree_1.subtreeFrom)(installers_layouts_1.AMM_BASEDIR_PATH, fileTree));
                            if (allCanonAmmFiles.length !== totalFilesInAmmBasedir) {
                                api.log(`debug`, `${installers_types_1.InstallerType.AMM}: unknown files in a canon layout, conflict`);
                                return installers_layouts_1.InvalidLayout.Conflict;
                            }
                            const ammCanonInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonAmmFiles);
                            const allowedArchiveInstructionsIfAny = (0, installer_archive_1.extraCanonArchiveInstructions)(api, fileTree);
                            const allInstructions = [
                                ...ammCanonInstructions,
                                ...allowedArchiveInstructionsIfAny.instructions,
                            ];
                            return {
                                kind: installers_layouts_1.AmmLayout.Canon,
                                instructions: allInstructions,
                            };
                        };
                        const ammToplevelCanonSubdirLayout = (api, _modName, fileTree) => {
                            const allToplevelCanonSubdirAmmFiles = findAmmToplevelCanonSubdirFiles(fileTree);
                            if (allToplevelCanonSubdirAmmFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const ammToplevelCanonSubdirInstructions = (0, installers_shared_1.instructionsForSourceToDestPairs)(allToplevelCanonSubdirAmmFiles.map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, installers_layouts_1.AMM_BASEDIR_PATH)));
                            const allowedArchiveInstructionsIfAny = (0, installer_archive_1.extraToplevelArchiveInstructions)(api, fileTree);
                            const allInstructions = [
                                ...ammToplevelCanonSubdirInstructions,
                                ...allowedArchiveInstructionsIfAny.instructions,
                            ];
                            return {
                                kind: installers_layouts_1.AmmLayout.ToplevelCanonSubdir,
                                instructions: allInstructions,
                            };
                        };
                        const ammToplevelLayout = async (api, installingDir, _modName, fileTree) => {
                            const allToplevelCandidates = await (0, function_1.pipe)((0, filetree_1.filesIn)(filetree_1.FILETREE_ROOT, matchAmmExt, fileTree), A.traverse(T.ApplicativePar)((filePath) => (0, installers_shared_1.fileFromDisk)({
                                pathOnDisk: path_1.default.join(installingDir, filePath),
                                relativePath: filePath,
                            })))();
                            const toplevelAmmInstructions = (0, function_1.pipe)(allToplevelCandidates, A.filterMap(canonPrefixedPathByTypeIfActualAmmMod), A.map(installers_shared_1.fileToInstruction));
                            if (toplevelAmmInstructions.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            if (toplevelAmmInstructions.length !== allToplevelCandidates.length) {
                                return installers_layouts_1.InvalidLayout.Conflict;
                            }
                            const allowedArchiveInstructionsIfAny = (0, installer_archive_1.extraToplevelArchiveInstructions)(api, fileTree);
                            const allInstructions = [
                                ...toplevelAmmInstructions,
                                ...allowedArchiveInstructionsIfAny.instructions,
                            ];
                            return {
                                kind: installers_layouts_1.AmmLayout.Toplevel,
                                instructions: allInstructions,
                            };
                        };
                        const testForAmmMod = async (api, fileTree, modInfo, _features) => {
                            const looksLikeAmm = (0, filetree_1.dirInTree)(installers_layouts_1.AMM_BASEDIR_PATH, fileTree);
                            const hasToplevelCanonSubdirAmm = detectAmmToplevelCanonSubdirLayout(fileTree);
                            if (looksLikeAmm || hasToplevelCanonSubdirAmm) {
                                return Promise.resolve({
                                    supported: true,
                                    requiredFiles: [],
                                });
                            }
                            const hasToplevelCandidates = (0, filetree_1.filesIn)(filetree_1.FILETREE_ROOT, matchAmmExt, fileTree).length > 0;
                            if (!hasToplevelCandidates) {
                                return Promise.resolve({ supported: false, requiredFiles: [] });
                            }
                            const maybeToplevelAmmInstructions = await ammToplevelLayout(api, modInfo.installingDir.pathOnDisk, undefined, fileTree);
                            const hasToplevelAmmFiles = maybeToplevelAmmInstructions !== installers_layouts_1.NoInstructions.NoMatch &&
                                maybeToplevelAmmInstructions !== installers_layouts_1.InvalidLayout.Conflict;
                            if (hasToplevelAmmFiles) {
                                return {
                                    supported: true,
                                    requiredFiles: [],
                                };
                            }
                            return { supported: false, requiredFiles: [] };
                        };
                        exports.testForAmmMod = testForAmmMod;
                        const installAmmMod = async (api, fileTree, modInfo, _features) => {
                            const pathBasedMatchInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, [ammCanonLayout, ammToplevelCanonSubdirLayout]);
                            const selectedInstructions = pathBasedMatchInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                pathBasedMatchInstructions === installers_layouts_1.InvalidLayout.Conflict
                                ? await ammToplevelLayout(api, modInfo.installingDir.pathOnDisk, undefined, fileTree)
                                : pathBasedMatchInstructions;
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.AMM, fileTree);
                            }
                            return Promise.resolve({
                                instructions: selectedInstructions.instructions,
                            });
                        };
                        exports.installAmmMod = installAmmMod;


                        /***/
                    }),

/***/ "./src/installer.archive.ts":
/*!**********************************!*\
  !*** ./src/installer.archive.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.extraToplevelArchiveInstructions = exports.extraCanonArchiveInstructions = exports.archiveCanonInstructionsAllowedForMultiType = exports.installArchiveMod = exports.testForArchiveMod = exports.archiveHeritageLayout = exports.archiveCanonLayout = exports.detectCanonArchiveLayoutsAllowedExternally = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const Predicate_1 = __webpack_require__(/*! fp-ts/lib/Predicate */ "./node_modules/fp-ts/lib/Predicate.js");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const features_1 = __webpack_require__(/*! ./features */ "./src/features.ts");
                        const installer_redmod_1 = __webpack_require__(/*! ./installer.redmod */ "./src/installer.redmod.ts");
                        const me = installers_types_1.InstallerType.Archive;
                        const matchArchive = (file) => path_1.default.extname(file) === installers_layouts_1.ARCHIVE_MOD_FILE_EXTENSION;
                        const matchArchiveXL = (filePath) => path_1.default.extname(filePath) === installers_layouts_1.ARCHIVE_MOD_XL_EXTENSION;
                        const matchArchiveOrXL = (filePath) => installers_layouts_1.ARCHIVE_MOD_EXTENSIONS.includes(path_1.default.extname(filePath));
                        const matchNonArchive = (filePath) => !matchArchiveOrXL(filePath);
                        const findArchiveXLFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, matchArchiveXL, fileTree);
                        const findArchiveCanonFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, matchArchive, fileTree);
                        const findArchiveHeritageFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.ARCHIVE_MOD_TRADITIONAL_WRONG_PREFIX, matchArchive, fileTree);
                        const findToplevelArchiveOrXLFiles = (fileTree) => (0, filetree_1.filesIn)(filetree_1.FILETREE_ROOT, matchArchiveOrXL, fileTree);
                        const findUnknownFilesInCanonDir = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, matchNonArchive, fileTree);
                        const findAllNonREDmodArchiveFiles = (fileTree) => (0, function_1.pipe)((0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, matchArchiveOrXL, fileTree), (0, ReadonlyArray_1.filter)((0, Predicate_1.not)((0, filetree_1.pathStartsWith)(installers_layouts_1.REDMOD_BASEDIR))));
                        const detectArchiveCanonWithXLLayout = (fileTree) => findArchiveXLFiles(fileTree).length > 0;
                        const detectArchiveCanonLayout = (fileTree) => findArchiveCanonFiles(fileTree).length > 0;
                        const detectArchiveHeritageLayout = (fileTree) => findArchiveHeritageFiles(fileTree).length > 0;
                        const detectCanonArchiveLayoutsAllowedExternally = (fileTree) => detectArchiveCanonWithXLLayout(fileTree)
                            || detectArchiveCanonLayout(fileTree)
                            || detectArchiveHeritageLayout(fileTree);
                        exports.detectCanonArchiveLayoutsAllowedExternally = detectCanonArchiveLayoutsAllowedExternally;
                        const warnUserIfArchivesMightNeedManualReview = (api, chosenInstructions) => {
                            const destinationPaths = chosenInstructions.instructions.map((i) => i.destination);
                            const newTree = (0, filetree_1.fileTreeFromPaths)(destinationPaths);
                            const warnAboutSubdirs = (0, filetree_1.subdirsIn)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, newTree).length > 0;
                            const hasMultipleTopLevelFiles = (0, filetree_1.filesIn)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, matchArchive, newTree).length > 1;
                            const multipleTopLevelsMightBeIntended = chosenInstructions.kind !== installers_layouts_1.ArchiveLayout.Other;
                            const warnAboutToplevel = !multipleTopLevelsMightBeIntended && hasMultipleTopLevelFiles;
                            const xlsInSubdirs = (0, filetree_1.findAllSubdirsWithSome)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, matchArchiveXL, newTree);
                            const warnAboutXLs = xlsInSubdirs.length > 0;
                            const requiresWarning = warnAboutSubdirs || warnAboutToplevel || warnAboutXLs;
                            if (requiresWarning) {
                                (0, ui_dialogs_1.showArchiveInstallWarning)(api, installers_types_1.InstallerType.Archive, warnAboutSubdirs, warnAboutToplevel, warnAboutXLs, (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, newTree));
                            }
                            return requiresWarning;
                        };
                        const archiveCanonWithXLLayout = (api, _modName, fileTree) => {
                            const allArchiveXLFiles = findArchiveXLFiles(fileTree);
                            const allArchiveCanonFiles = findArchiveCanonFiles(fileTree);
                            if (allArchiveXLFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            if (allArchiveCanonFiles.length < 1) {
                                api.log(`info`, `${installers_types_1.InstallerType.Archive}: found only *.xl files, installing those`);
                            }
                            const allExtraFilesInBaseDir = findUnknownFilesInCanonDir(fileTree);
                            const allInstructions = [
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allArchiveXLFiles),
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allArchiveCanonFiles),
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allExtraFilesInBaseDir),
                            ];
                            const hasArchivesOutsideDirsAllowedHere = findAllNonREDmodArchiveFiles(fileTree).length !== allInstructions.length;
                            if (hasArchivesOutsideDirsAllowedHere) {
                                return installers_layouts_1.InvalidLayout.Conflict;
                            }
                            return {
                                kind: installers_layouts_1.ArchiveLayout.XL,
                                instructions: allInstructions,
                            };
                        };
                        const archiveCanonLayout = (_api, _modName, fileTree) => {
                            const hasCanonFiles = detectArchiveCanonLayout(fileTree);
                            if (!hasCanonFiles) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allFilesInCanonDir = (0, filetree_1.filesUnder)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, filetree_1.Glob.Any, fileTree);
                            const hasArchivesOutsideCanon = findAllNonREDmodArchiveFiles(fileTree).length !== findArchiveCanonFiles(fileTree).length;
                            if (hasArchivesOutsideCanon) {
                                return installers_layouts_1.InvalidLayout.Conflict;
                            }
                            return {
                                kind: installers_layouts_1.ArchiveLayout.Canon,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allFilesInCanonDir),
                            };
                        };
                        exports.archiveCanonLayout = archiveCanonLayout;
                        const archiveHeritageLayout = (_api, _modName, fileTree) => {
                            const hasOldCanonFiles = detectArchiveHeritageLayout(fileTree);
                            if (!hasOldCanonFiles) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const oldCanonFiles = (0, filetree_1.filesUnder)(installers_layouts_1.ARCHIVE_MOD_TRADITIONAL_WRONG_PREFIX, filetree_1.Glob.Any, fileTree);
                            const oldToNewMap = oldCanonFiles.map((f) => [
                                f,
                                f.replace(path_1.default.normalize(installers_layouts_1.ARCHIVE_MOD_TRADITIONAL_WRONG_PREFIX), path_1.default.normalize(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX)),
                            ]);
                            return {
                                kind: installers_layouts_1.ArchiveLayout.Heritage,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(oldToNewMap),
                            };
                        };
                        exports.archiveHeritageLayout = archiveHeritageLayout;
                        const archiveOtherDirsToCanonLayout = (_api, _modName, fileTree) => {
                            const allDirsWithArchives = (0, filetree_1.findAllSubdirsWithSome)(filetree_1.FILETREE_ROOT, matchArchiveOrXL, fileTree);
                            const allFiles = allDirsWithArchives.flatMap((dir) => (0, filetree_1.filesUnder)(dir, filetree_1.Glob.Any, fileTree));
                            const allToPrefixedMap = allFiles.map((f) => (f.startsWith(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX)
                                ? [f, f]
                                : [f, path_1.default.join(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, f)]));
                            return {
                                kind: installers_layouts_1.ArchiveLayout.Other,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(allToPrefixedMap),
                            };
                        };
                        const archiveExtraToplevelLayout = (_api, _modName, fileTree) => {
                            const allToplevelArchiveOrXlFiles = findToplevelArchiveOrXLFiles(fileTree);
                            if (allToplevelArchiveOrXlFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allToplevelToCanonMap = allToplevelArchiveOrXlFiles.map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX));
                            return {
                                kind: installers_layouts_1.ExtraArchiveLayout.Toplevel,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(allToplevelToCanonMap),
                            };
                        };
                        const instructionsForStandaloneMod = (api, fileTree) => {
                            const possibleLayoutsToTryInOrder = [
                                archiveCanonWithXLLayout,
                                exports.archiveCanonLayout,
                                exports.archiveHeritageLayout,
                                archiveOtherDirsToCanonLayout,
                            ];
                            const chosenInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, possibleLayoutsToTryInOrder);
                            return chosenInstructions;
                        };
                        const instructionsForCanonicalAllowedInMultiType = (api, fileTree) => {
                            const extraCanonArchiveLayoutsAllowedInOtherModTypes = [
                                archiveCanonWithXLLayout,
                                exports.archiveCanonLayout,
                                exports.archiveHeritageLayout,
                            ];
                            const chosenInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, extraCanonArchiveLayoutsAllowedInOtherModTypes);
                            if (chosenInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || chosenInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${installers_types_1.InstallerType.Archive}: No valid extra canon archives`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            return chosenInstructions;
                        };
                        const instructionsForToplevelExtras = (api, fileTree) => {
                            const chosenInstructions = archiveExtraToplevelLayout(api, undefined, fileTree);
                            if (chosenInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || chosenInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${installers_types_1.InstallerType.Archive}: No valid extra toplevel archives`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            return chosenInstructions;
                        };
                        const transformAndValidateAndFinalizeInstructions = async (api, features, modInfo, originalInstructions) => {
                            if ((0, features_1.IsDynamicFeatureEnabled)(features.REDmodAutoconvertArchives)) {
                                return (0, installer_redmod_1.transformToREDmodArchiveInstructions)(api, features, modInfo, originalInstructions);
                            }
                            warnUserIfArchivesMightNeedManualReview(api, originalInstructions);
                            return (0, Either_1.right)(originalInstructions);
                        };
                        const testForArchiveMod = (api, fileTree) => {
                            if (detectArchiveCanonWithXLLayout(fileTree)) {
                                return Promise.resolve({ supported: true, requiredFiles: [] });
                            }
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            let supported;
                            const filtered = files.filter((file) => path_1.default.extname(file).toLowerCase() === installers_layouts_1.ARCHIVE_MOD_FILE_EXTENSION);
                            if (filtered.length === 0) {
                                return Promise.resolve({
                                    supported: false,
                                    requiredFiles: [],
                                });
                            }
                            if (files.length > filtered.length) {
                                const unfiltered = files.filter((f) => !filtered.includes(f));
                                const importantBaseDirs = [`bin`, `r6`, `red4ext`];
                                const hasNonArchive = unfiltered.find((f) => importantBaseDirs.includes(path_1.default.dirname(f).split(path_1.default.sep)[0])) !== undefined;
                                if (hasNonArchive) {
                                    api.log(`info`, `Other mod folder exist... probably an archive as part of those.`);
                                    return Promise.resolve({
                                        supported: false,
                                        requiredFiles: [],
                                    });
                                }
                                supported = true;
                            }
                            else if (files.length === filtered.length) {
                                supported = true;
                            }
                            else {
                                supported = false;
                                api.log(`error`, `I have no idea why filtering created more files than already existed. Needless to say, this can not be installed.`);
                            }
                            if (supported !== undefined && supported) {
                                api.log(`info`, `Only archive files, so installing them should be easy peasy.`);
                            }
                            else {
                                supported = false;
                            }
                            return Promise.resolve({
                                supported,
                                requiredFiles: [],
                            });
                        };
                        exports.testForArchiveMod = testForArchiveMod;
                        const installArchiveMod = async (api, fileTree, modInfo, features) => {
                            const chosenInstructions = instructionsForStandaloneMod(api, fileTree);
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            if (chosenInstructions === installers_layouts_1.NoInstructions.NoMatch) {
                                const message = `${installers_types_1.InstallerType.Archive} installer failed to generate any instructions!`;
                                api.log(`error`, message, files);
                                return Promise.reject(new Error(message));
                            }
                            if (chosenInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${installers_types_1.InstallerType.Archive}: conflicting archive layouts`);
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.Archive, fileTree);
                            }
                            const finalInstructions = await transformAndValidateAndFinalizeInstructions(api, features, modInfo, chosenInstructions);
                            if ((0, Either_1.isLeft)(finalInstructions)) {
                                return Promise.reject(finalInstructions.left);
                            }
                            return Promise.resolve({ instructions: finalInstructions.right.instructions });
                        };
                        exports.installArchiveMod = installArchiveMod;
                        const archiveCanonInstructionsAllowedForMultiType = async (api, fileTree, modInfo, features) => {
                            const canonicalInstructions = instructionsForCanonicalAllowedInMultiType(api, fileTree);
                            if (canonicalInstructions.kind === installers_layouts_1.NoLayout.Optional) {
                                api.log(`debug`, `${me} (MultiType): No valid canon archives found for multitype (this is ok)`);
                                return canonicalInstructions;
                            }
                            const finalInstructions = await transformAndValidateAndFinalizeInstructions(api, features, modInfo, canonicalInstructions);
                            if ((0, Either_1.isLeft)(finalInstructions)) {
                                api.log(`warn`, `${me} (MultiType): Unable to autoconvert to REDmod, falling back to archive install: ${finalInstructions.left.message}`);
                                return canonicalInstructions;
                            }
                            api.log(`info`, `${me} (MultiType): Autoconverted Archive to REDmod`);
                            return finalInstructions.right;
                        };
                        exports.archiveCanonInstructionsAllowedForMultiType = archiveCanonInstructionsAllowedForMultiType;
                        const extraCanonArchiveInstructions = (api, fileTree) => {
                            const canonicalInstructions = instructionsForCanonicalAllowedInMultiType(api, fileTree);
                            warnUserIfArchivesMightNeedManualReview(api, canonicalInstructions);
                            return canonicalInstructions;
                        };
                        exports.extraCanonArchiveInstructions = extraCanonArchiveInstructions;
                        const extraToplevelArchiveInstructions = (api, fileTree) => {
                            const toplevelInstructions = instructionsForToplevelExtras(api, fileTree);
                            warnUserIfArchivesMightNeedManualReview(api, toplevelInstructions);
                            return toplevelInstructions;
                        };
                        exports.extraToplevelArchiveInstructions = extraToplevelArchiveInstructions;


                        /***/
                    }),

/***/ "./src/installer.asi.ts":
/*!******************************!*\
  !*** ./src/installer.asi.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installAsiMod = exports.testForAsiMod = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const matchAsiFile = (file) => path_1.default.extname(file) === installers_layouts_1.ASI_MOD_EXT;
                        const findCanonicalAsiDirs = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.ASI_MOD_PATH, matchAsiFile, fileTree);
                        const detectASICanonLayout = (fileTree) => findCanonicalAsiDirs(fileTree).length > 0;
                        const findCanonicalAsiFiles = (fileTree) => (0, filetree_1.filesUnder)(installers_layouts_1.ASI_MOD_PATH, filetree_1.Glob.Any, fileTree);
                        const asiCanonLayout = (_api, modName, fileTree) => {
                            const hasBasedirFiles = (0, filetree_1.filesIn)(installers_layouts_1.ASI_MOD_PATH, matchAsiFile, fileTree).length > 0;
                            if (!hasBasedirFiles) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allCanonAsiFiles = findCanonicalAsiFiles(fileTree);
                            if (allCanonAsiFiles.length === 0) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            return {
                                kind: installers_layouts_1.AsiLayout.Canon,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonAsiFiles),
                            };
                        };
                        const testForAsiMod = (_api, fileTree) => Promise.resolve({
                            supported: detectASICanonLayout(fileTree),
                            requiredFiles: [],
                        });
                        exports.testForAsiMod = testForAsiMod;
                        const installAsiMod = (api, fileTree, modInfo, _features) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            const chosenInstructions = asiCanonLayout(api, modInfo.name, fileTree);
                            if (chosenInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                chosenInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                const message = `ASI installer failed to generate instructions`;
                                api.log(`error`, message, files);
                                return Promise.reject(new Error(message));
                            }
                            const { instructions } = chosenInstructions;
                            const haveFilesOutsideSelectedInstructions = instructions.length !== (0, filetree_1.fileCount)(fileTree);
                            if (haveFilesOutsideSelectedInstructions) {
                                const message = `Too many files in ASI Mod! ${instructions.length}`;
                                api.log(`error`, message, files);
                                return Promise.reject(new Error(message));
                            }
                            api.log(`info`, `ASI installer installing files.`);
                            api.log(`debug`, `ASI instructions: `, instructions);
                            return Promise.resolve({ instructions });
                        };
                        exports.installAsiMod = installAsiMod;


                        /***/
                    }),

/***/ "./src/installer.audioware.ts":
/*!************************************!*\
  !*** ./src/installer.audioware.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.audiowareAllowedInMultiInstructions = exports.detectAllowedAudiowareLayouts = exports.installAudiowareMod = exports.testForAudiowareMod = exports.detectAudiowareCanonLayout = exports.findAudiowareCanonFiles = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const matchAudiowareFiles = (filePath) => installers_layouts_1.AUDIOWARE_MOD_CANONICAL_EXTENSIONS.includes(path_1.default.extname(filePath));
                        const findAudiowareCanonFiles = (fileTree) => (0, filetree_1.filesUnder)(installers_layouts_1.AUDIOWARE_MOD_CANONICAL_PATH_PREFIX, matchAudiowareFiles, fileTree);
                        exports.findAudiowareCanonFiles = findAudiowareCanonFiles;
                        const detectAudiowareCanonLayout = (fileTree) => (0, filetree_1.pathInTree)(installers_layouts_1.AUDIOWARE_MOD_CANONICAL_PATH_PREFIX, fileTree);
                        exports.detectAudiowareCanonLayout = detectAudiowareCanonLayout;
                        const audiowareCanonLayout = (api, _modName, fileTree) => {
                            const allCanonAudiowareFiles = (0, exports.findAudiowareCanonFiles)(fileTree);
                            if (allCanonAudiowareFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            return {
                                kind: installers_layouts_1.AudiowareLayout.Canon,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonAudiowareFiles),
                            };
                        };
                        const testForAudiowareMod = (_api, fileTree) => Promise.resolve({ supported: (0, exports.detectAudiowareCanonLayout)(fileTree), requiredFiles: [] });
                        exports.testForAudiowareMod = testForAudiowareMod;
                        const installAudiowareMod = async (api, fileTree, _modInfo, _features) => {
                            const selectedInstructions = audiowareCanonLayout(api, undefined, fileTree);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.Audioware, fileTree);
                            }
                            return Promise.resolve({
                                instructions: selectedInstructions.instructions,
                            });
                        };
                        exports.installAudiowareMod = installAudiowareMod;
                        const detectAllowedAudiowareLayouts = (fileTree) => (0, exports.detectAudiowareCanonLayout)(fileTree);
                        exports.detectAllowedAudiowareLayouts = detectAllowedAudiowareLayouts;
                        const audiowareAllowedInMultiInstructions = (api, fileTree) => {
                            const selectedInstructions = audiowareCanonLayout(api, undefined, fileTree);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${installers_types_1.InstallerType.Audioware}: No valid extra archives`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            return selectedInstructions;
                        };
                        exports.audiowareAllowedInMultiInstructions = audiowareAllowedInMultiInstructions;


                        /***/
                    }),

/***/ "./src/installer.cet.ts":
/*!******************************!*\
  !*** ./src/installer.cet.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCetMod = exports.testForCetMod = exports.cetCanonLayout = exports.detectCetCanonLayout = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const key_tree_1 = __importDefault(__webpack_require__(/*! key-tree */ "./node_modules/key-tree/dist/key-tree.umd.js"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const allFilesInFolder = (folder, files) => {
                            const fileTree = new key_tree_1.default({ separator: path_1.default.sep });
                            files.forEach((file) => fileTree.add(file, file));
                            const moddir = fileTree._getNode(folder);
                            if (!moddir) {
                                return [];
                            }
                            const moddirPath = path_1.default.join(...moddir.fullPath);
                            const allTheFiles = [].concat(...Object.values(fileTree.getSub(moddirPath, true)));
                            return allTheFiles;
                        };
                        const allCanonicalCetFiles = (files) => allFilesInFolder(installers_layouts_1.CET_MOD_CANONICAL_PATH_PREFIX, files);
                        const matchCetInitLua = (f) => path_1.default.basename(f) === installers_layouts_1.CET_MOD_CANONICAL_INIT_FILE;
                        const findCanonicalCetDirs = (fileTree) => (0, filetree_1.findDirectSubdirsWithSome)(installers_layouts_1.CET_MOD_CANONICAL_PATH_PREFIX, matchCetInitLua, fileTree);
                        const detectCetCanonLayout = (fileTree) => findCanonicalCetDirs(fileTree).length > 0;
                        exports.detectCetCanonLayout = detectCetCanonLayout;
                        const cetCanonLayout = (api, _modName, fileTree) => {
                            const allCanonCetFiles = findCanonicalCetDirs(fileTree).flatMap((namedSubdir) => (0, filetree_1.filesUnder)(namedSubdir, filetree_1.Glob.Any, fileTree));
                            if (allCanonCetFiles.length < 1) {
                                api.log(`debug`, `No canonical CET files found.`);
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            return {
                                kind: installers_layouts_1.CetLayout.Canon,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonCetFiles),
                            };
                        };
                        exports.cetCanonLayout = cetCanonLayout;
                        const testForCetMod = (api, fileTree) => {
                            const hasCetFilesInANamedModDir = (0, exports.detectCetCanonLayout)(fileTree);
                            if (!hasCetFilesInANamedModDir) {
                                return Promise.resolve({ supported: false, requiredFiles: [] });
                            }
                            api.log(`info`, `Matching CET installer: ${hasCetFilesInANamedModDir}`);
                            return Promise.resolve({
                                supported: hasCetFilesInANamedModDir,
                                requiredFiles: [],
                            });
                        };
                        exports.testForCetMod = testForCetMod;
                        const installCetMod = (api, fileTree, _modInfo, _features) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            const cetFiles = allCanonicalCetFiles(files);
                            if (cetFiles.length === 0) {
                                return Promise.reject(new Error(`CET install but no CET files, should never get here`));
                            }
                            const instructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(cetFiles);
                            return Promise.resolve({ instructions });
                        };
                        exports.installCetMod = installCetMod;


                        /***/
                    }),

/***/ "./src/installer.config.ini-reshade.ts":
/*!*********************************************!*\
  !*** ./src/installer.config.ini-reshade.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installIniMod = exports.testForIniMod = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const fs_1 = __importDefault(__webpack_require__(/*! fs */ "fs"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const testForReshadeFile = (log, files, installingDir) => {
                            const fileToExamine = path_1.default.join(installingDir, files.find((file) => path_1.default.extname(file) === installers_layouts_1.CONFIG_INI_MOD_EXTENSION));
                            const data = fs_1.default.readFileSync(fileToExamine, { encoding: `utf8` });
                            if (data === undefined) {
                                log(`error`, `unable to read contents of `, fileToExamine);
                                return false;
                            }
                            data.slice(0, 80);
                            const regex = /^[\[#].+/;
                            const testString = data.replace(regex, ``);
                            if (testString === data) {
                                log(`info`, `Reshade file located.`);
                                return true;
                            }
                            return false;
                        };
                        const testForIniMod = (api, fileTree) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            const filtered = files.filter((file) => path_1.default.extname(file).toLowerCase() === installers_layouts_1.CONFIG_INI_MOD_EXTENSION);
                            if (filtered.length === 0) {
                                api.log(`info`, `No INI files.`);
                                return Promise.resolve({
                                    supported: false,
                                    requiredFiles: [],
                                });
                            }
                            if (files.some((file) => path_1.default.basename(file).includes(installers_layouts_1.CET_MOD_CANONICAL_INIT_FILE) ||
                                path_1.default.extname(file) === installers_layouts_1.REDS_MOD_CANONICAL_EXTENSION)) {
                                api.log(`error`, `INI file detected within a CET or Redscript mod, aborting`);
                                return Promise.resolve({
                                    supported: false,
                                    requiredFiles: [],
                                });
                            }
                            if (files.includes(installers_layouts_1.CET_GLOBAL_INI)) {
                                api.log(`error`, `CET Installer detected, not processing as INI`);
                                return Promise.resolve({
                                    supported: false,
                                    requiredFiles: [],
                                });
                            }
                            return Promise.resolve({
                                supported: true,
                                requiredFiles: [],
                            });
                        };
                        exports.testForIniMod = testForIniMod;
                        const installIniMod = (api, fileTree, modInfo, _features) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            const allIniModFiles = files.filter((file) => path_1.default.extname(file) === installers_layouts_1.CONFIG_INI_MOD_EXTENSION);
                            const reshade = testForReshadeFile(api.log, allIniModFiles, modInfo.installingDir.pathOnDisk);
                            api.log(`info`, `Installing ini files: `, allIniModFiles);
                            const iniFileInstructions = allIniModFiles.map((file) => {
                                const fileName = path_1.default.basename(file);
                                const dest = reshade
                                    ? path_1.default.join(installers_layouts_1.CONFIG_RESHADE_MOD_BASEDIR, path_1.default.basename(file))
                                    : path_1.default.join(installers_layouts_1.CONFIG_INI_MOD_BASEDIR, fileName);
                                return {
                                    type: `copy`,
                                    source: file,
                                    destination: dest,
                                };
                            });
                            const shaderFiles = files.filter((file) => file.includes(installers_layouts_1.CONFIG_RESHADE_MOD_SHADER_DIRNAME) && !file.endsWith(path_1.default.sep));
                            let shaderInstructions = [];
                            if (reshade && shaderFiles.length !== 0) {
                                api.log(`info`, `Installing shader files: `, shaderFiles);
                                shaderInstructions = shaderFiles.map((file) => {
                                    const regex = /.*reshade-shaders/;
                                    const fileName = file.replace(regex, installers_layouts_1.CONFIG_RESHADE_MOD_SHADER_DIRNAME);
                                    const dest = path_1.default.join(installers_layouts_1.CONFIG_RESHADE_MOD_BASEDIR, fileName);
                                    return {
                                        type: `copy`,
                                        source: file,
                                        destination: dest,
                                    };
                                });
                            }
                            const instructions = [].concat(iniFileInstructions, shaderInstructions);
                            api.log(`debug`, `Installing ini files with instructions: `, instructions);
                            return Promise.resolve({ instructions });
                        };
                        exports.installIniMod = installIniMod;


                        /***/
                    }),

/***/ "./src/installer.config.json.ts":
/*!**************************************!*\
  !*** ./src/installer.config.json.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.configJsonAllowedInMultiInstructions = exports.detectAllowedConfigJsonLayouts = exports.installJsonMod = exports.testForJsonMod = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const matchConfigJson = (filePath) => path_1.default.extname(filePath) === installers_layouts_1.CONFIG_JSON_MOD_EXTENSION;
                        const findConfigJsonProtectedFiles = (fileTree) => installers_layouts_1.CONFIG_JSON_MOD_PROTECTED_FILES.filter((protectedPath) => (0, filetree_1.pathInTree)(protectedPath, fileTree));
                        const detectConfigJsonProtectedLayout = (fileTree) => findConfigJsonProtectedFiles(fileTree).length > 0;
                        const findConfigJsonToplevelFiles = (fileTree) => (0, filetree_1.filesIn)(filetree_1.FILETREE_ROOT, matchConfigJson, fileTree).filter((json) => installers_layouts_1.CONFIG_JSON_MOD_PROTECTED_FILENAMES.includes(path_1.default.basename(json)));
                        const detectConfigJsonToplevelLayout = (fileTree) => findConfigJsonToplevelFiles(fileTree).length > 0;
                        const findJsonFilesInProtectedDirs = (fileTree) => installers_layouts_1.CONFIG_JSON_MOD_PROTECTED_DIRS.flatMap((dir) => (0, filetree_1.filesUnder)(dir, matchConfigJson, fileTree));
                        const detectJsonFilesInProtectedDirs = (fileTree) => findJsonFilesInProtectedDirs(fileTree).length > 0;
                        const configJsonProtectedLayout = (api, _modName, fileTree) => {
                            const allProtectedConfigJsonFiles = findConfigJsonProtectedFiles(fileTree);
                            if (allProtectedConfigJsonFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const protectedJsonInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allProtectedConfigJsonFiles);
                            return {
                                kind: installers_layouts_1.ConfigJsonLayout.Protected,
                                instructions: protectedJsonInstructions,
                            };
                        };
                        const configJsonTopevelLayout = (_api, _modName, fileTree) => {
                            const allToplevelProtectedConfigJsonFilenames = findConfigJsonToplevelFiles(fileTree).map((protectedPath) => path_1.default.basename(protectedPath));
                            if (allToplevelProtectedConfigJsonFilenames.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const unresolvableJsonNames = allToplevelProtectedConfigJsonFilenames.some((protectedName) => installers_layouts_1.CONFIG_JSON_MOD_UNFIXABLE_FILENAMES.includes(protectedName));
                            if (unresolvableJsonNames) {
                                return installers_layouts_1.InvalidLayout.Conflict;
                            }
                            const toplevelConfigJsonsWithFixedPaths = allToplevelProtectedConfigJsonFilenames.map((protectedName) => [
                                protectedName,
                                installers_layouts_1.CONFIG_JSON_MOD_FIXABLE_FILENAMES_TO_PATHS[protectedName],
                            ]);
                            const toplevelToCanonInstructions = (0, installers_shared_1.instructionsForSourceToDestPairs)(toplevelConfigJsonsWithFixedPaths);
                            return {
                                kind: installers_layouts_1.ConfigJsonLayout.Toplevel,
                                instructions: toplevelToCanonInstructions,
                            };
                        };
                        const testForJsonMod = async (_api, fileTree) => {
                            const foundJsonToHandle = detectConfigJsonProtectedLayout(fileTree) ||
                                detectConfigJsonToplevelLayout(fileTree) ||
                                detectJsonFilesInProtectedDirs(fileTree);
                            return {
                                supported: foundJsonToHandle,
                                requiredFiles: [],
                            };
                        };
                        exports.testForJsonMod = testForJsonMod;
                        const installJsonMod = async (api, fileTree, _modInfo, _features) => {
                            const me = installers_types_1.InstallerType.ConfigJson;
                            const allPossibleConfigJsonLayouts = [
                                configJsonProtectedLayout,
                                configJsonTopevelLayout,
                            ];
                            const selectedInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, allPossibleConfigJsonLayouts);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.ConfigJson, fileTree);
                            }
                            const confirmedInstructions = await (0, installers_shared_1.promptBeforeContinuingWithProtectedInstructions)(api, installers_types_1.InstallerType.ConfigJson, installers_layouts_1.CONFIG_JSON_MOD_PROTECTED_FILES, selectedInstructions);
                            if (confirmedInstructions === installers_layouts_1.NotAllowed.CanceledByUser) {
                                const cancelMessage = `${me}: user chose to cancel installing to protected paths`;
                                api.log(`warn`, cancelMessage);
                                return Promise.reject(new Error(cancelMessage));
                            }
                            api.log(`info`, `${me}: User confirmed installing to protected paths`);
                            return Promise.resolve({
                                instructions: confirmedInstructions.instructions,
                            });
                        };
                        exports.installJsonMod = installJsonMod;
                        exports.detectAllowedConfigJsonLayouts = detectConfigJsonProtectedLayout;
                        const configJsonAllowedInMultiInstructions = async (api, fileTree) => {
                            const me = installers_types_1.InstallerType.ConfigJson;
                            const maybeInstructions = configJsonProtectedLayout(api, undefined, fileTree);
                            if (maybeInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                maybeInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${me}: No valid JSON config files found, this is ok`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            const confirmedInstructions = await (0, installers_shared_1.promptBeforeContinuingWithProtectedInstructions)(api, installers_types_1.InstallerType.ConfigJson, installers_layouts_1.CONFIG_JSON_MOD_PROTECTED_FILES, maybeInstructions);
                            if (confirmedInstructions === installers_layouts_1.NotAllowed.CanceledByUser) {
                                api.log(`warn`, `${me}: user did not allow installing to protected paths`);
                                return installers_layouts_1.NotAllowed.CanceledByUser;
                            }
                            return confirmedInstructions;
                        };
                        exports.configJsonAllowedInMultiInstructions = configJsonAllowedInMultiInstructions;


                        /***/
                    }),

/***/ "./src/installer.config.xml.ts":
/*!*************************************!*\
  !*** ./src/installer.config.xml.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.configXmlAllowedInMultiInstructions = exports.detectAllowedConfigXmlLayouts = exports.installConfigXmlMod = exports.testForConfigXmlMod = exports.detectConfigXmlToplevelLayout = exports.detectConfigXmlMergeableLayout = exports.detectConfigXmlCanonLayout = exports.detectConfigXmlProtectedLayout = exports.findConfigXmlToplevelFiles = exports.findConfigXmlMergeableFiles = exports.findConfigXmlCanonFiles = exports.findConfigXmlProtectedFiles = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const matchConfigXml = (filePath) => installers_layouts_1.CONFIG_XML_MOD_EXTENSION === path_1.default.extname(filePath);
                        const findConfigXmlProtectedFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.CONFIG_XML_MOD_BASEDIR, matchConfigXml, fileTree).filter((xml) => installers_layouts_1.CONFIG_XML_MOD_PROTECTED_FILENAMES.includes(path_1.default.basename(xml)));
                        exports.findConfigXmlProtectedFiles = findConfigXmlProtectedFiles;
                        const findConfigXmlCanonFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.CONFIG_XML_MOD_BASEDIR, matchConfigXml, fileTree).filter((xmlPath) => !installers_layouts_1.CONFIG_XML_MOD_PROTECTED_FILES.includes(xmlPath));
                        exports.findConfigXmlCanonFiles = findConfigXmlCanonFiles;
                        const findConfigXmlMergeableFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.CONFIG_XML_MOD_MERGEABLE_BASEDIR, matchConfigXml, fileTree);
                        exports.findConfigXmlMergeableFiles = findConfigXmlMergeableFiles;
                        const findConfigXmlToplevelFiles = (fileTree) => (0, filetree_1.filesIn)(filetree_1.FILETREE_ROOT, matchConfigXml, fileTree).filter((xml) => installers_layouts_1.CONFIG_XML_MOD_PROTECTED_FILENAMES.includes(path_1.default.basename(xml)));
                        exports.findConfigXmlToplevelFiles = findConfigXmlToplevelFiles;
                        const detectConfigXmlProtectedLayout = (fileTree) => (0, exports.findConfigXmlProtectedFiles)(fileTree).length > 0;
                        exports.detectConfigXmlProtectedLayout = detectConfigXmlProtectedLayout;
                        const detectConfigXmlCanonLayout = (fileTree) => (0, exports.findConfigXmlCanonFiles)(fileTree).length > 0;
                        exports.detectConfigXmlCanonLayout = detectConfigXmlCanonLayout;
                        const detectConfigXmlMergeableLayout = (fileTree) => (0, exports.findConfigXmlMergeableFiles)(fileTree).length > 0;
                        exports.detectConfigXmlMergeableLayout = detectConfigXmlMergeableLayout;
                        const detectConfigXmlToplevelLayout = (fileTree) => (0, exports.findConfigXmlToplevelFiles)(fileTree).length > 0;
                        exports.detectConfigXmlToplevelLayout = detectConfigXmlToplevelLayout;
                        const configXmlProtectedLayout = (_api, _modName, fileTree) => {
                            const allProtectedConfigXmlFiles = (0, exports.findConfigXmlProtectedFiles)(fileTree);
                            if (allProtectedConfigXmlFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allCanonConfigXmlFiles = (0, exports.findConfigXmlCanonFiles)(fileTree);
                            const allInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)([
                                ...allProtectedConfigXmlFiles,
                                ...allCanonConfigXmlFiles,
                            ]);
                            return {
                                kind: installers_layouts_1.ConfigXmlLayout.Protected,
                                instructions: allInstructions,
                            };
                        };
                        const configXmlCanonLayout = (_api, _modName, fileTree) => {
                            const allCanonConfigXmlFiles = (0, exports.findConfigXmlCanonFiles)(fileTree);
                            if (allCanonConfigXmlFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            return {
                                kind: installers_layouts_1.ConfigXmlLayout.Canon,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonConfigXmlFiles),
                            };
                        };
                        const confixXmlMergeableLayout = (_api, _modName, fileTree) => {
                            const allMergeableConfigXmlFiles = (0, exports.findConfigXmlMergeableFiles)(fileTree);
                            if (allMergeableConfigXmlFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            return {
                                kind: installers_layouts_1.ConfigXmlLayout.Mergeable,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allMergeableConfigXmlFiles),
                            };
                        };
                        const configXmlTopevelLayout = (_api, _modName, fileTree) => {
                            const allToplevelConfigXmlFiles = (0, exports.findConfigXmlToplevelFiles)(fileTree);
                            if (allToplevelConfigXmlFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const toplevelXMLsToBasedir = allToplevelConfigXmlFiles.map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, installers_layouts_1.CONFIG_XML_MOD_BASEDIR));
                            const movingInstructions = (0, installers_shared_1.instructionsForSourceToDestPairs)(toplevelXMLsToBasedir);
                            return {
                                kind: installers_layouts_1.ConfigXmlLayout.Toplevel,
                                instructions: movingInstructions,
                            };
                        };
                        const testForConfigXmlMod = (_api, fileTree) => Promise.resolve({
                            supported: (0, exports.detectConfigXmlProtectedLayout)(fileTree) ||
                                (0, exports.detectConfigXmlCanonLayout)(fileTree) ||
                                (0, exports.detectConfigXmlMergeableLayout)(fileTree) ||
                                (0, exports.detectConfigXmlToplevelLayout)(fileTree),
                            requiredFiles: [],
                        });
                        exports.testForConfigXmlMod = testForConfigXmlMod;
                        const installConfigXmlMod = async (api, fileTree, _modInfo, _features) => {
                            const allPossibleConfigXmlLayouts = [
                                configXmlProtectedLayout,
                                configXmlCanonLayout,
                                confixXmlMergeableLayout,
                                configXmlTopevelLayout,
                            ];
                            const selectedInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, allPossibleConfigXmlLayouts);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.ConfigXml, fileTree);
                            }
                            const userNeedsToBePrompted = selectedInstructions.kind === installers_layouts_1.ConfigXmlLayout.Protected ||
                                selectedInstructions.kind === installers_layouts_1.ConfigXmlLayout.Toplevel;
                            if (!userNeedsToBePrompted) {
                                return Promise.resolve({
                                    instructions: selectedInstructions.instructions,
                                });
                            }
                            const confirmedInstructions = await (0, installers_shared_1.promptBeforeContinuingWithProtectedInstructions)(api, installers_types_1.InstallerType.ConfigXml, installers_layouts_1.CONFIG_XML_MOD_PROTECTED_FILES, selectedInstructions);
                            if (confirmedInstructions === installers_layouts_1.NotAllowed.CanceledByUser) {
                                const cancelMessage = `${installers_types_1.InstallerType.ConfigXml}: user chose to cancel installing to protected paths`;
                                api.log(`warn`, cancelMessage);
                                return Promise.reject(new Error(cancelMessage));
                            }
                            api.log(`info`, `${installers_types_1.InstallerType.ConfigXml}: User confirmed installing to protected paths`);
                            return Promise.resolve({
                                instructions: confirmedInstructions.instructions,
                            });
                        };
                        exports.installConfigXmlMod = installConfigXmlMod;
                        const layoutsAllowedInMultiAndOtherTypes = [
                            configXmlProtectedLayout,
                            configXmlCanonLayout,
                            confixXmlMergeableLayout,
                        ];
                        const detectAllowedConfigXmlLayouts = (fileTree) => (0, exports.detectConfigXmlProtectedLayout)(fileTree) ||
                            (0, exports.detectConfigXmlCanonLayout)(fileTree) ||
                            (0, exports.detectConfigXmlMergeableLayout)(fileTree);
                        exports.detectAllowedConfigXmlLayouts = detectAllowedConfigXmlLayouts;
                        const configXmlAllowedInMultiInstructions = async (api, fileTree) => {
                            const me = installers_types_1.InstallerType.ConfigXml;
                            const selectedInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, layoutsAllowedInMultiAndOtherTypes);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${me}: No valid XML config files found, this is ok`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            if (selectedInstructions.kind !== installers_layouts_1.ConfigXmlLayout.Protected) {
                                return selectedInstructions;
                            }
                            const confirmedInstructions = await (0, installers_shared_1.promptBeforeContinuingWithProtectedInstructions)(api, installers_types_1.InstallerType.ConfigXml, installers_layouts_1.CONFIG_XML_MOD_PROTECTED_FILES, selectedInstructions);
                            if (confirmedInstructions === installers_layouts_1.NotAllowed.CanceledByUser) {
                                api.log(`warn`, `${me}: user did not allow installing to protected paths`);
                                return installers_layouts_1.NotAllowed.CanceledByUser;
                            }
                            return confirmedInstructions;
                        };
                        exports.configXmlAllowedInMultiInstructions = configXmlAllowedInMultiInstructions;


                        /***/
                    }),

/***/ "./src/installer.core-archive-xl.ts":
/*!******************************************!*\
  !*** ./src/installer.core-archive-xl.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreArchiveXL = exports.testForCoreArchiveXL = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const findCoreArchiveXLFiles = (fileTree) => installers_layouts_1.ARCHIVE_XL_CORE_FILES.filter((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const detectCoreArchiveXL = (fileTree) => findCoreArchiveXLFiles(fileTree).length > 0;
                        const testForCoreArchiveXL = (_api, fileTree) => Promise.resolve({ supported: detectCoreArchiveXL(fileTree), requiredFiles: [] });
                        exports.testForCoreArchiveXL = testForCoreArchiveXL;
                        const installCoreArchiveXL = async (api, fileTree, _modInfo, _features) => {
                            if (findCoreArchiveXLFiles(fileTree).length !== installers_layouts_1.ARCHIVE_XL_CORE_FILES.length) {
                                const errorMessage = `Didn't Find Expected ArchiveXL Installation!`;
                                api.log(`error`, `${installers_types_1.InstallerType.CoreArchiveXL}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreArchiveXL, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(new Error(errorMessage));
                            }
                            const coreArchiveXLInstructions = [
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)((0, filetree_1.sourcePaths)(fileTree)),
                            ];
                            return Promise.resolve({ instructions: coreArchiveXLInstructions });
                        };
                        exports.installCoreArchiveXL = installCoreArchiveXL;


                        /***/
                    }),

/***/ "./src/installer.core-audioware.ts":
/*!*****************************************!*\
  !*** ./src/installer.core-audioware.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreAudioware = exports.testForCoreAudioware = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const findCoreAudiowareFiles = (fileTree) => installers_layouts_1.AUDIOWARE_CORE_FILES.filter((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const detectCoreAudioware = (fileTree) => findCoreAudiowareFiles(fileTree).length > 0;
                        const testForCoreAudioware = (_api, fileTree) => Promise.resolve({ supported: detectCoreAudioware(fileTree), requiredFiles: [] });
                        exports.testForCoreAudioware = testForCoreAudioware;
                        const installCoreAudioware = async (api, fileTree, _modInfo, _features) => {
                            if (findCoreAudiowareFiles(fileTree).length !== installers_layouts_1.AUDIOWARE_CORE_FILES.length) {
                                const errorMessage = `Didn't Find Expected Audioware Installation!`;
                                api.log(`error`, `${installers_types_1.InstallerType.CoreAudioware}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreAudioware, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(new Error(errorMessage));
                            }
                            const coreAudiowareInstructions = [
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)((0, filetree_1.sourcePaths)(fileTree)),
                                ...(0, installers_shared_1.instructionsToGenerateDirs)([installers_layouts_1.AUDIOWARE_MOD_CANONICAL_PATH_PREFIX]),
                            ];
                            return Promise.resolve({ instructions: coreAudiowareInstructions });
                        };
                        exports.installCoreAudioware = installCoreAudioware;


                        /***/
                    }),

/***/ "./src/installer.core-tweak-xl.ts":
/*!****************************************!*\
  !*** ./src/installer.core-tweak-xl.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreTweakXL = exports.testForCoreTweakXL = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const findCoreTweakXLFiles = (fileTree) => installers_layouts_1.TWEAK_XL_CORE_FILES.filter((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const detectCoreTweakXL = (fileTree) => findCoreTweakXLFiles(fileTree).length > 0;
                        const testForCoreTweakXL = (_api, fileTree) => Promise.resolve({ supported: detectCoreTweakXL(fileTree), requiredFiles: [] });
                        exports.testForCoreTweakXL = testForCoreTweakXL;
                        const installCoreTweakXL = async (api, fileTree, _modInfo, _features) => {
                            if (findCoreTweakXLFiles(fileTree).length !== installers_layouts_1.TWEAK_XL_CORE_FILES.length) {
                                const errorMessage = `Didn't Find Expected TweakXL Installation!`;
                                api.log(`error`, `${installers_types_1.InstallerType.CoreTweakXL}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreTweakXL, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(new Error(errorMessage));
                            }
                            const coreTweakXLInstructions = [
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)((0, filetree_1.sourcePaths)(fileTree)),
                                ...(0, installers_shared_1.instructionsToGenerateDirs)([installers_layouts_1.TWEAK_XL_MOD_CANONICAL_PATH_PREFIX]),
                            ];
                            return Promise.resolve({ instructions: coreTweakXLInstructions });
                        };
                        exports.installCoreTweakXL = installCoreTweakXL;


                        /***/
                    }),

/***/ "./src/installer.core.amm.ts":
/*!***********************************!*\
  !*** ./src/installer.core.amm.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreAmm = exports.testForCoreAmm = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const findRequiredCoreAmmFiles = (fileTree) => installers_layouts_1.AMM_CORE_REQUIRED_PATHS.filter((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const findAllCoreAmmFiles = (fileTree) => [
                            ...(0, filetree_1.filesUnder)(installers_layouts_1.AMM_BASEDIR_PATH, filetree_1.Glob.Any, fileTree),
                            ...(0, filetree_1.filesIn)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX, filetree_1.Glob.Any, fileTree),
                        ];
                        const detectCoreAmm = (fileTree) => installers_layouts_1.AMM_CORE_REQUIRED_PATHS.some((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const testForCoreAmm = (_api, fileTree) => Promise.resolve({ supported: detectCoreAmm(fileTree), requiredFiles: [] });
                        exports.testForCoreAmm = testForCoreAmm;
                        const installCoreAmm = async (api, fileTree, _modInfo, _features) => {
                            const allCoreAmmFiles = findAllCoreAmmFiles(fileTree);
                            const missingRequiredCoreAmmFiles = findRequiredCoreAmmFiles(fileTree).length < installers_layouts_1.AMM_CORE_REQUIRED_PATHS.length;
                            const hasExtraFiles = allCoreAmmFiles.length > (0, filetree_1.fileCount)(fileTree);
                            if (missingRequiredCoreAmmFiles || hasExtraFiles) {
                                const errorMessage = `Didn't Find Expected AMM Installation!`;
                                api.log(`error`, `${installers_types_1.InstallerType.CoreAmm}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreAmm, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(new Error(errorMessage));
                            }
                            const coreAmmInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCoreAmmFiles);
                            return Promise.resolve({ instructions: coreAmmInstructions });
                        };
                        exports.installCoreAmm = installCoreAmm;


                        /***/
                    }),

/***/ "./src/installer.core.cybercat.ts":
/*!****************************************!*\
  !*** ./src/installer.core.cybercat.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreCyberCat = exports.testForCyberCatCore = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const ui_notifications_1 = __webpack_require__(/*! ./ui.notifications */ "./src/ui.notifications.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const findRequiredCoreCyberCatFiles = (fileTree) => installers_layouts_1.CYBERCAT_CORE_REQUIRED_FILES.filter((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const detectCoreCyberCat = (fileTree) => installers_layouts_1.CYBERCAT_CORE_REQUIRED_FILES.some((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const testForCyberCatCore = (_api, fileTree) => Promise.resolve({ supported: detectCoreCyberCat(fileTree), requiredFiles: [] });
                        exports.testForCyberCatCore = testForCyberCatCore;
                        const installCoreCyberCat = (api, fileTree, _modInfo, _features) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            const missingRequiredCoreCyberCatFiles = findRequiredCoreCyberCatFiles(fileTree).length !==
                                installers_layouts_1.CYBERCAT_CORE_REQUIRED_FILES.length;
                            if (missingRequiredCoreCyberCatFiles) {
                                const errorMessage = `CyberCAT archive seems to be missing required files!`;
                                api.log(`error`, `${installers_types_1.InstallerType.CoreCyberCat}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreCyberCat, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(new Error(errorMessage));
                            }
                            const topleveltoCyberCat = files.map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, installers_layouts_1.CYBERCAT_CORE_BASEDIR));
                            const movingInstructions = (0, installers_shared_1.instructionsForSourceToDestPairs)(topleveltoCyberCat);
                            const isAutoEnableOnInstall = api.getState().settings.automation.enable &&
                                api.getState().settings.automation.deploy;
                            if (isAutoEnableOnInstall) {
                                (0, ui_notifications_1.showInfoNotification)(api, ui_notifications_1.InfoNotification.CyberCatRestartRequired);
                            }
                            else {
                                (0, ui_dialogs_1.showManualStepRequiredForToolInfo)(api, `CyberCAT`);
                            }
                            return Promise.resolve({ instructions: movingInstructions });
                        };
                        exports.installCoreCyberCat = installCoreCyberCat;


                        /***/
                    }),

/***/ "./src/installer.core.cyberscript.ts":
/*!*******************************************!*\
  !*** ./src/installer.core.cyberscript.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreCyberScript = exports.testForCoreCyberScript = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const detectCoreCyberScript = (fileTree) => installers_layouts_1.CYBERSCRIPT_CORE_REQUIRED_FILES.some((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                        const testForCoreCyberScript = (_api, fileTree) => Promise.resolve({ supported: detectCoreCyberScript(fileTree), requiredFiles: [] });
                        exports.testForCoreCyberScript = testForCoreCyberScript;
                        const installCoreCyberScript = (api, fileTree, _modInfo, _features) => {
                            const allCoreCyberScriptFiles = [
                                installers_layouts_1.CYBERSCRIPT_CORE_ASI,
                                ...(0, filetree_1.filesUnder)(installers_layouts_1.CYBERSCRIPT_CORE_CETBASEDIR, filetree_1.Glob.Any, fileTree),
                                ...(0, filetree_1.filesUnder)(installers_layouts_1.CYBERSCRIPT_CORE_CPSTYLING_PLUGINDIR, filetree_1.Glob.Any, fileTree),
                            ];
                            const missingRequiredCoreCyberScriptFiles = !installers_layouts_1.CYBERSCRIPT_CORE_REQUIRED_FILES.every((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree));
                            const filesOutsideKnownDirs = allCoreCyberScriptFiles.length !== (0, filetree_1.fileCount)(fileTree);
                            if (missingRequiredCoreCyberScriptFiles || filesOutsideKnownDirs) {
                                const errorMessage = missingRequiredCoreCyberScriptFiles
                                    ? `Didn't find all required CyberScript files!`
                                    : `Found files outside known CyberScript directories!`;
                                api.log(`error`, `${installers_types_1.InstallerType.CoreCyberScript}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreCyberScript, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(new Error(errorMessage));
                            }
                            const allCoreCyberScriptInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCoreCyberScriptFiles);
                            return Promise.resolve({ instructions: allCoreCyberScriptInstructions });
                        };
                        exports.installCoreCyberScript = installCoreCyberScript;


                        /***/
                    }),

/***/ "./src/installer.core.inputloader.ts":
/*!*******************************************!*\
  !*** ./src/installer.core.inputloader.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreInputLoader = exports.testForCoreInputLoader = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const me = installers_types_1.InstallerType.CoreInputLoader;
                        const DeprecatedCoreInputLoader010Instructions = [
                            {
                                type: `generatefile`,
                                data: `[Player/Input]\n`,
                                destination: `engine\\config\\platform\\pc\\input_loader.ini`,
                            },
                            {
                                type: `mkdir`,
                                destination: installers_layouts_1.CONFIG_XML_MOD_MERGEABLE_BASEDIR,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\input_loader.dll`,
                                destination: `red4ext\\plugins\\input_loader\\input_loader.dll`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\inputUserMappings.xml`,
                                destination: `red4ext\\plugins\\input_loader\\inputUserMappings.xml`,
                            },
                        ];
                        const DeprecatedCoreInputLoader011Instructions = [
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\license.md`,
                                destination: `red4ext\\plugins\\input_loader\\license.md`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\readme.md`,
                                destination: `red4ext\\plugins\\input_loader\\readme.md`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader_uninstall.bat`,
                                destination: `red4ext\\plugins\\input_loader_uninstall.bat`,
                            },
                            ...DeprecatedCoreInputLoader010Instructions,
                        ];
                        const CoreInputLoaderInstructions = [
                            {
                                type: `copy`,
                                source: `engine\\config\\platform\\pc\\input_loader.ini`,
                                destination: `engine\\config\\platform\\pc\\input_loader.ini`,
                            },
                            {
                                type: `mkdir`,
                                destination: installers_layouts_1.CONFIG_XML_MOD_MERGEABLE_BASEDIR,
                            },
                            {
                                type: `copy`,
                                source: `r6\\cache\\inputUserMappings.xml`,
                                destination: `r6\\cache\\inputUserMappings.xml`,
                            },
                            {
                                type: `copy`,
                                source: `r6\\cache\\inputContexts.xml`,
                                destination: `r6\\cache\\inputContexts.xml`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\input_loader.dll`,
                                destination: `red4ext\\plugins\\input_loader\\input_loader.dll`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\inputUserMappings.xml`,
                                destination: `red4ext\\plugins\\input_loader\\inputUserMappings.xml`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\license.md`,
                                destination: `red4ext\\plugins\\input_loader\\license.md`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\input_loader\\readme.md`,
                                destination: `red4ext\\plugins\\input_loader\\readme.md`,
                            },
                        ];
                        const findCoreInputLoaderFiles = (fileTree) => [
                            ...installers_layouts_1.INPUT_LOADER_CORE_REQUIRED_FILES.V012.filter((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree)),
                        ];
                        const findDeprecated010CoreInputLoaderFiles = (fileTree) => [
                            ...installers_layouts_1.DEPRECATED_INPUT_LOADER_CORE_FILES.V010.filter((deprecatedFile) => (0, filetree_1.pathInTree)(deprecatedFile, fileTree)),
                        ];
                        const findDeprecated011CoreInputLoaderFiles = (fileTree) => [
                            ...installers_layouts_1.DEPRECATED_INPUT_LOADER_CORE_FILES.V011.filter((deprecatedFile) => (0, filetree_1.pathInTree)(deprecatedFile, fileTree)),
                        ];
                        const detectCoreInputLoader = (fileTree) => findCoreInputLoaderFiles(fileTree).length > 0
                            || findDeprecated010CoreInputLoaderFiles(fileTree).length > 0
                            || findDeprecated011CoreInputLoaderFiles(fileTree).length > 0;
                        const testForCoreInputLoader = (_api, fileTree) => Promise.resolve({ supported: detectCoreInputLoader(fileTree), requiredFiles: [] });
                        exports.testForCoreInputLoader = testForCoreInputLoader;
                        const shouldHandleDeprecated010Installation = (fileTree) => {
                            const deprecatedInstallationFiles = findDeprecated010CoreInputLoaderFiles(fileTree);
                            return (deprecatedInstallationFiles.length === (0, filetree_1.fileCount)(fileTree)
                                && deprecatedInstallationFiles.length === installers_layouts_1.DEPRECATED_INPUT_LOADER_CORE_FILES.V010.length);
                        };
                        const shouldHandleDeprecated011Installation = (fileTree) => {
                            const deprecatedInstallationFiles = findDeprecated011CoreInputLoaderFiles(fileTree);
                            return (deprecatedInstallationFiles.length === (0, filetree_1.fileCount)(fileTree)
                                && deprecatedInstallationFiles.length === installers_layouts_1.DEPRECATED_INPUT_LOADER_CORE_FILES.V011.length);
                        };
                        const handleDeprecated010Installation = async (api) => {
                            const infoMessage = `Old core mod version!`;
                            api.log(`info`, `${me}: ${infoMessage} Confirming installation.`);
                            const confirmedInstructions = await (0, ui_dialogs_1.promptUserToInstallOrCancelOnDeprecatedCoreMod)(api, installers_types_1.InstallerType.CoreInputLoader, []);
                            if (confirmedInstructions === installers_types_1.InstallDecision.UserWantsToCancel) {
                                const cancelMessage = `${me}: user chose to cancel installing deprecated version`;
                                api.log(`warn`, cancelMessage);
                                return Promise.reject(new Error(cancelMessage));
                            }
                            api.log(`info`, `${me}: User confirmed installing deprecated version`);
                            return Promise.resolve({ instructions: DeprecatedCoreInputLoader010Instructions });
                        };
                        const handleDeprecated011Installation = async (api) => {
                            const infoMessage = `Old core mod version!`;
                            api.log(`info`, `${me}: ${infoMessage} Confirming installation.`);
                            const confirmedInstructions = await (0, ui_dialogs_1.promptUserToInstallOrCancelOnDeprecatedCoreMod)(api, installers_types_1.InstallerType.CoreInputLoader, []);
                            if (confirmedInstructions === installers_types_1.InstallDecision.UserWantsToCancel) {
                                const cancelMessage = `${me}: user chose to cancel installing deprecated version`;
                                api.log(`warn`, cancelMessage);
                                return Promise.reject(new Error(cancelMessage));
                            }
                            api.log(`info`, `${me}: User confirmed installing deprecated version`);
                            return Promise.resolve({ instructions: DeprecatedCoreInputLoader011Instructions });
                        };
                        const installCoreInputLoader = async (api, fileTree, _modInfo, _features) => {
                            const currentInstallationFiles = findCoreInputLoaderFiles(fileTree);
                            if (currentInstallationFiles.length === (0, filetree_1.fileCount)(fileTree)
                                && currentInstallationFiles.length === installers_layouts_1.INPUT_LOADER_CORE_REQUIRED_FILES.V012.length) {
                                return Promise.resolve({ instructions: CoreInputLoaderInstructions });
                            }
                            if (shouldHandleDeprecated010Installation(fileTree)) {
                                return handleDeprecated010Installation(api);
                            }
                            if (shouldHandleDeprecated011Installation(fileTree)) {
                                return handleDeprecated011Installation(api);
                            }
                            const errorMessage = `Didn't Find Expected Input Loader Installation!`;
                            api.log(`error`, `${installers_types_1.InstallerType.CoreInputLoader}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                            (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreInputLoader, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                            return Promise.reject(new Error(errorMessage));
                        };
                        exports.installCoreInputLoader = installCoreInputLoader;


                        /***/
                    }),

/***/ "./src/installer.core.modsettings.ts":
/*!*******************************************!*\
  !*** ./src/installer.core.modsettings.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreModSettings = exports.testForCoreModSettings = void 0;
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const me = installers_types_1.InstallerType.CoreModSettings;
                        const CoreModSettingsInstructions = [
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\mod_settings\\license.md`,
                                destination: `red4ext\\plugins\\mod_settings\\license.md`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\mod_settings\\readme.md`,
                                destination: `red4ext\\plugins\\mod_settings\\readme.md`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\mod_settings\\ModSettings.archive`,
                                destination: `red4ext\\plugins\\mod_settings\\ModSettings.archive`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\mod_settings\\ModSettings.archive.xl`,
                                destination: `red4ext\\plugins\\mod_settings\\ModSettings.archive.xl`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\mod_settings\\mod_settings.dll`,
                                destination: `red4ext\\plugins\\mod_settings\\mod_settings.dll`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\mod_settings\\module.reds`,
                                destination: `red4ext\\plugins\\mod_settings\\module.reds`,
                            },
                            {
                                type: `copy`,
                                source: `red4ext\\plugins\\mod_settings\\packed.reds`,
                                destination: `red4ext\\plugins\\mod_settings\\packed.reds`,
                            },
                        ];
                        const findCoreModSettingsFiles = (fileTree) => [
                            ...installers_layouts_1.MOD_SETTINGS_CORE_FILES.filter((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree)),
                        ];
                        const detectCoreModSettings = (fileTree) => findCoreModSettingsFiles(fileTree).length > 0;
                        const testForCoreModSettings = (_api, fileTree) => Promise.resolve({ supported: detectCoreModSettings(fileTree), requiredFiles: [] });
                        exports.testForCoreModSettings = testForCoreModSettings;
                        const installCoreModSettings = async (api, fileTree, _modInfo, _features) => {
                            const currentInstallationFiles = findCoreModSettingsFiles(fileTree);
                            if (currentInstallationFiles.length === (0, filetree_1.fileCount)(fileTree)
                                && currentInstallationFiles.length === installers_layouts_1.MOD_SETTINGS_CORE_FILES.length) {
                                return Promise.resolve({ instructions: CoreModSettingsInstructions });
                            }
                            const errorMessage = `Didn't Find Expected Input Loader Installation!`;
                            api.log(`error`, `${me}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                            (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, me, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                            return Promise.reject(new Error(errorMessage));
                        };
                        exports.installCoreModSettings = installCoreModSettings;


                        /***/
                    }),

/***/ "./src/installer.core.red4ext.ts":
/*!***************************************!*\
  !*** ./src/installer.core.red4ext.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installRed4ExtCore = exports.coreRed4extInstructions = exports.testRed4ExtCore = void 0;
                        const RA = __importStar(__webpack_require__(/*! fp-ts/ReadonlyArray */ "./node_modules/fp-ts/es6/ReadonlyArray.js"));
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const detectCoreRed4extOneSevenLayout = (fileTree) => (0, function_1.pipe)(installers_layouts_1.RED4EXT_CORE_ONE_SEVEN_REQUIRED_FILES, RA.every((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree)));
                        const detectDeprecatedCoreRed4extLayout = (fileTree) => (0, function_1.pipe)(installers_layouts_1.DEPRECATED_RED4EXT_CORE_REQUIRED_FILES, RA.every((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree)));
                        const detectCoreRed4extOneNineLayout = (fileTree) => (0, function_1.pipe)(installers_layouts_1.RED4EXT_CORE_ONE_NINE_REQUIRED_FILES, RA.every((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree)));
                        const detectCoreRed4ext = (fileTree) => detectCoreRed4extOneNineLayout(fileTree)
                            || detectCoreRed4extOneSevenLayout(fileTree)
                            || detectDeprecatedCoreRed4extLayout(fileTree);
                        const testRed4ExtCore = (_api, fileTree) => Promise.resolve({
                            supported: detectCoreRed4ext(fileTree),
                            requiredFiles: [],
                        });
                        exports.testRed4ExtCore = testRed4ExtCore;
                        const layout = (_api, _modName, fileTree, layoutType, layoutMatcher) => {
                            if (!layoutMatcher(fileTree)) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allProvidedFiles = (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree);
                            const fileInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allProvidedFiles);
                            const generatedInstructions = (0, installers_shared_1.instructionsToGenerateDirs)(installers_layouts_1.CORE_RED4EXT_GENERATED_DIRS);
                            const allInstructions = [...fileInstructions, ...generatedInstructions];
                            return {
                                kind: layoutType,
                                instructions: allInstructions,
                            };
                        };
                        const coreRed4extOneSevenLayout = (_api, _modName, fileTree) => layout(_api, _modName, fileTree, installers_layouts_1.CoreRed4extLayout.OneSeven, detectCoreRed4extOneSevenLayout);
                        const deprecatedCoreRed4ExtLayout = (_api, _modName, fileTree) => layout(_api, _modName, fileTree, installers_layouts_1.CoreRed4extLayout.Deprecated, detectDeprecatedCoreRed4extLayout);
                        const coreRed4extOneNineLayout = (_api, _modName, fileTree) => layout(_api, _modName, fileTree, installers_layouts_1.CoreRed4extLayout.OneNine, detectCoreRed4extOneNineLayout);
                        const warnUserIfDeprecatedRed4ext = async (api, chosenInstructions) => {
                            const destinationPaths = chosenInstructions.instructions.map((i) => i.destination);
                            const newTree = (0, filetree_1.fileTreeFromPaths)(destinationPaths);
                            const containsDeprecatedRed4ExtPaths = installers_layouts_1.DEPRECATED_RED4EXT_CORE_REQUIRED_FILES.every((red4extPath) => (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, newTree).includes(red4extPath));
                            if (containsDeprecatedRed4ExtPaths) {
                                return (0, ui_dialogs_1.promptUserToInstallOrCancelOnDeprecatedCoreMod)(api, installers_types_1.InstallerType.CoreRed4ext, (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, newTree));
                            }
                            return installers_types_1.InstallDecision.UserWantsToProceed;
                        };
                        const coreRed4extInstructions = async (api, fileTree) => {
                            const allPossibleCoreRed4extLayouts = [
                                coreRed4extOneNineLayout,
                                coreRed4extOneSevenLayout,
                                deprecatedCoreRed4ExtLayout,
                            ];
                            const selectedInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, allPossibleCoreRed4extLayouts);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                const errorMessage = `Didn't Find Expected Core RED4ext Installation!`;
                                api.log(`error`, `${installers_types_1.InstallerType.CoreRed4ext}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.CoreRed4ext, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return ({ kind: installers_layouts_1.NoLayout.Optional, instructions: [] });
                            }
                            if (selectedInstructions.kind === installers_layouts_1.CoreRed4extLayout.Deprecated) {
                                const infoMessage = `Old RED4ext version!`;
                                api.log(`info`, `${installers_types_1.InstallerType.CoreRed4ext}: ${infoMessage} Confirming installation.`);
                                const confirmedInstructions = await warnUserIfDeprecatedRed4ext(api, selectedInstructions);
                                if (confirmedInstructions === installers_types_1.InstallDecision.UserWantsToCancel) {
                                    const cancelMessage = `${installers_types_1.InstallerType.CoreRed4ext}: user chose to cancel installing deprecated version`;
                                    api.log(`warn`, cancelMessage);
                                    return Promise.reject(new Error(cancelMessage));
                                }
                                api.log(`info`, `${installers_types_1.InstallerType.ConfigXml}: User confirmed installing deprecated version`);
                            }
                            return selectedInstructions;
                        };
                        exports.coreRed4extInstructions = coreRed4extInstructions;
                        const installRed4ExtCore = async (api, fileTree, _modInfo, _features) => {
                            const selectedInstructions = await (0, exports.coreRed4extInstructions)(api, fileTree);
                            return Promise.resolve({ instructions: selectedInstructions.instructions });
                        };
                        exports.installRed4ExtCore = installRed4ExtCore;


                        /***/
                    }),

/***/ "./src/installer.core.redscript.ts":
/*!*****************************************!*\
  !*** ./src/installer.core.redscript.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCoreRedscript = exports.testForCoreRedscript = void 0;
                        const RA = __importStar(__webpack_require__(/*! fp-ts/ReadonlyArray */ "./node_modules/fp-ts/es6/ReadonlyArray.js"));
                        const function_1 = __webpack_require__(/*! fp-ts/function */ "./node_modules/fp-ts/es6/function.js");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const detectCoreRedscriptLayout = (fileTree) => (0, function_1.pipe)(installers_layouts_1.REDSCRIPT_CORE_REQUIRED_FILES, RA.every((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree)));
                        const detectDeprecatedCoreRedscriptLayout = (fileTree) => (0, function_1.pipe)(installers_layouts_1.DEPRECATED_REDSCRIPT_CORE_REQUIRED_FILES, RA.every((requiredFile) => (0, filetree_1.pathInTree)(requiredFile, fileTree)));
                        const detectCoreRedscript = (fileTree) => detectCoreRedscriptLayout(fileTree) || detectDeprecatedCoreRedscriptLayout(fileTree);
                        const layout = (_api, _modName, fileTree, layoutType, layoutMatcher) => {
                            if (!layoutMatcher(fileTree)) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allProvidedFiles = (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree);
                            const fileInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allProvidedFiles);
                            return {
                                kind: layoutType,
                                instructions: fileInstructions,
                            };
                        };
                        const coreRedscriptLayout = (_api, _modName, fileTree) => layout(_api, _modName, fileTree, installers_layouts_1.CoreRedscriptLayout.OnlyValid, detectCoreRedscriptLayout);
                        const deprecatedCoreRedscriptLayout = (_api, _modName, fileTree) => layout(_api, _modName, fileTree, installers_layouts_1.CoreRedscriptLayout.Deprecated, detectDeprecatedCoreRedscriptLayout);
                        const testForCoreRedscript = (_api, fileTree) => Promise.resolve({
                            supported: detectCoreRedscript(fileTree),
                            requiredFiles: [],
                        });
                        exports.testForCoreRedscript = testForCoreRedscript;
                        const installCoreRedscript = async (api, fileTree, _modInfo, _features) => {
                            const me = installers_types_1.InstallerType.CoreRedscript;
                            const allPossibleCoreRedscriptLayouts = [
                                coreRedscriptLayout,
                                deprecatedCoreRedscriptLayout,
                            ];
                            const selectedInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, undefined, fileTree, allPossibleCoreRedscriptLayouts);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                const errorMessage = `Didn't Find Expected Core Redscript Installation!`;
                                api.log(`error`, `${me}: ${errorMessage}`, (0, filetree_1.sourcePaths)(fileTree));
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, me, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(errorMessage);
                            }
                            if (selectedInstructions.kind === installers_layouts_1.CoreRedscriptLayout.Deprecated) {
                                const infoMessage = `Deprecated Core Redscript version! Prompting user to install or cancel.`;
                                api.log(`info`, `${me}: ${infoMessage}`);
                                const userDecision = await (0, ui_dialogs_1.promptUserToInstallOrCancelOnDeprecatedCoreMod)(api, me, (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree));
                                if (userDecision === installers_types_1.InstallDecision.UserWantsToCancel) {
                                    const cancelMessage = `${me}: user chose to cancel installing deprecated version`;
                                    api.log(`warn`, cancelMessage);
                                    return Promise.reject(new Error(cancelMessage));
                                }
                                api.log(`info`, `${me}: User confirmed installing deprecated version`);
                            }
                            return {
                                instructions: selectedInstructions.instructions,
                            };
                        };
                        exports.installCoreRedscript = installCoreRedscript;


                        /***/
                    }),

/***/ "./src/installer.core.ts":
/*!*******************************!*\
  !*** ./src/installer.core.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installCetCore = exports.testForCetCore = void 0;
                        const path_1 = __webpack_require__(/*! path */ "path");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const path = path_1.win32;
                        const CET_CORE_IDENTIFIERS = [path.normalize(`bin/x64/plugins/cyber_engine_tweaks.asi`)];
                        const testForCetCore = (_api, fileTree) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            const containsAllNecessaryCetFiles = CET_CORE_IDENTIFIERS.every((cetPath) => files.includes(cetPath));
                            return Promise.resolve({
                                supported: containsAllNecessaryCetFiles,
                                requiredFiles: [],
                            });
                        };
                        exports.testForCetCore = testForCetCore;
                        const installCetCore = (_api, fileTree, _modInfo, _features) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            const instructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(files);
                            return Promise.resolve({ instructions });
                        };
                        exports.installCetCore = installCetCore;


                        /***/
                    }),

/***/ "./src/installer.fallback.ts":
/*!***********************************!*\
  !*** ./src/installer.fallback.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installFallback = exports.testForFallback = exports.promptToFallbackOrFailOnUnresolvableLayout = exports.useFallbackOrFail = exports.fallbackLayout = exports.detectFallbackLayout = exports.findFallbackFiles = void 0;
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        const findFallbackFiles = (fileTree) => (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree);
                        exports.findFallbackFiles = findFallbackFiles;
                        const detectFallbackLayout = (_fileTree) => true;
                        exports.detectFallbackLayout = detectFallbackLayout;
                        const fallbackLayout = (_api, _modName, fileTree) => {
                            if (!(0, exports.detectFallbackLayout)(fileTree)) {
                                throw new Error(`Should never get here`);
                            }
                            const allTheFiles = (0, exports.findFallbackFiles)(fileTree);
                            return {
                                kind: installers_layouts_1.FallbackLayout.Unvalidated,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allTheFiles),
                            };
                        };
                        exports.fallbackLayout = fallbackLayout;
                        const useFallbackOrFail = (api, installerType, fileTree, installDecision) => {
                            switch (installDecision) {
                                case installers_types_1.InstallDecision.UserWantsToCancel: {
                                    const message = `${installerType}: user chose to cancel installation`;
                                    api.log(`info`, message);
                                    api.log(`debug`, `Input files: `, (0, filetree_1.sourcePaths)(fileTree));
                                    return Promise.reject(new Error(message));
                                }
                                case installers_types_1.InstallDecision.UserWantsToProceed: {
                                    api.log(`info`, `${installerType}: user chose to continue installation`);
                                    api.log(`info`, `${installerType}: using fallback layout to install everything`);
                                    const fallbackInstructions = (0, exports.fallbackLayout)(api, undefined, fileTree);
                                    if (fallbackInstructions === installers_layouts_1.InvalidLayout.Conflict ||
                                        fallbackInstructions === installers_layouts_1.NoInstructions.NoMatch) {
                                        return Promise.reject(new Error(`Fallback layout failed, should never get here: ${fallbackInstructions}`));
                                    }
                                    api.log(`info`, `${installerType}: instructions generated by fallback installer`);
                                    api.log(`debug`, `Instructions`, fallbackInstructions.instructions);
                                    return Promise.resolve({
                                        instructions: fallbackInstructions.instructions,
                                    });
                                }
                                default: {
                                    return (0, util_functions_1.exhaustiveMatchFailure)(installDecision);
                                }
                            }
                        };
                        exports.useFallbackOrFail = useFallbackOrFail;
                        const promptToFallbackOrFailOnUnresolvableLayout = async (api, installerType, fileTree) => {
                            const installDecision = await (0, ui_dialogs_1.promptUserOnUnresolvableLayout)(api, installerType, (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree));
                            return (0, exports.useFallbackOrFail)(api, installerType, fileTree, installDecision);
                        };
                        exports.promptToFallbackOrFailOnUnresolvableLayout = promptToFallbackOrFailOnUnresolvableLayout;
                        const testForFallback = (_api, _fileTree) => Promise.resolve({
                            supported: true,
                            requiredFiles: [],
                        });
                        exports.testForFallback = testForFallback;
                        const installFallback = async (api, fileTree, _modInfo, _features) => {
                            const installDecision = await (0, ui_dialogs_1.promptUserToInstallOrCancelOnReachingFallback)(api, (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree));
                            return (0, exports.useFallbackOrFail)(api, installers_types_1.InstallerType.Fallback, fileTree, installDecision);
                        };
                        exports.installFallback = installFallback;


                        /***/
                    }),

/***/ "./src/installer.multitype.ts":
/*!************************************!*\
  !*** ./src/installer.multitype.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installMultiTypeMod = exports.testForMultiTypeMod = void 0;
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installer_archive_1 = __webpack_require__(/*! ./installer.archive */ "./src/installer.archive.ts");
                        const installer_cet_1 = __webpack_require__(/*! ./installer.cet */ "./src/installer.cet.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const installer_red4ext_1 = __webpack_require__(/*! ./installer.red4ext */ "./src/installer.red4ext.ts");
                        const installer_redscript_1 = __webpack_require__(/*! ./installer.redscript */ "./src/installer.redscript.ts");
                        const installer_audioware_1 = __webpack_require__(/*! ./installer.audioware */ "./src/installer.audioware.ts");
                        const installer_tweak_xl_1 = __webpack_require__(/*! ./installer.tweak-xl */ "./src/installer.tweak-xl.ts");
                        const installer_config_xml_1 = __webpack_require__(/*! ./installer.config.xml */ "./src/installer.config.xml.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        const installer_config_json_1 = __webpack_require__(/*! ./installer.config.json */ "./src/installer.config.json.ts");
                        const features_1 = __webpack_require__(/*! ./features */ "./src/features.ts");
                        const installer_redmod_1 = __webpack_require__(/*! ./installer.redmod */ "./src/installer.redmod.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const testForMultiTypeMod = (api, fileTree) => {
                            const hasCanonCet = (0, installer_cet_1.detectCetCanonLayout)(fileTree);
                            const hasCanonRed4Ext = (0, installer_red4ext_1.detectRed4ExtCanonOnlyLayout)(fileTree);
                            const hasBasedirRed4Ext = (0, installer_red4ext_1.detectRed4ExtBasedirLayout)(fileTree);
                            const hasAllowedREDmods = (0, installer_redmod_1.detectAllowedREDmodLayoutsForMultitype)(fileTree);
                            const hasAllowedRedscript = (0, installer_redscript_1.detectAllowedRedscriptLayouts)(fileTree);
                            const hasAllowedConfigJson = (0, installer_config_json_1.detectAllowedConfigJsonLayouts)(fileTree);
                            const hasAllowedConfigXml = (0, installer_config_xml_1.detectAllowedConfigXmlLayouts)(fileTree);
                            const hasAllowedTweakXL = (0, installer_tweak_xl_1.detectAllowedTweakXLLayouts)(fileTree);
                            const hasAllowedAudioware = (0, installer_audioware_1.detectAllowedAudiowareLayouts)(fileTree);
                            const hasAllowedArchives = (0, installer_archive_1.detectCanonArchiveLayoutsAllowedExternally)(fileTree);
                            const hasAtLeastTwoTypes = [
                                hasAllowedArchives,
                                hasAllowedConfigJson,
                                hasAllowedConfigXml,
                                hasCanonCet,
                                hasAllowedREDmods,
                                hasAllowedRedscript,
                                hasCanonRed4Ext,
                                hasBasedirRed4Ext,
                                hasAllowedTweakXL,
                            ].filter(util_functions_1.trueish).length > 1;
                            if (!hasAtLeastTwoTypes) {
                                api.log(`debug`, `${installers_types_1.InstallerType.MultiType}: no multitype match`);
                                return Promise.resolve({ supported: false, requiredFiles: [] });
                            }
                            api.log(`info`, `${installers_types_1.InstallerType.MultiType}: found multiple mod types to handle`);
                            return Promise.resolve({
                                supported: true,
                                requiredFiles: [],
                            });
                        };
                        exports.testForMultiTypeMod = testForMultiTypeMod;
                        const installMultiTypeMod = async (api, fileTree, modInfo, features) => {
                            const me = installers_types_1.InstallerType.MultiType;
                            const promptableLayouts = [
                                installer_config_json_1.configJsonAllowedInMultiInstructions,
                                installer_config_xml_1.configXmlAllowedInMultiInstructions,
                            ];
                            let promptedInstructionsPerLayout = [];
                            for (const layoutToTry of promptableLayouts) {
                                const maybeInstructions = await layoutToTry(api, fileTree);
                                if (maybeInstructions === installers_layouts_1.NotAllowed.CanceledByUser) {
                                    const cancelMessage = `${me}: user has canceled installation for some part of this mod. Can't proceed safely, canceling entirely.`;
                                    api.log(`error`, cancelMessage);
                                    return Promise.reject(new Error(cancelMessage));
                                }
                                promptedInstructionsPerLayout = [...promptedInstructionsPerLayout, maybeInstructions];
                            }
                            const allPromptedInstructions = promptedInstructionsPerLayout.flatMap((result) => result.instructions);
                            const allInstructionSets = [
                                installer_cet_1.cetCanonLayout,
                                installer_red4ext_1.red4extBasedirLayout,
                                installer_red4ext_1.red4extCanonLayout,
                            ];
                            const allInstructionsPerLayout = (0, installers_shared_1.useAllMatchingLayouts)(api, modInfo.name, fileTree, allInstructionSets);
                            const allInstructionsDirectedByUs = allInstructionsPerLayout.flatMap((result) => result.instructions);
                            const tweakXLInstructions = (0, installer_tweak_xl_1.tweakXLAllowedInMultiInstructions)(api, fileTree);
                            const audiowareInstructions = (0, installer_audioware_1.audiowareAllowedInMultiInstructions)(api, fileTree);
                            const redscriptInstructions = (0, installer_redscript_1.redscriptAllowedInMultiInstructions)(api, modInfo.name, fileTree);
                            const maybeREDmodInstructions = await (0, installer_redmod_1.redmodAllowedInstructionsForMultitype)(api, fileTree, modInfo, features);
                            if ((0, Either_1.isLeft)(maybeREDmodInstructions)) {
                                const errorMessage = `${me}: REDmod instructions failed, canceling installation: ${maybeREDmodInstructions.left}`;
                                (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.MultiType, `Can't Install MultiType Mod when the REDmod Part Fails!`, (0, filetree_1.sourcePaths)(fileTree));
                                api.log(`error`, errorMessage);
                                return Promise.reject(new Error(errorMessage));
                            }
                            const enforceTagWhenREDmodPresentToAvoidConflict = !(0, ReadonlyArray_1.isEmpty)(maybeREDmodInstructions.right)
                                ? { ...features, REDmodAutoconversionTag: features_1.FeatureState.Enabled }
                                : features;
                            const archiveInstructions = await (0, installer_archive_1.archiveCanonInstructionsAllowedForMultiType)(api, fileTree, modInfo, enforceTagWhenREDmodPresentToAvoidConflict);
                            const archiveAndREDmodInstructions = (0, installer_redmod_1.consolidateREDmodInstructionsForMultiType)(api, archiveInstructions.instructions, maybeREDmodInstructions.right);
                            const allInstructions = [
                                ...allPromptedInstructions,
                                ...allInstructionsDirectedByUs,
                                ...tweakXLInstructions.instructions,
                                ...audiowareInstructions.instructions,
                                ...redscriptInstructions.instructions,
                                ...archiveAndREDmodInstructions,
                            ];
                            if (allInstructions.length < 1) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.MultiType, fileTree);
                            }
                            api.log(`info`, `${installers_types_1.InstallerType.MultiType}: installing`);
                            api.log(`debug`, `${installers_types_1.InstallerType.MultiType}: instructions:`, allInstructions);
                            return Promise.resolve({ instructions: allInstructions });
                        };
                        exports.installMultiTypeMod = installMultiTypeMod;


                        /***/
                    }),

/***/ "./src/installer.preset.ts":
/*!*********************************!*\
  !*** ./src/installer.preset.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installPresetMod = exports.testForPresetMod = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const A = __importStar(__webpack_require__(/*! fp-ts/Array */ "./node_modules/fp-ts/es6/Array.js"));
                        const E = __importStar(__webpack_require__(/*! fp-ts/Either */ "./node_modules/fp-ts/es6/Either.js"));
                        const J = __importStar(__webpack_require__(/*! fp-ts/Json */ "./node_modules/fp-ts/es6/Json.js"));
                        const O = __importStar(__webpack_require__(/*! fp-ts/Option */ "./node_modules/fp-ts/es6/Option.js"));
                        const Option_1 = __webpack_require__(/*! fp-ts/Option */ "./node_modules/fp-ts/es6/Option.js");
                        const T = __importStar(__webpack_require__(/*! fp-ts/Task */ "./node_modules/fp-ts/es6/Task.js"));
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const matchPresetExt = (filePath) => path_1.default.extname(filePath) === installers_layouts_1.PRESET_MOD_EXTENSION;
                        const findPresetCanonCyberCatFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.PRESET_MOD_CYBERCAT_BASEDIR, matchPresetExt, fileTree);
                        const findPresetCanonUnlockerFiles = (fileTree) => [
                            ...(0, filetree_1.filesIn)(installers_layouts_1.PRESET_MOD_UNLOCKER_FEMDIR, matchPresetExt, fileTree),
                            ...(0, filetree_1.filesIn)(installers_layouts_1.PRESET_MOD_UNLOCKER_MASCDIR, matchPresetExt, fileTree),
                        ];
                        const findPresetFilesIn = (dir, fileTree) => (0, filetree_1.filesIn)(dir, matchPresetExt, fileTree);
                        const detectPresetLayout = (fileTree) => (0, filetree_1.dirWithSomeUnder)(filetree_1.FILETREE_ROOT, matchPresetExt, fileTree);
                        const canonPrefixedPathByTypeIfActualPresetMod = (file) => {
                            const cyberCatJsonMatcher = (keysInData) => (keysInData.length >= installers_layouts_1.PRESET_MOD_CYBERCAT_REQUIRED_KEYS.length &&
                                installers_layouts_1.PRESET_MOD_CYBERCAT_REQUIRED_KEYS.every((key) => keysInData.includes(key))
                                ? (0, Option_1.some)((0, installers_shared_1.fileMove)(installers_layouts_1.PRESET_MOD_CYBERCAT_BASEDIR, file))
                                : Option_1.none);
                            const unlockerStringContentMatcherFem = () => (installers_layouts_1.PRESET_MOD_UNLOCKER_REQUIRED_MATCHES_FEM_MUST_MATCH_FIRST.every((required) => file.content.match(required))
                                ? (0, Option_1.some)((0, installers_shared_1.fileMove)(installers_layouts_1.PRESET_MOD_UNLOCKER_FEMDIR, file))
                                : Option_1.none);
                            const unlockerStringContentMatcherMasc = () => (installers_layouts_1.PRESET_MOD_UNLOCKER_REQUIRED_MATCHES_MASC.every((required) => file.content.match(required))
                                ? (0, Option_1.some)((0, installers_shared_1.fileMove)(installers_layouts_1.PRESET_MOD_UNLOCKER_MASCDIR, file))
                                : Option_1.none);
                            const maybeRealPreset = (0, function_1.pipe)(J.parse(file.content), E.map(Object.keys), E.map(cyberCatJsonMatcher), E.getOrElse(unlockerStringContentMatcherFem), O.alt(unlockerStringContentMatcherMasc));
                            return maybeRealPreset;
                        };
                        const presetInstructionsFromDecodingUnknownPresets = async (layoutTypeIfMatch, installingDir, dir, fileTree) => {
                            const allCandidates = await (0, function_1.pipe)(findPresetFilesIn(dir, fileTree), A.traverse(T.ApplicativePar)((filePath) => (0, installers_shared_1.fileFromDisk)({
                                pathOnDisk: path_1.default.join(installingDir, filePath),
                                relativePath: filePath,
                            })))();
                            const presetInstructions = (0, function_1.pipe)(allCandidates, A.filterMap(canonPrefixedPathByTypeIfActualPresetMod), A.map(installers_shared_1.fileToInstruction));
                            if (presetInstructions.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            if (presetInstructions.length !== allCandidates.length) {
                                return installers_layouts_1.InvalidLayout.Conflict;
                            }
                            return {
                                kind: layoutTypeIfMatch,
                                instructions: presetInstructions,
                            };
                        };
                        const presetCanonCyberCatLayout = (_api, _modName, fileTree) => {
                            const allCanonPresetCyberCatFiles = findPresetCanonCyberCatFiles(fileTree);
                            if (allCanonPresetCyberCatFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const presetCanonCyberCatInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonPresetCyberCatFiles);
                            return {
                                kind: installers_layouts_1.PresetLayout.CyberCAT,
                                instructions: presetCanonCyberCatInstructions,
                            };
                        };
                        const presetCanonUnlockerLayout = (_api, _modName, fileTree) => {
                            const allCanonPresetUnlockerFiles = findPresetCanonUnlockerFiles(fileTree);
                            if (allCanonPresetUnlockerFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const presetCanonUnlockerInstructions = (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonPresetUnlockerFiles);
                            return {
                                kind: installers_layouts_1.PresetLayout.Unlocker,
                                instructions: presetCanonUnlockerInstructions,
                            };
                        };
                        const presetLegacyUnlockerLayout = async (_api, _modName, fileTree, installingDir) => presetInstructionsFromDecodingUnknownPresets(installers_layouts_1.PresetLayout.ACLegacy, installingDir, installers_layouts_1.PRESET_MOD_UNLOCKER_BASEDIR, fileTree);
                        const presetToplevelLayout = async (_api, _modName, fileTree, installingDir) => presetInstructionsFromDecodingUnknownPresets(installers_layouts_1.PresetLayout.Toplevel, installingDir, filetree_1.FILETREE_ROOT, fileTree);
                        const testForPresetMod = async (_api, fileTree) => ({
                            supported: detectPresetLayout(fileTree),
                            requiredFiles: [],
                        });
                        exports.testForPresetMod = testForPresetMod;
                        const installPresetMod = async (api, fileTree, modInfo, _features) => {
                            const selectedInstructions = await (0, installers_shared_1.useFirstMatchingLayoutForInstructionsAsync)(api, undefined, fileTree, modInfo.installingDir.pathOnDisk, [
                                presetCanonCyberCatLayout,
                                presetCanonUnlockerLayout,
                                presetLegacyUnlockerLayout,
                                presetToplevelLayout,
                            ]);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch ||
                                selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.Preset, fileTree);
                            }
                            return Promise.resolve({
                                instructions: selectedInstructions.instructions,
                            });
                        };
                        exports.installPresetMod = installPresetMod;


                        /***/
                    }),

/***/ "./src/installer.red4ext.ts":
/*!**********************************!*\
  !*** ./src/installer.red4ext.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.installRed4ExtMod = exports.testForRed4ExtMod = exports.red4extCanonLayout = exports.detectRed4ExtCanonOnlyLayout = exports.red4extBasedirLayout = exports.detectRed4ExtBasedirLayout = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const matchDll = (file) => path_1.default.extname(file) === `.dll`;
                        const reservedDllDir = (dir) => installers_layouts_1.RED4EXT_KNOWN_NONOVERRIDABLE_DLL_DIRS.includes(path_1.default.join(dir, path_1.default.sep));
                        const reservedDllName = (file) => installers_layouts_1.RED4EXT_KNOWN_NONOVERRIDABLE_DLLS.includes(path_1.default.join(file));
                        const findBasedirRed4ExtFiles = (fileTree) => (0, filetree_1.filesUnder)(installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR, filetree_1.Glob.Any, fileTree);
                        const detectRed4ExtBasedirLayout = (fileTree) => (0, filetree_1.dirWithSomeIn)(installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR, matchDll, fileTree);
                        exports.detectRed4ExtBasedirLayout = detectRed4ExtBasedirLayout;
                        const red4extBasedirLayout = (_api, modName, fileTree) => {
                            const hasBasedirFiles = (0, exports.detectRed4ExtBasedirLayout)(fileTree);
                            if (!hasBasedirFiles) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allFilesUnderBase = findBasedirRed4ExtFiles(fileTree);
                            const canonicalModnamedPath = path_1.default.join(installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR, modName, path_1.default.sep);
                            const allFromBaseToModname = allFilesUnderBase.map((0, installers_shared_1.moveFromTo)(installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR, canonicalModnamedPath));
                            return {
                                kind: installers_layouts_1.Red4ExtLayout.Basedir,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(allFromBaseToModname),
                            };
                        };
                        exports.red4extBasedirLayout = red4extBasedirLayout;
                        const findCanonicalRed4ExtDirs = (fileTree) => (0, filetree_1.findDirectSubdirsWithSome)(installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR, matchDll, fileTree);
                        const detectRed4ExtCanonOnlyLayout = (fileTree) => !(0, exports.detectRed4ExtBasedirLayout)(fileTree) && findCanonicalRed4ExtDirs(fileTree).length > 0;
                        exports.detectRed4ExtCanonOnlyLayout = detectRed4ExtCanonOnlyLayout;
                        const red4extCanonLayout = (api, _modName, fileTree) => {
                            const hasCanonFiles = (0, exports.detectRed4ExtCanonOnlyLayout)(fileTree);
                            if (!hasCanonFiles) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const hasBasedirReds = (0, exports.detectRed4ExtBasedirLayout)(fileTree);
                            if (hasBasedirReds) {
                                api.log(`debug`, `No instructions from canon: basedir overrides`);
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allCanonFiles = (0, filetree_1.filesUnder)(installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR, filetree_1.Glob.Any, fileTree);
                            return {
                                kind: installers_layouts_1.Red4ExtLayout.Canon,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonFiles),
                            };
                        };
                        exports.red4extCanonLayout = red4extCanonLayout;
                        const red4extToplevelLayout = (_api, modName, fileTree) => {
                            const toplevelFiles = (0, filetree_1.filesIn)(filetree_1.FILETREE_ROOT, matchDll, fileTree);
                            if (toplevelFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allTheFilesEverywhere = (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree);
                            const canonicalModnamedPath = path_1.default.join(installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR, modName);
                            const allFilesToCanon = allTheFilesEverywhere.map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, canonicalModnamedPath));
                            return {
                                kind: installers_layouts_1.Red4ExtLayout.Toplevel,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(allFilesToCanon),
                            };
                        };
                        const red4extModnamedToplevelLayout = (_api, _modName, fileTree) => {
                            const toplevelSubdirsWithFiles = (0, filetree_1.findDirectSubdirsWithSome)(filetree_1.FILETREE_ROOT, matchDll, fileTree);
                            if (toplevelSubdirsWithFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            if (toplevelSubdirsWithFiles.length > 1) {
                                return installers_layouts_1.InvalidLayout.Conflict;
                            }
                            const allToBasedirWithSubdirAsModname = toplevelSubdirsWithFiles.flatMap((dir) => (0, filetree_1.filesUnder)(dir, filetree_1.Glob.Any, fileTree).map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, installers_layouts_1.RED4EXT_MOD_CANONICAL_BASEDIR)));
                            return {
                                kind: installers_layouts_1.Red4ExtLayout.Modnamed,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(allToBasedirWithSubdirAsModname),
                            };
                        };
                        const testForRed4ExtMod = (api, fileTree) => {
                            const allDllSubdirs = (0, filetree_1.findAllSubdirsWithSome)(filetree_1.FILETREE_ROOT, matchDll, fileTree);
                            const toplevelDlls = (0, filetree_1.filesIn)(filetree_1.FILETREE_ROOT, matchDll, fileTree);
                            const noDllDirs = allDllSubdirs.length < 1;
                            const noToplevelDlls = toplevelDlls.length < 1;
                            if ((0, filetree_1.pathInTree)(installers_layouts_1.RED4EXT_CORE_RED4EXT_DLL, fileTree)) {
                                return Promise.resolve({ supported: false, requiredFiles: [] });
                            }
                            if (noDllDirs && noToplevelDlls) {
                                return Promise.resolve({ supported: false, requiredFiles: [] });
                            }
                            const dangerPaths = [
                                ...allDllSubdirs.filter(reservedDllDir),
                                ...toplevelDlls.filter(reservedDllName),
                            ];
                            if (dangerPaths.length !== 0) {
                                const message = `Red4Ext Mod Installation Canceled, Dangerous DLL paths!`;
                                api.log(`error`, message, dangerPaths);
                                (0, ui_dialogs_1.showRed4ExtReservedDllErrorDialog)(api, message, dangerPaths);
                                return Promise.reject(new Error(message));
                            }
                            return Promise.resolve({ supported: true, requiredFiles: [] });
                        };
                        exports.testForRed4ExtMod = testForRed4ExtMod;
                        const installRed4ExtMod = (api, fileTree, modInfo, _features) => {
                            const possibleLayoutsToTryInOrder = [
                                exports.red4extBasedirLayout,
                                exports.red4extCanonLayout,
                                red4extToplevelLayout,
                                red4extModnamedToplevelLayout,
                            ];
                            const chosenInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, modInfo.name, fileTree, possibleLayoutsToTryInOrder);
                            if (chosenInstructions === installers_layouts_1.NoInstructions.NoMatch) {
                                const message = `Red4Ext installer failed to generate any instructions!`;
                                api.log(`error`, message, (0, filetree_1.sourcePaths)(fileTree));
                                return Promise.reject(new Error(message));
                            }
                            if (chosenInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.Red4Ext, fileTree);
                            }
                            const allInstructions = chosenInstructions.instructions;
                            api.log(`info`, `Red4Ext installer installing files.`);
                            api.log(`debug`, `Red4Ext instructions: `, allInstructions);
                            return Promise.resolve({ instructions: allInstructions });
                        };
                        exports.installRed4ExtMod = installRed4ExtMod;


                        /***/
                    }),

/***/ "./src/installer.redmod.ts":
/*!*********************************!*\
  !*** ./src/installer.redmod.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.consolidateREDmodInstructionsForMultiType = exports.transformToREDmodArchiveInstructions = exports.redmodAllowedInstructionsForMultitype = exports.detectAllowedREDmodLayoutsForMultitype = exports.installREDmod = exports.testForREDmod = exports.instructionsForLayoutsPipeline = exports.detectREDmodLayout = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const Predicate_1 = __webpack_require__(/*! fp-ts/lib/Predicate */ "./node_modules/fp-ts/lib/Predicate.js");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/ReadonlyArray */ "./node_modules/fp-ts/es6/ReadonlyArray.js");
                        const TaskEither_1 = __webpack_require__(/*! fp-ts/lib/TaskEither */ "./node_modules/fp-ts/lib/TaskEither.js");
                        const J = __importStar(__webpack_require__(/*! fp-ts/lib/Json */ "./node_modules/fp-ts/lib/Json.js"));
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const string_1 = __webpack_require__(/*! fp-ts/lib/string */ "./node_modules/fp-ts/lib/string.js");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const features_1 = __webpack_require__(/*! ./features */ "./src/features.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        const ui_notifications_1 = __webpack_require__(/*! ./ui.notifications */ "./src/ui.notifications.ts");
                        const me = `${installers_types_1.InstallerType.REDmod}`;
                        const transMe = `${installers_types_1.InstallerType.SpecialREDmodAutoconversion}`;
                        const fixAnyInfoJsonProblems = (modInfo) => (redmodInfo) => (0, Either_1.right)({
                            ...redmodInfo,
                            version: redmodInfo.version && redmodInfo.version !== `` ? redmodInfo.version : modInfo.version.v,
                        });
                        const readInfoJsonFromDisk = (modInfo, relativeREDmodDir) => (0, function_1.pipe)((0, installers_shared_1.fileFromDiskTE)({
                            pathOnDisk: path_1.default.join(modInfo.installingDir.pathOnDisk, relativeREDmodDir, installers_layouts_1.REDMOD_INFO_FILENAME),
                            relativePath: path_1.default.join(relativeREDmodDir, installers_layouts_1.REDMOD_INFO_FILENAME),
                        }), (0, TaskEither_1.chainEitherKW)((file) => (0, function_1.pipe)(file.content, J.parse, (0, Either_1.chain)(installers_types_1.decodeREDmodInfo))), (0, TaskEither_1.mapLeft)((err) => new Error(`Error decoding ${path_1.default.join(relativeREDmodDir, installers_layouts_1.REDMOD_INFO_FILENAME)}: ${err}`)));
                        const instructionsToMoveAllFromSourceToDestination = (sourceDirPrefix, destinationDirPrefix, files) => (0, function_1.pipe)(files, (0, ReadonlyArray_1.map)((0, installers_shared_1.moveFromTo)(sourceDirPrefix, destinationDirPrefix)), installers_shared_1.instructionsForSourceToDestPairs);
                        const matchREDmodInfoJson = (p) => (0, filetree_1.pathEq)(installers_layouts_1.REDMOD_INFO_FILENAME)(path_1.default.basename(p));
                        const matchREDmodArchive = (p) => (0, filetree_1.pathIn)(installers_layouts_1.REDMOD_ARCHIVES_VALID_EXTENSIONS)(path_1.default.extname(p));
                        const matchREDmodCustomSound = (p) => (0, filetree_1.pathIn)(installers_layouts_1.REDMOD_CUSTOMSOUNDS_VALID_EXTENSIONS)(path_1.default.extname(p));
                        const matchREDmodScript = (p) => (0, filetree_1.pathIn)(installers_layouts_1.REDMOD_SCRIPTS_VALID_EXTENSIONS)(path_1.default.extname(p));
                        const matchREDmodTweak = (p) => (0, filetree_1.pathIn)(installers_layouts_1.REDMOD_TWEAKS_VALID_EXTENSIONS)(path_1.default.extname(p));
                        const matchAnyREDmodSubtypeDir = (fileTree) => (inDir) => (0, function_1.pipe)((0, filetree_1.subdirNamesIn)(inDir, fileTree), (0, ReadonlyArray_1.some)((0, filetree_1.pathIn)(installers_layouts_1.REDMOD_SUBTYPE_DIRNAMES)));
                        const findCanonicalREDmodDirs = (fileTree) => (0, filetree_1.findDirectSubdirsWithSome)(installers_layouts_1.REDMOD_BASEDIR, matchREDmodInfoJson, fileTree);
                        const findNamedREDmodDirs = (fileTree) => (0, function_1.pipe)((0, filetree_1.findDirectSubdirsWithSome)(filetree_1.FILETREE_ROOT, matchREDmodInfoJson, fileTree), (0, ReadonlyArray_1.filter)(matchAnyREDmodSubtypeDir(fileTree)));
                        const detectCanonREDmodLayout = (fileTree) => (0, filetree_1.dirInTree)(installers_layouts_1.REDMOD_BASEDIR, fileTree);
                        const detectNamedREDmodLayout = (fileTree) => findNamedREDmodDirs(fileTree).length > 0;
                        const detectToplevelREDmodLayout = (fileTree) => (0, filetree_1.dirWithSomeIn)(filetree_1.FILETREE_ROOT, matchREDmodInfoJson, fileTree)
                            && matchAnyREDmodSubtypeDir(fileTree)(filetree_1.FILETREE_ROOT);
                        const detectREDmodLayout = (fileTree) => detectCanonREDmodLayout(fileTree)
                            || detectNamedREDmodLayout(fileTree)
                            || detectToplevelREDmodLayout(fileTree);
                        exports.detectREDmodLayout = detectREDmodLayout;
                        const splitCanonREDmodsIfTheresMultiple = (fileTree) => {
                            const allValidCanonicalREDmodDirs = findCanonicalREDmodDirs(fileTree);
                            const allREDmodLookingDirs = (0, filetree_1.subdirsIn)(installers_layouts_1.REDMOD_BASEDIR, fileTree);
                            const invalidDirs = (0, function_1.pipe)(allREDmodLookingDirs, (0, ReadonlyArray_1.filter)((0, Predicate_1.not)((0, filetree_1.pathIn)(allValidCanonicalREDmodDirs))));
                            if (invalidDirs.length > 0) {
                                return (0, Either_1.left)(new Error(`${installers_types_1.InstallerType.REDmod}: Canon Layout: these directories don't look like valid REDmods: ${invalidDirs.join(`, `)}`));
                            }
                            return (0, Either_1.right)(allValidCanonicalREDmodDirs);
                        };
                        const splitNamedREDmodsIfTheresMultiple = (fileTree) => (0, Either_1.right)(findNamedREDmodDirs(fileTree));
                        const collectPathDetesForInstructions = (relativeSourceDir, redmodInfo, fileTree) => (0, Either_1.right)({
                            redmodInfo,
                            relativeSourceDir,
                            relativeDestDir: path_1.default.join(installers_layouts_1.REDMOD_BASEDIR, redmodInfo.name),
                            fileTree,
                        });
                        const fixDotsInDirname = (0, function_1.flow)((0, string_1.replace)(/\./g, `_`));
                        const sanitizePathDetesForREDmodding = (redmodInfoAndPathDetes) => (0, Either_1.right)({
                            ...redmodInfoAndPathDetes,
                            relativeDestDir: fixDotsInDirname(redmodInfoAndPathDetes.relativeDestDir),
                        });
                        const returnInstructionsAndLogEtc = (_api, _fileTree, _modInfo, _features, instructions) => Promise.resolve({ instructions: (0, ReadonlyArray_1.toArray)(instructions) });
                        const failAfterWarningUserAndLogging = (api, fileTree, modInfo, features, error) => {
                            const errorMessage = `Didn't Find Expected REDmod Installation!`;
                            api.log(`error`, `${me}: ${errorMessage} Error: ${error.message}`, (0, filetree_1.sourcePaths)(fileTree));
                            (0, ui_dialogs_1.showWarningForUnrecoverableStructureError)(api, installers_types_1.InstallerType.REDmod, errorMessage, (0, filetree_1.sourcePaths)(fileTree));
                            return Promise.reject(new Error(errorMessage));
                        };
                        const infoJsonLayoutAndValidation = (api, infoAndPaths, _modInfo) => (0, function_1.pipe)((0, Either_1.right)(infoAndPaths), (0, Either_1.map)(({ relativeSourceDir, relativeDestDir }) => instructionsToMoveAllFromSourceToDestination(relativeSourceDir, relativeDestDir, [path_1.default.join(relativeSourceDir, installers_layouts_1.REDMOD_INFO_FILENAME)])));
                        const archiveLayoutAndValidation = (api, { relativeSourceDir, relativeDestDir, fileTree, }, _modInfo) => {
                            const archiveDir = path_1.default.join(relativeSourceDir, installers_layouts_1.REDMOD_ARCHIVES_DIRNAME);
                            const correctlyPlacedArchiveFiles = (0, filetree_1.filesIn)(archiveDir, matchREDmodArchive, fileTree);
                            const allArchiveFilesInArchivePath = (0, filetree_1.filesUnder)(archiveDir, matchREDmodArchive, fileTree);
                            const hasArchivesInSubdirs = allArchiveFilesInArchivePath.length !== correctlyPlacedArchiveFiles.length;
                            const hasMultipleArchives = correctlyPlacedArchiveFiles.length > 1;
                            const hasXlWhichMeansMultipleArchivesShouldntBeAProblem = (0, function_1.pipe)(correctlyPlacedArchiveFiles, (0, ReadonlyArray_1.some)((archiveFile) => archiveFile.endsWith(installers_layouts_1.ARCHIVE_MOD_XL_EXTENSION)));
                            const hasPossiblyProblematicMultipleArchives = hasMultipleArchives && !hasXlWhichMeansMultipleArchivesShouldntBeAProblem;
                            if (hasArchivesInSubdirs || hasPossiblyProblematicMultipleArchives) {
                                api.log(`warn`, `Archive sublayout may require manual fixing, showing warning but continuing:`, { hasArchivesInSubdirs, hasMultipleArchives });
                                (0, ui_dialogs_1.showArchiveInstallWarning)(api, installers_types_1.InstallerType.REDmod, hasArchivesInSubdirs, hasMultipleArchives, false, allArchiveFilesInArchivePath);
                            }
                            const instructions = instructionsToMoveAllFromSourceToDestination(relativeSourceDir, relativeDestDir, allArchiveFilesInArchivePath);
                            return (0, Either_1.right)(instructions);
                        };
                        const customSoundLayoutAndValidation = (_api, { relativeSourceDir, relativeDestDir, fileTree, redmodInfo, }, _modInfo) => {
                            const customSoundsDir = path_1.default.join(relativeSourceDir, installers_layouts_1.REDMOD_CUSTOMSOUNDS_DIRNAME);
                            const allCustomSoundFiles = (0, filetree_1.filesUnder)(customSoundsDir, matchREDmodCustomSound, fileTree);
                            const infoJsonCustomSounds = redmodInfo.customSounds || [];
                            const infoJsonSkippedSounds = (0, function_1.pipe)(infoJsonCustomSounds, (0, ReadonlyArray_1.filter)((soundDecl) => soundDecl.type === `mod_skip`));
                            const infoJsonRequiresSoundFiles = infoJsonSkippedSounds.length !== infoJsonCustomSounds.length;
                            const hasSoundFiles = allCustomSoundFiles.length > 0;
                            if ((infoJsonRequiresSoundFiles && !hasSoundFiles)
                                || (!infoJsonRequiresSoundFiles && hasSoundFiles)) {
                                return (0, Either_1.left)(new Error(`customSounds sublayout: ${(0, util_functions_1.jsonp)({ soundFilesRequiredPresent: infoJsonRequiresSoundFiles, hasSoundFiles })}!`));
                            }
                            const fileInstructions = instructionsToMoveAllFromSourceToDestination(relativeSourceDir, relativeDestDir, allCustomSoundFiles);
                            const infoJsonHasSoundSpecButOnlySkipped = infoJsonCustomSounds.length > 0 && infoJsonSkippedSounds.length === infoJsonCustomSounds.length;
                            const customSoundsAllSkippedRequiresPlaceholder = infoJsonHasSoundSpecButOnlySkipped && fileInstructions.length < 1;
                            const instructions = customSoundsAllSkippedRequiresPlaceholder
                                ? (0, installers_shared_1.instructionsToGenerateDirs)([path_1.default.join(relativeDestDir, installers_layouts_1.REDMOD_CUSTOMSOUNDS_DIRNAME)])
                                : fileInstructions;
                            return (0, Either_1.right)(instructions);
                        };
                        const scriptLayoutAndValidation = (_api, { relativeSourceDir, relativeDestDir, fileTree, }, _modInfo) => {
                            const scriptsDir = path_1.default.join(relativeSourceDir, installers_layouts_1.REDMOD_SCRIPTS_DIRNAME);
                            const allScriptFiles = (0, filetree_1.filesUnder)(scriptsDir, matchREDmodScript, fileTree);
                            const allScriptFilesInValidBasedir = (0, function_1.pipe)(installers_layouts_1.REDMOD_SCRIPTS_VALID_SUBDIR_NAMES, (0, ReadonlyArray_1.map)((validScriptSubdir) => (0, filetree_1.filesUnder)(path_1.default.join(scriptsDir, validScriptSubdir), matchREDmodScript, fileTree)), ReadonlyArray_1.flatten);
                            if (allScriptFiles.length !== allScriptFilesInValidBasedir.length) {
                                const invalidScriptFiles = (0, function_1.pipe)(allScriptFiles, (0, ReadonlyArray_1.filter)((0, Predicate_1.not)((0, filetree_1.pathIn)(allScriptFilesInValidBasedir))));
                                return (0, Either_1.left)(new Error(`Script sublayout: these files don't look like valid REDmod scripts: ${invalidScriptFiles.join(`, `)}`));
                            }
                            const allInstructions = instructionsToMoveAllFromSourceToDestination(relativeSourceDir, relativeDestDir, allScriptFiles);
                            return (0, Either_1.right)(allInstructions);
                        };
                        const tweakLayoutAndValidation = (_api, { relativeSourceDir, relativeDestDir, fileTree, }, _modInfo) => {
                            const tweaksDir = path_1.default.join(relativeSourceDir, installers_layouts_1.REDMOD_TWEAKS_DIRNAME);
                            const allTweakFiles = (0, filetree_1.filesUnder)(tweaksDir, matchREDmodTweak, fileTree);
                            const allTweakFilesInValidBasedir = (0, function_1.pipe)(installers_layouts_1.REDMOD_TWEAKS_VALID_SUBDIRS, (0, ReadonlyArray_1.map)((validTweakSubdir) => (0, filetree_1.filesUnder)(path_1.default.join(tweaksDir, validTweakSubdir), matchREDmodTweak, fileTree)), ReadonlyArray_1.flatten);
                            if (allTweakFiles.length !== allTweakFilesInValidBasedir.length) {
                                const invalidTweakFiles = (0, function_1.pipe)(allTweakFiles, (0, ReadonlyArray_1.filter)((0, Predicate_1.not)((0, filetree_1.pathIn)(allTweakFilesInValidBasedir))));
                                return (0, Either_1.left)(new Error(`Tweak Layout: these files don't look like valid REDmod tweaks: ${invalidTweakFiles.join(`, `)}`));
                            }
                            const instructions = instructionsToMoveAllFromSourceToDestination(relativeSourceDir, relativeDestDir, allTweakFiles);
                            return (0, Either_1.right)(instructions);
                        };
                        const extraFilesLayoutAndValidation = (api, { relativeSourceDir, relativeDestDir, fileTree, }, _modInfo) => {
                            const filesInSubdirsNotHandled = (0, function_1.pipe)((0, filetree_1.subdirNamesIn)(relativeSourceDir, fileTree), (0, ReadonlyArray_1.filter)((0, Predicate_1.not)((0, filetree_1.pathIn)(installers_layouts_1.REDMOD_SUBTYPE_DIRNAMES))), (0, ReadonlyArray_1.map)((subdir) => (0, filetree_1.filesUnder)(path_1.default.join(relativeSourceDir, subdir), filetree_1.Glob.Any, fileTree)), ReadonlyArray_1.flatten);
                            const allRemainingFiles = [
                                ...(0, filetree_1.filesIn)(relativeSourceDir, (0, Predicate_1.not)(matchREDmodInfoJson), fileTree),
                                ...filesInSubdirsNotHandled,
                            ];
                            api.log(`info`, `Found some extra files in mod root, installing them too:`, allRemainingFiles);
                            const instructions = instructionsToMoveAllFromSourceToDestination(relativeSourceDir, relativeDestDir, allRemainingFiles);
                            return (0, Either_1.right)(instructions);
                        };
                        const redmodInfoModAttributeInstruction = (modInfo, detes) => {
                            const redmodInfoForVortex = {
                                name: detes.redmodInfo.name,
                                version: detes.redmodInfo.version,
                                relativePath: (0, filetree_1.normalizeDir)(detes.relativeDestDir),
                                vortexModId: modInfo.id,
                            };
                            const redmodInfoModAttribute = (0, installers_types_1.makeAttr)(installers_types_1.ModAttributeKey.REDmodInfo, redmodInfoForVortex);
                            return [(0, installers_shared_1.instructionToGenerateMetadataAttribute)(redmodInfoModAttribute)];
                        };
                        const gatherAllREDmodInfoModAttributesIntoOneInstruction = (instructions) => {
                            const { right: redmodInfoInstructions, left: otherInstructions } = (0, function_1.pipe)(instructions, (0, ReadonlyArray_1.partition)((instruction) => instruction.key === installers_types_1.ModAttributeKey.REDmodInfo));
                            const allREDmodInfosInstruction = (0, function_1.pipe)(redmodInfoInstructions, (0, ReadonlyArray_1.map)((instruction) => instruction.value.data), (redmodInfos) => (0, installers_types_1.makeAttr)(installers_types_1.ModAttributeKey.REDmodInfoArray, redmodInfos));
                            return [
                                ...otherInstructions,
                                (0, installers_shared_1.instructionToGenerateMetadataAttribute)(allREDmodInfosInstruction),
                            ];
                        };
                        const ensureModdedDirExistsInstruction = () => (0, installers_shared_1.instructionsToGenerateDirs)([installers_layouts_1.REDMOD_SCRIPTS_MODDED_DIR]);
                        const redmodModTypeModAttributeInstruction = () => [(0, installers_shared_1.instructionToGenerateMetadataAttribute)(installers_layouts_1.REDMOD_MODTYPE_ATTRIBUTE)];
                        const error = (message) => () => new Error(`${installers_types_1.InstallerType.REDmod}: ${message}`);
                        const canonLayoutModDirs = (0, function_1.flow)(splitCanonREDmodsIfTheresMultiple);
                        const namedLayoutModDirs = (0, function_1.flow)(splitNamedREDmodsIfTheresMultiple);
                        const toplevelLayoutDir = (_fileTree) => (0, Either_1.right)([filetree_1.FILETREE_ROOT]);
                        const canonLayoutMatches = (fileTree) => (detectCanonREDmodLayout(fileTree)
                            ? (0, Option_1.some)(canonLayoutModDirs)
                            : Option_1.none);
                        const namedLayoutMatches = (fileTree) => (detectNamedREDmodLayout(fileTree)
                            ? (0, Option_1.some)(namedLayoutModDirs)
                            : Option_1.none);
                        const toplevelLayoutMatches = (fileTree) => (detectToplevelREDmodLayout(fileTree)
                            ? (0, Option_1.some)(toplevelLayoutDir)
                            : Option_1.none);
                        const validateCompleteSingleREDmodInstructions = (_modInfo, redmodInfoAndPathDetes) => (instructions) => {
                            const destinations = (0, function_1.pipe)(instructions, (0, ReadonlyArray_1.map)((instruction) => (instruction.destination ? [instruction.destination] : [])), ReadonlyArray_1.flatten, ReadonlyArray_1.toArray);
                            const hasOneRequiredSubdir = (0, function_1.pipe)(destinations, filetree_1.fileTreeFromPaths, (fileTree) => (0, filetree_1.subdirNamesIn)(redmodInfoAndPathDetes.relativeDestDir, fileTree), (0, ReadonlyArray_1.some)((0, filetree_1.pathIn)(installers_layouts_1.REDMOD_SUBTYPE_DIRNAMES)));
                            const hasSpecialCaseCustomSoundsDirWhenOnlySkippingSounds = (0, function_1.pipe)(destinations, (0, ReadonlyArray_1.some)((0, filetree_1.pathEq)(path_1.default.join(redmodInfoAndPathDetes.relativeDestDir, installers_layouts_1.REDMOD_CUSTOMSOUNDS_DIRNAME))));
                            const looksGood = hasOneRequiredSubdir || hasSpecialCaseCustomSoundsDirWhenOnlySkippingSounds;
                            return looksGood
                                ? (0, Either_1.right)(instructions)
                                : (0, Either_1.left)(new Error(`REDmods require at least one mod file or placeholder in addition to an info.json, mod seems invalid based on these final instructions: ${(0, util_functions_1.S)({ instructions })}`));
                        };
                        const instructionsForLayoutsPipeline = (api, fileTree, modInfo, _features, allowedLayouts, readInfoJson = readInfoJsonFromDisk) => {
                            const singleModPipeline = (relativeModDir) => (0, function_1.pipe)(readInfoJson(modInfo, relativeModDir), (0, TaskEither_1.chainEitherKW)(fixAnyInfoJsonProblems(modInfo)), (0, TaskEither_1.chainEitherKW)((validREDmodInfo) => (0, function_1.pipe)(collectPathDetesForInstructions(relativeModDir, validREDmodInfo, fileTree), (0, Either_1.chain)(sanitizePathDetesForREDmodding), (0, Either_1.chain)((redmodInfoAndPathDetes) => (0, function_1.pipe)([
                                archiveLayoutAndValidation,
                                customSoundLayoutAndValidation,
                                scriptLayoutAndValidation,
                                tweakLayoutAndValidation,
                                infoJsonLayoutAndValidation,
                                extraFilesLayoutAndValidation,
                            ], (0, Either_1.traverseArray)((layout) => layout(api, redmodInfoAndPathDetes, modInfo)), (0, Either_1.map)(ReadonlyArray_1.flatten), (0, Either_1.map)((0, ReadonlyArray_1.concat)(redmodInfoModAttributeInstruction(modInfo, redmodInfoAndPathDetes))), (0, Either_1.chain)(validateCompleteSingleREDmodInstructions(modInfo, redmodInfoAndPathDetes)))))));
                            const allModsForLayoutPipeline = (0, function_1.pipe)(allowedLayouts, (0, ReadonlyArray_1.findFirstMap)((allModDirsForLayoutIfMatch) => allModDirsForLayoutIfMatch(fileTree)), (0, TaskEither_1.fromOption)(error(`No REDmod layout found! This shouldn't happen, we already tested we should handle this!`)), (0, TaskEither_1.chainEitherK)((allModDirsForLayout) => allModDirsForLayout(fileTree)), (0, TaskEither_1.chain)((0, function_1.flow)((0, TaskEither_1.traverseArray)(singleModPipeline), (0, TaskEither_1.map)(ReadonlyArray_1.flatten), (0, TaskEither_1.map)((0, ReadonlyArray_1.concat)(ensureModdedDirExistsInstruction())), (0, TaskEither_1.map)((0, ReadonlyArray_1.concat)(redmodModTypeModAttributeInstruction())), (0, TaskEither_1.map)(gatherAllREDmodInfoModAttributesIntoOneInstruction))));
                            return allModsForLayoutPipeline;
                        };
                        exports.instructionsForLayoutsPipeline = instructionsForLayoutsPipeline;
                        const allAllowedLayouts = [
                            canonLayoutMatches,
                            namedLayoutMatches,
                            toplevelLayoutMatches,
                        ];
                        const layoutsAllowedInMultitype = [
                            canonLayoutMatches,
                        ];
                        const layoutsAllowedForConversion = [
                            canonLayoutMatches,
                        ];
                        const testForREDmod = (_api, fileTree) => Promise.resolve({
                            supported: (0, exports.detectREDmodLayout)(fileTree),
                            requiredFiles: [],
                        });
                        exports.testForREDmod = testForREDmod;
                        const installREDmod = async (api, fileTree, modInfo, features) => {
                            const pipelineForInstructions = (0, exports.instructionsForLayoutsPipeline)(api, fileTree, modInfo, features, allAllowedLayouts);
                            const allInstructionsForEverySubmodInside = await pipelineForInstructions();
                            return (0, Either_1.isLeft)(allInstructionsForEverySubmodInside)
                                ? failAfterWarningUserAndLogging(api, fileTree, modInfo, features, allInstructionsForEverySubmodInside.left)
                                : returnInstructionsAndLogEtc(api, fileTree, modInfo, features, allInstructionsForEverySubmodInside.right);
                        };
                        exports.installREDmod = installREDmod;
                        const detectAllowedREDmodLayoutsForMultitype = (fileTree) => detectCanonREDmodLayout(fileTree);
                        exports.detectAllowedREDmodLayoutsForMultitype = detectAllowedREDmodLayoutsForMultitype;
                        const redmodAllowedInstructionsForMultitype = async (api, fileTree, modInfo, features) => {
                            if (!(0, exports.detectAllowedREDmodLayoutsForMultitype)(fileTree)) {
                                return (0, Either_1.right)([]);
                            }
                            const pipelineForInstructions = (0, exports.instructionsForLayoutsPipeline)(api, fileTree, modInfo, features, layoutsAllowedInMultitype);
                            const allInstructionsForEverySubmodInside = await pipelineForInstructions();
                            return allInstructionsForEverySubmodInside;
                        };
                        exports.redmodAllowedInstructionsForMultitype = redmodAllowedInstructionsForMultitype;
                        const transformToREDmodArchiveInstructions = async (api, features, modInfo, originalInstructions) => {
                            if (!(0, features_1.IsDynamicFeatureEnabled)(features.REDmodAutoconvertArchives)) {
                                api.log(`error`, `${transMe}: REDmod transform function called but feature is disabled`);
                                return (0, Either_1.right)(originalInstructions);
                            }
                            const redmodInfoWithAutoconvertTag = (0, installers_shared_1.modInfoTaggedAsAutoconverted)(features, modInfo);
                            const redmodModuleName = redmodInfoWithAutoconvertTag.name;
                            const redmodVersion = redmodInfoWithAutoconvertTag.version.v;
                            const realDestAndVirtualSourceDirWithModname = path_1.default.join(installers_layouts_1.REDMOD_BASEDIR, redmodModuleName);
                            const RealDestAndVirtualSourceArchiveDirWithModname = path_1.default.join(realDestAndVirtualSourceDirWithModname, installers_layouts_1.REDMOD_ARCHIVES_DIRNAME);
                            api.log(`debug`, `Transforming Archive instructions to REDmod`);
                            api.log(`debug`, `Original instructions: ${(0, util_functions_1.jsonpp)(originalInstructions)}`);
                            const virtualAndRealArchiveSourcePairs = (0, function_1.pipe)(originalInstructions.instructions, (0, ReadonlyArray_1.filter)((instruction) => instruction.type === `copy`), (0, ReadonlyArray_1.map)((instruction) => [
                                instruction.destination.replace((0, filetree_1.normalizeDir)(installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX), (0, filetree_1.normalizeDir)(RealDestAndVirtualSourceArchiveDirWithModname)),
                                instruction.source,
                            ]));
                            const infoJson = {
                                name: redmodModuleName,
                                version: redmodVersion,
                            };
                            const generateInfoJsonInstruction = {
                                type: `generatefile`,
                                data: (0, util_functions_1.jsonpp)(infoJson),
                                destination: path_1.default.join(realDestAndVirtualSourceDirWithModname, installers_layouts_1.REDMOD_INFO_FILENAME),
                            };
                            const mapFromVirtualSourceToRealSource = new Map([
                                ...virtualAndRealArchiveSourcePairs,
                            ]);
                            const fileTreeForVirtualREDmodSources = (0, filetree_1.fileTreeFromPaths)([
                                ...mapFromVirtualSourceToRealSource.keys(),
                                generateInfoJsonInstruction.destination,
                            ]);
                            const returnMatchingVirtualInfoJson = (generatedInfoJson) => (attemptedModInfo, attemptedRelativeModDir) => {
                                const jsonWhenMatched = (attemptedModInfo.name === modInfo.name && attemptedRelativeModDir === realDestAndVirtualSourceDirWithModname)
                                    ? (0, Either_1.right)(generatedInfoJson)
                                    : (0, Either_1.left)(new Error(`${transMe}: Info doesn't match (this should NOT happen)! ${(0, util_functions_1.S)({ attemptedModInfo, attemptedRelativeModDir, generatedInfoJson })}`));
                                return (0, function_1.pipe)(jsonWhenMatched, TaskEither_1.fromEither);
                            };
                            const redmodInstructionsGeneratedByREDmodPipeline = await (0, exports.instructionsForLayoutsPipeline)(api, fileTreeForVirtualREDmodSources, modInfo, features, layoutsAllowedForConversion, returnMatchingVirtualInfoJson(infoJson))();
                            if ((0, Either_1.isLeft)(redmodInstructionsGeneratedByREDmodPipeline)) {
                                const errorMessage = `${transMe}: Failed to generate archive instructions for REDmod: ${(0, util_functions_1.S)(redmodInstructionsGeneratedByREDmodPipeline)}`;
                                api.log(`error`, errorMessage, {
                                    originalInstructions, modInfo, infoJson, virtualSourceTree: fileTreeForVirtualREDmodSources,
                                });
                                return (0, Either_1.left)(new Error(errorMessage));
                            }
                            const redmodInstructionsMappedBackToRealSources = (0, function_1.pipe)(redmodInstructionsGeneratedByREDmodPipeline.right, (0, ReadonlyArray_1.map)((redmodInstruction) => (redmodInstruction.type !== `copy` || path_1.default.basename(redmodInstruction.destination) !== installers_layouts_1.REDMOD_INFO_FILENAME
                                ? redmodInstruction
                                : {
                                    ...generateInfoJsonInstruction,
                                    destination: redmodInstruction.destination,
                                })), (0, ReadonlyArray_1.map)((redmodInstruction) => (redmodInstruction.source && mapFromVirtualSourceToRealSource.get(redmodInstruction.source)
                                    ? {
                                        ...redmodInstruction,
                                        source: mapFromVirtualSourceToRealSource.get(redmodInstruction.source),
                                    }
                                    : redmodInstruction)), ReadonlyArray_1.toArray);
                            const instructionsToInstallArchiveAsREDmod = {
                                kind: installers_layouts_1.REDmodTransformedLayout.Archive,
                                instructions: redmodInstructionsMappedBackToRealSources,
                            };
                            api.log(`info`, `${transMe}: Generated REDmod instructions for archive`, instructionsToInstallArchiveAsREDmod);
                            (0, ui_notifications_1.showInfoNotification)(api, ui_notifications_1.InfoNotification.REDmodArchiveAutoconverted, `${modInfo.name} was automatically converted and will be installed as a REDmod (${redmodModuleName})!`);
                            return (0, Either_1.right)(instructionsToInstallArchiveAsREDmod);
                        };
                        exports.transformToREDmodArchiveInstructions = transformToREDmodArchiveInstructions;
                        const consolidateREDmodInstructionsForMultiType = (api, maybeAutoconvertedArchiveInstructions, redmodInstructions) => {
                            const archivesWereAutoconverted = (0, function_1.pipe)(maybeAutoconvertedArchiveInstructions, (0, ReadonlyArray_1.some)((instruction) => instruction.key === installers_types_1.ModAttributeKey.ModType && instruction.value.data === installers_types_1.ModType.REDmod));
                            if (!archivesWereAutoconverted) {
                                api.log(`debug`, `${transMe}: Consolidating for MultiType: no autoconverted archives found`);
                                return [...maybeAutoconvertedArchiveInstructions, ...redmodInstructions];
                            }
                            api.log(`debug`, `${transMe}: Consolidating for MultiType: ${(0, util_functions_1.S)({ maybeAutoconvertedArchiveInstructions, redmodInstructions })}`);
                            const allInstructions = (0, function_1.pipe)(maybeAutoconvertedArchiveInstructions, (0, ReadonlyArray_1.concat)(redmodInstructions));
                            const moddedDirInstruction = ensureModdedDirExistsInstruction()[0];
                            const justRealInstructions = (0, function_1.pipe)(allInstructions, (0, ReadonlyArray_1.filter)((instruction) => instruction.key !== installers_types_1.ModAttributeKey.ModType
                                && instruction.key !== installers_types_1.ModAttributeKey.REDmodInfoArray
                                && instruction.destination !== moddedDirInstruction.destination));
                            const redmodInfoArraysConsolidatedIntoOne = (0, function_1.pipe)(allInstructions, (0, ReadonlyArray_1.filter)((instruction) => instruction.key === installers_types_1.ModAttributeKey.REDmodInfoArray), (0, ReadonlyArray_1.map)((instruction) => instruction.value.data), ReadonlyArray_1.flatten, (redmodInfos) => (0, installers_types_1.makeAttr)(installers_types_1.ModAttributeKey.REDmodInfoArray, redmodInfos), (redmodInfoArrayAttr) => [(0, installers_shared_1.instructionToGenerateMetadataAttribute)(redmodInfoArrayAttr)]);
                            const consolidatedREDmodInstructions = (0, function_1.pipe)(justRealInstructions, (0, ReadonlyArray_1.concat)(redmodInfoArraysConsolidatedIntoOne), (0, ReadonlyArray_1.concat)(redmodModTypeModAttributeInstruction()), (0, ReadonlyArray_1.concat)(ensureModdedDirExistsInstruction()));
                            api.log(`info`, `${transMe}: Consolidating for MultiType: Result: ${(0, util_functions_1.S)({ consolidatedREDmodInstructions })}`);
                            return consolidatedREDmodInstructions;
                        };
                        exports.consolidateREDmodInstructionsForMultiType = consolidateREDmodInstructionsForMultiType;


                        /***/
                    }),

/***/ "./src/installer.redscript.ts":
/*!************************************!*\
  !*** ./src/installer.redscript.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.redscriptAllowedInMultiInstructions = exports.detectAllowedRedscriptLayouts = exports.installRedscriptMod = exports.testForRedscriptMod = exports.redscriptConfigOnlyLayout = exports.redscriptCanonLayout = exports.redscriptToplevelLayout = exports.redscriptBasedirLayout = exports.detectRedscriptToplevelLayout = exports.detectRedscriptCanonOnlyLayout = exports.detectRedscriptBasedirLayout = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installer_red4ext_1 = __webpack_require__(/*! ./installer.red4ext */ "./src/installer.red4ext.ts");
                        const matchRedscriptFile = (file) => (0, filetree_1.pathEq)(installers_layouts_1.REDS_MOD_CANONICAL_EXTENSION)(path_1.default.extname(file));
                        const matchRedscriptConfigFile = (file) => (0, filetree_1.pathIn)(installers_layouts_1.REDS_MOD_CONFIG_EXTENSIONS)(path_1.default.extname(file));
                        const allRedscriptConfigFiles = (fileTree) => (0, filetree_1.filesIn)(installers_layouts_1.REDS_MOD_CANONICAL_HINTS_PATH_PREFIX, matchRedscriptConfigFile, fileTree);
                        const findCanonicalRedscriptDirs = (fileTree) => (0, filetree_1.findTopmostSubdirsWithSome)(installers_layouts_1.REDS_MOD_CANONICAL_PATH_PREFIX, matchRedscriptFile, fileTree);
                        const detectRedscriptBasedirLayout = (fileTree) => (0, filetree_1.dirWithSomeIn)(installers_layouts_1.REDS_MOD_CANONICAL_PATH_PREFIX, matchRedscriptFile, fileTree);
                        exports.detectRedscriptBasedirLayout = detectRedscriptBasedirLayout;
                        const detectRedscriptCanonOnlyLayout = (fileTree) => !(0, exports.detectRedscriptBasedirLayout)(fileTree)
                            && findCanonicalRedscriptDirs(fileTree).length > 0;
                        exports.detectRedscriptCanonOnlyLayout = detectRedscriptCanonOnlyLayout;
                        const detectRedscriptToplevelLayout = (fileTree) => !(0, exports.detectRedscriptBasedirLayout)(fileTree)
                            && !(0, exports.detectRedscriptCanonOnlyLayout)(fileTree)
                            && (0, filetree_1.dirWithSomeIn)(filetree_1.FILETREE_ROOT, matchRedscriptFile, fileTree);
                        exports.detectRedscriptToplevelLayout = detectRedscriptToplevelLayout;
                        const detectRedscriptLayout = (fileTree) => (allRedscriptConfigFiles(fileTree).length > 0 || (0, filetree_1.dirWithSomeUnder)(filetree_1.FILETREE_ROOT, matchRedscriptFile, fileTree))
                            && !(0, installer_red4ext_1.detectRed4ExtCanonOnlyLayout)(fileTree);
                        const redscriptBasedirLayout = (api, modName, fileTree) => {
                            const hasBasedirReds = (0, exports.detectRedscriptBasedirLayout)(fileTree);
                            if (!hasBasedirReds) {
                                api.log(`debug`, `No basedir Redscript files found`);
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allBasedirAndSubdirFiles = (0, filetree_1.filesUnder)(installers_layouts_1.REDS_MOD_CANONICAL_PATH_PREFIX, filetree_1.Glob.Any, fileTree);
                            const modnamedDir = path_1.default.join(installers_layouts_1.REDS_MOD_CANONICAL_PATH_PREFIX, modName);
                            const allToBasedirWithSubdirAsModname = allBasedirAndSubdirFiles.map((0, installers_shared_1.moveFromTo)(installers_layouts_1.REDS_MOD_CANONICAL_PATH_PREFIX, modnamedDir));
                            const allConfigFilesInCanonicalDir = allRedscriptConfigFiles(fileTree);
                            const allBasedirInstructions = [
                                ...(0, installers_shared_1.instructionsForSourceToDestPairs)(allToBasedirWithSubdirAsModname),
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allConfigFilesInCanonicalDir),
                            ];
                            return {
                                kind: installers_layouts_1.RedscriptLayout.Basedir,
                                instructions: allBasedirInstructions,
                            };
                        };
                        exports.redscriptBasedirLayout = redscriptBasedirLayout;
                        const redscriptToplevelLayout = (api, modName, fileTree) => {
                            const hasToplevelReds = (0, exports.detectRedscriptToplevelLayout)(fileTree);
                            const toplevelReds = hasToplevelReds
                                ? (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, filetree_1.Glob.Any, fileTree)
                                : [];
                            if (!hasToplevelReds) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const modnamedDir = path_1.default.join(installers_layouts_1.REDS_MOD_CANONICAL_PATH_PREFIX, modName);
                            const allToBasedirWithSubdirAsModname = toplevelReds.map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, modnamedDir));
                            return {
                                kind: installers_layouts_1.RedscriptLayout.Toplevel,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(allToBasedirWithSubdirAsModname),
                            };
                        };
                        exports.redscriptToplevelLayout = redscriptToplevelLayout;
                        const redscriptCanonLayout = (_api, _modName, fileTree) => {
                            const allCanonRedscriptFiles = findCanonicalRedscriptDirs(fileTree).flatMap((namedSubdir) => (0, filetree_1.filesUnder)(namedSubdir, filetree_1.Glob.Any, fileTree));
                            if (allCanonRedscriptFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const allConfigFilesInCanonicalDir = allRedscriptConfigFiles(fileTree);
                            const allCanonicalInstructions = [
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonRedscriptFiles),
                                ...(0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allConfigFilesInCanonicalDir),
                            ];
                            return {
                                kind: installers_layouts_1.RedscriptLayout.Basedir,
                                instructions: allCanonicalInstructions,
                            };
                        };
                        exports.redscriptCanonLayout = redscriptCanonLayout;
                        const redscriptConfigOnlyLayout = (_api, _modName, fileTree) => {
                            const allConfigFilesInCanonicalDir = allRedscriptConfigFiles(fileTree);
                            if (allConfigFilesInCanonicalDir.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            return {
                                kind: installers_layouts_1.RedscriptLayout.ConfigOnly,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allConfigFilesInCanonicalDir),
                            };
                        };
                        exports.redscriptConfigOnlyLayout = redscriptConfigOnlyLayout;
                        const testForRedscriptMod = async (api, fileTree) => ({
                            supported: detectRedscriptLayout(fileTree),
                            requiredFiles: [],
                        });
                        exports.testForRedscriptMod = testForRedscriptMod;
                        const installRedscriptMod = async (api, fileTree, modInfo, _features) => {
                            const selectedInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, modInfo.name, fileTree, [exports.redscriptBasedirLayout, exports.redscriptCanonLayout, exports.redscriptToplevelLayout, exports.redscriptConfigOnlyLayout]);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.Redscript, fileTree);
                            }
                            const allInstructions = selectedInstructions.instructions;
                            return Promise.resolve({ instructions: allInstructions });
                        };
                        exports.installRedscriptMod = installRedscriptMod;
                        const detectAllowedRedscriptLayouts = (fileTree) => (0, exports.detectRedscriptBasedirLayout)(fileTree) || (0, exports.detectRedscriptCanonOnlyLayout)(fileTree);
                        exports.detectAllowedRedscriptLayouts = detectAllowedRedscriptLayouts;
                        const redscriptAllowedInMultiInstructions = (api, modName, fileTree) => {
                            const selectedInstructions = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, modName, fileTree, [exports.redscriptBasedirLayout, exports.redscriptCanonLayout]);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${installers_types_1.InstallerType.Redscript}: No allowed Redscript layouts found (this is ok)`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            return selectedInstructions;
                        };
                        exports.redscriptAllowedInMultiInstructions = redscriptAllowedInMultiInstructions;


                        /***/
                    }),

/***/ "./src/installer.special.deprecated.ts":
/*!*********************************************!*\
  !*** ./src/installer.special.deprecated.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.testCoreWolvenKitCli = exports.testCoreCsvMerge = void 0;
                        const path_1 = __webpack_require__(/*! path */ "path");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const path = path_1.win32;
                        const CSVMERGE_UNIQUE_FILE = path.normalize(`csvmerge/CSVMerge.cmd`);
                        const WOLVENKIT_UNIQUE_FILE = path.normalize(`WolvenKit CLI/WolvenKit.CLI.exe`);
                        const testCoreCsvMerge = (api, fileTree) => {
                            if (!(0, filetree_1.sourcePaths)(fileTree).includes(CSVMERGE_UNIQUE_FILE)) {
                                return Promise.resolve({
                                    supported: false,
                                    requiredFiles: [],
                                });
                            }
                            const message = `CSVMerge has been deprecated.`;
                            (0, ui_dialogs_1.showErrorForDeprecatedModTool)(api, installers_types_1.InstallerType.CoreCSVMerge, message);
                            return Promise.reject(new Error(message));
                        };
                        exports.testCoreCsvMerge = testCoreCsvMerge;
                        const testCoreWolvenKitCli = (api, fileTree) => {
                            const files = (0, filetree_1.sourcePaths)(fileTree);
                            if (files.some((file) => file.toLowerCase().startsWith(`wolvenkit desktop`))) {
                                const message = `WolvenKit Desktop is not able to be installed with Vortex.`;
                                (0, ui_dialogs_1.wolvenKitDesktopFoundErrorDialog)(api, message);
                                return Promise.reject(new Error(message));
                            }
                            if (!files.includes(WOLVENKIT_UNIQUE_FILE)) {
                                return Promise.resolve({
                                    supported: false,
                                    requiredFiles: [],
                                });
                            }
                            const message = `WolvenKit installation has been deprecated.`;
                            (0, ui_dialogs_1.showErrorForDeprecatedModTool)(api, installers_types_1.InstallerType.CoreWolvenKit, message);
                            return Promise.reject(new Error(message));
                        };
                        exports.testCoreWolvenKitCli = testCoreWolvenKitCli;


                        /***/
                    }),

/***/ "./src/installer.special.extrafiles.ts":
/*!*********************************************!*\
  !*** ./src/installer.special.extrafiles.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.extraFilesAllowedInOtherModTypesInstructions = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const matchExtraFile = (file) => installers_layouts_1.MODS_EXTRA_FILETYPES_ALLOWED_IN_ANY_MOD.includes(path_1.default.extname(file));
                        const findExtraFiles = (fileTree) => (0, filetree_1.filesUnder)(filetree_1.FILETREE_ROOT, matchExtraFile, (0, filetree_1.prunedTreeFrom)(installers_layouts_1.isKnownToplevelDir, fileTree));
                        const extraFilesLayout = (_api, modName, fileTree) => {
                            const allExtraFiles = findExtraFiles(fileTree);
                            if (allExtraFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            const extraFilesDirForMod = path_1.default.normalize(`.\\${installers_layouts_1.MODS_EXTRA_BASEDIR}\\${modName}`);
                            const allFromOriginalPathToOurExtraDir = allExtraFiles.map((0, installers_shared_1.moveFromTo)(filetree_1.FILETREE_ROOT, extraFilesDirForMod));
                            return {
                                kind: installers_layouts_1.ExtraFilesLayout.Toplevel,
                                instructions: (0, installers_shared_1.instructionsForSourceToDestPairs)(allFromOriginalPathToOurExtraDir),
                            };
                        };
                        const extraFilesLayoutsAllowedInOtherModTypes = [extraFilesLayout];
                        const extraFilesAllowedInOtherModTypesInstructions = (api, modName, fileTree) => {
                            const extraFilesInstructionsToUse = (0, installers_shared_1.useFirstMatchingLayoutForInstructions)(api, modName, fileTree, extraFilesLayoutsAllowedInOtherModTypes);
                            if (extraFilesInstructionsToUse === installers_layouts_1.NoInstructions.NoMatch ||
                                extraFilesInstructionsToUse === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${installers_types_1.InstallerType.SpecialExtraFiles}: No valid extra files (this is ok)`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            return extraFilesInstructionsToUse;
                        };
                        exports.extraFilesAllowedInOtherModTypesInstructions = extraFilesAllowedInOtherModTypesInstructions;


                        /***/
                    }),

/***/ "./src/installer.tweak-xl.ts":
/*!***********************************!*\
  !*** ./src/installer.tweak-xl.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.tweakXLAllowedInMultiInstructions = exports.detectAllowedTweakXLLayouts = exports.installTweakXLMod = exports.testForTweakXLMod = exports.detectTweakXLCanonLayout = exports.findTweakXLCanonFiles = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const matchTweakYaml = (filePath) => installers_layouts_1.TWEAK_XL_MOD_CANONICAL_EXTENSIONS.includes(path_1.default.extname(filePath));
                        const findTweakXLCanonFiles = (fileTree) => (0, filetree_1.filesUnder)(installers_layouts_1.TWEAK_XL_MOD_CANONICAL_PATH_PREFIX, matchTweakYaml, fileTree);
                        exports.findTweakXLCanonFiles = findTweakXLCanonFiles;
                        const detectTweakXLCanonLayout = (fileTree) => (0, filetree_1.pathInTree)(installers_layouts_1.TWEAK_XL_MOD_CANONICAL_PATH_PREFIX, fileTree);
                        exports.detectTweakXLCanonLayout = detectTweakXLCanonLayout;
                        const tweakXLCanonLayout = (api, _modName, fileTree) => {
                            const allCanonTweakXLFiles = (0, exports.findTweakXLCanonFiles)(fileTree);
                            if (allCanonTweakXLFiles.length < 1) {
                                return installers_layouts_1.NoInstructions.NoMatch;
                            }
                            return {
                                kind: installers_layouts_1.TweakXLLayout.Canon,
                                instructions: (0, installers_shared_1.instructionsForSameSourceAndDestPaths)(allCanonTweakXLFiles),
                            };
                        };
                        const testForTweakXLMod = (_api, fileTree) => Promise.resolve({ supported: (0, exports.detectTweakXLCanonLayout)(fileTree), requiredFiles: [] });
                        exports.testForTweakXLMod = testForTweakXLMod;
                        const installTweakXLMod = async (api, fileTree, _modInfo, _features) => {
                            const selectedInstructions = tweakXLCanonLayout(api, undefined, fileTree);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                return (0, installer_fallback_1.promptToFallbackOrFailOnUnresolvableLayout)(api, installers_types_1.InstallerType.TweakXL, fileTree);
                            }
                            return Promise.resolve({
                                instructions: selectedInstructions.instructions,
                            });
                        };
                        exports.installTweakXLMod = installTweakXLMod;
                        const detectAllowedTweakXLLayouts = (fileTree) => (0, exports.detectTweakXLCanonLayout)(fileTree);
                        exports.detectAllowedTweakXLLayouts = detectAllowedTweakXLLayouts;
                        const tweakXLAllowedInMultiInstructions = (api, fileTree) => {
                            const selectedInstructions = tweakXLCanonLayout(api, undefined, fileTree);
                            if (selectedInstructions === installers_layouts_1.NoInstructions.NoMatch
                                || selectedInstructions === installers_layouts_1.InvalidLayout.Conflict) {
                                api.log(`debug`, `${installers_types_1.InstallerType.TweakXL}: No valid extra archives`);
                                return { kind: installers_layouts_1.NoLayout.Optional, instructions: [] };
                            }
                            return selectedInstructions;
                        };
                        exports.tweakXLAllowedInMultiInstructions = tweakXLAllowedInMultiInstructions;


                        /***/
                    }),

/***/ "./src/installers.layouts.ts":
/*!***********************************!*\
  !*** ./src/installers.layouts.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.CONFIG_JSON_MOD_BASEDIR_SETTINGS = exports.CONFIG_JSON_MOD_BASEDIR = exports.CONFIG_JSON_MOD_ENGINE_BASEDIR = exports.CONFIG_JSON_MOD_EXTENSION = exports.ConfigJsonLayout = exports.CONFIG_XML_MOD_PROTECTED_FILENAMES = exports.CONFIG_XML_MOD_PROTECTED_FILES = exports.CONFIG_XML_MOD_EXTENSION = exports.CONFIG_XML_MOD_MERGEABLE_BASEDIR = exports.CONFIG_XML_MOD_BASEDIR = exports.ConfigXmlLayout = exports.ARCHIVE_XL_CORE_FILES = exports.CoreArchiveXLLayout = exports.AUDIOWARE_MOD_CANONICAL_EXTENSIONS = exports.AUDIOWARE_MOD_CANONICAL_PATH_PREFIX = exports.AudiowareLayout = exports.AUDIOWARE_CORE_FILES = exports.CoreAudiowareLayout = exports.TWEAK_XL_MOD_CANONICAL_EXTENSIONS = exports.TWEAK_XL_MOD_CANONICAL_PATH_PREFIX = exports.TweakXLLayout = exports.TWEAK_XL_CORE_FILES = exports.CoreTweakXLLayout = exports.MOD_SETTINGS_CORE_FILES = exports.CoreModSettingsLayout = exports.DEPRECATED_INPUT_LOADER_CORE_REQUIRED_FILES = exports.DEPRECATED_INPUT_LOADER_CORE_FILES = exports.INPUT_LOADER_CORE_REQUIRED_FILES = exports.INPUT_LOADER_CORE_FILES = exports.CYBERPUNK_CACHE_PATH = exports.CoreInputLoaderLayout = exports.DEPRECATED_REDSCRIPT_CORE_REQUIRED_FILES = exports.DEPRECATED_REDSCRIPT_CORE_FILES = exports.REDSCRIPT_CORE_REQUIRED_FILES = exports.REDSCRIPT_CORE_FILES = exports.CoreRedscriptLayout = exports.ARCHIVE_MOD_TRADITIONAL_WRONG_PREFIX = exports.ARCHIVE_MOD_CANONICAL_PREFIX = exports.ARCHIVE_MOD_EXTENSIONS = exports.ARCHIVE_MOD_XL_EXTENSION = exports.ARCHIVE_MOD_FILE_EXTENSION = exports.ExtraArchiveLayout = exports.ArchiveLayout = exports.FallbackLayout = exports.GiftwrapLayout = exports.ExtraFilesLayout = exports.MODS_EXTRA_BASEDIR = exports.MODS_EXTRA_FILETYPES_ALLOWED_IN_ANY_MOD = exports.isKnownToplevelDir = exports.KNOWN_TOPLEVEL_DIRS = void 0;
                        exports.AMM_MOD_CUSTOM_ENTITIES_CANON_DIR = exports.AMM_MOD_APPEARANCES_REQUIRED_MATCHES = exports.AMM_MOD_CUSTOM_APPEARANCES_CANON_DIR = exports.AMM_MOD_USERMOD_CANON_DIR = exports.AMM_MOD_CUSTOMS_CANON_DIR = exports.AMM_MOD_USERMOD_DIRNAME = exports.AMM_MOD_CUSTOMS_DIRNAME = exports.AMM_MOD_USERMOD_JSON_EXTENSION = exports.AMM_MOD_COLLAB_LUA_EXTENSION = exports.AmmLayout = exports.AMM_MOD_BASEDIR_PATH = exports.AMM_CORE_REQUIRED_PATHS = exports.AMM_CORE_REQUIRED_ARCHIVE_PATHS = exports.AMM_CORE_REQUIRED_CET_PATHS = exports.CoreAmmLayout = exports.AMM_CORE_PLACEHOLDER_FILENAME = exports.AMM_BASEDIR_PATH = exports.DEPRECATED_RED4EXT_CORE_REQUIRED_FILES = exports.RED4EXT_CORE_ONE_SEVEN_REQUIRED_FILES = exports.RED4EXT_CORE_ONE_NINE_REQUIRED_FILES = exports.CORE_RED4EXT_GENERATED_DIRS = exports.RED4EXT_PLUGIN_BASEDIR = exports.DEPRECATED_RED4EXT_CORE_HOOK_DLL = exports.RED4EXT_CORE_ONE_SEVEN_HOOK_DLL = exports.RED4EXT_CORE_ONE_NINE_HOOK_DLL = exports.RED4EXT_CORE_BASEDIR = exports.CoreRed4extLayout = exports.CYBERSCRIPT_CORE_REQUIRED_FILES = exports.CYBERSCRIPT_CORE_ASI = exports.CYBERSCRIPT_CORE_CPSTYLING_PLUGINDIR = exports.CYBERSCRIPT_CORE_CETBASEDIR = exports.CYBERSCRIPT_CORE_BASEDIR = exports.CoreCyberScriptLayout = exports.CET_MOD_CANONICAL_PATH_PREFIX = exports.CET_MOD_CANONICAL_INIT_FILE = exports.CET_GLOBAL_INI = exports.CetLayout = exports.AsiLayout = exports.CONFIG_RESHADE_MOD_SHADER_BASEDIR = exports.CONFIG_RESHADE_MOD_SHADER_DIRNAME = exports.CONFIG_RESHADE_MOD_BASEDIR = exports.CONFIG_INI_MOD_EXTENSION = exports.CONFIG_INI_MOD_BASEDIR = exports.CONFIG_JSON_MOD_PROTECTED_FILENAMES = exports.CONFIG_JSON_MOD_PROTECTED_FILES = exports.CONFIG_JSON_MOD_PROTECTED_DIRS = exports.CONFIG_JSON_MOD_UNFIXABLE_FILENAMES = exports.CONFIG_JSON_MOD_FIXABLE_FILENAMES_TO_PATHS = exports.CONFIG_JSON_MOD_KNOWN_FILES = exports.CONFIG_JSON_MOD_BASEDIR_PLATFORM = void 0;
                        exports.PRESET_MOD_CYBERCAT_BASEDIR = exports.PRESET_MOD_EXTENSION = exports.PresetLayout = exports.CyberCatLayout = exports.CYBERCAT_CORE_REQUIRED_FILES = exports.CYBERCAT_CORE_BASEDIR = exports.ASI_MOD_PATH = exports.ASI_MOD_EXT = exports.REDMOD_MODTYPE_ATTRIBUTE = exports.REDMOD_MODTYPE = exports.REDMOD_AUTOCONVERTED_VERSION_TAG = exports.REDMOD_AUTOCONVERTED_NAME_TAG = exports.REDMOD_INFO_FILENAME = exports.REDMOD_SCRIPTS_MODDED_DIR = exports.REDMOD_SUBTYPE_DIRNAMES = exports.REDMOD_TWEAKS_VALID_SUBDIRS = exports.REDMOD_SCRIPTS_VALID_SUBDIR_NAMES = exports.REDMOD_TWEAKS_VALID_EXTENSIONS = exports.REDMOD_TWEAKS_DIRNAME = exports.REDMOD_SCRIPTS_VALID_EXTENSIONS = exports.REDMOD_SCRIPTS_DIRNAME = exports.REDMOD_CUSTOMSOUNDS_VALID_EXTENSIONS = exports.REDMOD_CUSTOMSOUNDS_DIRNAME = exports.REDMOD_ARCHIVES_VALID_EXTENSIONS = exports.REDMOD_ARCHIVES_DIRNAME = exports.REDMOD_BASEDIR = exports.REDmodTransformedLayout = exports.REDmodLayout = exports.RED4EXT_KNOWN_NONOVERRIDABLE_DLL_DIRS = exports.RED4EXT_KNOWN_NONOVERRIDABLE_DLLS = exports.RED4EXT_CORE_RED4EXT_DLL = exports.RED4EXT_MOD_CANONICAL_BASEDIR = exports.RED4EXT_MOD_CANONICAL_EXTENSION = exports.Red4ExtLayout = exports.REDS_MOD_CANONICAL_HINTS_PATH_PREFIX = exports.REDS_MOD_CANONICAL_PATH_PREFIX = exports.REDS_MOD_CONFIG_EXTENSIONS = exports.REDS_MOD_CANONICAL_EXTENSION = exports.RedscriptLayout = exports.AMM_MOD_THEME_REQUIRED_KEYS = exports.AMM_MOD_THEMES_CANON_DIR = exports.AMM_MOD_SCRIPT_REQUIRED_KEYS = exports.AMM_MOD_SCRIPTS_CANON_DIR = exports.AMM_MOD_LOCATION_REQUIRED_KEYS = exports.AMM_MOD_LOCATIONS_CANON_DIR = exports.AMM_MOD_DECOR_REQUIRED_KEYS = exports.AMM_MOD_DECOR_CANON_DIR = exports.AMM_MOD_PROPS_REQUIRED_MATCHES = exports.AMM_MOD_CUSTOM_PROPS_CANON_DIR = exports.AMM_MOD_ENTITIES_REQUIRED_MATCHES = void 0;
                        exports.NotAllowed = exports.InvalidLayout = exports.NoInstructions = exports.NoLayout = exports.LayoutDescriptions = exports.PRESET_MOD_UNLOCKER_REQUIRED_MATCHES_MASC = exports.PRESET_MOD_UNLOCKER_REQUIRED_MATCHES_FEM_MUST_MATCH_FIRST = exports.PRESET_MOD_UNLOCKER_MASCDIR = exports.PRESET_MOD_UNLOCKER_FEMDIR = exports.PRESET_MOD_UNLOCKER_BASEDIR = exports.PRESET_MOD_CYBERCAT_REQUIRED_KEYS = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        exports.KNOWN_TOPLEVEL_DIRS = [`archive`, `bin`, `engine`, `r6`, `red4ext`, `mods`];
                        const isKnownToplevelDir = (filePath) => exports.KNOWN_TOPLEVEL_DIRS.includes(filePath.split(path_1.default.sep)[0]);
                        exports.isKnownToplevelDir = isKnownToplevelDir;
                        exports.MODS_EXTRA_FILETYPES_ALLOWED_IN_ANY_MOD = [
                            `.md`,
                            `.txt`,
                            `.pdf`,
                            `.png`,
                            `.jpg`,
                            `.webp`,
                            `.gif`,
                            `.svg`,
                            `.odt`,
                            `.rtf`,
                            `.doc`,
                        ];
                        const MODS_EXTRA_FILETYPES_AS_STRING = exports.MODS_EXTRA_FILETYPES_ALLOWED_IN_ANY_MOD.map((extension) => `*.${extension}`).join(`, `);
                        exports.MODS_EXTRA_BASEDIR = path_1.default.join(`.\\${index_metadata_1.EXTENSION_NAME_INTERNAL}\\mod-extra-files\\`);
                        var ExtraFilesLayout;
                        (function (ExtraFilesLayout) {
                            ExtraFilesLayout["Toplevel"] = "\n              - .\\[any allowed extra filetype]\n              - .\\[any non-reserved subdir]\\[any allowed extra filetype]\n              ";
                        })(ExtraFilesLayout = exports.ExtraFilesLayout || (exports.ExtraFilesLayout = {}));
                        var GiftwrapLayout;
                        (function (GiftwrapLayout) {
                            GiftwrapLayout["ExtraToplevelDir"] = "\n                      | - .\\[dirname]\\[any dir that should be toplevel: archive, bin, engine, r6, red4ext]\n                    ";
                        })(GiftwrapLayout = exports.GiftwrapLayout || (exports.GiftwrapLayout = {}));
                        var FallbackLayout;
                        (function (FallbackLayout) {
                            FallbackLayout["LooksSafe"] = ".\\**\\* - everything in this mod, and we've checked things we know to be risky";
                            FallbackLayout["Unvalidated"] = ".\\**\\* - everything in this mod, but nothing has been validated";
                        })(FallbackLayout = exports.FallbackLayout || (exports.FallbackLayout = {}));
                        var ArchiveLayout;
                        (function (ArchiveLayout) {
                            ArchiveLayout["XL"] = ".\\archive\\pc\\mod\\*.xl, *.archive";
                            ArchiveLayout["Canon"] = ".\\archive\\pc\\mod\\*.archive";
                            ArchiveLayout["Heritage"] = ".\\archive\\pc\\patch\\*.archive";
                            ArchiveLayout["Other"] = ".\\**\\*.archive + [any files + subdirs] (NOTE! These may not work without manual selection)";
                        })(ArchiveLayout = exports.ArchiveLayout || (exports.ArchiveLayout = {}));
                        var ExtraArchiveLayout;
                        (function (ExtraArchiveLayout) {
                            ExtraArchiveLayout["Toplevel"] = "\n    .\\*.xl, *.archive\n  ";
                        })(ExtraArchiveLayout = exports.ExtraArchiveLayout || (exports.ExtraArchiveLayout = {}));
                        exports.ARCHIVE_MOD_FILE_EXTENSION = `.archive`;
                        exports.ARCHIVE_MOD_XL_EXTENSION = `.xl`;
                        exports.ARCHIVE_MOD_EXTENSIONS = [
                            exports.ARCHIVE_MOD_FILE_EXTENSION,
                            exports.ARCHIVE_MOD_XL_EXTENSION,
                        ];
                        exports.ARCHIVE_MOD_CANONICAL_PREFIX = path_1.default.normalize(`archive/pc/mod/`);
                        exports.ARCHIVE_MOD_TRADITIONAL_WRONG_PREFIX = path_1.default.normalize(`archive/pc/patch/`);
                        var CoreRedscriptLayout;
                        (function (CoreRedscriptLayout) {
                            CoreRedscriptLayout["OnlyValid"] = "\n              - .\\engine\\config\\base\\scripts.ini\n              - .\\engine\\tools\\scc.exe\n              - .\\r6\\config\\cybercmd\\scc.toml\n              ";
                            CoreRedscriptLayout["Deprecated"] = "\n              - .\\engine\\config\\base\\scripts.ini\n              - .\\engine\\tools\\scc.exe\n              - .\\r6\\scripts\\redscript.toml\n              ";
                        })(CoreRedscriptLayout = exports.CoreRedscriptLayout || (exports.CoreRedscriptLayout = {}));
                        exports.REDSCRIPT_CORE_FILES = [
                            path_1.default.normalize(`engine\\config\\base\\scripts.ini`),
                            path_1.default.normalize(`engine\\tools\\scc.exe`),
                            path_1.default.normalize(`r6\\config\\cybercmd\\scc.toml`),
                        ];
                        exports.REDSCRIPT_CORE_REQUIRED_FILES = exports.REDSCRIPT_CORE_FILES;
                        exports.DEPRECATED_REDSCRIPT_CORE_FILES = [
                            path_1.default.normalize(`engine\\config\\base\\scripts.ini`),
                            path_1.default.normalize(`engine\\tools\\scc.exe`),
                            path_1.default.normalize(`r6\\scripts\\redscript.toml`),
                        ];
                        exports.DEPRECATED_REDSCRIPT_CORE_REQUIRED_FILES = exports.DEPRECATED_REDSCRIPT_CORE_FILES;
                        var CoreInputLoaderLayout;
                        (function (CoreInputLoaderLayout) {
                            CoreInputLoaderLayout["CurrentV012"] = "\n              - .\\engine\\config\\platform\\pc\\input_loader.ini\n              - .\\r6\\cache\\inputContexts.xml\n              - .\\r6\\cache\\inputUserMappings.xml\n              - .\\red4ext\\plugins\\input_loader\\input_loader.dll\n              - .\\red4ext\\plugins\\input_loader\\inputUserMappings.xml\n              - .\\red4ext\\plugins\\input_loader\\license.md\n              - .\\red4ext\\plugins\\input_loader\\readme.md\n              ";
                            CoreInputLoaderLayout["PreviousV011"] = "\n              - .\\engine\\config\\platform\\pc\\input_loader.ini\n              - .\\r6\\input\\                       (note, empty directory is an exception)\n              - .\\red4ext\\plugins\\input_loader\\input_loader.dll\n              - .\\red4ext\\plugins\\input_loader\\inputUserMappings.xml\n              - .\\red4ext\\plugins\\input_loader\\license.md\n              - .\\red4ext\\plugins\\input_loader\\readme.md\n              - .\\red4ext\\plugins\\input_loader_uninstall.bat\n              ";
                            CoreInputLoaderLayout["PreviousV010"] = "\n              - .\\engine\\config\\platform\\pc\\input_loader.ini\n              - .\\r6\\input\\                       (note, empty directory is an exception)\n              - .\\red4ext\\plugins\\input_loader\\input_loader.dll\n              - .\\red4ext\\plugins\\input_loader\\inputUserMappings.xml\n              ";
                        })(CoreInputLoaderLayout = exports.CoreInputLoaderLayout || (exports.CoreInputLoaderLayout = {}));
                        exports.CYBERPUNK_CACHE_PATH = path_1.default.join(`r6\\cache`);
                        exports.INPUT_LOADER_CORE_FILES = {
                            V012: [
                                path_1.default.join(`engine\\config\\platform\\pc\\input_loader.ini`),
                                path_1.default.join(`r6\\cache\\inputContexts.xml`),
                                path_1.default.join(`r6\\cache\\inputUserMappings.xml`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\input_loader.dll`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\inputUserMappings.xml`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\license.md`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\readme.md`),
                            ],
                        };
                        exports.INPUT_LOADER_CORE_REQUIRED_FILES = exports.INPUT_LOADER_CORE_FILES;
                        exports.DEPRECATED_INPUT_LOADER_CORE_FILES = {
                            V011: [
                                path_1.default.join(`red4ext\\plugins\\input_loader\\input_loader.dll`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\inputUserMappings.xml`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\license.md`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\readme.md`),
                                path_1.default.join(`red4ext\\plugins\\input_loader_uninstall.bat`),
                            ],
                            V010: [
                                path_1.default.join(`red4ext\\plugins\\input_loader\\input_loader.dll`),
                                path_1.default.join(`red4ext\\plugins\\input_loader\\inputUserMappings.xml`),
                            ],
                        };
                        exports.DEPRECATED_INPUT_LOADER_CORE_REQUIRED_FILES = exports.DEPRECATED_INPUT_LOADER_CORE_FILES;
                        var CoreModSettingsLayout;
                        (function (CoreModSettingsLayout) {
                            CoreModSettingsLayout["OnlyValid"] = "\n              - .\\red4ext\\plugins\\mod_settings\\ModSettings.archive\n              - .\\red4ext\\plugins\\mod_settings\\ModSettings.archive.xl\n              - .\\red4ext\\plugins\\mod_settings\\mod_settings.dll\n              - .\\red4ext\\plugins\\mod_settings\\module.reds\n              - .\\red4ext\\plugins\\mod_settings\\packed.reds\n              - .\\red4ext\\plugins\\mod_settings\\license.md\n              - .\\red4ext\\plugins\\mod_settings\\readme.md\n              ";
                        })(CoreModSettingsLayout = exports.CoreModSettingsLayout || (exports.CoreModSettingsLayout = {}));
                        exports.MOD_SETTINGS_CORE_FILES = [
                            path_1.default.join(`red4ext\\plugins\\mod_settings\\ModSettings.archive`),
                            path_1.default.join(`red4ext\\plugins\\mod_settings\\ModSettings.archive.xl`),
                            path_1.default.join(`red4ext\\plugins\\mod_settings\\mod_settings.dll`),
                            path_1.default.join(`red4ext\\plugins\\mod_settings\\module.reds`),
                            path_1.default.join(`red4ext\\plugins\\mod_settings\\packed.reds`),
                            path_1.default.join(`red4ext\\plugins\\mod_settings\\license.md`),
                            path_1.default.join(`red4ext\\plugins\\mod_settings\\readme.md`),
                        ];
                        var CoreTweakXLLayout;
                        (function (CoreTweakXLLayout) {
                            CoreTweakXLLayout["OnlyValid"] = "\n              - .\\red4ext\\plugins\\TweakXL\\TweakXL.dll\n              - .\\red4ext\\plugins\\TweakXL\\Scripts\\TweakXL.Global.reds\n              - .\\red4ext\\plugins\\TweakXL\\Scripts\\TweakXL.reds\n              - .\\red4ext\\plugins\\TweakXL\\Data\\ExtraFlats.dat\n              - .\\red4ext\\plugins\\TweakXL\\Data\\InheritanceMap.dat\n              - .\\red4ext\\plugins\\TweakXL\\LICENSE\n              - .\\red4ext\\plugins\\TweakXL\\THIRD_PARTY_LICENSES\n              ";
                        })(CoreTweakXLLayout = exports.CoreTweakXLLayout || (exports.CoreTweakXLLayout = {}));
                        exports.TWEAK_XL_CORE_FILES = [
                            path_1.default.join(`red4ext\\plugins\\TweakXL\\TweakXL.dll`),
                            path_1.default.join(`red4ext\\plugins\\TweakXL\\Scripts\\TweakXL.Global.reds`),
                            path_1.default.join(`red4ext\\plugins\\TweakXL\\Scripts\\TweakXL.reds`),
                            path_1.default.join(`red4ext\\plugins\\TweakXL\\Data\\ExtraFlats.dat`),
                            path_1.default.join(`red4ext\\plugins\\TweakXL\\Data\\InheritanceMap.dat`),
                            path_1.default.join(`red4ext\\plugins\\TweakXL\\LICENSE`),
                            path_1.default.join(`red4ext\\plugins\\TweakXL\\THIRD_PARTY_LICENSES`),
                        ];
                        var TweakXLLayout;
                        (function (TweakXLLayout) {
                            TweakXLLayout["Canon"] = "\n          - .\\r6\\tweaks\\[*.yaml, *.yml]\n          - .\\r6\\tweaks\\[any subdirs]\\[*.yaml, *.yml]\n          ";
                        })(TweakXLLayout = exports.TweakXLLayout || (exports.TweakXLLayout = {}));
                        exports.TWEAK_XL_MOD_CANONICAL_PATH_PREFIX = path_1.default.join(`r6\\tweaks\\`);
                        exports.TWEAK_XL_MOD_CANONICAL_EXTENSIONS = [`.yaml`, `.yml`];
                        var CoreAudiowareLayout;
                        (function (CoreAudiowareLayout) {
                            CoreAudiowareLayout["OnlyValid"] = "\n          - .\\red4ext\\plugins\\audioware\\audioware.dll\n          - .\\r6\\scripts\\Audioware\\Codeware.reds\n          - .\\r6\\scripts\\Audioware\\Config.reds\n          - .\\r6\\scripts\\Audioware\\Ext.reds\n          - .\\r6\\scripts\\Audioware\\Hooks.reds\n          - .\\r6\\scripts\\Audioware\\Natives.reds\n          - .\\r6\\scripts\\Audioware\\Preset.reds\n          - .\\r6\\scripts\\Audioware\\Service.reds\n          - .\\r6\\scripts\\Audioware\\Settings.reds\n          - .\\r6\\scripts\\Audioware\\System.reds\n          - .\\r6\\scripts\\Audioware\\Tween.reds\n          - .\\r6\\scripts\\Audioware\\Utils.reds\n          ";
                        })(CoreAudiowareLayout = exports.CoreAudiowareLayout || (exports.CoreAudiowareLayout = {}));
                        exports.AUDIOWARE_CORE_FILES = [
                            path_1.default.join(`red4ext\\plugins\\audioware\\audioware.dll`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Codeware.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Config.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Ext.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Hooks.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Natives.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Preset.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Service.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Settings.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\System.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Tween.reds`),
                            path_1.default.join(`r6\\scripts\\Audioware\\Utils.reds`),
                        ];
                        var AudiowareLayout;
                        (function (AudiowareLayout) {
                            AudiowareLayout["Canon"] = "\n          - .\\r6\\audioware\\[any files + subdirs]\n          ";
                        })(AudiowareLayout = exports.AudiowareLayout || (exports.AudiowareLayout = {}));
                        exports.AUDIOWARE_MOD_CANONICAL_PATH_PREFIX = path_1.default.join(`r6\\audioware\\`);
                        exports.AUDIOWARE_MOD_CANONICAL_EXTENSIONS = [`.yaml`, `.yml`, `.wav`, `.ogg`, `.mp3`, `.flac`];
                        var CoreArchiveXLLayout;
                        (function (CoreArchiveXLLayout) {
                            CoreArchiveXLLayout["OnlyValid"] = "\n          - .\\r6\\config\\redsUserHints\\ArchiveXL.toml\n          - .\\red4ext\\plugins\\ArchiveXL\\ArchiveXL.dll\n          - .\\red4ext\\plugins\\ArchiveXL\\Bundle\\PlayerBaseScope.xl\n          - .\\red4ext\\plugins\\ArchiveXL\\Bundle\\PlayerCustomizationHairFix.xl\n          - .\\red4ext\\plugins\\ArchiveXL\\Bundle\\PlayerCustomizationScope.xl\n          - .\\red4ext\\plugins\\ArchiveXL\\LICENSE\n          - .\\red4ext\\plugins\\ArchiveXL\\Scripts\\ArchiveXL.Global.reds\n          - .\\red4ext\\plugins\\ArchiveXL\\Scripts\\ArchiveXL.reds\n          - .\\red4ext\\plugins\\ArchiveXL\\THIRD_PARTY_LICENSES\n          ";
                        })(CoreArchiveXLLayout = exports.CoreArchiveXLLayout || (exports.CoreArchiveXLLayout = {}));
                        exports.ARCHIVE_XL_CORE_FILES = [
                            path_1.default.join(`r6\\config\\redsUserHints\\ArchiveXL.toml`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\ArchiveXL.dll`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\Bundle\\PlayerBaseScope.xl`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\Bundle\\PlayerCustomizationHairFix.xl`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\Bundle\\PlayerCustomizationScope.xl`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\LICENSE`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\Scripts\\ArchiveXL.Global.reds`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\Scripts\\ArchiveXL.reds`),
                            path_1.default.join(`red4ext\\plugins\\ArchiveXL\\THIRD_PARTY_LICENSES`),
                        ];
                        var ConfigXmlLayout;
                        (function (ConfigXmlLayout) {
                            ConfigXmlLayout["Protected"] = "\n              .\\r6\\config\\{inputContexts,inputDeadzones,inputUserMappings,uiInputActions}.xml\n              | - .\\r6\\config\\*.xml\n              ";
                            ConfigXmlLayout["Canon"] = "\n          .\\r6\\config\\*.xml\n          ";
                            ConfigXmlLayout["Mergeable"] = "\n              .\\r6\\input\\*.xml\n              ";
                            ConfigXmlLayout["Toplevel"] = "\n            .\\{inputContexts,inputDeadzones,inputUserMappings,uiInputActions}.xml\n            | - .\\*.xml\n            ";
                        })(ConfigXmlLayout = exports.ConfigXmlLayout || (exports.ConfigXmlLayout = {}));
                        exports.CONFIG_XML_MOD_BASEDIR = path_1.default.join(`r6\\config\\`);
                        exports.CONFIG_XML_MOD_MERGEABLE_BASEDIR = path_1.default.join(`r6\\input\\`);
                        exports.CONFIG_XML_MOD_EXTENSION = `.xml`;
                        exports.CONFIG_XML_MOD_PROTECTED_FILES = [
                            path_1.default.join(`${exports.CONFIG_XML_MOD_BASEDIR}\\inputContexts.xml`),
                            path_1.default.join(`${exports.CONFIG_XML_MOD_BASEDIR}\\inputDeadzones.xml`),
                            path_1.default.join(`${exports.CONFIG_XML_MOD_BASEDIR}\\inputUserMappings.xml`),
                            path_1.default.join(`${exports.CONFIG_XML_MOD_BASEDIR}\\uiInputActions.xml`),
                        ];
                        exports.CONFIG_XML_MOD_PROTECTED_FILENAMES = exports.CONFIG_XML_MOD_PROTECTED_FILES.map((xml) => path_1.default.basename(xml));
                        var ConfigJsonLayout;
                        (function (ConfigJsonLayout) {
                            ConfigJsonLayout["Protected"] = "\n              - .\\engine\\config\\giweights.json\n              - .\\r6\\config\\bumpersSettings.json\n              - .\\r6\\config\\settings\\options.json\n              - .\\r6\\config\\settings\\platform\\pc\\options.json\n              ";
                            ConfigJsonLayout["Toplevel"] = "\n            - .\\[any of the protected JSON filenames] (moved to canonical path)\n            ";
                        })(ConfigJsonLayout = exports.ConfigJsonLayout || (exports.ConfigJsonLayout = {}));
                        exports.CONFIG_JSON_MOD_EXTENSION = `.json`;
                        exports.CONFIG_JSON_MOD_ENGINE_BASEDIR = path_1.default.join(`engine\\config\\`);
                        exports.CONFIG_JSON_MOD_BASEDIR = path_1.default.join(`r6\\config\\`);
                        exports.CONFIG_JSON_MOD_BASEDIR_SETTINGS = path_1.default.join(`r6\\config\\settings\\`);
                        exports.CONFIG_JSON_MOD_BASEDIR_PLATFORM = path_1.default.join(`r6\\config\\settings\\platform\\pc\\`);
                        exports.CONFIG_JSON_MOD_KNOWN_FILES = {
                            "giweights.json": path_1.default.join(exports.CONFIG_JSON_MOD_ENGINE_BASEDIR, `giweights.json`),
                            "bumpersSettings.json": path_1.default.join(exports.CONFIG_JSON_MOD_BASEDIR, `bumpersSettings.json`),
                        };
                        exports.CONFIG_JSON_MOD_FIXABLE_FILENAMES_TO_PATHS = exports.CONFIG_JSON_MOD_KNOWN_FILES;
                        exports.CONFIG_JSON_MOD_UNFIXABLE_FILENAMES = [`options.json`];
                        exports.CONFIG_JSON_MOD_PROTECTED_DIRS = [
                            exports.CONFIG_JSON_MOD_ENGINE_BASEDIR,
                            exports.CONFIG_JSON_MOD_BASEDIR,
                            exports.CONFIG_JSON_MOD_BASEDIR_SETTINGS,
                            exports.CONFIG_JSON_MOD_BASEDIR_PLATFORM,
                        ];
                        exports.CONFIG_JSON_MOD_PROTECTED_FILES = [
                            ...Object.values(exports.CONFIG_JSON_MOD_KNOWN_FILES),
                            path_1.default.join(`${exports.CONFIG_JSON_MOD_BASEDIR_SETTINGS}\\options.json`),
                            path_1.default.join(`${exports.CONFIG_JSON_MOD_BASEDIR_PLATFORM}\\options.json`),
                        ];
                        exports.CONFIG_JSON_MOD_PROTECTED_FILENAMES = exports.CONFIG_JSON_MOD_PROTECTED_FILES.map((protectedPath) => path_1.default.basename(protectedPath));
                        exports.CONFIG_INI_MOD_BASEDIR = path_1.default.join(`engine`, `config`, `platform`, `pc`);
                        exports.CONFIG_INI_MOD_EXTENSION = `.ini`;
                        exports.CONFIG_RESHADE_MOD_BASEDIR = path_1.default.join(`bin`, `x64`);
                        exports.CONFIG_RESHADE_MOD_SHADER_DIRNAME = `reshade-shaders`;
                        exports.CONFIG_RESHADE_MOD_SHADER_BASEDIR = path_1.default.join(exports.CONFIG_RESHADE_MOD_BASEDIR, exports.CONFIG_RESHADE_MOD_SHADER_DIRNAME);
                        var AsiLayout;
                        (function (AsiLayout) {
                            AsiLayout["Canon"] = ".\\bin\\x64\\plugins\\*.asi + [any files + subdirs]";
                        })(AsiLayout = exports.AsiLayout || (exports.AsiLayout = {}));
                        var CetLayout;
                        (function (CetLayout) {
                            CetLayout["Canon"] = ".\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\[modname]\\init.lua + [any files + subdirs]";
                        })(CetLayout = exports.CetLayout || (exports.CetLayout = {}));
                        exports.CET_GLOBAL_INI = path_1.default.normalize(`bin/x64/global.ini`);
                        exports.CET_MOD_CANONICAL_INIT_FILE = `init.lua`;
                        exports.CET_MOD_CANONICAL_PATH_PREFIX = path_1.default.normalize(`bin/x64/plugins/cyber_engine_tweaks/mods`);
                        var CoreCyberScriptLayout;
                        (function (CoreCyberScriptLayout) {
                            CoreCyberScriptLayout["OnlyValid"] = "\n              - .\\bin\\x64\\plugins\\ImmersiveRoleplayFramework.asi\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\quest_mod\\init.lua\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\quest_mod\\[any files + subdirs]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\CPStyling\\[any files + subdirs]  (plugin only)\n              ";
                        })(CoreCyberScriptLayout = exports.CoreCyberScriptLayout || (exports.CoreCyberScriptLayout = {}));
                        exports.CYBERSCRIPT_CORE_BASEDIR = path_1.default.normalize(`bin\\x64\\plugins`);
                        exports.CYBERSCRIPT_CORE_CETBASEDIR = path_1.default.normalize(`${exports.CET_MOD_CANONICAL_PATH_PREFIX}\\quest_mod`);
                        exports.CYBERSCRIPT_CORE_CPSTYLING_PLUGINDIR = path_1.default.normalize(`${exports.CET_MOD_CANONICAL_PATH_PREFIX}\\CPStyling`);
                        exports.CYBERSCRIPT_CORE_ASI = path_1.default.normalize(`${exports.CYBERSCRIPT_CORE_BASEDIR}\\ImmersiveRoleplayFramework.asi`);
                        exports.CYBERSCRIPT_CORE_REQUIRED_FILES = [
                            exports.CYBERSCRIPT_CORE_ASI,
                            path_1.default.normalize(`${exports.CYBERSCRIPT_CORE_CETBASEDIR}\\init.lua`),
                        ];
                        var CoreRed4extLayout;
                        (function (CoreRed4extLayout) {
                            CoreRed4extLayout["OneNine"] = "\n              - .\\bin\\x64\\winmm.dll\n              - .\\red4ext\\LICENSE.txt\n              - .\\red4ext\\THIRD_PARTY_LICENSES.txt\n              - .\\red4ext\\RED4ext.dll\n              ";
                            CoreRed4extLayout["OneSeven"] = "\n              - .\\bin\\x64\\d3d11.dll\n              - .\\red4ext\\LICENSE.txt\n              - .\\red4ext\\THIRD_PARTY_LICENSES.txt\n              - .\\red4ext\\RED4ext.dll\n              ";
                            CoreRed4extLayout["Deprecated"] = "\n              - .\\bin\\x64\\powrprof.dll\n              - .\\red4ext\\LICENSE.txt\n              - .\\red4ext\\RED4ext.dll\n              ";
                        })(CoreRed4extLayout = exports.CoreRed4extLayout || (exports.CoreRed4extLayout = {}));
                        exports.RED4EXT_CORE_BASEDIR = path_1.default.normalize(`red4ext\\`);
                        exports.RED4EXT_CORE_ONE_NINE_HOOK_DLL = path_1.default.normalize(`bin\\x64\\winmm.dll`);
                        exports.RED4EXT_CORE_ONE_SEVEN_HOOK_DLL = path_1.default.normalize(`bin\\x64\\d3d11.dll`);
                        exports.DEPRECATED_RED4EXT_CORE_HOOK_DLL = path_1.default.normalize(`bin\\x64\\powrprof.dll`);
                        exports.RED4EXT_PLUGIN_BASEDIR = path_1.default.normalize(`red4ext\\plugins`);
                        exports.CORE_RED4EXT_GENERATED_DIRS = [exports.RED4EXT_PLUGIN_BASEDIR];
                        const RED4EXT_BASE_FILES = [
                            path_1.default.normalize(`${exports.RED4EXT_CORE_BASEDIR}\\LICENSE.txt`),
                            path_1.default.normalize(`${exports.RED4EXT_CORE_BASEDIR}\\THIRD_PARTY_LICENSES.txt`),
                            path_1.default.normalize(`${exports.RED4EXT_CORE_BASEDIR}\\RED4ext.dll`),
                        ];
                        exports.RED4EXT_CORE_ONE_NINE_REQUIRED_FILES = [
                            exports.RED4EXT_CORE_ONE_NINE_HOOK_DLL,
                            ...RED4EXT_BASE_FILES,
                        ];
                        exports.RED4EXT_CORE_ONE_SEVEN_REQUIRED_FILES = [
                            exports.RED4EXT_CORE_ONE_SEVEN_HOOK_DLL,
                            ...RED4EXT_BASE_FILES,
                        ];
                        exports.DEPRECATED_RED4EXT_CORE_REQUIRED_FILES = [
                            exports.DEPRECATED_RED4EXT_CORE_HOOK_DLL,
                            path_1.default.normalize(`${exports.RED4EXT_CORE_BASEDIR}\\LICENSE.txt`),
                            path_1.default.normalize(`${exports.RED4EXT_CORE_BASEDIR}\\RED4ext.dll`),
                        ];
                        exports.AMM_BASEDIR_PATH = path_1.default.join(exports.CET_MOD_CANONICAL_PATH_PREFIX, `AppearanceMenuMod`);
                        exports.AMM_CORE_PLACEHOLDER_FILENAME = `vortex_needs_this.txt`;
                        var CoreAmmLayout;
                        (function (CoreAmmLayout) {
                            CoreAmmLayout["OnlyValid"] = "\n              CET:\n\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\init.lua\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\db.sqlite3\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Collabs\\API.lua\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Collabs\\Custom Appearances\\[placeholder]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Collabs\\Custom Entities\\[placeholder]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Collabs\\Custom Props\\[placeholder]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Themes\\Default.json\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Decor\\[placeholder]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Decor\\Backup\\[placeholder]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Locations\\[placeholder]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Scripts\\[placeholder]\n              - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Themes\\[placeholder]\n\n              Archives:\n\n              - .\\archive\\pc\\mod\\basegame_AMM_Props.archive\n              - .\\archive\\pc\\mod\\basegame_AMM_requirement.archive\n              ";
                        })(CoreAmmLayout = exports.CoreAmmLayout || (exports.CoreAmmLayout = {}));
                        exports.AMM_CORE_REQUIRED_CET_PATHS = [
                            path_1.default.join(`${exports.AMM_BASEDIR_PATH}/init.lua`),
                            path_1.default.join(`${exports.AMM_BASEDIR_PATH}/db.sqlite3`),
                            path_1.default.join(`${exports.AMM_BASEDIR_PATH}/Collabs/API.lua`),
                        ];
                        exports.AMM_CORE_REQUIRED_ARCHIVE_PATHS = [
                            path_1.default.join(`${exports.ARCHIVE_MOD_CANONICAL_PREFIX}\\basegame_AMM_Props.archive`),
                            path_1.default.join(`${exports.ARCHIVE_MOD_CANONICAL_PREFIX}\\basegame_AMM_requirement.archive`),
                        ];
                        exports.AMM_CORE_REQUIRED_PATHS = [
                            ...exports.AMM_CORE_REQUIRED_CET_PATHS,
                            ...exports.AMM_CORE_REQUIRED_ARCHIVE_PATHS,
                        ];
                        exports.AMM_MOD_BASEDIR_PATH = exports.AMM_BASEDIR_PATH;
                        var AmmLayout;
                        (function (AmmLayout) {
                            AmmLayout["Canon"] = "\n    - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Collabs\\Custom Appearances\\*.lua + [any files or subdirs]\n    - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Collabs\\Custom Entities\\*.lua + [any files or subdirs]\n    - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\Collabs\\Custom Props\\*.lua + [any files or subdirs]\n    - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Decor\\*.json + [any files or subdirs]\n    - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Locations\\*.json + [any files or subdirs]\n    - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Scripts\\*.json + [any files or subdirs]\n    - .\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceMenuMod\\User\\Themes\\*.json + [any files or subdirs]\n    ";
                            AmmLayout["ToplevelCanonSubdir"] = "\n    - .\\Collabs\\Custom Appearances\\*.lua + [any files or subdirs]\n    - .\\Collabs\\Custom Entities\\*.lua + [any files or subdirs]\n    - .\\Collabs\\Custom Props\\*.lua + [any files or subdirs]\n    - .\\User\\Decor\\*.json + [any files or subdirs]\n    - .\\User\\Locations\\*.json + [any files or subdirs]\n    - .\\User\\Scripts\\*.json + [any files or subdirs]\n    - .\\User\\Themes\\*.json + [any files or subdirs]\n  ";
                            AmmLayout["Toplevel"] = "\n    - .\\[*.json or *.lua files that can be validated to be AMM format]\n  ";
                        })(AmmLayout = exports.AmmLayout || (exports.AmmLayout = {}));
                        exports.AMM_MOD_COLLAB_LUA_EXTENSION = `.lua`;
                        exports.AMM_MOD_USERMOD_JSON_EXTENSION = `.json`;
                        exports.AMM_MOD_CUSTOMS_DIRNAME = `Collabs`;
                        exports.AMM_MOD_USERMOD_DIRNAME = `User`;
                        exports.AMM_MOD_CUSTOMS_CANON_DIR = path_1.default.join(exports.AMM_BASEDIR_PATH, exports.AMM_MOD_CUSTOMS_DIRNAME);
                        exports.AMM_MOD_USERMOD_CANON_DIR = path_1.default.join(exports.AMM_BASEDIR_PATH, exports.AMM_MOD_USERMOD_DIRNAME);
                        exports.AMM_MOD_CUSTOM_APPEARANCES_CANON_DIR = path_1.default.join(`${exports.AMM_MOD_CUSTOMS_CANON_DIR}\\Custom Appearances`);
                        exports.AMM_MOD_APPEARANCES_REQUIRED_MATCHES = [
                            /modder\s*=/,
                            /unique_identifier\s*=/,
                            /entity_id\s*=/,
                            /appearances\s*=/,
                        ];
                        exports.AMM_MOD_CUSTOM_ENTITIES_CANON_DIR = path_1.default.join(`${exports.AMM_MOD_CUSTOMS_CANON_DIR}\\Custom Entities`);
                        exports.AMM_MOD_ENTITIES_REQUIRED_MATCHES = [
                            /modder\s*=/,
                            /unique_identifier\s*=/,
                            /entity_info\s*=/,
                        ];
                        exports.AMM_MOD_CUSTOM_PROPS_CANON_DIR = path_1.default.join(`${exports.AMM_MOD_CUSTOMS_CANON_DIR}\\Custom Props`);
                        exports.AMM_MOD_PROPS_REQUIRED_MATCHES = [
                            /modder\s*=/,
                            /unique_identifier\s*=/,
                            /props\s*=/,
                        ];
                        exports.AMM_MOD_DECOR_CANON_DIR = path_1.default.join(`${exports.AMM_MOD_USERMOD_CANON_DIR}\\Decor`);
                        exports.AMM_MOD_DECOR_REQUIRED_KEYS = [`name`, `props`, `lights`];
                        exports.AMM_MOD_LOCATIONS_CANON_DIR = path_1.default.join(`${exports.AMM_MOD_USERMOD_CANON_DIR}\\Locations`);
                        exports.AMM_MOD_LOCATION_REQUIRED_KEYS = [`x`, `y`, `z`];
                        exports.AMM_MOD_SCRIPTS_CANON_DIR = path_1.default.join(`${exports.AMM_MOD_USERMOD_CANON_DIR}\\Scripts`);
                        exports.AMM_MOD_SCRIPT_REQUIRED_KEYS = [`title`, `actors`];
                        exports.AMM_MOD_THEMES_CANON_DIR = path_1.default.join(`${exports.AMM_MOD_USERMOD_CANON_DIR}\\Themes`);
                        exports.AMM_MOD_THEME_REQUIRED_KEYS = [`Text`, `Border`];
                        var RedscriptLayout;
                        (function (RedscriptLayout) {
                            RedscriptLayout["Canon"] = "\n          .\\r6\\scripts\\[modname]\\[*.reds, any files + subdirs]\n          .\\r6\\config\\redsUserHints\\*.toml\n          ";
                            RedscriptLayout["Basedir"] = "\n          .\\r6\\scripts\\*.reds + [any files + subdirs]\n          .\\r6\\config\\redsUserHints\\*.toml\n          ";
                            RedscriptLayout["Toplevel"] = "\n          .\\*.reds + [any files + subdirs]\n          ";
                            RedscriptLayout["ConfigOnly"] = "\n          .\\r6\\config\\redsUserHints\\*.toml\n          ";
                        })(RedscriptLayout = exports.RedscriptLayout || (exports.RedscriptLayout = {}));
                        exports.REDS_MOD_CANONICAL_EXTENSION = `.reds`;
                        exports.REDS_MOD_CONFIG_EXTENSIONS = [`.toml`];
                        exports.REDS_MOD_CANONICAL_PATH_PREFIX = path_1.default.normalize(`r6/scripts`);
                        exports.REDS_MOD_CANONICAL_HINTS_PATH_PREFIX = path_1.default.normalize(`r6/config/redsUserHints`);
                        var Red4ExtLayout;
                        (function (Red4ExtLayout) {
                            Red4ExtLayout["Canon"] = ".\\red4ext\\plugins\\[modname]\\[*.dll, any files or subdirs]";
                            Red4ExtLayout["Basedir"] = ".\\red4ext\\plugins\\[*.dll, any files or subdirs]";
                            Red4ExtLayout["Modnamed"] = ".\\[modname]\\[*.dll, any files or subdirs]";
                            Red4ExtLayout["Toplevel"] = ".\\[*.dll, any files or subdirs]";
                        })(Red4ExtLayout = exports.Red4ExtLayout || (exports.Red4ExtLayout = {}));
                        exports.RED4EXT_MOD_CANONICAL_EXTENSION = `.dll`;
                        exports.RED4EXT_MOD_CANONICAL_BASEDIR = path_1.default.normalize(`red4ext/plugins/`);
                        exports.RED4EXT_CORE_RED4EXT_DLL = path_1.default.join(`red4ext\\RED4ext.dll`);
                        exports.RED4EXT_KNOWN_NONOVERRIDABLE_DLLS = [
                            path_1.default.join(`clrcompression.dll`),
                            path_1.default.join(`clrjit.dll`),
                            path_1.default.join(`coreclr.dll`),
                            path_1.default.join(`D3DCompiler_47_cor3.dll`),
                            path_1.default.join(`mscordaccore.dll`),
                            path_1.default.join(`PenImc_cor3.dll`),
                            path_1.default.join(`PresentationNative_cor3.dll`),
                            path_1.default.join(`vcruntime140_cor3.dll`),
                            path_1.default.join(`wpfgfx_cor3.dll`),
                        ];
                        exports.RED4EXT_KNOWN_NONOVERRIDABLE_DLL_DIRS = [path_1.default.join(`bin\\x64\\`)];
                        var REDmodLayout;
                        (function (REDmodLayout) {
                            REDmodLayout["Canon"] = "\n          One or more mods in the canonical REDmod layout of\n\n          | - .\\mods\\[modname]\\info.json { name: modname, ... }\n          |   - .\\mods\\[modname]\\archives\\[*.archive, *.xl]\n          |   - .\\mods\\[modname]\\customSounds\\*.wav\n          |   - .\\mods\\[modname]\\scripts\\[valid script subdir]\\[*.script, *.ws]\n          |   - .\\mods\\[modname]\\tweaks\\base\\gameplay\\static_data\\*.tweak\n          ";
                            REDmodLayout["InfoOnly"] = "\n          Or the special case for info-only mods (currently ONLY for `mod_skip` audio mods,\n          only supported in canonical layout:\n\n          | - .\\mods\\[modname]\\info.json { name: modname, customSounds: [ { name: 'hi', type: 'mod_skip' } ... } ]\n          ";
                            REDmodLayout["Named"] = "\n          Without the top-level mods\\ directory, one or more mods in the form of\n\n          | - .\\[modname]\\info.json { name: modname, ... }\n          |   - .\\[modname]\\archives\\[*.archive, *.xl]\n          |   - .\\[modname]\\customSounds\\*.wav\n          |   - .\\[modname]\\scripts\\[valid script subdir]\\[*.script, *.ws]\n          |   - .\\[modname]\\tweaks\\base\\gameplay\\static_data\\*.tweak\n          ";
                            REDmodLayout["Toplevel"] = "\n          Single mod in the form of\n\n          | - .\\info.json { name: modname, ... }\n          |   - .\\archives\\[*.archive, *.xl]\n          |   - .\\customSounds\\*.wav\n          |   - .\\scripts\\[valid script subdir]\\[*.script, *.ws]\n          |   - .\\tweaks\\base\\gameplay\\static_data\\*.tweak\n          ";
                        })(REDmodLayout = exports.REDmodLayout || (exports.REDmodLayout = {}));
                        var REDmodTransformedLayout;
                        (function (REDmodTransformedLayout) {
                            REDmodTransformedLayout["Archive"] = "Archive layout transformed to REDmod Canon";
                        })(REDmodTransformedLayout = exports.REDmodTransformedLayout || (exports.REDmodTransformedLayout = {}));
                        exports.REDMOD_BASEDIR = path_1.default.normalize(`mods`);
                        exports.REDMOD_ARCHIVES_DIRNAME = `archives`;
                        exports.REDMOD_ARCHIVES_VALID_EXTENSIONS = [`.archive`, `.xl`];
                        exports.REDMOD_CUSTOMSOUNDS_DIRNAME = `customSounds`;
                        exports.REDMOD_CUSTOMSOUNDS_VALID_EXTENSIONS = [`.wav`];
                        exports.REDMOD_SCRIPTS_DIRNAME = `scripts`;
                        exports.REDMOD_SCRIPTS_VALID_EXTENSIONS = [`.script`, `.ws`];
                        exports.REDMOD_TWEAKS_DIRNAME = `tweaks`;
                        exports.REDMOD_TWEAKS_VALID_EXTENSIONS = [`.tweak`];
                        exports.REDMOD_SCRIPTS_VALID_SUBDIR_NAMES = [`core`, `cyberpunk`, `exec`, `samples`, `tests`];
                        exports.REDMOD_TWEAKS_VALID_SUBDIRS = [`base\\gameplay\\static_data`, `ep1\\gameplay\\static_data`];
                        exports.REDMOD_SUBTYPE_DIRNAMES = [
                            exports.REDMOD_ARCHIVES_DIRNAME,
                            exports.REDMOD_CUSTOMSOUNDS_DIRNAME,
                            exports.REDMOD_SCRIPTS_DIRNAME,
                            exports.REDMOD_TWEAKS_DIRNAME,
                        ];
                        exports.REDMOD_SCRIPTS_MODDED_DIR = path_1.default.join(`r6\\cache\\modded`);
                        exports.REDMOD_INFO_FILENAME = `info.json`;
                        exports.REDMOD_AUTOCONVERTED_NAME_TAG = `(V2077 Autoconverted)`;
                        exports.REDMOD_AUTOCONVERTED_VERSION_TAG = `V2077RED`;
                        exports.REDMOD_MODTYPE = `REDmod`;
                        exports.REDMOD_MODTYPE_ATTRIBUTE = (0, installers_types_1.makeAttr)(installers_types_1.ModAttributeKey.ModType, installers_types_1.ModType.REDmod);
                        exports.ASI_MOD_EXT = `.asi`;
                        exports.ASI_MOD_PATH = path_1.default.join(`bin`, `x64`, `plugins`);
                        exports.CYBERCAT_CORE_BASEDIR = path_1.default.join(`CyberCAT`);
                        exports.CYBERCAT_CORE_REQUIRED_FILES = [
                            path_1.default.join(`CP2077SaveEditor.exe`),
                            path_1.default.join(`D3DCompiler_47_cor3.dll`),
                            path_1.default.join(`e_sqlite3.dll`),
                            path_1.default.join(`kraken.dll`),
                            path_1.default.join(`PenImc_cor3.dll`),
                            path_1.default.join(`PresentationNative_cor3.dll`),
                            path_1.default.join(`vcruntime140_cor3.dll`),
                            path_1.default.join(`wpfgfx_cor3.dll`),
                        ];
                        var CyberCatLayout;
                        (function (CyberCatLayout) {
                            CyberCatLayout["OnlyValid"] = "\n    - .\\CyberCAT\\config.json\n    - .\\CyberCAT\\CP2077SaveEditor.exe\n    - .\\CyberCAT\\*.dll\n    - .\\CyberCAT\\licenses\\*.txt\n    - .\\CyberCAT\\previews\\[category]\\*.jpg";
                        })(CyberCatLayout = exports.CyberCatLayout || (exports.CyberCatLayout = {}));
                        var PresetLayout;
                        (function (PresetLayout) {
                            PresetLayout["Unlocker"] = ".\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceChangeUnlocker\\character-presets\\[female, male]\\*.preset";
                            PresetLayout["ACLegacy"] = ".\\bin\\x64\\plugins\\cyber_engine_tweaks\\mods\\AppearanceChangeUnlocker\\character-presets\\*.preset";
                            PresetLayout["CyberCAT"] = ".\\V2077\\presets\\cybercat\\*.preset";
                            PresetLayout["Toplevel"] = ".\\*.preset";
                        })(PresetLayout = exports.PresetLayout || (exports.PresetLayout = {}));
                        const PRESET_MOD_UNLOCKER_MAGIC_HASH_FOR_BOOBIES = `14444638123505366956`;
                        exports.PRESET_MOD_EXTENSION = `.preset`;
                        exports.PRESET_MOD_CYBERCAT_BASEDIR = path_1.default.normalize(`${index_metadata_1.EXTENSION_NAME_INTERNAL}\\presets\\cybercat\\`);
                        exports.PRESET_MOD_CYBERCAT_REQUIRED_KEYS = [
                            `DataExists`,
                            `Unknown1`,
                            `UnknownFirstBytes`,
                            `FirstSection`,
                            `SecondSection`,
                            `ThirdSection`,
                            `StringTriples`,
                        ];
                        exports.PRESET_MOD_UNLOCKER_BASEDIR = path_1.default.normalize(`${exports.CET_MOD_CANONICAL_PATH_PREFIX}\\AppearanceChangeUnlocker\\character-presets`);
                        exports.PRESET_MOD_UNLOCKER_FEMDIR = path_1.default.join(exports.PRESET_MOD_UNLOCKER_BASEDIR, `female`);
                        exports.PRESET_MOD_UNLOCKER_MASCDIR = path_1.default.join(exports.PRESET_MOD_UNLOCKER_BASEDIR, `male`);
                        exports.PRESET_MOD_UNLOCKER_REQUIRED_MATCHES_FEM_MUST_MATCH_FIRST = [
                            new RegExp(`LocKey#${PRESET_MOD_UNLOCKER_MAGIC_HASH_FOR_BOOBIES}:\\d+`),
                        ];
                        exports.PRESET_MOD_UNLOCKER_REQUIRED_MATCHES_MASC = [/LocKey#\d+:\d+/];
                        exports.LayoutDescriptions = new Map([
                            [
                                installers_types_1.InstallerType.CoreRed4ext,
                                `
    \`${CoreRed4extLayout.OneSeven}\`
    This is the only possible valid layout for current ${installers_types_1.InstallerType.CoreRed4ext} that I know of.
    This older version can still be installed, but should be updated:
    \`${CoreRed4extLayout.Deprecated}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreRedscript,
                                `
    \`${CoreRedscriptLayout.OnlyValid}\`
    This is the only possible valid layout for current ${installers_types_1.InstallerType.CoreRedscript} that I know of.
    This older version can still be installed, but should be updated:
    \`${CoreRedscriptLayout.Deprecated}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreTweakXL,
                                `
    \`${CoreTweakXLLayout.OnlyValid}\`

    This is the only possible valid layout for ${installers_types_1.InstallerType.CoreTweakXL} that I know of.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreAudioware,
                                `
    \`${CoreAudiowareLayout.OnlyValid}\`

    This is the only possible valid layout for ${installers_types_1.InstallerType.CoreAudioware} that I know of.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreArchiveXL,
                                `
    \`${CoreArchiveXLLayout.OnlyValid}\`

    This is the only possible valid layout for ${installers_types_1.InstallerType.CoreArchiveXL} that I know of.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreInputLoader,
                                `
        \`${CoreInputLoaderLayout.CurrentV012}\`

        This is the only possible valid layout for ${installers_types_1.InstallerType.CoreInputLoader} that I know of.
        These older versions can still be installed, but should be updated:

        \`${CoreInputLoaderLayout.PreviousV011}\`
        AND
        \`${CoreInputLoaderLayout.PreviousV010}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreModSettings,
                                `
    \`${CoreModSettingsLayout.OnlyValid}\`

    This is the only possible valid layout for ${installers_types_1.InstallerType.CoreModSettings} that I know of.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreCyberCat,
                                `
    \`${CyberCatLayout.OnlyValid}\`

    This is the only possible valid layout for ${installers_types_1.InstallerType.CoreCyberCat} that I know of.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreAmm,
                                `
    ${CoreAmmLayout.OnlyValid}

    This is the only possible valid layout for ${installers_types_1.InstallerType.CoreAmm} that I know of.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.CoreCyberScript,
                                `
    ${CoreCyberScriptLayout.OnlyValid}

    This is the only possible valid layout for ${installers_types_1.InstallerType.CoreCyberScript} that I know of.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.AMM,
                                `
    Any combination of the below canonical layouts (including any canonical Archives)

    ${AmmLayout.Canon}
    ${ArchiveLayout.Canon}

    Alternatively, any combination of the below toplevel layouts (including toplevel Archives)

    ${AmmLayout.ToplevelCanonSubdir}
    ${AmmLayout.Toplevel}
    ${ArchiveLayout.Other}
    `,
                            ],
                            [
                                installers_types_1.InstallerType.ConfigJson,
                                `
    ${ConfigJsonLayout.Protected}
    ${ConfigJsonLayout.Toplevel}

    These JSON files are the only known working and valid ones, and they are protected
    because they may contain multiple modifications. There's a prompt before installing
    any of these files.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.ConfigXml,
                                `
    - \`${ConfigXmlLayout.Protected}\` (Protected)
    - \`${ConfigXmlLayout.Canon}\` (Can be mixed with above)
    - \`${ConfigXmlLayout.Mergeable}\` (These files can be merged by CoreInputLoader)
    - \`${ConfigXmlLayout.Toplevel}\` (Protected, can be moved to canonical)

    Some of the XML config files are protected, because they often contain modifications
    by the user. There's a prompt before installing into those paths.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.TweakXL,
                                `
    \`${TweakXLLayout.Canon}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.Audioware,
                                `
    \`${AudiowareLayout.Canon}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.Redscript,
                                `
    - \`${RedscriptLayout.Canon}\` (Canonical)
    | - \`${ArchiveLayout.Canon}\`
    | - \`${ArchiveLayout.Heritage}\`
    - \`${RedscriptLayout.Basedir}\`  (Can be fixed to canonical)
    | - \`${ArchiveLayout.Canon}\`
    | - \`${ArchiveLayout.Heritage}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.Red4Ext,
                                `
    - \`${Red4ExtLayout.Canon}\` (Canonical)
    | - \`${ArchiveLayout.Canon}\`
    | - \`${ArchiveLayout.Heritage}\`
    - \`${Red4ExtLayout.Basedir}\` (Can be fixed to canonical)
    | - \`${ArchiveLayout.Canon}\`
    | - \`${ArchiveLayout.Heritage}\`
    - \`${Red4ExtLayout.Modnamed}\` (Can be fixed to canonical)
    | - \`${ArchiveLayout.Canon}\`
    | - \`${ArchiveLayout.Heritage}\`
    - \`${Red4ExtLayout.Toplevel}\` (Can be fixed to canonical)
    | - (No other files allowed)
    `,
                            ],
                            [
                                installers_types_1.InstallerType.REDmod,
                                `
    - \`${REDmodLayout.Canon}\` (Canonical)
    - \`${REDmodLayout.InfoOnly}\` (Special case)
    - \`${REDmodLayout.Named}\` (Can be fixed to canonical)
    - \`${REDmodLayout.Toplevel}\` (Can be fixed to canonical)

    Additionally

    - \`${REDmodTransformedLayout.Archive}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.Archive,
                                `
    - \`${ArchiveLayout.XL}\` (Canonical, with ArchiveXL)
    - \`${ArchiveLayout.Canon}\` (Canonical)
    - \`${ArchiveLayout.Heritage}\` (Old style, fixable to Canon)
    - \`${ArchiveLayout.Other}\`
    `,
                            ],
                            [
                                installers_types_1.InstallerType.Preset,
                                `
    Appearance Change Unlocker presets:

    \`${PresetLayout.Unlocker}\`

    CyberCAT presets:

    \`${PresetLayout.CyberCAT}\`

    Either kind of preset at toplevel:

    \`${PresetLayout.Toplevel}\`

    Please note that you can put CyberCAT presets anywhere you like!
    I just install them in ${exports.PRESET_MOD_CYBERCAT_BASEDIR} but CyberCAT
    can load from any other dir too.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.MultiType,
                                `
    - \`${ConfigJsonLayout.Protected}\`
    - One of
    | - \`${ConfigXmlLayout.Protected}\`
    | - \`${ConfigXmlLayout.Canon}\`
    - \`${CetLayout.Canon}\`
    - One of
    | - \`${RedscriptLayout.Canon}\`
    | - \`${RedscriptLayout.Basedir}\`
    - One of
    | - \`${Red4ExtLayout.Canon}\`
    | - \`${Red4ExtLayout.Basedir}\`
    - One of
    | - \`${ArchiveLayout.XL}\`
    | - \`${ArchiveLayout.Canon}\`
    | - \`${ArchiveLayout.Heritage}\`

    - (No files can exist outside the above locations)

    For separate mod types I can make better guesses and support
    more fixable cases than I can here.
    `,
                            ],
                            [
                                installers_types_1.InstallerType.SpecialExtraFiles,
                                `
    - \`${ExtraFilesLayout.Toplevel}\`

    Some mods may contain extra files, usually documentation or pictures. If
    the files aren't located in a place where the appropriate mod type installer
    can handle them, I'll move them to \`.\\${exports.MODS_EXTRA_BASEDIR}\\[mod name]\\\`
    so they're easy to find and don't clutter up the game dir.

    The allowed extra file extensions are:

    ${MODS_EXTRA_FILETYPES_AS_STRING}
    `,
                            ],
                            [
                                installers_types_1.InstallerType.Fallback,
                                `
    - \`${FallbackLayout.Unvalidated}\`

    This is the fallback installer. That means I can install anything.
    `,
                            ],
                        ]);
                        var NoLayout;
                        (function (NoLayout) {
                            NoLayout["Optional"] = "it's a valid result that nothing was found";
                        })(NoLayout = exports.NoLayout || (exports.NoLayout = {}));
                        var NoInstructions;
                        (function (NoInstructions) {
                            NoInstructions["NoMatch"] = "attempted layout didn't match";
                        })(NoInstructions = exports.NoInstructions || (exports.NoInstructions = {}));
                        var InvalidLayout;
                        (function (InvalidLayout) {
                            InvalidLayout["Conflict"] = "can't determine what the intended layout is, conflicting files";
                        })(InvalidLayout = exports.InvalidLayout || (exports.InvalidLayout = {}));
                        var NotAllowed;
                        (function (NotAllowed) {
                            NotAllowed["CanceledByUser"] = "user didn't permit using these instructions when prompted";
                        })(NotAllowed = exports.NotAllowed || (exports.NotAllowed = {}));


                        /***/
                    }),

/***/ "./src/installers.shared.ts":
/*!**********************************!*\
  !*** ./src/installers.shared.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.promptBeforeContinuingWithProtectedInstructions = exports.useAllMatchingLayouts = exports.useFirstMatchingLayoutForInstructionsAsync = exports.useFirstMatchingLayoutForInstructions = exports.instructionToGenerateMetadataAttribute = exports.instructionsToGenerateDirs = exports.instructionsForSameSourceAndDestPaths = exports.instructionsForSourceToDestPairs = exports.moveFromTo = exports.toDirInPath = exports.toSamePath = exports.modInfoFromArchiveNameOrSynthetic = exports.modInfoFromArchivePath = exports.modInfoTaggedAsAutoconverted = exports.makeSyntheticModInfo = exports.makeModInfo = exports.makeSemanticVersion = exports.fileToInstruction = exports.fileMove = exports.fileFromDiskTE = exports.fileFromDisk = void 0;
                        const promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ "fs/promises"));
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const A = __importStar(__webpack_require__(/*! fp-ts/Array */ "./node_modules/fp-ts/es6/Array.js"));
                        const Either_1 = __webpack_require__(/*! fp-ts/Either */ "./node_modules/fp-ts/es6/Either.js");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const Task_1 = __webpack_require__(/*! fp-ts/lib/Task */ "./node_modules/fp-ts/lib/Task.js");
                        const TaskEither_1 = __webpack_require__(/*! fp-ts/lib/TaskEither */ "./node_modules/fp-ts/lib/TaskEither.js");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const features_1 = __webpack_require__(/*! ./features */ "./src/features.ts");
                        const fileFromDisk = ({ relativePath, pathOnDisk }) => (0, function_1.pipe)(() => promises_1.default.stat(path_1.default.dirname(pathOnDisk)).then(() => promises_1.default.readFile(pathOnDisk, { encoding: `utf-8` })), (0, Task_1.map)((content) => ({ relativePath, pathOnDisk, content })));
                        exports.fileFromDisk = fileFromDisk;
                        const fileFromDiskTE = ({ relativePath, pathOnDisk }) => (0, TaskEither_1.tryCatch)((0, exports.fileFromDisk)({ relativePath, pathOnDisk }), (reason) => new Error(`Failed to read file ${relativePath} (on disk ${pathOnDisk}): ${reason}`));
                        exports.fileFromDiskTE = fileFromDiskTE;
                        const fileMove = (to, file) => ({
                            relativePath: path_1.default.join(to, path_1.default.basename(file.relativePath)),
                            pathOnDisk: file.pathOnDisk,
                            originalRelativePath: file.relativePath,
                            content: file.content,
                        });
                        exports.fileMove = fileMove;
                        const fileToInstruction = (movedFile) => ({
                            type: `copy`,
                            source: movedFile.originalRelativePath,
                            destination: movedFile.relativePath,
                        });
                        exports.fileToInstruction = fileToInstruction;
                        const dateToSeconds = (date) => (date.getTime() / 1000).toString();
                        const secondsToDate = (ms) => new Date(parseInt(ms, 10) * 1000);
                        const makeSemanticVersion = (v) => ({
                            ...v,
                            v: `${v.major}${v.minor ? `.${v.minor}` : ``}${v.patch ? `.${v.patch}` : ``}${v.prerelease ? `-${v.prerelease}` : ``}${v.build ? `+${v.build}` : ``}`,
                        });
                        exports.makeSemanticVersion = makeSemanticVersion;
                        const makeModInfo = (rawModInfo) => ({
                            ...rawModInfo,
                            version: (0, exports.makeSemanticVersion)(rawModInfo.version),
                            createTime: secondsToDate(rawModInfo.createTime),
                            stagingDirPrefix: (0, filetree_1.normalizeDir)(rawModInfo.stagingDirPrefix),
                            installingDir: {
                                relativePath: (0, filetree_1.normalizeDir)(rawModInfo.installingDir.relativePath),
                                pathOnDisk: (0, filetree_1.normalizeDir)(rawModInfo.installingDir.pathOnDisk),
                            },
                        });
                        exports.makeModInfo = makeModInfo;
                        const makeSyntheticModInfo = (modName, stagingDirPrefix, installingDir) => (0, exports.makeModInfo)({
                            name: `${modName}${index_metadata_1.V2077_GENERATED_MOD_NAME_TAG}`,
                            id: `${modName}${index_metadata_1.V2077_GENERATED_MOD_NAME_TAG}`,
                            version: (0, exports.makeSemanticVersion)({
                                major: `0`, minor: `0`, patch: `1`, prerelease: index_metadata_1.V2077_GENERATED_MOD_VERSION_PRERELEASE,
                            }),
                            createTime: dateToSeconds(new Date()),
                            stagingDirPrefix,
                            installingDir,
                        });
                        exports.makeSyntheticModInfo = makeSyntheticModInfo;
                        const modInfoTaggedAsAutoconverted = (features, modInfo) => {
                            const modNameWithoutExtraTag = modInfo.name.replace(index_metadata_1.V2077_GENERATED_MOD_NAME_TAG, ``);
                            const modNameToUseForModInfo = (0, features_1.IsFeatureEnabled)(features.REDmodAutoconversionTag)
                                ? `${modNameWithoutExtraTag} ${installers_layouts_1.REDMOD_AUTOCONVERTED_NAME_TAG}`
                                : modNameWithoutExtraTag;
                            const existingBuildTagMustBeModified = modInfo.version.build && modInfo.version.build !== ``;
                            const tagSeparator = existingBuildTagMustBeModified ? `-` : ``;
                            const taggedBuildVersion = `${modInfo.version.build || ``}${tagSeparator}${installers_layouts_1.REDMOD_AUTOCONVERTED_VERSION_TAG}`;
                            return (0, exports.makeModInfo)({
                                ...modInfo,
                                name: modNameToUseForModInfo,
                                version: {
                                    ...modInfo.version,
                                    build: taggedBuildVersion,
                                },
                                createTime: dateToSeconds(modInfo.createTime),
                            });
                        };
                        exports.modInfoTaggedAsAutoconverted = modInfoTaggedAsAutoconverted;
                        const ModInfoFormatParser = /^(?<name>.+?)-(?<id>\d+)-(?<major>\w+)(?:-(?<minor>\w+)(?:-(?<patch>\w+))?)?-(?<createTime>\d+)(?<copy>(\.\d+||\(\d+\)))?(?:\+(?<variant>.+))?$/;
                        const modInfoFromArchivePath = (installingDir) => {
                            const stagingDirPrefix = path_1.default.dirname(installingDir.relativePath);
                            const cleanedArchiveName = path_1.default.basename(installingDir.relativePath, `.installing`);
                            const infoSuccessfullyParsed = ModInfoFormatParser.exec(cleanedArchiveName);
                            if (!infoSuccessfullyParsed) {
                                return (0, Either_1.left)((0, exports.makeSyntheticModInfo)(cleanedArchiveName, stagingDirPrefix, installingDir));
                            }
                            const { name, id, major, minor, patch, createTime, copy, variant, } = infoSuccessfullyParsed.groups;
                            const modInfo = (0, exports.makeModInfo)({
                                name,
                                id,
                                version: {
                                    major,
                                    minor,
                                    patch,
                                },
                                createTime,
                                stagingDirPrefix,
                                installingDir,
                                copy,
                                variant,
                            });
                            return (0, Either_1.right)(modInfo);
                        };
                        exports.modInfoFromArchivePath = modInfoFromArchivePath;
                        const modInfoFromArchiveNameOrSynthetic = (archivePath) => (0, function_1.pipe)((0, exports.modInfoFromArchivePath)(archivePath), (0, Either_1.match)(function_1.identity, function_1.identity));
                        exports.modInfoFromArchiveNameOrSynthetic = modInfoFromArchiveNameOrSynthetic;
                        const toSamePath = (f) => [f, f];
                        exports.toSamePath = toSamePath;
                        const toDirInPath = (prefixPath, dir) => (f) => [f, path_1.default.join(prefixPath, dir, path_1.default.basename(f))];
                        exports.toDirInPath = toDirInPath;
                        const moveFromTo = (fromPrefix, toPrefix) => (filePath) => {
                            if (fromPrefix === filetree_1.FILETREE_ROOT) {
                                return [filePath, path_1.default.join(toPrefix, filePath)];
                            }
                            return [
                                filePath,
                                path_1.default
                                    .normalize(filePath)
                                    .replace(path_1.default.normalize(fromPrefix), path_1.default.normalize(toPrefix)),
                            ];
                        };
                        exports.moveFromTo = moveFromTo;
                        const instructionsForSourceToDestPairs = (srcAndDestPairs) => {
                            const justTheRegularFiles = srcAndDestPairs.filter(([src, _]) => !src.endsWith(path_1.default.sep));
                            const instructions = justTheRegularFiles.map(([src, dst]) => ({
                                type: `copy`,
                                source: src,
                                destination: dst,
                            }));
                            return instructions;
                        };
                        exports.instructionsForSourceToDestPairs = instructionsForSourceToDestPairs;
                        const instructionsForSameSourceAndDestPaths = (files) => (0, exports.instructionsForSourceToDestPairs)(files.map(exports.toSamePath));
                        exports.instructionsForSameSourceAndDestPaths = instructionsForSameSourceAndDestPaths;
                        const instructionsToGenerateDirs = (dirs) => (0, function_1.pipe)(dirs, A.map((dir) => ({
                            type: `mkdir`,
                            destination: dir,
                        })));
                        exports.instructionsToGenerateDirs = instructionsToGenerateDirs;
                        const instructionToGenerateMetadataAttribute = (attribute) => ({
                            type: `attribute`,
                            key: attribute.key,
                            value: attribute.value,
                        });
                        exports.instructionToGenerateMetadataAttribute = instructionToGenerateMetadataAttribute;
                        const useFirstMatchingLayoutForInstructions = (api, modName, fileTree, possibleLayouts) => possibleLayouts.reduce((found, tryLayout) => (found === installers_layouts_1.NoInstructions.NoMatch ? tryLayout(api, modName, fileTree) : found), installers_layouts_1.NoInstructions.NoMatch);
                        exports.useFirstMatchingLayoutForInstructions = useFirstMatchingLayoutForInstructions;
                        const useFirstMatchingLayoutForInstructionsAsync = async (api, modName, fileTree, sourceDirPathForMod, possibleLayouts) => {
                            for (const tryLayout of possibleLayouts) {
                                const instructions = await tryLayout(api, modName, fileTree, sourceDirPathForMod);
                                if (instructions !== installers_layouts_1.NoInstructions.NoMatch) {
                                    return instructions;
                                }
                            }
                            return installers_layouts_1.NoInstructions.NoMatch;
                        };
                        exports.useFirstMatchingLayoutForInstructionsAsync = useFirstMatchingLayoutForInstructionsAsync;
                        const useAllMatchingLayouts = (api, modName, fileTree, layoutsToTry) => {
                            const allInstructions = layoutsToTry
                                .map((layout) => layout(api, modName, fileTree))
                                .filter((instructions) => instructions !== installers_layouts_1.NoInstructions.NoMatch);
                            const someValidInstructions = allInstructions.filter((maybe) => maybe.kind !== undefined);
                            return someValidInstructions;
                        };
                        exports.useAllMatchingLayouts = useAllMatchingLayouts;
                        const promptBeforeContinuingWithProtectedInstructions = async (api, installerType, protectedPaths, instructionsToUse) => {
                            const destinationPaths = instructionsToUse.instructions.map((i) => i.destination);
                            const affectedPaths = destinationPaths.filter((p) => protectedPaths.includes(p));
                            const installDecision = await (0, ui_dialogs_1.promptUserOnProtectedPaths)(api, installerType, affectedPaths);
                            if (installDecision === installers_types_1.InstallDecision.UserWantsToCancel) {
                                return installers_layouts_1.NotAllowed.CanceledByUser;
                            }
                            return instructionsToUse;
                        };
                        exports.promptBeforeContinuingWithProtectedInstructions = promptBeforeContinuingWithProtectedInstructions;


                        /***/
                    }),

/***/ "./src/installers.ts":
/*!***************************!*\
  !*** ./src/installers.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.internalPipelineInstaller = exports.wrapInstall = exports.wrapTestSupported = exports.notInstallableMod = exports.notSupportedModType = void 0;
                        const path_1 = __webpack_require__(/*! path */ "path");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const Predicate_1 = __webpack_require__(/*! fp-ts/lib/Predicate */ "./node_modules/fp-ts/lib/Predicate.js");
                        const filetree_1 = __webpack_require__(/*! ./filetree */ "./src/filetree.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installer_core_1 = __webpack_require__(/*! ./installer.core */ "./src/installer.core.ts");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const installer_core_tweak_xl_1 = __webpack_require__(/*! ./installer.core-tweak-xl */ "./src/installer.core-tweak-xl.ts");
                        const installer_fallback_1 = __webpack_require__(/*! ./installer.fallback */ "./src/installer.fallback.ts");
                        const installer_tweak_xl_1 = __webpack_require__(/*! ./installer.tweak-xl */ "./src/installer.tweak-xl.ts");
                        const installer_core_archive_xl_1 = __webpack_require__(/*! ./installer.core-archive-xl */ "./src/installer.core-archive-xl.ts");
                        const installer_archive_1 = __webpack_require__(/*! ./installer.archive */ "./src/installer.archive.ts");
                        const installer_multitype_1 = __webpack_require__(/*! ./installer.multitype */ "./src/installer.multitype.ts");
                        const installer_asi_1 = __webpack_require__(/*! ./installer.asi */ "./src/installer.asi.ts");
                        const installer_cet_1 = __webpack_require__(/*! ./installer.cet */ "./src/installer.cet.ts");
                        const installer_config_ini_reshade_1 = __webpack_require__(/*! ./installer.config.ini-reshade */ "./src/installer.config.ini-reshade.ts");
                        const installer_config_json_1 = __webpack_require__(/*! ./installer.config.json */ "./src/installer.config.json.ts");
                        const installer_config_xml_1 = __webpack_require__(/*! ./installer.config.xml */ "./src/installer.config.xml.ts");
                        const installer_red4ext_1 = __webpack_require__(/*! ./installer.red4ext */ "./src/installer.red4ext.ts");
                        const installer_redscript_1 = __webpack_require__(/*! ./installer.redscript */ "./src/installer.redscript.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installer_special_extrafiles_1 = __webpack_require__(/*! ./installer.special.extrafiles */ "./src/installer.special.extrafiles.ts");
                        const ui_notifications_1 = __webpack_require__(/*! ./ui.notifications */ "./src/ui.notifications.ts");
                        const installer_core_amm_1 = __webpack_require__(/*! ./installer.core.amm */ "./src/installer.core.amm.ts");
                        const installer_core_cybercat_1 = __webpack_require__(/*! ./installer.core.cybercat */ "./src/installer.core.cybercat.ts");
                        const installer_amm_1 = __webpack_require__(/*! ./installer.amm */ "./src/installer.amm.ts");
                        const installer_preset_1 = __webpack_require__(/*! ./installer.preset */ "./src/installer.preset.ts");
                        const installer_special_deprecated_1 = __webpack_require__(/*! ./installer.special.deprecated */ "./src/installer.special.deprecated.ts");
                        const installer_core_inputloader_1 = __webpack_require__(/*! ./installer.core.inputloader */ "./src/installer.core.inputloader.ts");
                        const installer_core_cyberscript_1 = __webpack_require__(/*! ./installer.core.cyberscript */ "./src/installer.core.cyberscript.ts");
                        const installer_core_red4ext_1 = __webpack_require__(/*! ./installer.core.red4ext */ "./src/installer.core.red4ext.ts");
                        const installer_redmod_1 = __webpack_require__(/*! ./installer.redmod */ "./src/installer.redmod.ts");
                        const installer_core_redscript_1 = __webpack_require__(/*! ./installer.core.redscript */ "./src/installer.core.redscript.ts");
                        const installer_core_modsettings_1 = __webpack_require__(/*! ./installer.core.modsettings */ "./src/installer.core.modsettings.ts");
                        const installer_core_audioware_1 = __webpack_require__(/*! ./installer.core-audioware */ "./src/installer.core-audioware.ts");
                        const installer_audioware_1 = __webpack_require__(/*! ./installer.audioware */ "./src/installer.audioware.ts");
                        const path = path_1.win32;
                        const PRIORITY_FOR_PIPELINE_INSTALLER = 30;
                        const PRIORITY_STARTING_NUMBER = PRIORITY_FOR_PIPELINE_INSTALLER + 1;
                        const notSupportedModType = () => Promise.resolve({ supported: false, requiredFiles: [] });
                        exports.notSupportedModType = notSupportedModType;
                        const notInstallableMod = () => {
                            throw new Error(`Should never get here`);
                        };
                        exports.notInstallableMod = notInstallableMod;
                        const addPriorityFrom = (start) => {
                            const priorityAdder = (prioritized, installer, index) => prioritized.concat({ priority: start + index, ...installer });
                            return priorityAdder;
                        };
                        const installers = [
                            {
                                type: installers_types_1.InstallerType.CoreCET,
                                id: installers_types_1.InstallerType.CoreCET,
                                testSupported: installer_core_1.testForCetCore,
                                install: installer_core_1.installCetCore,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreRedscript,
                                id: installers_types_1.InstallerType.CoreRedscript,
                                testSupported: installer_core_redscript_1.testForCoreRedscript,
                                install: installer_core_redscript_1.installCoreRedscript,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreRed4ext,
                                id: installers_types_1.InstallerType.CoreRed4ext,
                                testSupported: installer_core_red4ext_1.testRed4ExtCore,
                                install: installer_core_red4ext_1.installRed4ExtCore,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreCSVMerge,
                                id: installers_types_1.InstallerType.CoreCSVMerge,
                                testSupported: installer_special_deprecated_1.testCoreCsvMerge,
                                install: exports.notInstallableMod,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreWolvenKit,
                                id: installers_types_1.InstallerType.CoreWolvenKit,
                                testSupported: installer_special_deprecated_1.testCoreWolvenKitCli,
                                install: exports.notInstallableMod,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreAudioware,
                                id: installers_types_1.InstallerType.CoreAudioware,
                                testSupported: installer_core_audioware_1.testForCoreAudioware,
                                install: installer_core_audioware_1.installCoreAudioware,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreTweakXL,
                                id: installers_types_1.InstallerType.CoreTweakXL,
                                testSupported: installer_core_tweak_xl_1.testForCoreTweakXL,
                                install: installer_core_tweak_xl_1.installCoreTweakXL,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreArchiveXL,
                                id: installers_types_1.InstallerType.CoreArchiveXL,
                                testSupported: installer_core_archive_xl_1.testForCoreArchiveXL,
                                install: installer_core_archive_xl_1.installCoreArchiveXL,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreInputLoader,
                                id: installers_types_1.InstallerType.CoreInputLoader,
                                testSupported: installer_core_inputloader_1.testForCoreInputLoader,
                                install: installer_core_inputloader_1.installCoreInputLoader,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreModSettings,
                                id: installers_types_1.InstallerType.CoreModSettings,
                                testSupported: installer_core_modsettings_1.testForCoreModSettings,
                                install: installer_core_modsettings_1.installCoreModSettings,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreCyberCat,
                                id: installers_types_1.InstallerType.CoreCyberCat,
                                testSupported: installer_core_cybercat_1.testForCyberCatCore,
                                install: installer_core_cybercat_1.installCoreCyberCat,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreAmm,
                                id: installers_types_1.InstallerType.CoreAmm,
                                testSupported: installer_core_amm_1.testForCoreAmm,
                                install: installer_core_amm_1.installCoreAmm,
                            },
                            {
                                type: installers_types_1.InstallerType.CoreCyberScript,
                                id: installers_types_1.InstallerType.CoreCyberScript,
                                testSupported: installer_core_cyberscript_1.testForCoreCyberScript,
                                install: installer_core_cyberscript_1.installCoreCyberScript,
                            },
                            {
                                type: installers_types_1.InstallerType.ASI,
                                id: installers_types_1.InstallerType.ASI,
                                testSupported: installer_asi_1.testForAsiMod,
                                install: installer_asi_1.installAsiMod,
                            },
                            {
                                type: installers_types_1.InstallerType.MultiType,
                                id: installers_types_1.InstallerType.MultiType,
                                testSupported: installer_multitype_1.testForMultiTypeMod,
                                install: installer_multitype_1.installMultiTypeMod,
                            },
                            {
                                type: installers_types_1.InstallerType.Red4Ext,
                                id: installers_types_1.InstallerType.Red4Ext,
                                testSupported: installer_red4ext_1.testForRed4ExtMod,
                                install: installer_red4ext_1.installRed4ExtMod,
                            },
                            {
                                type: installers_types_1.InstallerType.REDmod,
                                id: installers_types_1.InstallerType.REDmod,
                                testSupported: installer_redmod_1.testForREDmod,
                                install: installer_redmod_1.installREDmod,
                            },
                            {
                                type: installers_types_1.InstallerType.AMM,
                                id: installers_types_1.InstallerType.AMM,
                                testSupported: installer_amm_1.testForAmmMod,
                                install: installer_amm_1.installAmmMod,
                            },
                            {
                                type: installers_types_1.InstallerType.CET,
                                id: installers_types_1.InstallerType.CET,
                                testSupported: installer_cet_1.testForCetMod,
                                install: installer_cet_1.installCetMod,
                            },
                            {
                                type: installers_types_1.InstallerType.Redscript,
                                id: installers_types_1.InstallerType.Redscript,
                                testSupported: installer_redscript_1.testForRedscriptMod,
                                install: installer_redscript_1.installRedscriptMod,
                            },
                            {
                                type: installers_types_1.InstallerType.Audioware,
                                id: installers_types_1.InstallerType.Audioware,
                                testSupported: installer_audioware_1.testForAudiowareMod,
                                install: installer_audioware_1.installAudiowareMod,
                            },
                            {
                                type: installers_types_1.InstallerType.TweakXL,
                                id: installers_types_1.InstallerType.TweakXL,
                                testSupported: installer_tweak_xl_1.testForTweakXLMod,
                                install: installer_tweak_xl_1.installTweakXLMod,
                            },
                            {
                                type: installers_types_1.InstallerType.INI,
                                id: installers_types_1.InstallerType.INI,
                                testSupported: installer_config_ini_reshade_1.testForIniMod,
                                install: installer_config_ini_reshade_1.installIniMod,
                            },
                            {
                                type: installers_types_1.InstallerType.ConfigJson,
                                id: installers_types_1.InstallerType.ConfigJson,
                                testSupported: installer_config_json_1.testForJsonMod,
                                install: installer_config_json_1.installJsonMod,
                            },
                            {
                                type: installers_types_1.InstallerType.ConfigXml,
                                id: installers_types_1.InstallerType.ConfigXml,
                                testSupported: installer_config_xml_1.testForConfigXmlMod,
                                install: installer_config_xml_1.installConfigXmlMod,
                            },
                            {
                                type: installers_types_1.InstallerType.Preset,
                                id: installers_types_1.InstallerType.Preset,
                                testSupported: installer_preset_1.testForPresetMod,
                                install: installer_preset_1.installPresetMod,
                            },
                            {
                                type: installers_types_1.InstallerType.Archive,
                                id: installers_types_1.InstallerType.Archive,
                                testSupported: installer_archive_1.testForArchiveMod,
                                install: installer_archive_1.installArchiveMod,
                            },
                            {
                                type: installers_types_1.InstallerType.Fallback,
                                id: installers_types_1.InstallerType.Fallback,
                                testSupported: installer_fallback_1.testForFallback,
                                install: installer_fallback_1.installFallback,
                            },
                        ];
                        const installerPipeline = installers.reduce(addPriorityFrom(PRIORITY_STARTING_NUMBER), []);
                        const fallbackInstaller = installerPipeline[installerPipeline.length - 1];
                        if (fallbackInstaller.type !== installers_types_1.InstallerType.Fallback) {
                            throw new Error(`Fallback installer not found in pipeline`);
                        }
                        const detectGiftwrapLayout = (fileTree) => {
                            const toplevelDirs = (0, filetree_1.subdirsIn)(filetree_1.FILETREE_ROOT, fileTree);
                            if (toplevelDirs.length !== 1) {
                                return false;
                            }
                            const giftwrapperDir = toplevelDirs[0];
                            const allValidWrappableSubdirs = (0, function_1.pipe)((0, filetree_1.subdirNamesIn)(giftwrapperDir, fileTree), (0, ReadonlyArray_1.filter)((0, filetree_1.pathIn)(installers_layouts_1.KNOWN_TOPLEVEL_DIRS)));
                            if (allValidWrappableSubdirs.length > 0) {
                                return true;
                            }
                            return false;
                        };
                        var Transform;
                        (function (Transform) {
                            Transform["Unwrapped"] = "Tree with extra top-level directory removed";
                            Transform["None"] = "No transforms";
                        })(Transform || (Transform = {}));
                        const unwrapTreeIfNecessary = (api, fileTree) => {
                            const haveGiftwrappedMod = detectGiftwrapLayout(fileTree);
                            const wrapperDir = (0, filetree_1.subdirNamesIn)(filetree_1.FILETREE_ROOT, fileTree)[0];
                            const transformedTree = haveGiftwrappedMod
                                ? (0, filetree_1.subtreeFrom)(wrapperDir, fileTree)
                                : fileTree;
                            const unwrappedPaths = (0, filetree_1.sourcePaths)(transformedTree);
                            if (haveGiftwrappedMod) {
                                api.log(`info`, `Mod was giftwrapped, unwrapped it for install.`);
                                api.log(`debug`, `Using unwrapped filetree: `, unwrappedPaths);
                                const unwrappedTree = {
                                    transform: Transform.Unwrapped,
                                    fileTree: transformedTree,
                                    originalTree: fileTree,
                                    wrapperDir,
                                };
                                return unwrappedTree;
                            }
                            const unmodifiedTree = {
                                transform: undefined,
                                fileTree,
                            };
                            return unmodifiedTree;
                        };
                        const giftwrapSourcesAgainIfNecessary = (api, treeInUse, instructions) => (treeInUse.transform !== Transform.Unwrapped
                            ? instructions
                            : (0, function_1.pipe)(instructions, (0, ReadonlyArray_1.map)((instruction) => (instruction.source
                                ? {
                                    ...instruction,
                                    source: path.join(treeInUse.wrapperDir, instruction.source),
                                }
                                : instruction))));
                        const wrapTestSupported = (vortex, vortexApiThing, installer) => (filesRelativePaths, gameId) => {
                            const vortexApi = { ...vortex.api, log: vortexApiThing.log };
                            if (gameId !== index_metadata_1.GAME_ID) {
                                vortexApi.log(`error`, `Not a ${index_metadata_1.GAME_ID} mod: ${gameId}`);
                                return Promise.resolve({ supported: false, requiredFiles: [] });
                            }
                            vortexApi.log(`info`, `Testing for ${installer.type}`);
                            vortexApi.log(`debug`, `Input files: `, filesRelativePaths);
                            const treeForTesting = unwrapTreeIfNecessary(vortexApi, (0, filetree_1.fileTreeFromPaths)(filesRelativePaths));
                            return installer.testSupported(vortexApi, treeForTesting.fileTree);
                        };
                        exports.wrapTestSupported = wrapTestSupported;
                        const wrapInstall = (vortex, vortexApiLib, installer, features) => async (filesRelativePaths, destinationDirPath, _gameId, _progressDelegate) => {
                            const vortexApi = { ...vortex.api, log: vortexApiLib.log };
                            vortexApi.log(`info`, `Trying to install using ${installer.type}`);
                            vortexApi.log(`debug`, `Input files:`, filesRelativePaths);
                            const treeForInstallers = unwrapTreeIfNecessary(vortexApi, (0, filetree_1.fileTreeFromPaths)(filesRelativePaths));
                            const sourceFileCount = (0, filetree_1.fileCount)(treeForInstallers.fileTree);
                            const archivePathOnDisk = destinationDirPath;
                            const archivePath = treeForInstallers.transform !== Transform.Unwrapped
                                ? archivePathOnDisk
                                : (0, function_1.pipe)(archivePathOnDisk.split(path.sep), (0, ReadonlyArray_1.filter)((0, Predicate_1.not)((0, filetree_1.pathEq)(treeForInstallers.wrapperDir))), (parts) => path.join(...parts));
                            const modInfo = (0, installers_shared_1.modInfoFromArchiveNameOrSynthetic)({
                                relativePath: archivePath,
                                pathOnDisk: archivePathOnDisk,
                            });
                            vortexApi.log(`info`, `Extracted mod info from path: ${destinationDirPath}`);
                            vortexApi.log(`info`, `Parsed or generated mod info: `, modInfo);
                            const modName = modInfo.name;
                            const instructionsFromInstaller = await installer.install(vortexApi, treeForInstallers.fileTree, modInfo, features);
                            const allSourceFilesAccountedFor = instructionsFromInstaller.instructions.length >= sourceFileCount;
                            const extraFilesInstructions = allSourceFilesAccountedFor
                                ? { kind: installers_layouts_1.NoLayout.Optional, instructions: [] }
                                : (0, installer_special_extrafiles_1.extraFilesAllowedInOtherModTypesInstructions)(vortexApi, modName, treeForInstallers.fileTree);
                            const allInstructionsWeKnowHowToGenerate = [
                                ...instructionsFromInstaller.instructions,
                                ...extraFilesInstructions.instructions,
                            ];
                            const stillMissingSourceFiles = allInstructionsWeKnowHowToGenerate.length < sourceFileCount;
                            if (stillMissingSourceFiles) {
                                vortexApi.log(`error`, `There are fewer instructions than source files, meaning we're missing files. Reverting to Fallback!`, {
                                    sourcePaths: (0, filetree_1.sourcePaths)(treeForInstallers.fileTree),
                                    instructionSources: allInstructionsWeKnowHowToGenerate.map((instruction) => instruction.source),
                                });
                                vortexApi.log(`info`, `instructions generated by ${installers_types_1.InstallerType.Fallback}`);
                            }
                            else {
                                vortexApi.log(`info`, `instructions generated by ${installer.type}`);
                            }
                            const finalInstructions = !stillMissingSourceFiles
                                ? allInstructionsWeKnowHowToGenerate
                                : (await fallbackInstaller.install(vortexApi, treeForInstallers.fileTree, modInfo, features)).instructions;
                            const instructionsFromFullyResolvedSources = giftwrapSourcesAgainIfNecessary(vortexApi, treeForInstallers, finalInstructions);
                            if (extraFilesInstructions.instructions.length > 0) {
                                await (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.InstallerExtraFilesMoved);
                            }
                            return Promise.resolve({
                                instructions: (0, ReadonlyArray_1.toArray)(instructionsFromFullyResolvedSources),
                            });
                        };
                        exports.wrapInstall = wrapInstall;
                        const testUsingPipelineOfInstallers = async (_vortexApi, _fileTree) => Promise.resolve({ supported: true, requiredFiles: [] });
                        const installUsingPipelineOfInstallers = async (vortexApi, fileTree, modInfo, features) => {
                            const me = installers_types_1.InstallerType.Pipeline;
                            let matchingInstaller;
                            for (const candidateInstaller of installerPipeline) {
                                vortexApi.log(`debug`, `${me}: Trying ${candidateInstaller.type}`);
                                const testResult = await candidateInstaller.testSupported(vortexApi, fileTree, modInfo, features);
                                if (testResult.supported === true) {
                                    vortexApi.log(`info`, `${me}: using ${candidateInstaller.type}`);
                                    matchingInstaller = candidateInstaller;
                                    break;
                                }
                            }
                            if (matchingInstaller === undefined) {
                                const errorMessage = `${me}: no installer matched this mod (this should never happen!)`;
                                vortexApi.log(`error`, errorMessage);
                                return Promise.reject(new Error(errorMessage));
                            }
                            const selectedInstructions = await matchingInstaller.install(vortexApi, fileTree, modInfo, features);
                            vortexApi.log(`info`, `${me}: instructions generated by ${matchingInstaller.type}`);
                            return Promise.resolve({
                                instructions: selectedInstructions.instructions,
                            });
                        };
                        exports.internalPipelineInstaller = {
                            priority: PRIORITY_FOR_PIPELINE_INSTALLER,
                            type: installers_types_1.InstallerType.Pipeline,
                            id: installers_types_1.InstallerType.Pipeline,
                            testSupported: testUsingPipelineOfInstallers,
                            install: installUsingPipelineOfInstallers,
                        };


                        /***/
                    }),

/***/ "./src/installers.types.ts":
/*!*********************************!*\
  !*** ./src/installers.types.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.InstallDecision = exports.attrREDmodInfos = exports.decodeREDmodInfo = exports.REDmodInfoType = exports.REDmodCustomSoundType = exports.REDmodAudioType = exports.attrModType = exports.attrOrElse = exports.attr = exports.makeAttr = exports.ModType = exports.ModAttributeKey = exports.decodeWith = exports.InstallerType = void 0;
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const J = __importStar(__webpack_require__(/*! fp-ts/lib/Json */ "./node_modules/fp-ts/lib/Json.js"));
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const t = __importStar(__webpack_require__(/*! io-ts */ "./node_modules/io-ts/es6/index.js"));
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        var InstallerType;
                        (function (InstallerType) {
                            InstallerType["Pipeline"] = "V2077 Installer Pipeline";
                            InstallerType["SpecialExtraFiles"] = "(Special) Extra Files Installer";
                            InstallerType["CoreCET"] = "Core CET Installer";
                            InstallerType["CoreAmm"] = "Core Appearance Menu Mod Installer (special case of CET)";
                            InstallerType["CoreCyberScript"] = "Core CyberScript Installer";
                            InstallerType["CoreRedscript"] = "Core Redscript Installer";
                            InstallerType["CoreRed4ext"] = "Core RED4ext Installer";
                            InstallerType["CoreInputLoader"] = "Core Input Loader Installer (special case of Red4Ext)";
                            InstallerType["CoreModSettings"] = "Core Mod Settings Installer (special case of Red4Ext)";
                            InstallerType["CoreCSVMerge"] = "(DEPRECATED - use TweakXL/ArchiveXL) Core CSVMerge Installer";
                            InstallerType["CoreCyberCat"] = "CyberCAT Save Editor Installer";
                            InstallerType["CoreTweakXL"] = "Core TweakXL Installer";
                            InstallerType["CoreAudioware"] = "Core Audioware Installer";
                            InstallerType["CoreArchiveXL"] = "Core ArchiveXL Installer";
                            InstallerType["CoreWolvenKit"] = "Core WolvenKitCLI Installer";
                            InstallerType["MultiType"] = "MultiType Mod Installer";
                            InstallerType["ConfigJson"] = "JSON Config Mod Installer";
                            InstallerType["ConfigXml"] = "XML Config Mod Installer";
                            InstallerType["ASI"] = "ASI Mod Installer";
                            InstallerType["AMM"] = "AMM Mod Installer";
                            InstallerType["CET"] = "CET Mod Installer";
                            InstallerType["Redscript"] = "Redscript Mod Installer";
                            InstallerType["Red4Ext"] = "RED4ext Mod Installer";
                            InstallerType["REDmod"] = "REDmod Installer";
                            InstallerType["SpecialREDmodAutoconversion"] = "(Special) REDmod Autoconversion Installer";
                            InstallerType["TweakDB"] = "(DEPRECATED - USE TweakXL) TweakDB Mod Installer";
                            InstallerType["TweakXL"] = "TweakXL Mod Installer";
                            InstallerType["INI"] = "INI Mod Installer";
                            InstallerType["Reshade"] = "Reshade Mod Installer";
                            InstallerType["LUT"] = "LUT Mod Installer";
                            InstallerType["Preset"] = "Character Preset Installer";
                            InstallerType["Archive"] = "Archive + ArchiveXL Mod Installer";
                            InstallerType["Audioware"] = "Audioware Mod Installer";
                            InstallerType["Fallback"] = "Fallback Installer";
                            InstallerType["NotSupported"] = "<NONEXISTING INSTALLER - THIS SHOULD NOT BE SEEN OUTSIDE TESTS>";
                        })(InstallerType = exports.InstallerType || (exports.InstallerType = {}));
                        const safeDecode = (decodeFromJson) => (0, function_1.flow)(decodeFromJson, (0, Either_1.match)((errors) => (0, Either_1.left)(new Error(`Failed to decode load order: ${(0, util_functions_1.S)(errors)}`)), (ok) => (0, Either_1.right)(ok)));
                        const decodeWith = (decodeFromJson) => (jsonString) => (0, function_1.pipe)(jsonString, J.parse, (0, Either_1.mapLeft)((err) => new Error(`Failed to parse JSON: ${(0, util_functions_1.S)(err)}`)), (0, Either_1.chain)(safeDecode(decodeFromJson)));
                        exports.decodeWith = decodeWith;
                        var ModAttributeKey;
                        (function (ModAttributeKey) {
                            ModAttributeKey["ModType"] = "V2077_mod_attr_mod_type";
                            ModAttributeKey["REDmodInfo"] = "V2077_mod_attr_redmod_info";
                            ModAttributeKey["REDmodInfoArray"] = "V2077_mod_attr_redmod_info_array";
                        })(ModAttributeKey = exports.ModAttributeKey || (exports.ModAttributeKey = {}));
                        var ModType;
                        (function (ModType) {
                            ModType["INVALID"] = "INVALID mod type used as a marker";
                            ModType["REDmod"] = "V2077_REDmod";
                        })(ModType = exports.ModType || (exports.ModType = {}));
                        const makeAttr = (key, data) => ({ key, value: { data } });
                        exports.makeAttr = makeAttr;
                        const attr = (key) => (mod) => { var _a, _b; return (0, Option_1.fromNullable)((_b = (_a = mod === null || mod === void 0 ? void 0 : mod.attributes) === null || _a === void 0 ? void 0 : _a[key]) === null || _b === void 0 ? void 0 : _b.data); };
                        exports.attr = attr;
                        const attrOrElse = (key, orElse) => (0, function_1.flow)((0, exports.attr)(key), (0, Option_1.getOrElse)(orElse));
                        exports.attrOrElse = attrOrElse;
                        exports.attrModType = (0, exports.attrOrElse)(ModAttributeKey.ModType, () => ModType.INVALID);
                        exports.REDmodAudioType = t.keyof({
                            mod_skip: null,
                            mod_sfx_2d: null,
                            mod_sfx_city: null,
                            mod_sfx_low_occlusion: null,
                            mod_sfx_occlusion: null,
                            mod_sfx_radio: null,
                            mod_sfx_room: null,
                            mod_sfx_street: null,
                            mod_sfx_ui: null,
                        }, `REDmodAudioType`);
                        exports.REDmodCustomSoundType = t.intersection([
                            t.type({
                                name: t.string,
                                type: exports.REDmodAudioType,
                            }),
                            t.partial({
                                file: t.string,
                                gain: t.number,
                                pitch: t.number,
                            }),
                        ]);
                        exports.REDmodInfoType = t.intersection([
                            t.type({
                                name: t.string,
                                version: t.string,
                            }),
                            t.partial({
                                description: t.string,
                                customSounds: t.array(exports.REDmodCustomSoundType),
                            }),
                        ], `REDmodInfoType`);
                        const decodeREDmodInfo = (json) => (0, function_1.pipe)(json, exports.REDmodInfoType.decode, (0, Either_1.match)((errors) => (0, Either_1.left)(new Error(`Failed to decode REDmod info: ${errors}`)), (info) => (0, Either_1.right)(info)));
                        exports.decodeREDmodInfo = decodeREDmodInfo;
                        exports.attrREDmodInfos = (0, exports.attrOrElse)(ModAttributeKey.REDmodInfoArray, () => []);
                        var InstallDecision;
                        (function (InstallDecision) {
                            InstallDecision["UserWantsToProceed"] = "User explicitly wants to proceed with the installation";
                            InstallDecision["UserWantsToCancel"] = "User explicitly wants to cancel the installation";
                        })(InstallDecision = exports.InstallDecision || (exports.InstallDecision = {}));


                        /***/
                    }),

/***/ "./src/load_order.functions.ts":
/*!*************************************!*\
  !*** ./src/load_order.functions.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.loadOrderFromVortexState = void 0;
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const loadOrderFromVortexState = (vortexState, ownerProfile) => { var _a, _b; return (0, Option_1.fromNullable)((_b = (_a = vortexState.persistent) === null || _a === void 0 ? void 0 : _a.loadOrder) === null || _b === void 0 ? void 0 : _b[ownerProfile.id]); };
                        exports.loadOrderFromVortexState = loadOrderFromVortexState;


                        /***/
                    }),

/***/ "./src/load_order.ts":
/*!***************************!*\
  !*** ./src/load_order.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.wrapValidate = exports.wrapSerialize = exports.wrapDeserialize = exports.internalLoadOrderer = exports.startREDmodDeployInTheBackgroundWithNotifications = exports.loadOrderToREDdeployModList = exports.redmodDeployRunParameters = exports.makeV2077LoadOrderFrom = exports.loadOrderUsageInstructionsForVortexGui = void 0;
                        const path_1 = __webpack_require__(/*! path */ "path");
                        const os_1 = __importDefault(__webpack_require__(/*! os */ "os"));
                        const bluebird_1 = __webpack_require__(/*! bluebird */ "bluebird");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const TaskEither_1 = __webpack_require__(/*! fp-ts/lib/TaskEither */ "./node_modules/fp-ts/lib/TaskEither.js");
                        const _vortex_api_test_shimmed_1 = __webpack_require__(/*! @vortex-api-test-shimmed */ "vortex-api");
                        const spectacles_ts_1 = __webpack_require__(/*! spectacles-ts */ "./node_modules/spectacles-ts/dist/index.js");
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const load_order_types_1 = __webpack_require__(/*! ./load_order.types */ "./src/load_order.types.ts");
                        const vortex_wrapper_1 = __webpack_require__(/*! ./vortex-wrapper */ "./src/vortex-wrapper.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        const installers_shared_1 = __webpack_require__(/*! ./installers.shared */ "./src/installers.shared.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const redmodding_metadata_1 = __webpack_require__(/*! ./redmodding.metadata */ "./src/redmodding.metadata.ts");
                        const ui_notifications_1 = __webpack_require__(/*! ./ui.notifications */ "./src/ui.notifications.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const path = path_1.win32;
                        const me = `${index_metadata_1.EXTENSION_NAME_INTERNAL} Load Order`;
                        const loadOrderFilenameFor = (profile) => `${index_metadata_1.EXTENSION_NAME_INTERNAL}-load-order-${profile.id}.json`;
                        const loadOrderPathFor = (profile, gameDirPath) => path.join(gameDirPath, redmodding_metadata_1.V2077_LOAD_ORDER_DIR, loadOrderFilenameFor(profile));
                        const LOAD_ORDER_VALIDATION_PASSED_RESULT = undefined;
                        const DEFAULT_VERSION_FOR_UNVERSIONED_MODS = `0.0.1+V2077`;
                        const ENABLED_MOD_DISPLAY_MARKER = `✅`;
                        const DISABLED_MOD_DISPLAY_MARKER = `🚫`;
                        const enabledMarker = (mod) => (mod.enabled ? ENABLED_MOD_DISPLAY_MARKER : DISABLED_MOD_DISPLAY_MARKER);
                        const getDiscoveryPath = (api) => {
                            const state = api.store.getState();
                            const discovery = vortex_wrapper_1.vortexUtil.getSafe(state, [`settings`, `gameMode`, `discovered`, index_metadata_1.GAME_ID], {});
                            return discovery === null || discovery === void 0 ? void 0 : discovery.path;
                        };
                        exports.loadOrderUsageInstructionsForVortexGui = (0, util_functions_1.heredoc)((0, util_functions_1.bbcodeBasics)(`
    Drag your mods in the order you want them to load here! They will be
    deployed whenever the next Vortex deployment is triggered.

    You don't have to order everything. It's best to only order mods that
    require it, or that you otherwise know to conflict with each other.

    Only REDmods and autoconverted heritage mods are orderable. If you don't see
    something you just installed, click on Refresh.

    You can order both enabled and disabled mods, but only the enabled ones will
    be included in the REDmod deployment. The disabled ones will remember their
    place in the load order, though, so long as you don't uninstall them!

    All heritage archive mods that are not autoconverted to REDmod will be loaded
    BEFORE all REDmods, in the usual alphabetical order. That means that if you want
    to override an archive mod, you need to convert it to REDmod first. You can do
    this by making sure the autoconvert setting is on and then reinstalling the mod.

    REDmods that you have installed outside Vortex are NOT supported right now.

    The load order is saved automatically, and will be deployed whenever the next
    Vortex deployment occurs - you can also manually click to deploy, if you like!

    REDmod deployment can take a little while if you have tweak or script mods,
    so wait for the green success notification before you start the game! :)

    You can also click the REDdeploy tool button to run a deployment on-demand. It'll
    (re)deploy the most recently created load order.

    You can still use the command-line redMod.exe or WolvenKit to deploy or order
    REDmods, but any changes you make there will NOT be reflected in Vortex.
  `));
                        const deserializeLoadOrder = (vortexApi) => (loadOrderPathForCurrentProfile) => (0, function_1.pipe)((0, installers_shared_1.fileFromDiskTE)({ relativePath: loadOrderPathForCurrentProfile, pathOnDisk: loadOrderPathForCurrentProfile }), TaskEither_1.swap, (0, TaskEither_1.map)((error) => {
                            vortexApi.log(`warn`, `${me}: Couldn't open load order file, proceeding with an empty list: ${error.message}`);
                            return [];
                        }), (0, TaskEither_1.orElse)(({ content }) => (0, function_1.pipe)((0, load_order_types_1.decodeLoadOrder)(content), TaskEither_1.fromEither, (0, TaskEither_1.mapLeft)((error) => new Error(`Couldn't decode load order file: ${error.message}`)), (0, TaskEither_1.map)((loadOrder) => {
                            vortexApi.log(`info`, `${me}: Successfully deserialized load order id: ${Date.parse(loadOrder.generatedAt)} (${loadOrder.generatedAt})`);
                            vortexApi.log(`debug`, `${me}: Current stored load order deserialized: ${(0, util_functions_1.S)(loadOrder)}`);
                            return loadOrder.entriesInOrderWithEarlierWinning;
                        }))));
                        const makeIndexForModIdToCurrentOrderLookup = (deserializedLoadOrder) => (0, function_1.pipe)(deserializedLoadOrder, (0, ReadonlyArray_1.reduceWithIndex)({}, (index, mapped, entry) => {
                            mapped[entry.vortexId] = index;
                            return mapped;
                        }));
                        const addStatusAndIndexOrDefaults = (mod, enabledStatusIndex, currentOrderIndex) => {
                            var _a;
                            const indexForMod = (0, Option_1.fromNullable)(currentOrderIndex[mod.id]);
                            const enabledStatusForMod = (_a = enabledStatusIndex[mod.id]) !== null && _a !== void 0 ? _a : { enabled: false, enabledTime: 0 };
                            return {
                                ...mod,
                                ...enabledStatusForMod,
                                index: indexForMod,
                            };
                        };
                        const makeVortexLoadOrderEntryFrom = (orderableMod, redmodInfo, subModIndex, activeProfile) => {
                            var _a, _b, _c, _d, _e, _f, _g, _h;
                            const everythingNeededToSerializeLoadOrder = {
                                indexForSorting: orderableMod.index,
                                ownerVortexProfileId: activeProfile.id.toString(),
                                vortexId: orderableMod.id.toString(),
                                vortexModId: (_b = (_a = orderableMod.attributes) === null || _a === void 0 ? void 0 : _a.modId) === null || _b === void 0 ? void 0 : _b.toString(),
                                vortexModVersion: (_d = (_c = orderableMod.attributes) === null || _c === void 0 ? void 0 : _c.version) !== null && _d !== void 0 ? _d : DEFAULT_VERSION_FOR_UNVERSIONED_MODS,
                                vortexEnabled: orderableMod.enabled,
                                redmodInfo,
                            };
                            const idSuffixIfNeededToDifferentiateSubmods = subModIndex > 0
                                ? `-${index_metadata_1.EXTENSION_NAME_INTERNAL}-${subModIndex}`
                                : ``;
                            const id = `${orderableMod.id}${idSuffixIfNeededToDifferentiateSubmods}`;
                            const modIdOrNothing = ((_e = orderableMod.attributes) === null || _e === void 0 ? void 0 : _e.modId)
                                ? `${(_f = orderableMod.attributes) === null || _f === void 0 ? void 0 : _f.modId}${idSuffixIfNeededToDifferentiateSubmods}`
                                : undefined;
                            const { vortexModVersion } = everythingNeededToSerializeLoadOrder;
                            const vortexVariant = ((_g = orderableMod.attributes) === null || _g === void 0 ? void 0 : _g.variant) ? ` +${(_h = orderableMod.attributes) === null || _h === void 0 ? void 0 : _h.variant}` : ``;
                            const vortexDisplayName = `${vortex_wrapper_1.vortexUtil.renderModName(orderableMod)} ${vortexModVersion}${vortexVariant}`;
                            const displayNameWithAsMuchInfoAsWeDareBecauseWeHaveNoControlOverHTML = `${enabledMarker(orderableMod)} ${redmodInfo.name} ${redmodInfo.version} (from ${vortexDisplayName})`;
                            const loadOrderEntry = {
                                id,
                                modId: modIdOrNothing,
                                enabled: orderableMod.enabled,
                                name: displayNameWithAsMuchInfoAsWeDareBecauseWeHaveNoControlOverHTML,
                                data: everythingNeededToSerializeLoadOrder,
                            };
                            return loadOrderEntry;
                        };
                        const compileDetesToGenerateLoadOrderUi = async (vortexApi) => {
                            const gameDirPath = getDiscoveryPath(vortexApi);
                            if (gameDirPath === undefined) {
                                return bluebird_1.Promise.reject(new vortex_wrapper_1.vortexUtil.NotFound(`${me}: Game not found`));
                            }
                            const vortexState = vortexApi.store.getState();
                            const activeProfile = _vortex_api_test_shimmed_1.selectors.activeProfile(vortexState);
                            if ((activeProfile === null || activeProfile === void 0 ? void 0 : activeProfile.gameId) !== index_metadata_1.GAME_ID) {
                                return bluebird_1.Promise.reject(new Error(`${me}: Invalid profile or wrong game, canceling: ${(0, util_functions_1.jsonp)(activeProfile)}`));
                            }
                            vortexApi.log(`info`, `${me}: Compiling detes for load order UI`);
                            const deserializedLoadOrder = await (0, function_1.pipe)(loadOrderPathFor(activeProfile, gameDirPath), deserializeLoadOrder(vortexApi))();
                            if ((0, Either_1.isLeft)(deserializedLoadOrder)) {
                                vortexApi.log(`error`, `${me}: Error deserializing load order: ${deserializedLoadOrder.left.message}`);
                                (0, ui_dialogs_1.showInvalidLoadOrderFileErrorDialog)(vortexApi, loadOrderPathFor(activeProfile, gameDirPath));
                                return bluebird_1.Promise.reject(deserializedLoadOrder.left);
                            }
                            const indexForCurrentOrderLookup = makeIndexForModIdToCurrentOrderLookup(deserializedLoadOrder.right);
                            const indexForEnabledStatusForThisProfile = activeProfile.modState;
                            const allModsKnownToVortex = (0, function_1.pipe)(vortex_wrapper_1.vortexUtil.getSafe(vortexState, [`persistent`, `mods`, index_metadata_1.GAME_ID], {}), Object.values);
                            const allLoadOrderableVortexMods = (0, function_1.pipe)(allModsKnownToVortex, (0, ReadonlyArray_1.filterMap)((mod) => {
                                if (mod.state === `installed` && (0, installers_types_1.attrModType)(mod) === installers_types_1.ModType.REDmod) {
                                    return (0, Option_1.some)(addStatusAndIndexOrDefaults(mod, indexForEnabledStatusForThisProfile, indexForCurrentOrderLookup));
                                }
                                return Option_1.none;
                            }));
                            const allIndividualREDmodsInVortexLoadOrderFormat = (0, function_1.pipe)(allLoadOrderableVortexMods, (0, ReadonlyArray_1.map)((orderableVortexMod) => (0, function_1.pipe)((0, installers_types_1.attrREDmodInfos)(orderableVortexMod), (0, ReadonlyArray_1.mapWithIndex)((subModIndex, containedREDmod) => makeVortexLoadOrderEntryFrom(orderableVortexMod, containedREDmod, subModIndex, activeProfile)))), ReadonlyArray_1.flatten);
                            const afterLastKnown = allIndividualREDmodsInVortexLoadOrderFormat.length;
                            const loadOrderableModsInOrder = (0, function_1.pipe)(allIndividualREDmodsInVortexLoadOrderFormat, (0, ReadonlyArray_1.sortBy)([(0, load_order_types_1.byIndexWithNewAtTheBack)(afterLastKnown), load_order_types_1.thenByDirnameAscending]));
                            const loadOrderableModsInOrderWithoutAnyVariableDataThatWouldConfuseVortex = (0, function_1.pipe)(loadOrderableModsInOrder, (0, ReadonlyArray_1.map)((entry) => (0, function_1.pipe)(entry, (0, spectacles_ts_1.remove)(`data.indexForSorting`))), ReadonlyArray_1.toArray);
                            vortexApi.log(`debug`, `${me}: Collected detes to create load order selection: `, (0, util_functions_1.S)(loadOrderableModsInOrderWithoutAnyVariableDataThatWouldConfuseVortex));
                            return bluebird_1.Promise.resolve(loadOrderableModsInOrderWithoutAnyVariableDataThatWouldConfuseVortex);
                        };
                        const makeV2077LoadOrderEntryFrom = (vortexEntry) => {
                            const modDetesWeNeedForLoadOrder = vortexEntry.data;
                            const V2077LoadOrderEntry = {
                                vortexId: modDetesWeNeedForLoadOrder.vortexId,
                                vortexModId: modDetesWeNeedForLoadOrder.vortexModId,
                                vortexModVersion: modDetesWeNeedForLoadOrder.vortexModVersion,
                                redmodName: modDetesWeNeedForLoadOrder.redmodInfo.name,
                                redmodVersion: modDetesWeNeedForLoadOrder.redmodInfo.version,
                                redmodPath: modDetesWeNeedForLoadOrder.redmodInfo.relativePath,
                                enabled: modDetesWeNeedForLoadOrder.vortexEnabled,
                            };
                            return V2077LoadOrderEntry;
                        };
                        const makeV2077LoadOrderFrom = (vortexLoadOrder, ownerVortexProfileId, dateAsLoadOrderId) => {
                            const v2077LoadOrderEntries = (0, function_1.pipe)(vortexLoadOrder, (0, ReadonlyArray_1.map)(makeV2077LoadOrderEntryFrom), ReadonlyArray_1.toArray);
                            return {
                                loadOrderFormatVersion: load_order_types_1.LOAD_ORDER_TYPE_VERSION,
                                ownerVortexProfileId,
                                generatedAt: new Date(dateAsLoadOrderId).toISOString(),
                                entriesInOrderWithEarlierWinning: v2077LoadOrderEntries,
                            };
                        };
                        exports.makeV2077LoadOrderFrom = makeV2077LoadOrderFrom;
                        const redmodDeployRunParameters = (gameDirPath) => {
                            const redModDeployParametersToCreateNewManifest = [
                                `deploy`,
                                `-force`,
                                `-root=`,
                                `"${gameDirPath}"`,
                                `-rttiSchemaFile=`,
                                `"${path.join(gameDirPath, redmodding_metadata_1.REDMODDING_RTTI_METADATA_FILE_PATH)}"`,
                                `-modlist=`,
                                `"${path.join(gameDirPath, redmodding_metadata_1.V2077_MODLIST_PATH)}"`,
                            ];
                            const exePath = path.join(gameDirPath, redmodding_metadata_1.REDdeployExeRelativePath);
                            const runOptions = {
                                cwd: path.dirname(exePath),
                                shell: true,
                                detach: true,
                                expectSuccess: true,
                            };
                            return {
                                executable: exePath,
                                args: redModDeployParametersToCreateNewManifest,
                                options: runOptions,
                            };
                        };
                        exports.redmodDeployRunParameters = redmodDeployRunParameters;
                        const loadOrderToREDdeployModList = (v2077LoadOrderToDeploy) => (0, function_1.pipe)(v2077LoadOrderToDeploy.entriesInOrderWithEarlierWinning, (0, ReadonlyArray_1.filterMap)((mod) => (mod.enabled
                            ? (0, Option_1.some)(`${path.basename(mod.redmodPath)}`)
                            : Option_1.none)));
                        exports.loadOrderToREDdeployModList = loadOrderToREDdeployModList;
                        const startREDmodDeployInTheBackgroundWithNotifications = (vortexApi, gameDirPath, loID, v2077LoadOrderToDeploy, vortexFormatLoadOrderForComparison) => {
                            const tag = `${me}: REDmod Background Deploy`;
                            vortexApi.log(`info`, `${tag}: Starting background deploy for load order ${loID}`);
                            const vortexState = vortexApi.store.getState();
                            const activeProfile = _vortex_api_test_shimmed_1.selectors.activeProfile(vortexState);
                            const ownerProfileId = v2077LoadOrderToDeploy.ownerVortexProfileId;
                            if (activeProfile.id !== ownerProfileId) {
                                vortexApi.log(`warn`, `${tag}: Profile is not the same that generated load order ${loID}, stopping!`, { activeProfile, ownerProfileId });
                                return bluebird_1.Promise.resolve();
                            }
                            const newestGeneratedLoadOrder = vortex_wrapper_1.vortexUtil.getSafe(vortexState, [`persistent`, `loadOrder`, ownerProfileId], undefined);
                            if (!newestGeneratedLoadOrder) {
                                vortexApi.log(`error`, `${tag}: Unable to find the current load order, canceling! It should be *this* one (${loID}) if nothing else.`);
                                (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.REDmodDeploymentFailed);
                                return bluebird_1.Promise.resolve();
                            }
                            if (JSON.stringify(vortexFormatLoadOrderForComparison) !== JSON.stringify(newestGeneratedLoadOrder)) {
                                vortexApi.log(`info`, `${tag}: Load order ${loID} no longer most recent, this is ok, canceling!`);
                                return bluebird_1.Promise.resolve();
                            }
                            const redDeploy = (0, exports.redmodDeployRunParameters)(gameDirPath);
                            if ((0, ReadonlyArray_1.isEmpty)(v2077LoadOrderToDeploy.entriesInOrderWithEarlierWinning)) {
                                vortexApi.log(`warn`, `${me}: No mods in load order, running default REDdeploy!`);
                                (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.REDmodDeploymentDefaulted);
                            }
                            else {
                                vortexApi.log(`info`, `${me}: Starting REDmod deployment ${loID}!`);
                                (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.REDmodDeploymentStarted);
                            }
                            vortexApi.log(`debug`, `${me}: Deployment arguments and command line: `, (0, util_functions_1.S)(redDeploy));
                            const modListPath = path.join(gameDirPath, redmodding_metadata_1.V2077_MODLIST_PATH);
                            const REDdeployment = (0, function_1.pipe)((0, exports.loadOrderToREDdeployModList)(v2077LoadOrderToDeploy), (generatedModList) => generatedModList.join(os_1.default.EOL), (encodedLoadOrder) => (0, TaskEither_1.tryCatch)(() => _vortex_api_test_shimmed_1.fs.statAsync(path.dirname(modListPath)).then(() => _vortex_api_test_shimmed_1.fs.writeFileAsync(`${modListPath}.${loID}.tmp`, encodedLoadOrder, { encoding: `utf8` })).then(() => _vortex_api_test_shimmed_1.fs.renameAsync(`${modListPath}.${loID}.tmp`, modListPath)).then(() => true), (error) => new Error(`Unable to write load order to disk: ${(0, util_functions_1.S)(error)}`)))().then(() => vortexApi.runExecutable(redDeploy.executable, redDeploy.args, redDeploy.options)
                                .then(() => {
                                    vortexApi.log(`info`, `${me}: REDmod deployment ${loID} complete!`);
                                    (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.REDmodDeploymentSucceeded);
                                })
                                .catch((error) => {
                                    vortexApi.log(`error`, `${me}: REDmod deployment ${loID} failed!`, (0, util_functions_1.S)(error));
                                    (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.REDmodDeploymentFailed);
                                }));
                            return REDdeployment;
                        };
                        exports.startREDmodDeployInTheBackgroundWithNotifications = startREDmodDeployInTheBackgroundWithNotifications;
                        const writeLoadOrderToDisk = (loID, loadOrderPath, serializedLoadOrder) => (0, function_1.pipe)((0, TaskEither_1.tryCatch)(() => _vortex_api_test_shimmed_1.fs.statAsync(path.dirname(loadOrderPath)).then(() => _vortex_api_test_shimmed_1.fs.writeFileAsync(`${loadOrderPath}.${loID}.tmp`, serializedLoadOrder, { encoding: `utf8` })).then(() => _vortex_api_test_shimmed_1.fs.renameAsync(`${loadOrderPath}.${loID}.tmp`, loadOrderPath)), (error) => new Error(`Unable to write load order to disk: ${(0, util_functions_1.S)(error)}`)));
                        const deployAndSerializeNewLoadOrder = (vortexApi, vortexLoadOrder) => {
                            const gameDirPath = getDiscoveryPath(vortexApi);
                            if (gameDirPath === undefined) {
                                vortexApi.log(`error`, `${me}: Serialize: Game not found! (discoveryPath is undefined)`);
                                return bluebird_1.Promise.reject(new vortex_wrapper_1.vortexUtil.NotFound(`Game Not Found.`));
                            }
                            if (vortexLoadOrder === undefined || (vortexLoadOrder === null || vortexLoadOrder === void 0 ? void 0 : vortexLoadOrder.length) === 0) {
                                vortexApi.log(`info`, `${me}: Serialize: No mods in load order, skipping writing to disk..`);
                                return bluebird_1.Promise.resolve();
                            }
                            vortexApi.log(`info`, `${me}: Serializing new load order from Vortex load order`, (0, util_functions_1.S)(vortexLoadOrder));
                            const vortexState = vortexApi.store.getState();
                            const activeProfile = _vortex_api_test_shimmed_1.selectors.activeProfile(vortexState);
                            const ownerVortexProfileId = activeProfile.id;
                            const loID = Date.now();
                            const v2077LoadOrder = (0, exports.makeV2077LoadOrderFrom)(vortexLoadOrder, ownerVortexProfileId, loID);
                            vortexApi.log(`info`, `${me}: New load order ${loID} ready to be deployed and serialized!`);
                            vortexApi.log(`debug`, `${me}: Load order ${loID}:`, (0, util_functions_1.S)(v2077LoadOrder));
                            vortexApi.events.once(`did-deploy`, () => {
                                (0, exports.startREDmodDeployInTheBackgroundWithNotifications)(vortexApi, gameDirPath, loID, v2077LoadOrder, vortexLoadOrder);
                            });
                            vortexApi.log(`info`, `${me}: Queuing REDmod deployment for load order ${loID} to run after next Vortex deployment!`);
                            (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.REDmodDeploymentQueued);
                            const serializedLoadOrder = (0, load_order_types_1.encodeLoadOrder)(v2077LoadOrder);
                            const loadOrderFilePathForThisProfile = loadOrderPathFor(activeProfile, gameDirPath);
                            vortexApi.log(`info`, `${me}: Saving load order ${loID} to disk as JSON: ${loadOrderFilePathForThisProfile}`);
                            const maybeSuccessfullyWroteLoadOrderToDisk = (0, function_1.pipe)(writeLoadOrderToDisk(loID, loadOrderFilePathForThisProfile, serializedLoadOrder), (0, TaskEither_1.mapLeft)((error) => {
                                vortexApi.log(`error`, `${me}: Unable to write load order to disk: ${error.message}`);
                                (0, ui_notifications_1.showInfoNotification)(vortexApi, ui_notifications_1.InfoNotification.LoadOrderWriteFailed);
                                return error;
                            }));
                            return maybeSuccessfullyWroteLoadOrderToDisk();
                        };
                        const validate = async (vortexApi, _previousLoadOrder, _currentLoadOrder) => {
                            vortexApi.log(`debug`, `${me}: Load order validation autosucceeds for now, we've already done all validation`);
                            return bluebird_1.Promise.resolve(LOAD_ORDER_VALIDATION_PASSED_RESULT);
                        };
                        exports.internalLoadOrderer = {
                            validate,
                            serializeLoadOrder: deployAndSerializeNewLoadOrder,
                            deserializeLoadOrder: compileDetesToGenerateLoadOrderUi,
                        };
                        const wrapDeserialize = (vortex, vortexApiThing, loadOrderer) => async () => {
                            const vortexApi = { ...vortex.api, log: vortexApiThing.log };
                            return loadOrderer.deserializeLoadOrder(vortexApi);
                        };
                        exports.wrapDeserialize = wrapDeserialize;
                        const wrapSerialize = (vortex, vortexApiThing, loadOrderer) => async (loadOrder) => {
                            const vortexApi = { ...vortex.api, log: vortexApiThing.log };
                            return loadOrderer.serializeLoadOrder(vortexApi, loadOrder);
                        };
                        exports.wrapSerialize = wrapSerialize;
                        const wrapValidate = (vortex, vortexApiThing, loadOrderer) => (prev, current) => {
                            const vortexApi = { ...vortex.api, log: vortexApiThing.log };
                            return loadOrderer.validate(vortexApi, prev, current);
                        };
                        exports.wrapValidate = wrapValidate;


                        /***/
                    }),

/***/ "./src/load_order.types.ts":
/*!*********************************!*\
  !*** ./src/load_order.types.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.thenByDirnameAscending = exports.byIndexWithNewAtTheBack = exports.DEFAULT_INDEX_SO_NEW_MODS_SORTED_TO_TOP = exports.decodeModList = exports.encodeModList = exports.ModListType = exports.ModListEntryType = exports.decodeLoadOrder = exports.encodeLoadOrder = exports.LoadOrderType = exports.LoadOrderEntryType = exports.LOAD_ORDER_TYPE_VERSION = void 0;
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const number_1 = __webpack_require__(/*! fp-ts/lib/number */ "./node_modules/fp-ts/lib/number.js");
                        const string_1 = __webpack_require__(/*! fp-ts/lib/string */ "./node_modules/fp-ts/lib/string.js");
                        const Ord_1 = __webpack_require__(/*! fp-ts/lib/Ord */ "./node_modules/fp-ts/lib/Ord.js");
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const t = __importStar(__webpack_require__(/*! io-ts */ "./node_modules/io-ts/es6/index.js"));
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        exports.LOAD_ORDER_TYPE_VERSION = `1.0.0`;
                        exports.LoadOrderEntryType = t.intersection([
                            t.partial({
                                vortexModId: t.string,
                            }),
                            t.type({
                                vortexId: t.string,
                                vortexModVersion: t.string,
                                redmodName: t.string,
                                redmodVersion: t.string,
                                redmodPath: t.string,
                                enabled: t.boolean,
                            }),
                        ], `LoadOrderEntryType`);
                        exports.LoadOrderType = t.type({
                            loadOrderFormatVersion: t.literal(exports.LOAD_ORDER_TYPE_VERSION),
                            generatedAt: t.string,
                            ownerVortexProfileId: t.string,
                            entriesInOrderWithEarlierWinning: t.array(exports.LoadOrderEntryType),
                        }, `LoadOrderVortexType`);
                        const encodeLoadOrder = (loadOrder) => (0, util_functions_1.jsonpp)(loadOrder);
                        exports.encodeLoadOrder = encodeLoadOrder;
                        exports.decodeLoadOrder = (0, installers_types_1.decodeWith)(exports.LoadOrderType.decode);
                        exports.ModListEntryType = t.string;
                        exports.ModListType = t.readonlyArray(exports.ModListEntryType);
                        const encodeModList = (loadOrder) => (0, util_functions_1.jsonpp)(loadOrder);
                        exports.encodeModList = encodeModList;
                        exports.decodeModList = (0, installers_types_1.decodeWith)(exports.LoadOrderType.decode);
                        exports.DEFAULT_INDEX_SO_NEW_MODS_SORTED_TO_TOP = -1;
                        const byIndexWithNewAtTheBack = (backIndex) => (0, function_1.pipe)(number_1.Ord, (0, Ord_1.contramap)((mod) => (0, function_1.pipe)(mod.data.indexForSorting, (0, Option_1.getOrElse)(() => backIndex))));
                        exports.byIndexWithNewAtTheBack = byIndexWithNewAtTheBack;
                        exports.thenByDirnameAscending = (0, function_1.pipe)(string_1.Ord, (0, Ord_1.contramap)((mod) => path_1.default.basename(mod.data.redmodInfo.relativePath)));


                        /***/
                    }),

/***/ "./src/redmodding.metadata.ts":
/*!************************************!*\
  !*** ./src/redmodding.metadata.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.REDdeployExeRelativePath = exports.REDlauncherExeRelativePath = exports.V2077_MODLIST_PATH = exports.V2077_LOAD_ORDER_DIR = exports.REDMODDING_RTTI_METADATA_FILE_PATH = exports.REDMODDING_REQUIRED_DIR_FOR_GENERATED_FILES = exports.REDMODDING_REQUIRED_DIR_FOR_MODS = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        exports.REDMODDING_REQUIRED_DIR_FOR_MODS = `mods`;
                        exports.REDMODDING_REQUIRED_DIR_FOR_GENERATED_FILES = path_1.default.join(`r6\\cache\\modded`);
                        exports.REDMODDING_RTTI_METADATA_FILE_PATH = path_1.default.join(`tools\\redmod\\metadata.json`);
                        exports.V2077_LOAD_ORDER_DIR = path_1.default.join(`${index_metadata_1.V2077_DIR}\\Load Order`);
                        exports.V2077_MODLIST_PATH = path_1.default.join(`${index_metadata_1.V2077_DIR}\\modlist.txt`);
                        exports.REDlauncherExeRelativePath = path_1.default.join(`REDprelauncher.exe`);
                        exports.REDdeployExeRelativePath = path_1.default.join(`tools\\redmod\\bin\\redMod.exe`);


                        /***/
                    }),

/***/ "./src/redmodding.ts":
/*!***************************!*\
  !*** ./src/redmodding.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.wrappedPrepareForModdingWithREDmodding = exports.detectREDmoddingDlc = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const _vortex_api_test_shimmed_1 = __webpack_require__(/*! @vortex-api-test-shimmed */ "vortex-api");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const redmodding_metadata_1 = __webpack_require__(/*! ./redmodding.metadata */ "./src/redmodding.metadata.ts");
                        const ui_dialogs_1 = __webpack_require__(/*! ./ui.dialogs */ "./src/ui.dialogs.ts");
                        const tools_redmodding_1 = __webpack_require__(/*! ./tools.redmodding */ "./src/tools.redmodding.ts");
                        const detectREDmoddingDlc = (state, gameId) => {
                            var _a;
                            const tools = ((_a = state.settings.gameMode.discovered[gameId]) === null || _a === void 0 ? void 0 : _a.tools) || {};
                            return Object.keys(tools).map((id) => tools[id])
                                .filter((iter) => (iter !== undefined) && (iter.path !== undefined))
                                .find((iter) => path_1.default.basename(iter.path).toLowerCase() === `redMod.exe`);
                        };
                        exports.detectREDmoddingDlc = detectREDmoddingDlc;
                        const fetchREDmoddingDlcDetails = (id) => {
                            const genericHelpUrl = `https://www.cyberpunk.net/en/modding-support`;
                            const isRedModSupportingGamePlatform = [`epic`, `gog`, `steam`].includes(id);
                            if (!isRedModSupportingGamePlatform) {
                                return { name: undefined, url: genericHelpUrl, openCommand: () => _vortex_api_test_shimmed_1.util.opn(genericHelpUrl) };
                            }
                            const gameStoreData = {
                                epic: {
                                    name: `Epic Games Store`,
                                    url: `https://store.epicgames.com/en-US/p/cyberpunk-2077`,
                                    openCommand: () => _vortex_api_test_shimmed_1.util.opn(`com.epicgames.launcher://store/p/cyberpunk-2077`),
                                },
                                steam: {
                                    name: `Steam`,
                                    url: `https://store.steampowered.com/app/2060310/Cyberpunk_2077_REDmod/`,
                                    openCommand: () => _vortex_api_test_shimmed_1.util.opn(`steam://run/2060310`),
                                },
                                gog: {
                                    name: `GOG`,
                                    url: `https://www.gog.com/en/game/cyberpunk_2077_redmod`,
                                    openCommand: () => _vortex_api_test_shimmed_1.util.opn(`goggalaxy://openStoreUrl/embed.gog.com/game/cyberpunk_2077_redmod`),
                                },
                            };
                            return gameStoreData[id];
                        };
                        const promptREDmoddingDlcInstall = async (vortexApi, gameStoreId) => {
                            const redModDetails = fetchREDmoddingDlcDetails(gameStoreId);
                            await (0, ui_dialogs_1.promptUserInstallREDmoddingDlc)(vortexApi, redModDetails, () => _vortex_api_test_shimmed_1.util.opn(redModDetails.url));
                        };
                        const prepareForModdingWithREDmodding = async (vortexApi, discovery) => {
                            try {
                                await _vortex_api_test_shimmed_1.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, redmodding_metadata_1.REDMODDING_REQUIRED_DIR_FOR_MODS));
                                await _vortex_api_test_shimmed_1.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, redmodding_metadata_1.REDMODDING_REQUIRED_DIR_FOR_GENERATED_FILES));
                                vortexApi.log(`info`, `Directories required for REDmodding exist and are writable, good!`);
                            }
                            catch (err) {
                                vortexApi.log(`warn`, `Unable to create or access required REDmodding directories in game path ${discovery.path}`, err);
                            }
                            try {
                                await _vortex_api_test_shimmed_1.fs.ensureDirWritableAsync(path_1.default.join(discovery.path, redmodding_metadata_1.V2077_LOAD_ORDER_DIR));
                                vortexApi.log(`info`, `Load order directory exists and is writable, good!`);
                            }
                            catch (err) {
                                vortexApi.log(`error`, `Unable to create or access load order storage dir ${redmodding_metadata_1.V2077_LOAD_ORDER_DIR} under ${discovery.path}`, err);
                            }
                            const requiredREDmoddingFiles = [
                                ...tools_redmodding_1.REDlauncher.requiredFiles,
                                ...tools_redmodding_1.REDdeployManual.requiredFiles,
                            ];
                            try {
                                await (0, function_1.pipe)(requiredREDmoddingFiles, (0, ReadonlyArray_1.map)((file) => _vortex_api_test_shimmed_1.fs.statAsync(path_1.default.join(discovery.path, file))), Promise.all);
                                return;
                            }
                            catch (err) {
                                vortexApi.log(`warn`, `REDmod not found for Cyberpunk 2077, offering the download...`, err);
                            }
                            const gameStoreIfInstalledThroughStore = await _vortex_api_test_shimmed_1.util.GameStoreHelper.findByAppId([index_metadata_1.GOGAPP_ID, index_metadata_1.STEAMAPP_ID, index_metadata_1.EPICAPP_ID]).catch(() => undefined);
                            if ((gameStoreIfInstalledThroughStore === null || gameStoreIfInstalledThroughStore === void 0 ? void 0 : gameStoreIfInstalledThroughStore.gamePath) !== discovery.path) {
                                vortexApi.log(`warn`, `Cyberpunk discovery doesn't match auto-detected path`, { discovery: discovery.path, gameStoreIfInstalledThroughStore });
                            }
                            await promptREDmoddingDlcInstall(vortexApi, gameStoreIfInstalledThroughStore === null || gameStoreIfInstalledThroughStore === void 0 ? void 0 : gameStoreIfInstalledThroughStore.gameStoreId);
                        };
                        const wrappedPrepareForModdingWithREDmodding = async (vortex, vortexApiThing, discovery) => {
                            const vortexApi = { ...vortex.api, log: vortexApiThing.log };
                            vortexApi.log(`info`, `Checking for REDmod install`);
                            return prepareForModdingWithREDmodding(vortexApi, discovery);
                        };
                        exports.wrappedPrepareForModdingWithREDmodding = wrappedPrepareForModdingWithREDmodding;


                        /***/
                    }),

/***/ "./src/reducers.ts":
/*!*************************!*\
  !*** ./src/reducers.ts ***!
  \*************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.makeSettingsReducer = void 0;
                        const vortex_api_1 = __webpack_require__(/*! vortex-api */ "vortex-api");
                        const actions = __importStar(__webpack_require__(/*! ./actions */ "./src/actions.ts"));
                        const features_1 = __webpack_require__(/*! ./features */ "./src/features.ts");
                        const makeSettingsReducer = (settingsDefaultsUnnested) => ({
                            reducers: {
                                [actions.setREDmodAutoconvertArchivesAction.toString()]: (stateSliceForJustOurStuff, payload) => (0, features_1.storeSetDynamicFeature)(vortex_api_1.util, features_1.DynamicFeature.REDmodAutoconvertArchives, stateSliceForJustOurStuff, payload),
                            },
                            defaults: settingsDefaultsUnnested,
                        });
                        exports.makeSettingsReducer = makeSettingsReducer;


                        /***/
                    }),

/***/ "./src/state.functions.ts":
/*!********************************!*\
  !*** ./src/state.functions.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.gameDirPath = exports.maybeGameDirPath = exports.isSupported = void 0;
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const string_1 = __webpack_require__(/*! fp-ts/lib/string */ "./node_modules/fp-ts/lib/string.js");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        const isSupported = (gameMode) => (gameMode === index_metadata_1.GAME_ID);
                        exports.isSupported = isSupported;
                        const maybeGameDirPath = (api) => (0, Either_1.tryCatch)(() => (0, Option_1.fromNullable)(api.store.getState().settings.gameMode.discovered[index_metadata_1.GAME_ID].path), (err) => new Error(`Unable to retrieve game dir path: ${err}`));
                        exports.maybeGameDirPath = maybeGameDirPath;
                        exports.gameDirPath = (0, function_1.flow)(exports.maybeGameDirPath, (0, Either_1.chain)((0, Either_1.fromOption)((0, util_functions_1.constant)(new Error(`Game dir path must be set`)))), (0, Either_1.chain)((maybePath) => ((0, string_1.isString)(maybePath) && !(0, string_1.isEmpty)(maybePath)
                            ? (0, Either_1.right)(maybePath)
                            : (0, Either_1.left)(new Error(`Game dir path must not be empty`)))));


                        /***/
                    }),

/***/ "./src/tools.external.ts":
/*!*******************************!*\
  !*** ./src/tools.external.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.available = exports.CyberCatTool = void 0;
                        const win32_1 = __importDefault(__webpack_require__(/*! path/win32 */ "path/win32"));
                        exports.CyberCatTool = {
                            id: `CyberCat`,
                            name: `CyberCAT Save Editor`,
                            shortName: `CyberCAT`,
                            logo: `SaveEditor.jpg`,
                            requiredFiles: [
                                win32_1.default.join(`CyberCAT`, `CP2077SaveEditor.exe`),
                                win32_1.default.join(`CyberCAT`, `licenses`, `CyberCAT.Core.LICENSE.txt`),
                            ],
                            executable: () => win32_1.default.join(`CyberCAT`, `CP2077SaveEditor.exe`),
                            defaultPrimary: false,
                            shell: false,
                            relative: true,
                        };
                        exports.available = {
                            tools: [
                                exports.CyberCatTool,
                            ],
                            startHooks: [],
                        };


                        /***/
                    }),

/***/ "./src/tools.redmodding.ts":
/*!*********************************!*\
  !*** ./src/tools.redmodding.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.available = exports.REDmoddingStartHooks = exports.REDmoddingTools = exports.makeREDdeployManualHookToGetLoadOrder = exports.REDdeployManual = exports.REDlauncher = exports.GameExeModded = exports.DummyCmdExeCallForToolToCallAfterRealWorkDone = exports.REDdeployManualToolHookId = exports.REDdeployManualToolNeedsLOGenerated = exports.REDdeployManualToolId = exports.REDlauncherToolId = exports.GameExeModdedToolId = void 0;
                        const Option_1 = __webpack_require__(/*! fp-ts/lib/Option */ "./node_modules/fp-ts/lib/Option.js");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const win32_1 = __importDefault(__webpack_require__(/*! path/win32 */ "path/win32"));
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const load_order_1 = __webpack_require__(/*! ./load_order */ "./src/load_order.ts");
                        const load_order_functions_1 = __webpack_require__(/*! ./load_order.functions */ "./src/load_order.functions.ts");
                        const redmodding_metadata_1 = __webpack_require__(/*! ./redmodding.metadata */ "./src/redmodding.metadata.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        const state_functions_1 = __webpack_require__(/*! ./state.functions */ "./src/state.functions.ts");
                        exports.GameExeModdedToolId = `${index_metadata_1.EXTENSION_NAME_INTERNAL}-game-exe-modded`;
                        exports.REDlauncherToolId = `${index_metadata_1.EXTENSION_NAME_INTERNAL}-tools-REDLauncher`;
                        exports.REDdeployManualToolId = `${index_metadata_1.EXTENSION_NAME_INTERNAL}-tools-redMod`;
                        exports.REDdeployManualToolNeedsLOGenerated = `${exports.REDdeployManualToolId}-will-generate-params-later`;
                        exports.REDdeployManualToolHookId = `${exports.REDdeployManualToolId}-hook`;
                        exports.DummyCmdExeCallForToolToCallAfterRealWorkDone = {
                            executable: `cmd.exe`,
                            args: [`/c`, `echo`, ``],
                            options: {
                                shell: true,
                                detach: true,
                                expectSuccess: true,
                            },
                        };
                        exports.GameExeModded = {
                            id: exports.GameExeModdedToolId,
                            name: `Launch Game with REDmods Enabled`,
                            shortName: `cp2077.exe -modded`,
                            logo: `gameicon.jpg`,
                            relative: true,
                            requiredFiles: [index_metadata_1.GAME_EXE_RELATIVE_PATH],
                            executable: (0, util_functions_1.constant)(index_metadata_1.GAME_EXE_RELATIVE_PATH),
                            parameters: [`-modded`],
                        };
                        exports.REDlauncher = {
                            id: redmodding_metadata_1.REDlauncherExeRelativePath,
                            name: `REDLauncher (GOG/Steam/Epic)`,
                            shortName: `REDLauncher`,
                            logo: `REDLauncher.png`,
                            relative: true,
                            requiredFiles: [redmodding_metadata_1.REDlauncherExeRelativePath],
                            executable: (0, util_functions_1.constant)(redmodding_metadata_1.REDlauncherExeRelativePath),
                            parameters: [`-modded`],
                        };
                        exports.REDdeployManual = {
                            id: exports.REDdeployManualToolId,
                            name: `REDmod Deploy Latest Load Order`,
                            shortName: `REDdeploy`,
                            logo: `REDdeploy.png`,
                            relative: true,
                            requiredFiles: [redmodding_metadata_1.REDdeployExeRelativePath],
                            executable: (0, util_functions_1.constant)(redmodding_metadata_1.REDdeployExeRelativePath),
                            parameters: [exports.REDdeployManualToolNeedsLOGenerated],
                            shell: true,
                            exclusive: true,
                        };
                        const makeREDdeployManualHookToGetLoadOrder = (vortexExt, vortexApiLib, _featureSet) => ({
                            hookId: exports.REDdeployManualToolHookId,
                            doActualWorkInTheHookAndReturnDummyParams: async ({ executable, args, options }) => {
                                const me = `${index_metadata_1.EXTENSION_NAME_INTERNAL} REDdeploy hook`;
                                const vortexApi = {
                                    ...vortexExt.api,
                                    log: vortexApiLib.log,
                                };
                                const toolPaths = (0, function_1.pipe)((0, state_functions_1.gameDirPath)(vortexApi), (0, Either_1.map)((gameDir) => [gameDir, win32_1.default.join(gameDir, redmodding_metadata_1.REDdeployExeRelativePath)]));
                                if ((0, Either_1.isLeft)(toolPaths)) {
                                    vortexApi.log(`warn`, `${me}: Unable to resolve game dir, maybe external tool w/o CP2077 installed? Skipping hook.`);
                                    return Promise.resolve({ executable, args, options });
                                }
                                const [gameDir, fullExePath] = toolPaths.right;
                                if (executable !== fullExePath
                                    || args.length !== 1
                                    || args[0] !== exports.REDdeployManualToolNeedsLOGenerated) {
                                    vortexApi.log(`debug`, `${me}: Call doesn't match this hook, skipping: ${(0, util_functions_1.S)({ executable, args, options })}`);
                                    return Promise.resolve({ executable, args, options });
                                }
                                vortexApi.log(`info`, `${me}: manual REDdeploy invoked`);
                                vortexApi.log(`debug`, `${me}: Incoming run parameters (may be overridden): ${(0, util_functions_1.S)({ executable, args, options })}`);
                                const activeProfile = vortexApiLib.selectors.activeProfile(vortexExt.api.store.getState());
                                if (activeProfile === undefined) {
                                    const errorMessage = `${me}: no active profile, cannot deploy load order`;
                                    vortexApi.log(`error`, errorMessage);
                                    return Promise.reject(new vortexApiLib.util.ProcessCanceled(errorMessage));
                                }
                                const latestLoadOrderInVortexFormat = (0, function_1.pipe)((0, load_order_functions_1.loadOrderFromVortexState)(vortexApi.store.getState(), activeProfile), (0, Option_1.getOrElse)((0, util_functions_1.constant)([])));
                                const timestampAsLoadOrderId = Date.now();
                                const latestLoadOrder = (0, load_order_1.makeV2077LoadOrderFrom)(latestLoadOrderInVortexFormat, activeProfile.id, timestampAsLoadOrderId);
                                try {
                                    await (0, load_order_1.startREDmodDeployInTheBackgroundWithNotifications)(vortexApi, gameDir, timestampAsLoadOrderId, latestLoadOrder, latestLoadOrderInVortexFormat);
                                    vortexApi.log(`info`, `${me}: REDdeploy through tool completed`);
                                    return exports.DummyCmdExeCallForToolToCallAfterRealWorkDone;
                                }
                                catch (error) {
                                    vortexApi.log(`error`, `${me}: REDmod deploy through tool failed: ${(0, util_functions_1.S)(error)}`);
                                    return exports.DummyCmdExeCallForToolToCallAfterRealWorkDone;
                                }
                            },
                        });
                        exports.makeREDdeployManualHookToGetLoadOrder = makeREDdeployManualHookToGetLoadOrder;
                        exports.REDmoddingTools = [
                            exports.GameExeModded,
                            exports.REDlauncher,
                            exports.REDdeployManual,
                        ];
                        exports.REDmoddingStartHooks = [
                            exports.makeREDdeployManualHookToGetLoadOrder,
                        ];
                        exports.available = {
                            tools: exports.REDmoddingTools,
                            startHooks: exports.REDmoddingStartHooks,
                        };


                        /***/
                    }),

/***/ "./src/ui.dialogs.ts":
/*!***************************!*\
  !*** ./src/ui.dialogs.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __importDefault = (this && this.__importDefault) || function (mod) {
                            return (mod && mod.__esModule) ? mod : { "default": mod };
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.showInvalidLoadOrderFileErrorDialog = exports.showManualStepRequiredForToolInfo = exports.showErrorForDeprecatedModTool = exports.showWarningForUnrecoverableStructureError = exports.showRed4ExtReservedDllErrorDialog = exports.wolvenKitDesktopFoundErrorDialog = exports.showArchiveInstallWarning = exports.promptUserToInstallOrCancelOnReachingFallback = exports.promptUserToInstallOrCancelOnDeprecatedCoreMod = exports.promptUserOnUnresolvableLayout = exports.promptUserOnProtectedPaths = exports.promptUserToInstallOrCancel = exports.promptUserInstallREDmoddingDlc = exports.informUserZeroNineZeroChanges = exports.InstallChoices = void 0;
                        const path_1 = __importDefault(__webpack_require__(/*! path */ "path"));
                        const index_metadata_1 = __webpack_require__(/*! ./index.metadata */ "./src/index.metadata.ts");
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        const installers_types_1 = __webpack_require__(/*! ./installers.types */ "./src/installers.types.ts");
                        const util_functions_1 = __webpack_require__(/*! ./util.functions */ "./src/util.functions.ts");
                        var InstallChoices;
                        (function (InstallChoices) {
                            InstallChoices["Proceed"] = "Yes, Install To Staging Anyway";
                            InstallChoices["Cancel"] = "No, Cancel Installation";
                        })(InstallChoices = exports.InstallChoices || (exports.InstallChoices = {}));
                        const INSTRUCTIONS_TO_FIX_IN_STAGING = `
    If you want to proceed, I'll install *EVERYTHING* in the mod
    into the Staging folder. You will need to check and possibly
    fix the mod manually before you enable it. (The Staging folder
    is where all installed mods live - they only go into the game
    mod folder when you \`enable\` the mod.)

    To do so, once the mod is installed, click on the File Manager
    option in the action menu (arrow down next to Remove on the right
    in the mod listing.) Make your changes and just close the Manager.
    `;
                        const INSTRUCTIONS_TO_REPORT_ISSUE = `
    Please let the team know if this looks like a valid mod. You can
    reach us at:

    - [${index_metadata_1.EXTENSION_URL_NEXUS}](${index_metadata_1.EXTENSION_URL_NEXUS}) (or just search for ${index_metadata_1.EXTENSION_NAME_NEXUS})
    - [${index_metadata_1.EXTENSION_URL_GITHUB}](${index_metadata_1.EXTENSION_URL_GITHUB})
    `;
                        const getLayoutDescriptionOrThrow = (api, installerType) => {
                            const supportedLayoutsDescription = installers_layouts_1.LayoutDescriptions.get(installerType);
                            if (supportedLayoutsDescription === undefined) {
                                const errorCausingAnExitHopefullyInTestsAndNotInProd = `No layout description found for ${installerType}, exiting`;
                                api.log(`error`, errorCausingAnExitHopefullyInTestsAndNotInProd);
                                throw new Error(errorCausingAnExitHopefullyInTestsAndNotInProd);
                            }
                            return supportedLayoutsDescription;
                        };
                        const informUserZeroNineZeroChanges = async (api) => {
                            const title = `v0.9.0 Update Highlights!`;
                            const redmodZeroNineZeroExplanation = `
  This is a major update, so the full detes are better read on the Nexus page, but here's quick rundown:

  - **Full REDmod support!** You can install and manage REDmods alongside all the others. *Note:* this
    is for new installations or reinstalls only. We don't want to accidentally break your existing mods,
    so you can choose when and if you want to migrate them yourself!

  - **Load Ordering!** Just drag and drop to order any mods that need ordering! Topmost is highest priority.
    Note that load order _only_ works on REDmods, and that the game will always load old-style archives at
    a higher priority and therefore override REDmods (this is where autoconversion comes in handy). Unmanaged
    REDmods are not supported at this time, so you'll need to reinstall them through Vortex to get everything
    to play nice together.

  - **Autoconversion of old-style mods to REDmods!** This is a _togglable_ feature (check
    out Settings), but we highly recommend that you leave it on unless there's an issue
    installing a mod.

  - **Automatic REDmod deployment!** Yep, no need to hit the terminal, every time you run a deployment
    in Vortex, your load order is deployed too. As soon as you see the notification that it's done, you can
    just start the game.

  - **Jack right in!** Finally, the default launch button will launch the game directly, with REDmods enabled.
    If you want to go through the launcher (for achievements, perhaps), there's the REDlauncher Tool in your
    toolbar and dashboard that will do just that.
  `;
                            return api.showDialog(`info`, title, {
                                md: (0, util_functions_1.heredoc)(redmodZeroNineZeroExplanation),
                            }, [{ label: `Got it!` }]);
                        };
                        exports.informUserZeroNineZeroChanges = informUserZeroNineZeroChanges;
                        const promptUserInstallREDmoddingDlc = async (api, redModDetails, fallback) => {
                            const title = `REDmod DLC missing`;
                            const redmodInstallExplanation = `
  The 1.6 update for Cyberpunk 2077 included an optional DLC called REDmod. 
  This DLC allows the game to load modded content created with the REDmod toolkit.
  Vortex has detected that the REDmod DLC is not installed on your system.
  You can get the DLC for free${redModDetails.name ? ` from ${redModDetails.name}` : null} using the button below.`;
                            return api.showDialog(`question`, title, {
                                md: (0, util_functions_1.heredoc)(redmodInstallExplanation),
                            }, [
                                {
                                    label: `Get REDmod`,
                                    action: () => redModDetails.openCommand()
                                        .catch(() => fallback()
                                            .catch(() => undefined)),
                                },
                                {
                                    label: `Ignore`,
                                },
                            ]);
                        };
                        exports.promptUserInstallREDmoddingDlc = promptUserInstallREDmoddingDlc;
                        const promptUserToInstallOrCancel = async (api, title, explanation) => {
                            const dialogResponse = await api.showDialog(`question`, title, {
                                md: (0, util_functions_1.heredoc)(explanation),
                            }, [{ label: InstallChoices.Cancel }, { label: InstallChoices.Proceed }]);
                            const installDecision = dialogResponse.action === InstallChoices.Proceed
                                ? installers_types_1.InstallDecision.UserWantsToProceed
                                : installers_types_1.InstallDecision.UserWantsToCancel;
                            return installDecision;
                        };
                        exports.promptUserToInstallOrCancel = promptUserToInstallOrCancel;
                        const promptUserOnProtectedPaths = async (api, installerType, protectedPaths) => {
                            const explanationForUser = `
    This mod contains some paths that I consider protected! They might be
    either critical game files, or for example configuration files that
    you may have customized or that other mods might also have modified.

    **This does not mean there's a problem with the mod, just that I
    want to make sure you're ready to proceed.**

    Review the files below to make sure it's okay to install these and
    that you've backed up your config files etc. before you enable the mod :)

    (Just installing this mod won't overwrite the files yet, that's only
    when you enable the mod - if you use the auto-enable setting, you
    should make your backups before proceeding, otherwise you can do it later.)

    These are the protected paths this mod will write to:
    \`\`\`
    ${protectedPaths.join(`\n`)}
    \`\`\``;
                            return (0, exports.promptUserToInstallOrCancel)(api, `Mod Contains Protected Paths`, explanationForUser);
                        };
                        exports.promptUserOnProtectedPaths = promptUserOnProtectedPaths;
                        const promptUserOnUnresolvableLayout = async (api, installerType, files) => {
                            api.log(`error`, `${installerType}: unresolvable layout, can't install automatically`, files);
                            api.log(`info`, `Asking user to proceed/cancel installation`);
                            const supportedLayoutsDescription = getLayoutDescriptionOrThrow(api, installerType);
                            const explanationForUser = `
    This looked like the ${installerType} kind of mod to me, but I can't figure
    out what the intended layout here is. It's also possible I've misidentified
    the mod, or that this is a valid layout I just don't understand (yet)!

    You need to decide if you want to proceed or not.

    ${INSTRUCTIONS_TO_FIX_IN_STAGING}

    These are the supported layouts for ${installerType} mods:

    ${supportedLayoutsDescription}

    ${INSTRUCTIONS_TO_REPORT_ISSUE}

    These are the files I found in the mod:

    \`\`\`
    ${files.join(`\n`)}
    \`\`\``;
                            return (0, exports.promptUserToInstallOrCancel)(api, `Can't Figure Out How To Install This Mod!`, explanationForUser);
                        };
                        exports.promptUserOnUnresolvableLayout = promptUserOnUnresolvableLayout;
                        const promptUserToInstallOrCancelOnDeprecatedCoreMod = async (api, coreModType, files) => {
                            const coreModName = coreModType.replace(/installer.*$/i, ``);
                            api.log(`info`, `Deprecated ${coreModName} found, prompting to proceed/cancel`, files);
                            const deprecationTitle = `This looks like an old version of ${coreModName}!`;
                            const deprecationExplanation = `
    It looks like you are attempting to install an older version of ${coreModName}.
    I can still install this version, but please check the mod
    page for the most recent version and update to that.
    `;
                            return (0, exports.promptUserToInstallOrCancel)(api, deprecationTitle, deprecationExplanation);
                        };
                        exports.promptUserToInstallOrCancelOnDeprecatedCoreMod = promptUserToInstallOrCancelOnDeprecatedCoreMod;
                        const promptUserToInstallOrCancelOnReachingFallback = (api, files) => {
                            api.log(`info`, `Fallback installer reached, prompting to proceed/cancel`, files);
                            const fallbackTitle = `You Have Reached The Fallback Installer!`;
                            const fallbackExplanation = `
    I wasn't able to figure out what kind of mod this is, so you have
    reached the fallback installer (ta-dah!)

    ${INSTRUCTIONS_TO_FIX_IN_STAGING}

    ${INSTRUCTIONS_TO_REPORT_ISSUE}

    These are the files in the mod:

    \`\`\`
    ${files.join(`\n`)}
    \`\`\`
    `;
                            return (0, exports.promptUserToInstallOrCancel)(api, fallbackTitle, fallbackExplanation);
                        };
                        exports.promptUserToInstallOrCancelOnReachingFallback = promptUserToInstallOrCancelOnReachingFallback;
                        const showArchiveInstallWarning = (api, installer, warnAboutSubdirs, warnAboutToplevel, warnAboutXLs, files) => {
                            const canonicalDirForType = installer === installers_types_1.InstallerType.REDmod
                                ? path_1.default.join(installers_layouts_1.REDMOD_BASEDIR, `[mod name]`, installers_layouts_1.REDMOD_ARCHIVES_DIRNAME)
                                : installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX;
                            const subdirWarning = warnAboutSubdirs
                                ? `
      - There are \`*.archive\` files in subdirectories

      The game does not read archives in subdirectories. You may be expected
      to pick some of these to place into \`${canonicalDirForType}\`.
      `
                                : `\n`;
                            const toplevelWarning = warnAboutToplevel
                                ? `
      - There's more than one top-level \`*.archive\`

      This might be intentional, it's perfectly OK to have multiple archives if
      they do different things. However, it could also be an oversight, or you
      might be expected to pick only some of these to place into \`${canonicalDirForType}\`
      `
                                : `\n`;
                            if (warnAboutXLs && installer === installers_types_1.InstallerType.REDmod) {
                                api.log(`warn`, `XL archives are not supported by REDmod, we should not get here!`, files);
                            }
                            const xlWarning = warnAboutXLs && installer === installers_types_1.InstallerType.Archive
                                ? `
      - There are \`*.xl\` files in subdirectories

      XL files are not supported in subdirectories. They must be placed into
      the Archive mod basedir \`${installers_layouts_1.ARCHIVE_MOD_CANONICAL_PREFIX}\`. It's possible
      you're intended to choose one, but either way you'll have to move the XLs
      manually if the mod otherwise looks valid.

      `
                                : `\n`;
                            api.showDialog(`info`, `Mod Installed But May Need Manual Adjustment!`, {
                                md: (0, util_functions_1.heredoc)(`I installed the mod, but it may need to be manually adjusted because:

        ${xlWarning}

        ${subdirWarning}

        ${toplevelWarning}

        Make sure to read any instructions the mod might have, and then if necessary
        adjust the installation manually.

        ${INSTRUCTIONS_TO_FIX_IN_STAGING}

        If you want to keep multiple variants of the mod (for different colors, for example),
        you can click 'Reinstall' in the Action Menu, and select to install a variant (give
        it a good name!).

        These are the files I installed:

        \`\`\`
        ${files.join(`\n`)}
        \`\`\``),
                            }, [{ label: `Understood!` }]);
                        };
                        exports.showArchiveInstallWarning = showArchiveInstallWarning;
                        const wolvenKitDesktopFoundErrorDialog = (api, message) => api.showDialog(`error`, message, {
                            md: (0, util_functions_1.heredoc)(`
        This is an unsupported mod tool. The file you tried to install
        is WolvenKit Desktop which cannot be installed through Vortex
      `),
                        }, [{ label: `Understood!` }]);
                        exports.wolvenKitDesktopFoundErrorDialog = wolvenKitDesktopFoundErrorDialog;
                        const showRed4ExtReservedDllErrorDialog = (api, message, dangerPaths) => {
                            api.showDialog(`error`, message, {
                                md: (0, util_functions_1.heredoc)(`
        Installation cancelled!

        Because this mod has DLLs, it seems like it might be a Red4Ext mod, but I can't install
        DLLs that look like they could conflict with known DLL files!

        These are the supported layouts for Red4Ext mods:

        ${installers_layouts_1.LayoutDescriptions.get(installers_types_1.InstallerType.Red4Ext)}

        If any of the files below contain DLLs that this mod _should_ install or this isn't a Red4Ext
        mod at all, please report a bug and we'll see how we can handle it better! In the meanwhile,
        you can manually install the files (but please be careful with DLLs!)

        ${INSTRUCTIONS_TO_REPORT_ISSUE}

        I cancelled the installation because of these files:

        \`\`\`
        ${dangerPaths.join(`\n`)}
        \`\`\``),
                            }, [{ label: `Understood!` }]);
                        };
                        exports.showRed4ExtReservedDllErrorDialog = showRed4ExtReservedDllErrorDialog;
                        const showWarningForUnrecoverableStructureError = (api, installerType, warningTitle, filesToList) => {
                            const supportedLayoutsDescription = getLayoutDescriptionOrThrow(api, installerType);
                            api.showDialog(`error`, warningTitle, {
                                md: (0, util_functions_1.heredoc)(`
        Installation cancelled!

        This looks like the ${installerType} kind of mod, but it doesn't fit the expected
        file layout. This one is pretty strict, so I can't install this mod because there's
        a higher risk that something's wrong with the mod.

        These are the supported layouts for ${installerType}:

        ${supportedLayoutsDescription}

        ${INSTRUCTIONS_TO_REPORT_ISSUE}

        The mod contains these files:

        \`\`\`
        ${filesToList.join(`\n`)}
        \`\`\``),
                            }, [{ label: `Understood!` }]);
                        };
                        exports.showWarningForUnrecoverableStructureError = showWarningForUnrecoverableStructureError;
                        const showErrorForDeprecatedModTool = (api, installerType, warningTitle) => {
                            api.showDialog(`error`, warningTitle, {
                                md: (0, util_functions_1.heredoc)(`
        Installation cancelled!

        It looks like you were trying to install ${installerType}. 

        Unfortunately CSVMerge is deprecated and the authors no longer support it. The 
        authors encourage you to look into the new [ArchiveXL tool](https://www.nexusmods.com/cyberpunk2077/mods/4198).

        If you were attempting to install WolvenKit.Console (aka WolvenKit.CLI), this
        tool was only supported as a dependency of CSVMerge and also is no longer
        supported for installation to the game directory. Please consider installing
        this tool manually.`),
                            }, [{ label: `Understood!` }]);
                        };
                        exports.showErrorForDeprecatedModTool = showErrorForDeprecatedModTool;
                        const showManualStepRequiredForToolInfo = (api, toolName) => {
                            api.showDialog(`info`, `Manual Step Required For ${toolName}`, {
                                md: (0, util_functions_1.heredoc)(`
        To finish installing ${toolName}, you need to first \`enable\` the mod,
        and then restart Vortex once the deployment is complete. Until you do this,
        the Tool will remain grayed out (which isn't a problem, you just can't use it!)

        Once you've restarted Vortex, you'll be able to use ${toolName} either directly
        through Vortex, or as you normally would.
      `),
                            }, [{ label: `Understood!` }]);
                        };
                        exports.showManualStepRequiredForToolInfo = showManualStepRequiredForToolInfo;
                        const showInvalidLoadOrderFileErrorDialog = (api, loadOrderFilePath) => api.showDialog(`error`, `Error Loading Stored Load Order`, {
                            md: (0, util_functions_1.heredoc)(`
        I was unable to load the stored Load Order in ${loadOrderFilePath}!

        This means you need to resolve the error before you can continue.

        If you edited the file manually, make sure it's valid JSON and in the correct format.

        If you haven't touched it yourself, it's possible the file has become corrupted,
        or this error may be transient and go away if you try again. If it doesn't:

        Easiest solution:

        1. Make sure the Load Order is correct in Vortex
        2. Delete ${loadOrderFilePath} (or rename/move it if you want to examine/fix it)
        3. Either move something in the Load Order (you can then move it back), or just restart Vortex
      `),
                        }, [{ label: `Understood!` }]);
                        exports.showInvalidLoadOrderFileErrorDialog = showInvalidLoadOrderFileErrorDialog;


                        /***/
                    }),

/***/ "./src/ui.notifications.ts":
/*!*********************************!*\
  !*** ./src/ui.notifications.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.showInfoNotification = exports.InfoNotification = exports.NotificationStatus = void 0;
                        const installers_layouts_1 = __webpack_require__(/*! ./installers.layouts */ "./src/installers.layouts.ts");
                        var NotificationStatus;
                        (function (NotificationStatus) {
                            NotificationStatus["Complete"] = "notification complete";
                            NotificationStatus["Incomplete"] = "notification incomplete (this should never happen, there is no actual state)";
                        })(NotificationStatus = exports.NotificationStatus || (exports.NotificationStatus = {}));
                        var InfoNotification;
                        (function (InfoNotification) {
                            InfoNotification["InstallerExtraFilesMoved"] = "V2077-notify-info-installer-extrafilesmoved";
                            InfoNotification["CyberCatRestartRequired"] = "V2077-notify-info-restart-required";
                            InfoNotification["LoadOrderWriteFailed"] = "V2077-notify-error-loadorder-write-failed";
                            InfoNotification["REDmodArchiveAutoconverted"] = "V2077-notify-success-redmod-archive-autoconverted";
                            InfoNotification["REDmodArchiveNOTautoconverted"] = "V2077-notify-info-redmod-archive-NOT-autoconverted";
                            InfoNotification["REDmodDeploymentQueued"] = "V2077-notify-info-redmod-deployment-queued";
                            InfoNotification["REDmodDeploymentStarted"] = "V2077-notify-info-redmod-deployment-started";
                            InfoNotification["REDmodDeploymentSucceeded"] = "V2077-notify-success-redmod-deployment-succeeded";
                            InfoNotification["REDmodDeploymentFailed"] = "V2077-notify-error-redmod-deployment-failed";
                            InfoNotification["REDmodDeploymentDefaulted"] = "V2077-notify-warn-redmod-deployment-default";
                        })(InfoNotification = exports.InfoNotification || (exports.InfoNotification = {}));
                        const InfoNotificationsUnsafeMap = new Map([
                            [
                                InfoNotification.InstallerExtraFilesMoved,
                                {
                                    id: InfoNotification.InstallerExtraFilesMoved,
                                    type: `info`,
                                    title: `Extra Files Moved To .\\${installers_layouts_1.MODS_EXTRA_BASEDIR}`,
                                    message: `There were some extra files (usually text documentation or images) in this mod. You can find them in .\\${installers_layouts_1.MODS_EXTRA_BASEDIR}`,
                                },
                            ],
                            [
                                InfoNotification.CyberCatRestartRequired,
                                {
                                    id: InfoNotification.CyberCatRestartRequired,
                                    type: `info`,
                                    title: `Vortex Restart Required`,
                                    message: `To complete installing CyberCAT, wait for the deploy to finish and then restart Vortex!`,
                                },
                            ],
                            [
                                InfoNotification.LoadOrderWriteFailed,
                                {
                                    id: InfoNotification.LoadOrderWriteFailed,
                                    type: `error`,
                                    title: `Writing Load Order to Disk Failed!`,
                                    message: `Couldn't write the new load order to disk. Check the log for details!`,
                                },
                            ],
                            [
                                InfoNotification.REDmodArchiveAutoconverted,
                                {
                                    id: InfoNotification.REDmodArchiveAutoconverted,
                                    type: `success`,
                                    title: `Mod Autoconverted to REDmod`,
                                    message: `The mod was automatically converted and will be installed as a REDmod`,
                                },
                            ],
                            [
                                InfoNotification.REDmodArchiveNOTautoconverted,
                                {
                                    id: InfoNotification.REDmodArchiveNOTautoconverted,
                                    type: `info`,
                                    title: `Mod NOT Autoconverted to REDmod`,
                                    message: `The mod was NOT automatically converted and will be installed as a regular mod`,
                                },
                            ],
                            [
                                InfoNotification.REDmodDeploymentQueued,
                                {
                                    id: InfoNotification.REDmodDeploymentQueued,
                                    type: `info`,
                                    title: `REDmod Deployment Ready to Go!`,
                                    message: `Next Vortex deploy will update load order and enabled state for REDmods too!`,
                                },
                            ],
                            [
                                InfoNotification.REDmodDeploymentStarted,
                                {
                                    id: InfoNotification.REDmodDeploymentStarted,
                                    type: `info`,
                                    title: `Starting REDmod Deployment!`,
                                    message: `Running REDmod Deployment to get your mods and load order ready to go!`,
                                },
                            ],
                            [
                                InfoNotification.REDmodDeploymentSucceeded,
                                {
                                    id: InfoNotification.REDmodDeploymentSucceeded,
                                    type: `success`,
                                    title: `REDmod Deployment Completed!`,
                                    message: `You're good to go, choom! The game will now pick up your newest enabled mods and load order!`,
                                },
                            ],
                            [
                                InfoNotification.REDmodDeploymentFailed,
                                {
                                    id: InfoNotification.REDmodDeploymentFailed,
                                    type: `error`,
                                    title: `REDmod Deployment Failed!`,
                                    message: `Oh no! Something went wrong with the REDmod deployment. Check the log for details!`,
                                },
                            ],
                            [
                                InfoNotification.REDmodDeploymentDefaulted,
                                {
                                    id: InfoNotification.REDmodDeploymentDefaulted,
                                    type: `warning`,
                                    title: `REDmod DEFAULT Deployment Started!`,
                                    message: `There was no load order defined, running the default (everything in \`mods/\`)!`,
                                },
                            ],
                        ]);
                        const getInfoNotificationOrThrow = (api, id, overrideMessage) => {
                            const notification = InfoNotificationsUnsafeMap.get(id);
                            if (notification === undefined) {
                                const errorCausingAnExitHopefullyInTestsAndNotInProd = `No notification definition found for ${id}`;
                                api.log(`error`, errorCausingAnExitHopefullyInTestsAndNotInProd);
                                throw new Error(errorCausingAnExitHopefullyInTestsAndNotInProd);
                            }
                            const maybeModifiedNotification = overrideMessage
                                ? { ...notification, message: overrideMessage }
                                : notification;
                            return maybeModifiedNotification;
                        };
                        const showInfoNotification = async (api, id, overrideMessage) => {
                            api.sendNotification(getInfoNotificationOrThrow(api, id, overrideMessage));
                            return NotificationStatus.Complete;
                        };
                        exports.showInfoNotification = showInfoNotification;


                        /***/
                    }),

/***/ "./src/util.functions.ts":
/*!*******************************!*\
  !*** ./src/util.functions.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.bbcodeBasics = exports.squashAllWhitespace = exports.heredoc = exports.exhaustiveMatchFailure = exports.nestedRecordFrom = exports.forEachEffect = exports.forEffect = exports.noop = exports.constant = exports.alwaysFalse = exports.alwaysTrue = exports.negate = exports.trueish = exports.identity = exports.S = exports.jsonpp = exports.jsonp = void 0;
                        const Either_1 = __webpack_require__(/*! fp-ts/lib/Either */ "./node_modules/fp-ts/lib/Either.js");
                        const function_1 = __webpack_require__(/*! fp-ts/lib/function */ "./node_modules/fp-ts/lib/function.js");
                        const ReadonlyArray_1 = __webpack_require__(/*! fp-ts/lib/ReadonlyArray */ "./node_modules/fp-ts/lib/ReadonlyArray.js");
                        const string_1 = __webpack_require__(/*! fp-ts/lib/string */ "./node_modules/fp-ts/lib/string.js");
                        const jsonp = (thing) => JSON.stringify(thing);
                        exports.jsonp = jsonp;
                        const jsonpp = (thing) => JSON.stringify(thing, null, 2);
                        exports.jsonpp = jsonpp;
                        const S = (thing) => { var _a, _b; return (_b = (_a = (0, exports.jsonp)(thing)) === null || _a === void 0 ? void 0 : _a.replace(/(\t|\n|\r)+/gm, ` `).replace(/\\+"/gm, `"`)) !== null && _b !== void 0 ? _b : `<failed to stringify ${thing}>`; };
                        exports.S = S;
                        const identity = (t) => t;
                        exports.identity = identity;
                        const trueish = (t) => !!t;
                        exports.trueish = trueish;
                        const negate = (b) => !b;
                        exports.negate = negate;
                        const alwaysTrue = () => true;
                        exports.alwaysTrue = alwaysTrue;
                        const alwaysFalse = () => false;
                        exports.alwaysFalse = alwaysFalse;
                        const constant = (t) => () => t;
                        exports.constant = constant;
                        const noop = () => undefined;
                        exports.noop = noop;
                        const forEffect = (f) => () => {
                            try {
                                f();
                            }
                            catch (err) {
                                return (0, Either_1.left)(new Error(`forEffect-wrapped function failed: ${(0, exports.S)(err)}`));
                            }
                            return (0, Either_1.right)(null);
                        };
                        exports.forEffect = forEffect;
                        const forEachEffect = (effects) => (0, function_1.pipe)(effects, (0, Either_1.traverseArray)((effect) => effect()));
                        exports.forEachEffect = forEachEffect;
                        const nestedRecordFrom = (path, innermost = {}) => (0, function_1.pipe)(path, (0, ReadonlyArray_1.reduceRight)(innermost, (key, innerRecord) => ({ [key]: innerRecord })));
                        exports.nestedRecordFrom = nestedRecordFrom;
                        const exhaustiveMatchFailure = (_) => {
                            throw new Error(`Type guard failed`);
                        };
                        exports.exhaustiveMatchFailure = exhaustiveMatchFailure;
                        exports.heredoc = (0, function_1.flow)((0, string_1.replace)(/^[ \t]+/gm, ``), (0, string_1.replace)(/^\|/gm, ` `), (0, string_1.replace)(/\n{3,}/g, `\n\n`));
                        exports.squashAllWhitespace = (0, function_1.flow)((0, string_1.replace)(/\s{2,}/g, ` `));
                        exports.bbcodeBasics = (0, function_1.flow)((0, string_1.replace)(/\n{2,}/g, `\n[br][/br][br][/br]\n`));


                        /***/
                    }),

/***/ "./src/views/settings.tsx":
/*!********************************!*\
  !*** ./src/views/settings.tsx ***!
  \********************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        var __createBinding = (this && this.__createBinding) || (Object.create ? (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            var desc = Object.getOwnPropertyDescriptor(m, k);
                            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
                                desc = { enumerable: true, get: function () { return m[k]; } };
                            }
                            Object.defineProperty(o, k2, desc);
                        }) : (function (o, m, k, k2) {
                            if (k2 === undefined) k2 = k;
                            o[k2] = m[k];
                        }));
                        var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function (o, v) {
                            Object.defineProperty(o, "default", { enumerable: true, value: v });
                        }) : function (o, v) {
                            o["default"] = v;
                        });
                        var __importStar = (this && this.__importStar) || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
                            __setModuleDefault(result, mod);
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.mapDispatchToProps = exports.mapStateToProps = void 0;
                        const React = __importStar(__webpack_require__(/*! react */ "react"));
                        const react_i18next_1 = __webpack_require__(/*! react-i18next */ "react-i18next");
                        const react_redux_1 = __webpack_require__(/*! react-redux */ "react-redux");
                        const vortex_api_1 = __webpack_require__(/*! vortex-api */ "vortex-api");
                        const actions_1 = __webpack_require__(/*! ../actions */ "./src/actions.ts");
                        const features_1 = __webpack_require__(/*! ../features */ "./src/features.ts");
                        const util_functions_1 = __webpack_require__(/*! ../util.functions */ "./src/util.functions.ts");
                        const Settings = (props) => {
                            const { t, redmodAutoconvertArchives, onREDmodAutoconvertArchives, } = props;
                            return (React.createElement("div", null,
                                React.createElement(vortex_api_1.Toggle, { checked: redmodAutoconvertArchives, onToggle: onREDmodAutoconvertArchives },
                                    t(`Automatically convert legacy-style '.archive' mods to REDmods on install (NOT recommended)`),
                                    React.createElement(vortex_api_1.More, { id: 'red-autoconvert-setting', name: t(`Autoconvert old mods for Load Order`) }, t(`${(0, util_functions_1.squashAllWhitespace)(`
            Whenever you install a standard 'archive' mod, we can instead convert it to CDPR's native REDmod 
            format. This is required to use the internal load order tools, but can cause compatibility issues
            with many of the more complex mods. You can learn more about this here:\n
            https://wiki.redmodding.org/cyberpunk-2077-modding/for-mod-users/users-modding-cyberpunk-2077#mod-format-redmod-or-vanilla
            `)}\n\n`)))));
                        };
                        const mapStateToProps = (fullVortexState) => ({
                            redmodAutoconvertArchives: (0, features_1.storeGetDynamicFeature)(vortex_api_1.util, features_1.DynamicFeature.REDmodAutoconvertArchives, fullVortexState),
                        });
                        exports.mapStateToProps = mapStateToProps;
                        const mapDispatchToProps = (dispatch) => ({
                            onREDmodAutoconvertArchives: (enable) => dispatch((0, actions_1.setREDmodAutoconvertArchivesAction)(enable)),
                        });
                        exports.mapDispatchToProps = mapDispatchToProps;
                        exports.default = (0, react_i18next_1.withTranslation)([`common`, `redmod-integration`])((0, react_redux_1.connect)(exports.mapStateToProps, exports.mapDispatchToProps)(Settings));


                        /***/
                    }),

/***/ "./src/vortex-wrapper.ts":
/*!*******************************!*\
  !*** ./src/vortex-wrapper.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function (module, exports, __webpack_require__) {

                        "use strict";

                        Object.defineProperty(exports, "__esModule", { value: true });
                        exports.vortexUtil = void 0;
                        const _vortex_api_test_shimmed_1 = __webpack_require__(/*! @vortex-api-test-shimmed */ "vortex-api");
                        exports.vortexUtil = _vortex_api_test_shimmed_1.util;


                        /***/
                    }),

/***/ "bluebird":
/*!***************************!*\
  !*** external "bluebird" ***!
  \***************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("bluebird");

                        /***/
                    }),

/***/ "exe-version":
/*!******************************!*\
  !*** external "exe-version" ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("exe-version");

                        /***/
                    }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("fs");

                        /***/
                    }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("fs/promises");

                        /***/
                    }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("os");

                        /***/
                    }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("path");

                        /***/
                    }),

/***/ "path/win32":
/*!*****************************!*\
  !*** external "path/win32" ***!
  \*****************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("path/win32");

                        /***/
                    }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("react");

                        /***/
                    }),

/***/ "react-i18next":
/*!********************************!*\
  !*** external "react-i18next" ***!
  \********************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("react-i18next");

                        /***/
                    }),

/***/ "react-redux":
/*!******************************!*\
  !*** external "react-redux" ***!
  \******************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("react-redux");

                        /***/
                    }),

/***/ "redux-act":
/*!****************************!*\
  !*** external "redux-act" ***!
  \****************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("redux-act");

                        /***/
                    }),

/***/ "vortex-api":
/*!*****************************!*\
  !*** external "vortex-api" ***!
  \*****************************/
/*! no static exports found */
/***/ (function (module, exports) {

                        module.exports = require("vortex-api");

                        /***/
                    })

                /******/
            });
        //# sourceMappingURL=cyberpunk2077.js.map
    }.call(this, exports, require, module, __filename, __dirname);
});